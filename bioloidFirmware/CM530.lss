
CM530.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000134  08003000  08003000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c8  08003134  08003134  00003134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         0000002c  20000000  080061fc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000248  2000002c  08006228  0000802c  2**2
                  ALLOC
  4 ._usrstack    00000100  20000274  08006470  0000802c  2**0
                  ALLOC
  5 .comment      000002c0  00000000  00000000  0000802c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002f0  00000000  00000000  000082f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00002431  00000000  00000000  000085e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000941d  00000000  00000000  0000aa11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001f22  00000000  00000000  00013e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001e41  00000000  00000000  00015d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001b64  00000000  00000000  00017b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003545  00000000  00000000  000196f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002f3e  00000000  00000000  0001cc3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000031  00000000  00000000  0001fb7b  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000278  00000000  00000000  0001fbb0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08003000 <g_pfnVectors>:
 8003000:	20010000 	.word	0x20010000
 8003004:	08006195 	.word	0x08006195
 8003008:	080039b9 	.word	0x080039b9
 800300c:	080039bd 	.word	0x080039bd
 8003010:	080039c1 	.word	0x080039c1
 8003014:	080039c5 	.word	0x080039c5
 8003018:	080039c9 	.word	0x080039c9
	...
 800302c:	080039d1 	.word	0x080039d1
 8003030:	080039cd 	.word	0x080039cd
 8003034:	00000000 	.word	0x00000000
 8003038:	080039d5 	.word	0x080039d5
 800303c:	08003ae1 	.word	0x08003ae1
 8003040:	080039d9 	.word	0x080039d9
 8003044:	080039dd 	.word	0x080039dd
 8003048:	080039e1 	.word	0x080039e1
 800304c:	080039e5 	.word	0x080039e5
 8003050:	080039e9 	.word	0x080039e9
 8003054:	080039ed 	.word	0x080039ed
 8003058:	080039f1 	.word	0x080039f1
 800305c:	080039f5 	.word	0x080039f5
 8003060:	080039f9 	.word	0x080039f9
 8003064:	080039fd 	.word	0x080039fd
 8003068:	08003a01 	.word	0x08003a01
	...
 8003088:	08003a21 	.word	0x08003a21
 800308c:	08003a25 	.word	0x08003a25
 8003090:	08003a29 	.word	0x08003a29
 8003094:	08003a2d 	.word	0x08003a2d
 8003098:	08003a31 	.word	0x08003a31
 800309c:	08003a35 	.word	0x08003a35
 80030a0:	08003a39 	.word	0x08003a39
 80030a4:	08003a3d 	.word	0x08003a3d
 80030a8:	08003a41 	.word	0x08003a41
 80030ac:	08003a45 	.word	0x08003a45
 80030b0:	08003ad5 	.word	0x08003ad5
 80030b4:	08003a49 	.word	0x08003a49
 80030b8:	08003a4d 	.word	0x08003a4d
 80030bc:	08003a51 	.word	0x08003a51
 80030c0:	08003a55 	.word	0x08003a55
 80030c4:	08003a59 	.word	0x08003a59
 80030c8:	08003a5d 	.word	0x08003a5d
 80030cc:	08003a61 	.word	0x08003a61
 80030d0:	08003a65 	.word	0x08003a65
 80030d4:	08003ac9 	.word	0x08003ac9
 80030d8:	08003a69 	.word	0x08003a69
 80030dc:	08003abd 	.word	0x08003abd
 80030e0:	08003a6d 	.word	0x08003a6d
 80030e4:	08003a71 	.word	0x08003a71
 80030e8:	08003a75 	.word	0x08003a75
 80030ec:	08003a79 	.word	0x08003a79
 80030f0:	08003a7d 	.word	0x08003a7d
 80030f4:	08003a81 	.word	0x08003a81
 80030f8:	08003a85 	.word	0x08003a85
 80030fc:	08003a89 	.word	0x08003a89
 8003100:	08003a8d 	.word	0x08003a8d
 8003104:	08003a91 	.word	0x08003a91
 8003108:	08003a95 	.word	0x08003a95
 800310c:	08003a99 	.word	0x08003a99
 8003110:	08003a9d 	.word	0x08003a9d
 8003114:	08003aa1 	.word	0x08003aa1
 8003118:	08003aa5 	.word	0x08003aa5
 800311c:	08003aa9 	.word	0x08003aa9
 8003120:	08003aad 	.word	0x08003aad
 8003124:	08003ab1 	.word	0x08003ab1
 8003128:	08003ab5 	.word	0x08003ab5
 800312c:	08003ab9 	.word	0x08003ab9
 8003130:	0000f85f 	.word	0x0000f85f

Disassembly of section .text:

08003134 <prufenAnfang>:


// this function can be used to check start byte.(In case using the MotorLimits function)
int prufenAnfang(byte c[], byte wert1, byte wert2){

	return(c[0] == wert1 && c[1] == wert2);
 8003134:	7803      	ldrb	r3, [r0, #0]
 8003136:	428b      	cmp	r3, r1
 8003138:	d001      	beq.n	800313e <prufenAnfang+0xa>
 800313a:	2000      	movs	r0, #0
 800313c:	e004      	b.n	8003148 <prufenAnfang+0x14>
 800313e:	7843      	ldrb	r3, [r0, #1]
 8003140:	4293      	cmp	r3, r2
 8003142:	bf14      	ite	ne
 8003144:	2000      	movne	r0, #0
 8003146:	2001      	moveq	r0, #1
}
 8003148:	4770      	bx	lr
 800314a:	46c0      	nop			(mov r8, r8)

0800314c <prufenEnde>:
// this function can be used to check stop byte.(In case using the MotorLimits function)
int prufenEnde(byte c[], byte wert15, byte wert16){

	return(c[14] == wert15 && c[15] == wert16);
 800314c:	7b83      	ldrb	r3, [r0, #14]
 800314e:	428b      	cmp	r3, r1
 8003150:	d001      	beq.n	8003156 <prufenEnde+0xa>
 8003152:	2000      	movs	r0, #0
 8003154:	e004      	b.n	8003160 <prufenEnde+0x14>
 8003156:	7bc3      	ldrb	r3, [r0, #15]
 8003158:	4293      	cmp	r3, r2
 800315a:	bf14      	ite	ne
 800315c:	2000      	movne	r0, #0
 800315e:	2001      	moveq	r0, #1

}
 8003160:	4770      	bx	lr
 8003162:	46c0      	nop			(mov r8, r8)

08003164 <RxDByte_PC>:
{
    byte temp;

	while(1)
	{
    	if(gbPacketReadPointer != gbPacketWritePointer) break;
 8003164:	f8df c028 	ldr.w	ip, [pc, #40]	; 8003190 <RxDByte_PC+0x2c>
 8003168:	480a      	ldr	r0, [pc, #40]	(8003194 <RxDByte_PC+0x30>)
 800316a:	f89c 2000 	ldrb.w	r2, [ip]
 800316e:	7803      	ldrb	r3, [r0, #0]
 8003170:	4907      	ldr	r1, [pc, #28]	(8003190 <RxDByte_PC+0x2c>)
 8003172:	429a      	cmp	r2, r3
 8003174:	d0f9      	beq.n	800316a <RxDByte_PC+0x6>
	}

	temp = gbpPacketDataBuffer[gbPacketReadPointer];
 8003176:	780b      	ldrb	r3, [r1, #0]
 8003178:	4a07      	ldr	r2, [pc, #28]	(8003198 <RxDByte_PC+0x34>)
 800317a:	5cd0      	ldrb	r0, [r2, r3]
	gbPacketReadPointer++;
 800317c:	780b      	ldrb	r3, [r1, #0]
 800317e:	3301      	adds	r3, #1
 8003180:	b2db      	uxtb	r3, r3
 8003182:	700b      	strb	r3, [r1, #0]
	gbPacketReadPointer = gbPacketReadPointer & 0x1F;
 8003184:	780b      	ldrb	r3, [r1, #0]
 8003186:	f003 031f 	and.w	r3, r3, #31	; 0x1f
 800318a:	700b      	strb	r3, [r1, #0]

	return temp;
}
 800318c:	4770      	bx	lr
 800318e:	46c0      	nop			(mov r8, r8)
 8003190:	2000013f 	.word	0x2000013f
 8003194:	2000013e 	.word	0x2000013e
 8003198:	20000140 	.word	0x20000140

0800319c <__ISR_DELAY>:
	}
}

void __ISR_DELAY(void)
{
	if (gwTimingDelay != 0x00)
 800319c:	4a03      	ldr	r2, [pc, #12]	(80031ac <__ISR_DELAY+0x10>)
 800319e:	6813      	ldr	r3, [r2, #0]
 80031a0:	b113      	cbz	r3, 80031a8 <__ISR_DELAY+0xc>
		gwTimingDelay--;
 80031a2:	6813      	ldr	r3, [r2, #0]
 80031a4:	3b01      	subs	r3, #1
 80031a6:	6013      	str	r3, [r2, #0]
}
 80031a8:	4770      	bx	lr
 80031aa:	46c0      	nop			(mov r8, r8)
 80031ac:	20000134 	.word	0x20000134

080031b0 <ClearBuffer256>:
	USART_Cmd(USART1, DISABLE);
}

void ClearBuffer256(void)
{
	gbRxBufferReadPointer = gbRxBufferWritePointer = 0;
 80031b0:	4a03      	ldr	r2, [pc, #12]	(80031c0 <ClearBuffer256+0x10>)
 80031b2:	2300      	movs	r3, #0
 80031b4:	7013      	strb	r3, [r2, #0]
 80031b6:	7813      	ldrb	r3, [r2, #0]
 80031b8:	4a02      	ldr	r2, [pc, #8]	(80031c4 <ClearBuffer256+0x14>)
 80031ba:	7013      	strb	r3, [r2, #0]
}
 80031bc:	4770      	bx	lr
 80031be:	46c0      	nop			(mov r8, r8)
 80031c0:	20000130 	.word	0x20000130
 80031c4:	20000131 	.word	0x20000131

080031c8 <CheckNewArrive>:

byte CheckNewArrive(void)
{
	if(gbRxBufferReadPointer != gbRxBufferWritePointer)
 80031c8:	4b03      	ldr	r3, [pc, #12]	(80031d8 <CheckNewArrive+0x10>)
 80031ca:	7818      	ldrb	r0, [r3, #0]
 80031cc:	4b03      	ldr	r3, [pc, #12]	(80031dc <CheckNewArrive+0x14>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	1ac0      	subs	r0, r0, r3
 80031d2:	bf18      	it	ne
 80031d4:	2001      	movne	r0, #1
		return 1;
	else
		return 0;
}
 80031d6:	4770      	bx	lr
 80031d8:	20000131 	.word	0x20000131
 80031dc:	20000130 	.word	0x20000130

080031e0 <RxDByte_DXL>:
{
	byte bTemp;

	while(1)
	{
		if(gbRxBufferReadPointer != gbRxBufferWritePointer) break;
 80031e0:	f8df c020 	ldr.w	ip, [pc, #32]	; 8003204 <RxDByte_DXL+0x24>
 80031e4:	4808      	ldr	r0, [pc, #32]	(8003208 <RxDByte_DXL+0x28>)
 80031e6:	f89c 2000 	ldrb.w	r2, [ip]
 80031ea:	7803      	ldrb	r3, [r0, #0]
 80031ec:	4905      	ldr	r1, [pc, #20]	(8003204 <RxDByte_DXL+0x24>)
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d0f9      	beq.n	80031e6 <RxDByte_DXL+0x6>
	}

	bTemp = gbpRxInterruptBuffer[gbRxBufferReadPointer];
 80031f2:	780b      	ldrb	r3, [r1, #0]
 80031f4:	4a05      	ldr	r2, [pc, #20]	(800320c <RxDByte_DXL+0x2c>)
 80031f6:	5cd0      	ldrb	r0, [r2, r3]
	gbRxBufferReadPointer++;
 80031f8:	780b      	ldrb	r3, [r1, #0]
 80031fa:	3301      	adds	r3, #1
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	700b      	strb	r3, [r1, #0]

	return bTemp;
}
 8003200:	4770      	bx	lr
 8003202:	46c0      	nop			(mov r8, r8)
 8003204:	20000131 	.word	0x20000131
 8003208:	20000130 	.word	0x20000130
 800320c:	20000030 	.word	0x20000030

08003210 <StartDiscount>:
	    gbpRxInterruptBuffer[gbRxBufferWritePointer++] = USART_ReceiveData(USART1);
}

void StartDiscount(s32 StartTime)
{
	gw1msCounter = StartTime;
 8003210:	4b01      	ldr	r3, [pc, #4]	(8003218 <StartDiscount+0x8>)
 8003212:	6018      	str	r0, [r3, #0]
}
 8003214:	4770      	bx	lr
 8003216:	46c0      	nop			(mov r8, r8)
 8003218:	20000138 	.word	0x20000138

0800321c <CheckTimeOut>:
u8 CheckTimeOut(void)
{
	// Check timeout
	// Return: 0 is false, 1 is true(timeout occurred)

	if(gw1msCounter == 0)
 800321c:	4b03      	ldr	r3, [pc, #12]	(800322c <CheckTimeOut+0x10>)
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	f1d0 0001 	rsbs	r0, r0, #1	; 0x1
 8003224:	bf38      	it	cc
 8003226:	2000      	movcc	r0, #0
	      return 1;
	else
		return 0;
}
 8003228:	4770      	bx	lr
 800322a:	46c0      	nop			(mov r8, r8)
 800322c:	20000138 	.word	0x20000138

08003230 <RxD0Interrupt>:
	while( USART_GetFlagStatus(USART3, USART_FLAG_TC)==RESET );
}


void RxD0Interrupt(void)
{
 8003230:	b530      	push	{r4, r5, lr}
    if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 8003232:	480a      	ldr	r0, [pc, #40]	(800325c <RxD0Interrupt+0x2c>)
	while( USART_GetFlagStatus(USART3, USART_FLAG_TC)==RESET );
}


void RxD0Interrupt(void)
{
 8003234:	b081      	sub	sp, #4
    if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 8003236:	f240 5125 	movw	r1, #1317	; 0x525
 800323a:	f002 fead 	bl	8005f98 <USART_GetITStatus>
 800323e:	b150      	cbz	r0, 8003256 <RxD0Interrupt+0x26>
	    gbpRxInterruptBuffer[gbRxBufferWritePointer++] = USART_ReceiveData(USART1);
 8003240:	4d07      	ldr	r5, [pc, #28]	(8003260 <RxD0Interrupt+0x30>)
 8003242:	4806      	ldr	r0, [pc, #24]	(800325c <RxD0Interrupt+0x2c>)
 8003244:	782c      	ldrb	r4, [r5, #0]
 8003246:	f002 fe39 	bl	8005ebc <USART_ReceiveData>
 800324a:	4b06      	ldr	r3, [pc, #24]	(8003264 <RxD0Interrupt+0x34>)
 800324c:	b2c0      	uxtb	r0, r0
 800324e:	5518      	strb	r0, [r3, r4]
 8003250:	3401      	adds	r4, #1
 8003252:	b2e4      	uxtb	r4, r4
 8003254:	702c      	strb	r4, [r5, #0]
}
 8003256:	b001      	add	sp, #4
 8003258:	bd30      	pop	{r4, r5, pc}
 800325a:	46c0      	nop			(mov r8, r8)
 800325c:	40013800 	.word	0x40013800
 8003260:	20000130 	.word	0x20000130
 8003264:	20000030 	.word	0x20000030

08003268 <RxD1Interrupt>:

// functions for receivung Data from USART3

// this function ist taken from https://emanual.robotis.com/docs/en/software/embedded_sdk/embedded_c_cm530/#serial-communication
void RxD1Interrupt(void)
{
 8003268:	b500      	push	{lr}
	byte temp;
	if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)
 800326a:	480c      	ldr	r0, [pc, #48]	(800329c <RxD1Interrupt+0x34>)

// functions for receivung Data from USART3

// this function ist taken from https://emanual.robotis.com/docs/en/software/embedded_sdk/embedded_c_cm530/#serial-communication
void RxD1Interrupt(void)
{
 800326c:	b081      	sub	sp, #4
	byte temp;
	if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)
 800326e:	f240 5125 	movw	r1, #1317	; 0x525
 8003272:	f002 fe91 	bl	8005f98 <USART_GetITStatus>
 8003276:	b178      	cbz	r0, 8003298 <RxD1Interrupt+0x30>
	{
		temp = USART_ReceiveData(USART3);
 8003278:	4808      	ldr	r0, [pc, #32]	(800329c <RxD1Interrupt+0x34>)
 800327a:	f002 fe1f 	bl	8005ebc <USART_ReceiveData>
		gbpPacketDataBuffer[gbPacketWritePointer] = temp;
 800327e:	4908      	ldr	r1, [pc, #32]	(80032a0 <RxD1Interrupt+0x38>)
 8003280:	4a08      	ldr	r2, [pc, #32]	(80032a4 <RxD1Interrupt+0x3c>)
 8003282:	780b      	ldrb	r3, [r1, #0]
void RxD1Interrupt(void)
{
	byte temp;
	if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)
	{
		temp = USART_ReceiveData(USART3);
 8003284:	b2c0      	uxtb	r0, r0
		gbpPacketDataBuffer[gbPacketWritePointer] = temp;
 8003286:	54d0      	strb	r0, [r2, r3]
		gbPacketWritePointer++;
 8003288:	780b      	ldrb	r3, [r1, #0]
 800328a:	3301      	adds	r3, #1
 800328c:	b2db      	uxtb	r3, r3
 800328e:	700b      	strb	r3, [r1, #0]
		gbPacketWritePointer = gbPacketWritePointer & 0x1F;
 8003290:	780b      	ldrb	r3, [r1, #0]
 8003292:	f003 031f 	and.w	r3, r3, #31	; 0x1f
 8003296:	700b      	strb	r3, [r1, #0]
	}
}
 8003298:	b001      	add	sp, #4
 800329a:	bd00      	pop	{pc}
 800329c:	40004800 	.word	0x40004800
 80032a0:	2000013e 	.word	0x2000013e
 80032a4:	20000140 	.word	0x20000140

080032a8 <TxDByte_PC>:
	return bTemp;
}


void TxDByte_PC(byte bTxdData)
{
 80032a8:	b500      	push	{lr}
	USART_SendData(USART3,bTxdData);
 80032aa:	b281      	uxth	r1, r0
	return bTemp;
}


void TxDByte_PC(byte bTxdData)
{
 80032ac:	b081      	sub	sp, #4
	USART_SendData(USART3,bTxdData);
 80032ae:	4805      	ldr	r0, [pc, #20]	(80032c4 <TxDByte_PC+0x1c>)
 80032b0:	f002 fe00 	bl	8005eb4 <USART_SendData>
	while( USART_GetFlagStatus(USART3, USART_FLAG_TC)==RESET );
 80032b4:	4803      	ldr	r0, [pc, #12]	(80032c4 <TxDByte_PC+0x1c>)
 80032b6:	2140      	movs	r1, #64
 80032b8:	f002 fe62 	bl	8005f80 <USART_GetFlagStatus>
 80032bc:	2800      	cmp	r0, #0
 80032be:	d0f9      	beq.n	80032b4 <TxDByte_PC+0xc>
}
 80032c0:	b001      	add	sp, #4
 80032c2:	bd00      	pop	{pc}
 80032c4:	40004800 	.word	0x40004800

080032c8 <TxDByte_DXL>:
	else
		return 0;
}

void TxDByte_DXL(byte bTxdData)
{
 80032c8:	b510      	push	{r4, lr}
	GPIO_ResetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Disable
 80032ca:	2120      	movs	r1, #32
	else
		return 0;
}

void TxDByte_DXL(byte bTxdData)
{
 80032cc:	4604      	mov	r4, r0
	GPIO_ResetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Disable
 80032ce:	480d      	ldr	r0, [pc, #52]	(8003304 <TxDByte_DXL+0x3c>)
 80032d0:	f001 f95e 	bl	8004590 <GPIO_ResetBits>
	GPIO_SetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Enable

	USART_SendData(USART1,bTxdData);
 80032d4:	b2a4      	uxth	r4, r4
}

void TxDByte_DXL(byte bTxdData)
{
	GPIO_ResetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Disable
	GPIO_SetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Enable
 80032d6:	480b      	ldr	r0, [pc, #44]	(8003304 <TxDByte_DXL+0x3c>)
 80032d8:	2110      	movs	r1, #16
 80032da:	f001 f957 	bl	800458c <GPIO_SetBits>

	USART_SendData(USART1,bTxdData);
 80032de:	480a      	ldr	r0, [pc, #40]	(8003308 <TxDByte_DXL+0x40>)
 80032e0:	4621      	mov	r1, r4
 80032e2:	f002 fde7 	bl	8005eb4 <USART_SendData>
	while( USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET );
 80032e6:	4808      	ldr	r0, [pc, #32]	(8003308 <TxDByte_DXL+0x40>)
 80032e8:	2140      	movs	r1, #64
 80032ea:	f002 fe49 	bl	8005f80 <USART_GetFlagStatus>
 80032ee:	2800      	cmp	r0, #0
 80032f0:	d0f9      	beq.n	80032e6 <TxDByte_DXL+0x1e>

	GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
 80032f2:	2110      	movs	r1, #16
 80032f4:	4803      	ldr	r0, [pc, #12]	(8003304 <TxDByte_DXL+0x3c>)
 80032f6:	f001 f94b 	bl	8004590 <GPIO_ResetBits>
	GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
 80032fa:	4802      	ldr	r0, [pc, #8]	(8003304 <TxDByte_DXL+0x3c>)
 80032fc:	2120      	movs	r1, #32
 80032fe:	f001 f945 	bl	800458c <GPIO_SetBits>
}
 8003302:	bd10      	pop	{r4, pc}
 8003304:	40010c00 	.word	0x40010c00
 8003308:	40013800 	.word	0x40013800

0800330c <DisableUSART1>:
	/* Clear SysTick Counter */
	SysTick_CounterCmd(SysTick_Counter_Clear);
}

void DisableUSART1(void)
{
 800330c:	b500      	push	{lr}
	USART_Cmd(USART1, DISABLE);
 800330e:	4803      	ldr	r0, [pc, #12]	(800331c <DisableUSART1+0x10>)
	/* Clear SysTick Counter */
	SysTick_CounterCmd(SysTick_Counter_Clear);
}

void DisableUSART1(void)
{
 8003310:	b081      	sub	sp, #4
	USART_Cmd(USART1, DISABLE);
 8003312:	2100      	movs	r1, #0
 8003314:	f002 fd54 	bl	8005dc0 <USART_Cmd>
}
 8003318:	b001      	add	sp, #4
 800331a:	bd00      	pop	{pc}
 800331c:	40013800 	.word	0x40013800

08003320 <mDelay>:
	if (gwTimingDelay != 0x00)
		gwTimingDelay--;
}

void mDelay(u32 nTime)
{
 8003320:	b510      	push	{r4, lr}
 8003322:	4604      	mov	r4, r0
	/* Enable the SysTick Counter */
	SysTick_CounterCmd(SysTick_Counter_Enable);
 8003324:	2001      	movs	r0, #1
 8003326:	f001 fe1d 	bl	8004f64 <SysTick_CounterCmd>

	gwTimingDelay = nTime;
 800332a:	4b07      	ldr	r3, [pc, #28]	(8003348 <mDelay+0x28>)
 800332c:	601c      	str	r4, [r3, #0]

	while(gwTimingDelay != 0);
 800332e:	461a      	mov	r2, r3
 8003330:	6813      	ldr	r3, [r2, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1fc      	bne.n	8003330 <mDelay+0x10>

	/* Disable SysTick Counter */
	SysTick_CounterCmd(SysTick_Counter_Disable);
 8003336:	f06f 0001 	mvn.w	r0, #1	; 0x1
 800333a:	f001 fe13 	bl	8004f64 <SysTick_CounterCmd>
	/* Clear SysTick Counter */
	SysTick_CounterCmd(SysTick_Counter_Clear);
 800333e:	2000      	movs	r0, #0
 8003340:	f001 fe10 	bl	8004f64 <SysTick_CounterCmd>
}
 8003344:	bd10      	pop	{r4, pc}
 8003346:	46c0      	nop			(mov r8, r8)
 8003348:	20000134 	.word	0x20000134

0800334c <TimerInterrupt_1ms>:
	return temp;
}

// important function that are used in the .h Files
void TimerInterrupt_1ms(void) //OLLO CONTROL
{
 800334c:	b500      	push	{lr}
	if (TIM_GetITStatus(TIM2, TIM_IT_CC1) != RESET) // 1ms//
 800334e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	return temp;
}

// important function that are used in the .h Files
void TimerInterrupt_1ms(void) //OLLO CONTROL
{
 8003352:	b081      	sub	sp, #4
	if (TIM_GetITStatus(TIM2, TIM_IT_CC1) != RESET) // 1ms//
 8003354:	2102      	movs	r1, #2
 8003356:	f002 fc8f 	bl	8005c78 <TIM_GetITStatus>
 800335a:	b1c8      	cbz	r0, 8003390 <TimerInterrupt_1ms+0x44>
	{
		TIM_ClearITPendingBit(TIM2, TIM_IT_CC1);
 800335c:	2102      	movs	r1, #2
 800335e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003362:	f002 fc95 	bl	8005c90 <TIM_ClearITPendingBit>

		capture = TIM_GetCapture1(TIM2);
 8003366:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800336a:	f002 fc61 	bl	8005c30 <TIM_GetCapture1>
 800336e:	4b09      	ldr	r3, [pc, #36]	(8003394 <TimerInterrupt_1ms+0x48>)
 8003370:	6018      	str	r0, [r3, #0]
		TIM_SetCompare1(TIM2, capture + CCR1_Val);
 8003372:	6819      	ldr	r1, [r3, #0]
 8003374:	4b08      	ldr	r3, [pc, #32]	(8003398 <TimerInterrupt_1ms+0x4c>)
 8003376:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	18c9      	adds	r1, r1, r3
 800337e:	b289      	uxth	r1, r1
 8003380:	f002 fc10 	bl	8005ba4 <TIM_SetCompare1>

		if(gw1msCounter > 0)
 8003384:	4a05      	ldr	r2, [pc, #20]	(800339c <TimerInterrupt_1ms+0x50>)
 8003386:	6813      	ldr	r3, [r2, #0]
 8003388:	b113      	cbz	r3, 8003390 <TimerInterrupt_1ms+0x44>
			gw1msCounter--;
 800338a:	6813      	ldr	r3, [r2, #0]
 800338c:	3b01      	subs	r3, #1
 800338e:	6013      	str	r3, [r2, #0]
	}
}
 8003390:	b001      	add	sp, #4
 8003392:	bd00      	pop	{pc}
 8003394:	2000002c 	.word	0x2000002c
 8003398:	20000008 	.word	0x20000008
 800339c:	20000138 	.word	0x20000138

080033a0 <SysTick_Configuration>:
	/* TIM2 enable counter */
	TIM_Cmd(TIM2, ENABLE);
}

void SysTick_Configuration(void)
{
 80033a0:	b500      	push	{lr}
	/* SysTick end of count event each 1ms with input clock equal to 9MHz (HCLK/8, default) */
	SysTick_SetReload(9000);
 80033a2:	f242 3028 	movw	r0, #9000	; 0x2328
	/* TIM2 enable counter */
	TIM_Cmd(TIM2, ENABLE);
}

void SysTick_Configuration(void)
{
 80033a6:	b081      	sub	sp, #4
	/* SysTick end of count event each 1ms with input clock equal to 9MHz (HCLK/8, default) */
	SysTick_SetReload(9000);
 80033a8:	f001 fdd6 	bl	8004f58 <SysTick_SetReload>

	/* Enable SysTick interrupt */
	SysTick_ITConfig(ENABLE);
 80033ac:	2001      	movs	r0, #1
 80033ae:	f001 fdef 	bl	8004f90 <SysTick_ITConfig>
}
 80033b2:	b001      	add	sp, #4
 80033b4:	bd00      	pop	{pc}
 80033b6:	46c0      	nop			(mov r8, r8)

080033b8 <Timer_Configuration>:
		USART_Cmd(USART3, ENABLE);
	}
}

void Timer_Configuration(void)
{
 80033b8:	b570      	push	{r4, r5, r6, lr}
 80033ba:	b088      	sub	sp, #32
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;

	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 80033bc:	f10d 0516 	add.w	r5, sp, #22	; 0x16
 80033c0:	4628      	mov	r0, r5
	TIM_OCStructInit(&TIM_OCInitStructure);
 80033c2:	f10d 0606 	add.w	r6, sp, #6	; 0x6

	TIM_DeInit(TIM2);
 80033c6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
void Timer_Configuration(void)
{
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;

	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 80033ca:	f002 f901 	bl	80055d0 <TIM_TimeBaseStructInit>
	TIM_OCStructInit(&TIM_OCInitStructure);
 80033ce:	4630      	mov	r0, r6
 80033d0:	f002 f90a 	bl	80055e8 <TIM_OCStructInit>

	TIM_DeInit(TIM2);
 80033d4:	4620      	mov	r0, r4
 80033d6:	f002 fc61 	bl	8005c9c <TIM_DeInit>

	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Period = 65535;
 80033da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033de:	f8ad 301a 	strh.w	r3, [sp, #26]
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80033e2:	4620      	mov	r0, r4

	TIM_DeInit(TIM2);

	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Period = 65535;
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80033e4:	f04f 0300 	mov.w	r3, #0	; 0x0
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80033e8:	4629      	mov	r1, r5

	TIM_DeInit(TIM2);

	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Period = 65535;
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80033ea:	f8ad 3016 	strh.w	r3, [sp, #22]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80033ee:	f8ad 301c 	strh.w	r3, [sp, #28]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80033f2:	f8ad 3018 	strh.w	r3, [sp, #24]

	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80033f6:	f001 fdf3 	bl	8004fe0 <TIM_TimeBaseInit>

	/* Prescaler configuration */
	TIM_PrescalerConfig(TIM2, 722, TIM_PSCReloadMode_Immediate);
 80033fa:	2201      	movs	r2, #1
 80033fc:	4620      	mov	r0, r4
 80033fe:	f240 21d2 	movw	r1, #722	; 0x2d2
 8003402:	f002 f9df 	bl	80057c4 <TIM_PrescalerConfig>

	/* Output Compare Timing Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
 8003406:	f04f 0300 	mov.w	r3, #0	; 0x0
 800340a:	f8ad 3006 	strh.w	r3, [sp, #6]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
 800340e:	f8ad 3008 	strh.w	r3, [sp, #8]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8003412:	f8ad 300e 	strh.w	r3, [sp, #14]
	TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;
 8003416:	4b0b      	ldr	r3, [pc, #44]	(8003444 <Timer_Configuration+0x8c>)

	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 8003418:	4620      	mov	r0, r4

	/* Output Compare Timing Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;
 800341a:	881b      	ldrh	r3, [r3, #0]

	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 800341c:	4631      	mov	r1, r6

	/* Output Compare Timing Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;
 800341e:	f8ad 300c 	strh.w	r3, [sp, #12]

	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 8003422:	f001 fe07 	bl	8005034 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Disable);
 8003426:	4620      	mov	r0, r4
 8003428:	2100      	movs	r1, #0
 800342a:	f002 fa5f 	bl	80058ec <TIM_OC1PreloadConfig>

	/* TIM IT enable */
	TIM_ITConfig(TIM2, TIM_IT_CC1, ENABLE);
 800342e:	4620      	mov	r0, r4
 8003430:	2102      	movs	r1, #2
 8003432:	2201      	movs	r2, #1
 8003434:	f002 f916 	bl	8005664 <TIM_ITConfig>

	/* TIM2 enable counter */
	TIM_Cmd(TIM2, ENABLE);
 8003438:	4620      	mov	r0, r4
 800343a:	2101      	movs	r1, #1
 800343c:	f002 f8f6 	bl	800562c <TIM_Cmd>
}
 8003440:	b008      	add	sp, #32
 8003442:	bd70      	pop	{r4, r5, r6, pc}
 8003444:	20000008 	.word	0x20000008

08003448 <USART_Configuration>:
{
	USART_Configuration(USART_DXL, baudrate);
}

void USART_Configuration(u8 PORT, u32 baudrate)
{
 8003448:	b570      	push	{r4, r5, r6, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	4605      	mov	r5, r0

	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);
 800344e:	4668      	mov	r0, sp
{
	USART_Configuration(USART_DXL, baudrate);
}

void USART_Configuration(u8 PORT, u32 baudrate)
{
 8003450:	460c      	mov	r4, r1

	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);
 8003452:	f002 fc89 	bl	8005d68 <USART_StructInit>

	USART_InitStructure.USART_BaudRate = baudrate;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8003456:	f04f 0300 	mov.w	r3, #0	; 0x0
 800345a:	f8ad 3004 	strh.w	r3, [sp, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800345e:	f8ad 3006 	strh.w	r3, [sp, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No ;
 8003462:	f8ad 3008 	strh.w	r3, [sp, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003466:	f8ad 300c 	strh.w	r3, [sp, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800346a:	f04f 030c 	mov.w	r3, #12	; 0xc
void USART_Configuration(u8 PORT, u32 baudrate)
{

	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);
 800346e:	466e      	mov	r6, sp

	USART_InitStructure.USART_BaudRate = baudrate;
 8003470:	9400      	str	r4, [sp, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No ;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003472:	f8ad 300a 	strh.w	r3, [sp, #10]

	if( PORT == USART_DXL )
 8003476:	b98d      	cbnz	r5, 800349c <USART_Configuration+0x54>
	{
		USART_DeInit(USART1);
 8003478:	4814      	ldr	r0, [pc, #80]	(80034cc <USART_Configuration+0x84>)
 800347a:	f002 fe09 	bl	8006090 <USART_DeInit>
		mDelay(10);
 800347e:	200a      	movs	r0, #10
 8003480:	f7ff ff4e 	bl	8003320 <mDelay>
		/* Configure the USART1 */
		USART_Init(USART1, &USART_InitStructure);
 8003484:	4811      	ldr	r0, [pc, #68]	(80034cc <USART_Configuration+0x84>)
 8003486:	4669      	mov	r1, sp
 8003488:	f002 fdb4 	bl	8005ff4 <USART_Init>

		/* Enable USART1 Receive and Transmit interrupts */
		USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 800348c:	480f      	ldr	r0, [pc, #60]	(80034cc <USART_Configuration+0x84>)
 800348e:	f240 5125 	movw	r1, #1317	; 0x525
 8003492:	2201      	movs	r2, #1
 8003494:	f002 fca2 	bl	8005ddc <USART_ITConfig>
		//USART_ITConfig(USART1, USART_IT_TC, ENABLE);

		/* Enable the USART1 */
		USART_Cmd(USART1, ENABLE);
 8003498:	480c      	ldr	r0, [pc, #48]	(80034cc <USART_Configuration+0x84>)
 800349a:	e012      	b.n	80034c2 <USART_Configuration+0x7a>
	}

	else if( PORT == USART_PC )
 800349c:	2d02      	cmp	r5, #2
 800349e:	d113      	bne.n	80034c8 <USART_Configuration+0x80>
	{

		USART_DeInit(USART3);
 80034a0:	480b      	ldr	r0, [pc, #44]	(80034d0 <USART_Configuration+0x88>)
 80034a2:	f002 fdf5 	bl	8006090 <USART_DeInit>
		mDelay(10);
 80034a6:	200a      	movs	r0, #10
 80034a8:	f7ff ff3a 	bl	8003320 <mDelay>
		/* Configure the USART3 */
		USART_Init(USART3, &USART_InitStructure);
 80034ac:	4808      	ldr	r0, [pc, #32]	(80034d0 <USART_Configuration+0x88>)
 80034ae:	4669      	mov	r1, sp
 80034b0:	f002 fda0 	bl	8005ff4 <USART_Init>

		/* Enable USART3 Receive and Transmit interrupts */
		USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);			// modification: USART3 Receive enabled
 80034b4:	4806      	ldr	r0, [pc, #24]	(80034d0 <USART_Configuration+0x88>)
 80034b6:	f240 5125 	movw	r1, #1317	; 0x525
 80034ba:	2201      	movs	r2, #1
 80034bc:	f002 fc8e 	bl	8005ddc <USART_ITConfig>
		//USART_ITConfig(USART3, USART_IT_TC, ENABLE);

		/* Enable the USART3 */
		USART_Cmd(USART3, ENABLE);
 80034c0:	4803      	ldr	r0, [pc, #12]	(80034d0 <USART_Configuration+0x88>)
 80034c2:	2101      	movs	r1, #1
 80034c4:	f002 fc7c 	bl	8005dc0 <USART_Cmd>
	}
}
 80034c8:	b004      	add	sp, #16
 80034ca:	bd70      	pop	{r4, r5, r6, pc}
 80034cc:	40013800 	.word	0x40013800
 80034d0:	40004800 	.word	0x40004800

080034d4 <USART1_Configuration>:
	GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
	GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
}

void USART1_Configuration(u32 baudrate)
{
 80034d4:	b500      	push	{lr}
 80034d6:	4601      	mov	r1, r0
 80034d8:	b081      	sub	sp, #4
	USART_Configuration(USART_DXL, baudrate);
 80034da:	2000      	movs	r0, #0
 80034dc:	f7ff ffb4 	bl	8003448 <USART_Configuration>
}
 80034e0:	b001      	add	sp, #4
 80034e2:	bd00      	pop	{pc}

080034e4 <GPIO_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Configuration(void)
{
 80034e4:	b570      	push	{r4, r5, r6, lr}
 80034e6:	b082      	sub	sp, #8
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_StructInit(&GPIO_InitStructure);
 80034e8:	ad01      	add	r5, sp, #4

	// PORTB CONFIG
	GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034ea:	4c1e      	ldr	r4, [pc, #120]	(8003564 <GPIO_Configuration+0x80>)
* Return         : None
*******************************************************************************/
void GPIO_Configuration(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_StructInit(&GPIO_InitStructure);
 80034ec:	4628      	mov	r0, r5
 80034ee:	f001 f831 	bl	8004554 <GPIO_StructInit>

	// PORTB CONFIG
	GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
 80034f2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80034f6:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80034fa:	2603      	movs	r6, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80034fc:	2310      	movs	r3, #16
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034fe:	4620      	mov	r0, r4
 8003500:	4629      	mov	r1, r5
	GPIO_StructInit(&GPIO_InitStructure);

	// PORTB CONFIG
	GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003502:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_StructInit(&GPIO_InitStructure);

	// PORTB CONFIG
	GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003506:	f88d 6006 	strb.w	r6, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800350a:	f000 ffcf 	bl	80044ac <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
 800350e:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8003512:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003516:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003518:	2304      	movs	r3, #4
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800351a:	4629      	mov	r1, r5
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800351c:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003520:	f000 ffc4 	bl	80044ac <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
 8003524:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8003528:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800352c:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800352e:	2318      	movs	r3, #24
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003530:	4629      	mov	r1, r5
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8003532:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003536:	f88d 6006 	strb.w	r6, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800353a:	f000 ffb7 	bl	80044ac <GPIO_Init>

	GPIO_PinRemapConfig( GPIO_Remap_USART1, ENABLE);
 800353e:	2004      	movs	r0, #4
 8003540:	2101      	movs	r1, #1
 8003542:	f001 f84d 	bl	80045e0 <GPIO_PinRemapConfig>
	GPIO_PinRemapConfig( GPIO_Remap_SWJ_Disable, ENABLE);
 8003546:	2101      	movs	r1, #1
 8003548:	4807      	ldr	r0, [pc, #28]	(8003568 <GPIO_Configuration+0x84>)
 800354a:	f001 f849 	bl	80045e0 <GPIO_PinRemapConfig>

	GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
 800354e:	4620      	mov	r0, r4
 8003550:	2110      	movs	r1, #16
 8003552:	f001 f81d 	bl	8004590 <GPIO_ResetBits>
	GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
 8003556:	4620      	mov	r0, r4
 8003558:	2120      	movs	r1, #32
 800355a:	f001 f817 	bl	800458c <GPIO_SetBits>
}
 800355e:	b002      	add	sp, #8
 8003560:	bd70      	pop	{r4, r5, r6, pc}
 8003562:	46c0      	nop			(mov r8, r8)
 8003564:	40010c00 	.word	0x40010c00
 8003568:	00300400 	.word	0x00300400

0800356c <NVIC_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Configuration(void)
{
 800356c:	b570      	push	{r4, r5, r6, lr}
	#ifdef  VECT_TAB_RAM
		// Set the Vector Table base location at 0x20000000
		NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
	#else  // VECT_TAB_FLASH
		// Set the Vector Table base location at 0x08003000
		NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
 800356e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Configuration(void)
{
 8003572:	b082      	sub	sp, #8
	#ifdef  VECT_TAB_RAM
		// Set the Vector Table base location at 0x20000000
		NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
	#else  // VECT_TAB_FLASH
		// Set the Vector Table base location at 0x08003000
		NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
 8003574:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003578:	f001 f9ac 	bl	80048d4 <NVIC_SetVectorTable>
	// Enable the USART1 Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800357c:	ad01      	add	r5, sp, #4
		// Set the Vector Table base location at 0x08003000
		NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
	#endif

	// Configure the NVIC Preemption Priority Bits
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 800357e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003582:	f001 f909 	bl	8004798 <NVIC_PriorityGroupConfig>

	// Enable the USART1 Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003586:	2401      	movs	r4, #1

	// Configure the NVIC Preemption Priority Bits
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);

	// Enable the USART1 Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 8003588:	2325      	movs	r3, #37
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800358a:	2600      	movs	r6, #0
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800358c:	4628      	mov	r0, r5

	// Configure the NVIC Preemption Priority Bits
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);

	// Enable the USART1 Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 800358e:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8003592:	f88d 6005 	strb.w	r6, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8003596:	f88d 6006 	strb.w	r6, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800359a:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 800359e:	f001 f905 	bl	80047ac <NVIC_Init>

	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQChannel;
 80035a2:	231c      	movs	r3, #28
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80035a4:	4628      	mov	r0, r5
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQChannel;
 80035a6:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 80035aa:	f88d 4005 	strb.w	r4, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80035ae:	f88d 4006 	strb.w	r4, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80035b2:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 80035b6:	f001 f8f9 	bl	80047ac <NVIC_Init>

	// modification: USART3 NVIC_Configuration added
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQChannel;
 80035ba:	2327      	movs	r3, #39
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80035bc:	4628      	mov	r0, r5
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

	// modification: USART3 NVIC_Configuration added
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQChannel;
 80035be:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80035c2:	f88d 6005 	strb.w	r6, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80035c6:	f88d 4006 	strb.w	r4, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80035ca:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 80035ce:	f001 f8ed 	bl	80047ac <NVIC_Init>
}
 80035d2:	b002      	add	sp, #8
 80035d4:	bd70      	pop	{r4, r5, r6, pc}
 80035d6:	46c0      	nop			(mov r8, r8)

080035d8 <RCC_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_Configuration(void)
{
 80035d8:	b500      	push	{lr}
 80035da:	b081      	sub	sp, #4
	ErrorStatus HSEStartUpStatus;
	/* RCC system reset(for debug purpose) */
	RCC_DeInit();
 80035dc:	f001 fadc 	bl	8004b98 <RCC_DeInit>

	/* Enable HSE */
	RCC_HSEConfig(RCC_HSE_ON);
 80035e0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80035e4:	f001 faf8 	bl	8004bd8 <RCC_HSEConfig>

	/* Wait till HSE is ready */
	HSEStartUpStatus = RCC_WaitForHSEStartUp();
 80035e8:	f001 fb10 	bl	8004c0c <RCC_WaitForHSEStartUp>

	if(HSEStartUpStatus == SUCCESS)
 80035ec:	2801      	cmp	r0, #1
 80035ee:	d124      	bne.n	800363a <RCC_Configuration+0x62>
	{
		/* Enable Prefetch Buffer */
		FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 80035f0:	2010      	movs	r0, #16
 80035f2:	f000 fcdf 	bl	8003fb4 <FLASH_PrefetchBufferCmd>

		/* Flash 2 wait state */
		FLASH_SetLatency(FLASH_Latency_2);
 80035f6:	2002      	movs	r0, #2
 80035f8:	f000 fcc4 	bl	8003f84 <FLASH_SetLatency>

		/* HCLK = SYSCLK */
		RCC_HCLKConfig(RCC_SYSCLK_Div1);
 80035fc:	2000      	movs	r0, #0
 80035fe:	f001 fb4f 	bl	8004ca0 <RCC_HCLKConfig>

		/* PCLK2 = HCLK */
		RCC_PCLK2Config(RCC_HCLK_Div1);
 8003602:	2000      	movs	r0, #0
 8003604:	f001 fb60 	bl	8004cc8 <RCC_PCLK2Config>

		/* PCLK1 = HCLK/2 */
		RCC_PCLK1Config(RCC_HCLK_Div2);
 8003608:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800360c:	f001 fb52 	bl	8004cb4 <RCC_PCLK1Config>

		/* PLLCLK = 8MHz * 9 = 72 MHz */
		RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 8003610:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003614:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8003618:	f001 fb20 	bl	8004c5c <RCC_PLLConfig>

		/* Enable PLL */
		RCC_PLLCmd(ENABLE);
 800361c:	2001      	movs	r0, #1
 800361e:	f001 fb27 	bl	8004c70 <RCC_PLLCmd>

		/* Wait till PLL is ready */
		while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
 8003622:	2039      	movs	r0, #57
 8003624:	f001 fc50 	bl	8004ec8 <RCC_GetFlagStatus>
 8003628:	2800      	cmp	r0, #0
 800362a:	d0fa      	beq.n	8003622 <RCC_Configuration+0x4a>
		{
		}
		/* Select PLL as system clock source */
		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 800362c:	2002      	movs	r0, #2
 800362e:	f001 fb25 	bl	8004c7c <RCC_SYSCLKConfig>

		/* Wait till PLL is used as system clock source */
		while(RCC_GetSYSCLKSource() != 0x08)
 8003632:	f001 fb2d 	bl	8004c90 <RCC_GetSYSCLKSource>
 8003636:	2808      	cmp	r0, #8
 8003638:	d1fb      	bne.n	8003632 <RCC_Configuration+0x5a>
	}

	/* Enable peripheral clocks --------------------------------------------------*/

	/* Enable USART1 and GPIOB clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOB, ENABLE);
 800363a:	2101      	movs	r1, #1
 800363c:	f244 0008 	movw	r0, #16392	; 0x4008
 8003640:	f001 fbf8 	bl	8004e34 <RCC_APB2PeriphClockCmd>

	/* Enable Timer2 and USART3 clocks */
	RCC_APB1PeriphClockCmd ( RCC_APB1Periph_TIM2 | RCC_APB1Periph_USART3 , ENABLE); // modification: RCC_APB1Periph_USART3 added
 8003644:	4804      	ldr	r0, [pc, #16]	(8003658 <RCC_Configuration+0x80>)
 8003646:	2101      	movs	r1, #1
 8003648:	f001 fc02 	bl	8004e50 <RCC_APB1PeriphClockCmd>

	PWR_BackupAccessCmd(ENABLE);
 800364c:	2001      	movs	r0, #1
 800364e:	f001 fa33 	bl	8004ab8 <PWR_BackupAccessCmd>
}
 8003652:	b001      	add	sp, #4
 8003654:	bd00      	pop	{pc}
 8003656:	46c0      	nop			(mov r8, r8)
 8003658:	00040001 	.word	0x00040001

0800365c <MotorLimits>:

	return(c[14] == wert15 && c[15] == wert16);

}
// function to check and update motors limits
void MotorLimits(void){
 800365c:	b570      	push	{r4, r5, r6, lr}



	postion1 = (ReceivedData[2] << 8) | ReceivedData[3];
 800365e:	495c      	ldr	r1, [pc, #368]	(80037d0 <MotorLimits+0x174>)
 8003660:	4e5c      	ldr	r6, [pc, #368]	(80037d4 <MotorLimits+0x178>)
 8003662:	788a      	ldrb	r2, [r1, #2]
 8003664:	78cb      	ldrb	r3, [r1, #3]
	postion4 = (ReceivedData[8] << 8) | ReceivedData[9];
	postion5 = (ReceivedData[10] << 8) | ReceivedData[11];
	postion6 = (ReceivedData[12] << 8) | ReceivedData[13];


	bMoving1 = dxl_read_word( 1, P_PRESENT_POSITION_L );
 8003666:	2001      	movs	r0, #1
// function to check and update motors limits
void MotorLimits(void){



	postion1 = (ReceivedData[2] << 8) | ReceivedData[3];
 8003668:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800366c:	8033      	strh	r3, [r6, #0]
	postion2 = (ReceivedData[4] << 8) | ReceivedData[5];
 800366e:	790a      	ldrb	r2, [r1, #4]
 8003670:	794b      	ldrb	r3, [r1, #5]
	postion4 = (ReceivedData[8] << 8) | ReceivedData[9];
	postion5 = (ReceivedData[10] << 8) | ReceivedData[11];
	postion6 = (ReceivedData[12] << 8) | ReceivedData[13];


	bMoving1 = dxl_read_word( 1, P_PRESENT_POSITION_L );
 8003672:	4c59      	ldr	r4, [pc, #356]	(80037d8 <MotorLimits+0x17c>)
void MotorLimits(void){



	postion1 = (ReceivedData[2] << 8) | ReceivedData[3];
	postion2 = (ReceivedData[4] << 8) | ReceivedData[5];
 8003674:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003678:	4a58      	ldr	r2, [pc, #352]	(80037dc <MotorLimits+0x180>)
	postion6 = (ReceivedData[12] << 8) | ReceivedData[13];


	bMoving1 = dxl_read_word( 1, P_PRESENT_POSITION_L );
	bMoving2 = dxl_read_word( 2, P_PRESENT_POSITION_L );
	bMoving3 = dxl_read_word( 3, P_PRESENT_POSITION_L );
 800367a:	4d59      	ldr	r5, [pc, #356]	(80037e0 <MotorLimits+0x184>)
void MotorLimits(void){



	postion1 = (ReceivedData[2] << 8) | ReceivedData[3];
	postion2 = (ReceivedData[4] << 8) | ReceivedData[5];
 800367c:	8013      	strh	r3, [r2, #0]
	postion3 = (ReceivedData[6] << 8) | ReceivedData[7];
 800367e:	798a      	ldrb	r2, [r1, #6]
 8003680:	79cb      	ldrb	r3, [r1, #7]
 8003682:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003686:	4a57      	ldr	r2, [pc, #348]	(80037e4 <MotorLimits+0x188>)
 8003688:	8013      	strh	r3, [r2, #0]
	postion4 = (ReceivedData[8] << 8) | ReceivedData[9];
 800368a:	7a0a      	ldrb	r2, [r1, #8]
 800368c:	7a4b      	ldrb	r3, [r1, #9]
 800368e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003692:	4a55      	ldr	r2, [pc, #340]	(80037e8 <MotorLimits+0x18c>)
 8003694:	8013      	strh	r3, [r2, #0]
	postion5 = (ReceivedData[10] << 8) | ReceivedData[11];
 8003696:	7a8a      	ldrb	r2, [r1, #10]
 8003698:	7acb      	ldrb	r3, [r1, #11]
 800369a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800369e:	4a53      	ldr	r2, [pc, #332]	(80037ec <MotorLimits+0x190>)
 80036a0:	8013      	strh	r3, [r2, #0]
	postion6 = (ReceivedData[12] << 8) | ReceivedData[13];
 80036a2:	7b0a      	ldrb	r2, [r1, #12]
 80036a4:	7b4b      	ldrb	r3, [r1, #13]


	bMoving1 = dxl_read_word( 1, P_PRESENT_POSITION_L );
 80036a6:	2124      	movs	r1, #36
	postion1 = (ReceivedData[2] << 8) | ReceivedData[3];
	postion2 = (ReceivedData[4] << 8) | ReceivedData[5];
	postion3 = (ReceivedData[6] << 8) | ReceivedData[7];
	postion4 = (ReceivedData[8] << 8) | ReceivedData[9];
	postion5 = (ReceivedData[10] << 8) | ReceivedData[11];
	postion6 = (ReceivedData[12] << 8) | ReceivedData[13];
 80036a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80036ac:	4a50      	ldr	r2, [pc, #320]	(80037f0 <MotorLimits+0x194>)
 80036ae:	8013      	strh	r3, [r2, #0]


	bMoving1 = dxl_read_word( 1, P_PRESENT_POSITION_L );
 80036b0:	f000 fbe2 	bl	8003e78 <dxl_read_word>
	bMoving2 = dxl_read_word( 2, P_PRESENT_POSITION_L );
 80036b4:	2124      	movs	r1, #36
	postion4 = (ReceivedData[8] << 8) | ReceivedData[9];
	postion5 = (ReceivedData[10] << 8) | ReceivedData[11];
	postion6 = (ReceivedData[12] << 8) | ReceivedData[13];


	bMoving1 = dxl_read_word( 1, P_PRESENT_POSITION_L );
 80036b6:	8020      	strh	r0, [r4, #0]
	bMoving2 = dxl_read_word( 2, P_PRESENT_POSITION_L );
 80036b8:	2002      	movs	r0, #2
 80036ba:	f000 fbdd 	bl	8003e78 <dxl_read_word>
 80036be:	4b4d      	ldr	r3, [pc, #308]	(80037f4 <MotorLimits+0x198>)
	bMoving3 = dxl_read_word( 3, P_PRESENT_POSITION_L );
 80036c0:	2124      	movs	r1, #36
	postion5 = (ReceivedData[10] << 8) | ReceivedData[11];
	postion6 = (ReceivedData[12] << 8) | ReceivedData[13];


	bMoving1 = dxl_read_word( 1, P_PRESENT_POSITION_L );
	bMoving2 = dxl_read_word( 2, P_PRESENT_POSITION_L );
 80036c2:	8018      	strh	r0, [r3, #0]
	bMoving3 = dxl_read_word( 3, P_PRESENT_POSITION_L );
 80036c4:	2003      	movs	r0, #3
 80036c6:	f000 fbd7 	bl	8003e78 <dxl_read_word>
	bMoving4 = dxl_read_word( 4, P_PRESENT_POSITION_L );
 80036ca:	2124      	movs	r1, #36
	postion6 = (ReceivedData[12] << 8) | ReceivedData[13];


	bMoving1 = dxl_read_word( 1, P_PRESENT_POSITION_L );
	bMoving2 = dxl_read_word( 2, P_PRESENT_POSITION_L );
	bMoving3 = dxl_read_word( 3, P_PRESENT_POSITION_L );
 80036cc:	8028      	strh	r0, [r5, #0]
	bMoving4 = dxl_read_word( 4, P_PRESENT_POSITION_L );
 80036ce:	2004      	movs	r0, #4
 80036d0:	f000 fbd2 	bl	8003e78 <dxl_read_word>
 80036d4:	4b48      	ldr	r3, [pc, #288]	(80037f8 <MotorLimits+0x19c>)
	bMoving5 = dxl_read_word( 5, P_PRESENT_POSITION_L );
 80036d6:	2124      	movs	r1, #36


	bMoving1 = dxl_read_word( 1, P_PRESENT_POSITION_L );
	bMoving2 = dxl_read_word( 2, P_PRESENT_POSITION_L );
	bMoving3 = dxl_read_word( 3, P_PRESENT_POSITION_L );
	bMoving4 = dxl_read_word( 4, P_PRESENT_POSITION_L );
 80036d8:	8018      	strh	r0, [r3, #0]
	bMoving5 = dxl_read_word( 5, P_PRESENT_POSITION_L );
 80036da:	2005      	movs	r0, #5
 80036dc:	f000 fbcc 	bl	8003e78 <dxl_read_word>
 80036e0:	4b46      	ldr	r3, [pc, #280]	(80037fc <MotorLimits+0x1a0>)
	bMoving6 = dxl_read_word( 6, P_PRESENT_POSITION_L );
 80036e2:	2124      	movs	r1, #36

	bMoving1 = dxl_read_word( 1, P_PRESENT_POSITION_L );
	bMoving2 = dxl_read_word( 2, P_PRESENT_POSITION_L );
	bMoving3 = dxl_read_word( 3, P_PRESENT_POSITION_L );
	bMoving4 = dxl_read_word( 4, P_PRESENT_POSITION_L );
	bMoving5 = dxl_read_word( 5, P_PRESENT_POSITION_L );
 80036e4:	8018      	strh	r0, [r3, #0]
	bMoving6 = dxl_read_word( 6, P_PRESENT_POSITION_L );
 80036e6:	2006      	movs	r0, #6
 80036e8:	f000 fbc6 	bl	8003e78 <dxl_read_word>
 80036ec:	4b44      	ldr	r3, [pc, #272]	(8003800 <MotorLimits+0x1a4>)
 80036ee:	8018      	strh	r0, [r3, #0]


	if((bMoving1 > 350 ) || (postion1 > 350)){
 80036f0:	8823      	ldrh	r3, [r4, #0]
 80036f2:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80036f6:	d803      	bhi.n	8003700 <MotorLimits+0xa4>
 80036f8:	8832      	ldrh	r2, [r6, #0]
 80036fa:	f5b2 7faf 	cmp.w	r2, #350	; 0x15e
 80036fe:	d909      	bls.n	8003714 <MotorLimits+0xb8>
		dxl_write_word(5,P_LIMIT_CW,200);
 8003700:	2005      	movs	r0, #5
 8003702:	2106      	movs	r1, #6
 8003704:	22c8      	movs	r2, #200
 8003706:	f000 fb9b 	bl	8003e40 <dxl_write_word>
		dxl_write_word(5,P_LIMIT_CCW,500);
 800370a:	2005      	movs	r0, #5
 800370c:	2108      	movs	r1, #8
 800370e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003712:	e037      	b.n	8003784 <MotorLimits+0x128>
	}

	else if ((bMoving1 < 350 && bMoving3 < 400) || (postion1 < 350 && postion3 < 400)){
 8003714:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8003718:	d003      	beq.n	8003722 <MotorLimits+0xc6>
 800371a:	882b      	ldrh	r3, [r5, #0]
 800371c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003720:	d307      	bcc.n	8003732 <MotorLimits+0xd6>
 8003722:	f5b2 7faf 	cmp.w	r2, #350	; 0x15e
 8003726:	d00f      	beq.n	8003748 <MotorLimits+0xec>
 8003728:	4b2e      	ldr	r3, [pc, #184]	(80037e4 <MotorLimits+0x188>)
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003730:	d20a      	bcs.n	8003748 <MotorLimits+0xec>

		dxl_write_word(5,P_LIMIT_CW,490);
 8003732:	2005      	movs	r0, #5
 8003734:	2106      	movs	r1, #6
 8003736:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
 800373a:	f000 fb81 	bl	8003e40 <dxl_write_word>
		dxl_write_word(5,P_LIMIT_CCW,499);
 800373e:	2005      	movs	r0, #5
 8003740:	2108      	movs	r1, #8
 8003742:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003746:	e01d      	b.n	8003784 <MotorLimits+0x128>

	}
	else if ((bMoving3 < 400 && bMoving5 > 300) || (postion3 < 400 && postion5 > 300)){
 8003748:	4b25      	ldr	r3, [pc, #148]	(80037e0 <MotorLimits+0x184>)
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003750:	d204      	bcs.n	800375c <MotorLimits+0x100>
 8003752:	4b2a      	ldr	r3, [pc, #168]	(80037fc <MotorLimits+0x1a0>)
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800375a:	d809      	bhi.n	8003770 <MotorLimits+0x114>
 800375c:	4b21      	ldr	r3, [pc, #132]	(80037e4 <MotorLimits+0x188>)
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003764:	d210      	bcs.n	8003788 <MotorLimits+0x12c>
 8003766:	4b21      	ldr	r3, [pc, #132]	(80037ec <MotorLimits+0x190>)
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800376e:	d90b      	bls.n	8003788 <MotorLimits+0x12c>

		dxl_write_word(1,P_LIMIT_CW,400);
 8003770:	2001      	movs	r0, #1
 8003772:	2106      	movs	r1, #6
 8003774:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003778:	f000 fb62 	bl	8003e40 <dxl_write_word>
		dxl_write_word(1,P_LIMIT_CCW,800);
 800377c:	2001      	movs	r0, #1
 800377e:	2108      	movs	r1, #8
 8003780:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003784:	f000 fb5c 	bl	8003e40 <dxl_write_word>

	}

	/////////////////////////////////////////////////////

	if(bMoving2 <= 650){
 8003788:	4b1a      	ldr	r3, [pc, #104]	(80037f4 <MotorLimits+0x198>)
 800378a:	881a      	ldrh	r2, [r3, #0]
 800378c:	f240 238a 	movw	r3, #650	; 0x28a
 8003790:	429a      	cmp	r2, r3
 8003792:	d90f      	bls.n	80037b4 <MotorLimits+0x158>
		dxl_write_word(6,P_LIMIT_CW,500);
		dxl_write_word(6,P_LIMIT_CCW,800);

	}

	else if (bMoving2 > 650 && bMoving4 > 600){
 8003794:	4b18      	ldr	r3, [pc, #96]	(80037f8 <MotorLimits+0x19c>)
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800379c:	d90a      	bls.n	80037b4 <MotorLimits+0x158>


		dxl_write_word(6,P_LIMIT_CW,501);
 800379e:	2006      	movs	r0, #6
 80037a0:	2106      	movs	r1, #6
 80037a2:	f240 12f5 	movw	r2, #501	; 0x1f5
 80037a6:	f000 fb4b 	bl	8003e40 <dxl_write_word>
		dxl_write_word(6,P_LIMIT_CCW,510);
 80037aa:	2006      	movs	r0, #6
 80037ac:	2108      	movs	r1, #8
 80037ae:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 80037b2:	e009      	b.n	80037c8 <MotorLimits+0x16c>

	}

	else if (bMoving4 <= 600){

		dxl_write_word(6,P_LIMIT_CW,500);
 80037b4:	2006      	movs	r0, #6
 80037b6:	2106      	movs	r1, #6
 80037b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80037bc:	f000 fb40 	bl	8003e40 <dxl_write_word>
		dxl_write_word(6,P_LIMIT_CCW,800);
 80037c0:	2006      	movs	r0, #6
 80037c2:	2108      	movs	r1, #8
 80037c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80037c8:	f000 fb3a 	bl	8003e40 <dxl_write_word>
		dxl_write_word(2,P_LIMIT_CW,200);
		dxl_write_word(2,P_LIMIT_CCW,600);

	}

}
 80037cc:	bd70      	pop	{r4, r5, r6, pc}
 80037ce:	46c0      	nop			(mov r8, r8)
 80037d0:	2000017a 	.word	0x2000017a
 80037d4:	2000016e 	.word	0x2000016e
 80037d8:	20000162 	.word	0x20000162
 80037dc:	20000170 	.word	0x20000170
 80037e0:	20000166 	.word	0x20000166
 80037e4:	20000172 	.word	0x20000172
 80037e8:	20000174 	.word	0x20000174
 80037ec:	20000176 	.word	0x20000176
 80037f0:	20000178 	.word	0x20000178
 80037f4:	20000164 	.word	0x20000164
 80037f8:	20000168 	.word	0x20000168
 80037fc:	2000016a 	.word	0x2000016a
 8003800:	2000016c 	.word	0x2000016c

08003804 <ControlMotor>:

	return 0;
} */


void ControlMotor(byte id, byte position_low, byte position_high, byte var) {
 8003804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003806:	461c      	mov	r4, r3
 8003808:	4684      	mov	ip, r0
	// Motor auf Bewegung setzen
	dxl_set_txpacket_parameter(2+3*var,id);
 800380a:	eb03 0543 	add.w	r5, r3, r3, lsl #1
	dxl_set_txpacket_parameter(2+3*var+1, position_low);
 800380e:	3401      	adds	r4, #1
} */


void ControlMotor(byte id, byte position_low, byte position_high, byte var) {
	// Motor auf Bewegung setzen
	dxl_set_txpacket_parameter(2+3*var,id);
 8003810:	1ca8      	adds	r0, r5, #2

	return 0;
} */


void ControlMotor(byte id, byte position_low, byte position_high, byte var) {
 8003812:	b081      	sub	sp, #4
 8003814:	460e      	mov	r6, r1
	// Motor auf Bewegung setzen
	dxl_set_txpacket_parameter(2+3*var,id);
	dxl_set_txpacket_parameter(2+3*var+1, position_low);
 8003816:	eb04 0444 	add.w	r4, r4, r4, lsl #1
} */


void ControlMotor(byte id, byte position_low, byte position_high, byte var) {
	// Motor auf Bewegung setzen
	dxl_set_txpacket_parameter(2+3*var,id);
 800381a:	4661      	mov	r1, ip

	return 0;
} */


void ControlMotor(byte id, byte position_low, byte position_high, byte var) {
 800381c:	4617      	mov	r7, r2
	// Motor auf Bewegung setzen
	dxl_set_txpacket_parameter(2+3*var,id);
	dxl_set_txpacket_parameter(2+3*var+1, position_low);
	dxl_set_txpacket_parameter(2+3*var+2, position_high);
 800381e:	3504      	adds	r5, #4
} */


void ControlMotor(byte id, byte position_low, byte position_high, byte var) {
	// Motor auf Bewegung setzen
	dxl_set_txpacket_parameter(2+3*var,id);
 8003820:	f000 f9bc 	bl	8003b9c <dxl_set_txpacket_parameter>
	dxl_set_txpacket_parameter(2+3*var+1, position_low);
 8003824:	4620      	mov	r0, r4
 8003826:	4631      	mov	r1, r6
 8003828:	f000 f9b8 	bl	8003b9c <dxl_set_txpacket_parameter>
	dxl_set_txpacket_parameter(2+3*var+2, position_high);
 800382c:	4628      	mov	r0, r5
 800382e:	4639      	mov	r1, r7
 8003830:	f000 f9b4 	bl	8003b9c <dxl_set_txpacket_parameter>
}
 8003834:	b001      	add	sp, #4
 8003836:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003838 <MotorenBewegen>:

void MotorenBewegen(void){
 8003838:	b570      	push	{r4, r5, r6, lr}
	// Make syncwrite packet
	dxl_set_txpacket_id(BROADCAST_ID);
 800383a:	20fe      	movs	r0, #254
 800383c:	f000 f9a2 	bl	8003b84 <dxl_set_txpacket_id>
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
 8003840:	2083      	movs	r0, #131
 8003842:	f000 f9a5 	bl	8003b90 <dxl_set_txpacket_instruction>
	dxl_set_txpacket_parameter(0, P_GOAL_POSITION_L);
 8003846:	2000      	movs	r0, #0
 8003848:	211e      	movs	r1, #30
 800384a:	f000 f9a7 	bl	8003b9c <dxl_set_txpacket_parameter>
	dxl_set_txpacket_parameter(1, 2);
 800384e:	2001      	movs	r0, #1
 8003850:	2102      	movs	r1, #2
 8003852:	f000 f9a3 	bl	8003b9c <dxl_set_txpacket_parameter>

      for(i = 0; i < 6; i++)
 8003856:	4a0f      	ldr	r2, [pc, #60]	(8003894 <MotorenBewegen+0x5c>)
 8003858:	2300      	movs	r3, #0
 800385a:	7013      	strb	r3, [r2, #0]
 800385c:	4614      	mov	r4, r2
      {
		ControlMotor(motor_ids[i],ReceivedData[(i*2)],ReceivedData[(i*2+1)],i);
 800385e:	4e0e      	ldr	r6, [pc, #56]	(8003898 <MotorenBewegen+0x60>)
 8003860:	4d0e      	ldr	r5, [pc, #56]	(800389c <MotorenBewegen+0x64>)
 8003862:	e00c      	b.n	800387e <MotorenBewegen+0x46>
 8003864:	eb05 034c 	add.w	r3, r5, ip, lsl #1
 8003868:	785a      	ldrb	r2, [r3, #1]
 800386a:	f816 000c 	ldrb.w	r0, [r6, ip]
 800386e:	4663      	mov	r3, ip
 8003870:	f815 101c 	ldrb.w	r1, [r5, ip, lsl #1]
 8003874:	f7ff ffc6 	bl	8003804 <ControlMotor>
	dxl_set_txpacket_id(BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, P_GOAL_POSITION_L);
	dxl_set_txpacket_parameter(1, 2);

      for(i = 0; i < 6; i++)
 8003878:	7823      	ldrb	r3, [r4, #0]
 800387a:	3301      	adds	r3, #1
 800387c:	7023      	strb	r3, [r4, #0]
 800387e:	f894 c000 	ldrb.w	ip, [r4]
 8003882:	f1bc 0f05 	cmp.w	ip, #5	; 0x5
 8003886:	d9ed      	bls.n	8003864 <MotorenBewegen+0x2c>
      {
		ControlMotor(motor_ids[i],ReceivedData[(i*2)],ReceivedData[(i*2+1)],i);
      }
      dxl_set_txpacket_length(22);
 8003888:	2016      	movs	r0, #22
 800388a:	f000 f98d 	bl	8003ba8 <dxl_set_txpacket_length>
      dxl_txrx_packet();
 800388e:	f000 fac7 	bl	8003e20 <dxl_txrx_packet>
}
 8003892:	bd70      	pop	{r4, r5, r6, pc}
 8003894:	2000013c 	.word	0x2000013c
 8003898:	2000000a 	.word	0x2000000a
 800389c:	2000017a 	.word	0x2000017a

080038a0 <main>:
int prufenAnfang(byte c[], byte wert1, byte wert2);
int prufenEnde(byte c[], byte wert15, byte wert16);
void MotorenBewegen(void);

int main(void)
{
 80038a0:	b570      	push	{r4, r5, r6, lr}

	RCC_Configuration();
 80038a2:	f7ff fe99 	bl	80035d8 <RCC_Configuration>
	Timer_Configuration();

	dxl_initialize( 0, 1 );
	USART_Configuration(1, 57600);

	dxl_write_word(1,P_LIMIT_CW,ShoulderPitches1[0]);
 80038a6:	4c39      	ldr	r4, [pc, #228]	(800398c <main+0xec>)

int main(void)
{

	RCC_Configuration();
	NVIC_Configuration();
 80038a8:	f7ff fe60 	bl	800356c <NVIC_Configuration>
	GPIO_Configuration();
 80038ac:	f7ff fe1a 	bl	80034e4 <GPIO_Configuration>
	SysTick_Configuration();
 80038b0:	f7ff fd76 	bl	80033a0 <SysTick_Configuration>
	Timer_Configuration();
 80038b4:	f7ff fd80 	bl	80033b8 <Timer_Configuration>

	dxl_initialize( 0, 1 );
 80038b8:	2101      	movs	r1, #1
 80038ba:	2000      	movs	r0, #0
 80038bc:	f000 fb48 	bl	8003f50 <dxl_initialize>
	USART_Configuration(1, 57600);
 80038c0:	2001      	movs	r0, #1
 80038c2:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80038c6:	f7ff fdbf 	bl	8003448 <USART_Configuration>

	dxl_write_word(1,P_LIMIT_CW,ShoulderPitches1[0]);
 80038ca:	8822      	ldrh	r2, [r4, #0]
 80038cc:	2001      	movs	r0, #1
 80038ce:	2106      	movs	r1, #6
 80038d0:	f000 fab6 	bl	8003e40 <dxl_write_word>
	dxl_write_word(1,P_LIMIT_CCW,ShoulderPitches1[1]);
 80038d4:	8862      	ldrh	r2, [r4, #2]

	dxl_write_word(2,P_LIMIT_CW,ShoulderPitches2[0]);
 80038d6:	4c2e      	ldr	r4, [pc, #184]	(8003990 <main+0xf0>)

	dxl_initialize( 0, 1 );
	USART_Configuration(1, 57600);

	dxl_write_word(1,P_LIMIT_CW,ShoulderPitches1[0]);
	dxl_write_word(1,P_LIMIT_CCW,ShoulderPitches1[1]);
 80038d8:	2001      	movs	r0, #1
 80038da:	2108      	movs	r1, #8
 80038dc:	f000 fab0 	bl	8003e40 <dxl_write_word>

	dxl_write_word(2,P_LIMIT_CW,ShoulderPitches2[0]);
 80038e0:	8822      	ldrh	r2, [r4, #0]
 80038e2:	2002      	movs	r0, #2
 80038e4:	2106      	movs	r1, #6
 80038e6:	f000 faab 	bl	8003e40 <dxl_write_word>
	dxl_write_word(2,P_LIMIT_CCW,ShoulderPitches2[1]);
 80038ea:	8862      	ldrh	r2, [r4, #2]

	dxl_write_word(3,P_LIMIT_CW,ShoulderRolls3[0]);
 80038ec:	4c29      	ldr	r4, [pc, #164]	(8003994 <main+0xf4>)

	dxl_write_word(1,P_LIMIT_CW,ShoulderPitches1[0]);
	dxl_write_word(1,P_LIMIT_CCW,ShoulderPitches1[1]);

	dxl_write_word(2,P_LIMIT_CW,ShoulderPitches2[0]);
	dxl_write_word(2,P_LIMIT_CCW,ShoulderPitches2[1]);
 80038ee:	2002      	movs	r0, #2
 80038f0:	2108      	movs	r1, #8
 80038f2:	f000 faa5 	bl	8003e40 <dxl_write_word>

	dxl_write_word(3,P_LIMIT_CW,ShoulderRolls3[0]);
 80038f6:	8822      	ldrh	r2, [r4, #0]
 80038f8:	2003      	movs	r0, #3
 80038fa:	2106      	movs	r1, #6
 80038fc:	f000 faa0 	bl	8003e40 <dxl_write_word>
	dxl_write_word(3,P_LIMIT_CCW,ShoulderRolls3[1]);
 8003900:	8862      	ldrh	r2, [r4, #2]

	dxl_write_word(4,P_LIMIT_CW,ShoulderRolls4[0]);
 8003902:	4c25      	ldr	r4, [pc, #148]	(8003998 <main+0xf8>)

	dxl_write_word(2,P_LIMIT_CW,ShoulderPitches2[0]);
	dxl_write_word(2,P_LIMIT_CCW,ShoulderPitches2[1]);

	dxl_write_word(3,P_LIMIT_CW,ShoulderRolls3[0]);
	dxl_write_word(3,P_LIMIT_CCW,ShoulderRolls3[1]);
 8003904:	2003      	movs	r0, #3
 8003906:	2108      	movs	r1, #8
 8003908:	f000 fa9a 	bl	8003e40 <dxl_write_word>

	dxl_write_word(4,P_LIMIT_CW,ShoulderRolls4[0]);
 800390c:	8822      	ldrh	r2, [r4, #0]
 800390e:	2004      	movs	r0, #4
 8003910:	2106      	movs	r1, #6
 8003912:	f000 fa95 	bl	8003e40 <dxl_write_word>
	dxl_write_word(4,P_LIMIT_CCW,ShoulderRolls4[1]);
 8003916:	8862      	ldrh	r2, [r4, #2]

	dxl_write_word(5,P_LIMIT_CW,EllbowRolls5[0]);
 8003918:	4c20      	ldr	r4, [pc, #128]	(800399c <main+0xfc>)

	dxl_write_word(3,P_LIMIT_CW,ShoulderRolls3[0]);
	dxl_write_word(3,P_LIMIT_CCW,ShoulderRolls3[1]);

	dxl_write_word(4,P_LIMIT_CW,ShoulderRolls4[0]);
	dxl_write_word(4,P_LIMIT_CCW,ShoulderRolls4[1]);
 800391a:	2004      	movs	r0, #4
 800391c:	2108      	movs	r1, #8
 800391e:	f000 fa8f 	bl	8003e40 <dxl_write_word>

	dxl_write_word(5,P_LIMIT_CW,EllbowRolls5[0]);
 8003922:	8822      	ldrh	r2, [r4, #0]
 8003924:	2005      	movs	r0, #5
 8003926:	2106      	movs	r1, #6
 8003928:	f000 fa8a 	bl	8003e40 <dxl_write_word>
	dxl_write_word(5,P_LIMIT_CCW,EllbowRolls5[1]);
 800392c:	8862      	ldrh	r2, [r4, #2]

	dxl_write_word(6,P_LIMIT_CW,EllbowRolls6[0]);
 800392e:	4c1c      	ldr	r4, [pc, #112]	(80039a0 <main+0x100>)

	dxl_write_word(4,P_LIMIT_CW,ShoulderRolls4[0]);
	dxl_write_word(4,P_LIMIT_CCW,ShoulderRolls4[1]);

	dxl_write_word(5,P_LIMIT_CW,EllbowRolls5[0]);
	dxl_write_word(5,P_LIMIT_CCW,EllbowRolls5[1]);
 8003930:	2005      	movs	r0, #5
 8003932:	2108      	movs	r1, #8
 8003934:	f000 fa84 	bl	8003e40 <dxl_write_word>

	dxl_write_word(6,P_LIMIT_CW,EllbowRolls6[0]);
 8003938:	8822      	ldrh	r2, [r4, #0]
 800393a:	2006      	movs	r0, #6
 800393c:	2106      	movs	r1, #6
 800393e:	f000 fa7f 	bl	8003e40 <dxl_write_word>
	dxl_write_word(6,P_LIMIT_CCW,EllbowRolls6[1]);
 8003942:	8862      	ldrh	r2, [r4, #2]
 8003944:	2006      	movs	r0, #6
 8003946:	2108      	movs	r1, #8
 8003948:	f000 fa7a 	bl	8003e40 <dxl_write_word>
{
    byte temp;

	while(1)
	{
    	if(gbPacketReadPointer != gbPacketWritePointer) break;
 800394c:	4d15      	ldr	r5, [pc, #84]	(80039a4 <main+0x104>)
 800394e:	4e16      	ldr	r6, [pc, #88]	(80039a8 <main+0x108>)
 8003950:	462c      	mov	r4, r5

	dxl_write_word(5,P_LIMIT_CW,EllbowRolls5[0]);
	dxl_write_word(5,P_LIMIT_CCW,EllbowRolls5[1]);

	dxl_write_word(6,P_LIMIT_CW,EllbowRolls6[0]);
	dxl_write_word(6,P_LIMIT_CCW,EllbowRolls6[1]);
 8003952:	2100      	movs	r1, #0
	while(1)
	{
    	if(gbPacketReadPointer != gbPacketWritePointer) break;
	}

	temp = gbpPacketDataBuffer[gbPacketReadPointer];
 8003954:	4815      	ldr	r0, [pc, #84]	(80039ac <main+0x10c>)
 8003956:	e011      	b.n	800397c <main+0xdc>
{
    byte temp;

	while(1)
	{
    	if(gbPacketReadPointer != gbPacketWritePointer) break;
 8003958:	782a      	ldrb	r2, [r5, #0]
 800395a:	7833      	ldrb	r3, [r6, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d0fb      	beq.n	8003958 <main+0xb8>
	}

	temp = gbpPacketDataBuffer[gbPacketReadPointer];
 8003960:	7823      	ldrb	r3, [r4, #0]
 8003962:	5cc2      	ldrb	r2, [r0, r3]
	gbPacketReadPointer++;
 8003964:	7823      	ldrb	r3, [r4, #0]
 8003966:	3301      	adds	r3, #1
 8003968:	b2db      	uxtb	r3, r3
 800396a:	7023      	strb	r3, [r4, #0]
	gbPacketReadPointer = gbPacketReadPointer & 0x1F;
 800396c:	7823      	ldrb	r3, [r4, #0]
 800396e:	f003 031f 	and.w	r3, r3, #31	; 0x1f
 8003972:	7023      	strb	r3, [r4, #0]
	dxl_write_word(6,P_LIMIT_CCW,EllbowRolls6[1]);

	while(1)
	{
	     for (i = 0; i < 12; i++) {
	            ReceivedData[i] = RxDByte_PC();
 8003974:	4b0e      	ldr	r3, [pc, #56]	(80039b0 <main+0x110>)
 8003976:	545a      	strb	r2, [r3, r1]
 8003978:	1c4b      	adds	r3, r1, #1
 800397a:	b2d9      	uxtb	r1, r3
	dxl_write_word(6,P_LIMIT_CW,EllbowRolls6[0]);
	dxl_write_word(6,P_LIMIT_CCW,EllbowRolls6[1]);

	while(1)
	{
	     for (i = 0; i < 12; i++) {
 800397c:	290b      	cmp	r1, #11
 800397e:	d9eb      	bls.n	8003958 <main+0xb8>
 8003980:	4b0c      	ldr	r3, [pc, #48]	(80039b4 <main+0x114>)
 8003982:	7019      	strb	r1, [r3, #0]
	            ReceivedData[i] = RxDByte_PC();
	        }
	     MotorenBewegen();
 8003984:	f7ff ff58 	bl	8003838 <MotorenBewegen>
 8003988:	e7e3      	b.n	8003952 <main+0xb2>
 800398a:	46c0      	nop			(mov r8, r8)
 800398c:	20000010 	.word	0x20000010
 8003990:	2000001c 	.word	0x2000001c
 8003994:	20000014 	.word	0x20000014
 8003998:	20000020 	.word	0x20000020
 800399c:	20000018 	.word	0x20000018
 80039a0:	20000024 	.word	0x20000024
 80039a4:	2000013f 	.word	0x2000013f
 80039a8:	2000013e 	.word	0x2000013e
 80039ac:	20000140 	.word	0x20000140
 80039b0:	2000017a 	.word	0x2000017a
 80039b4:	2000013c 	.word	0x2000013c

080039b8 <NMIException>:
* Output         : None
* Return         : None
*******************************************************************************/
void NMIException(void)
{
}
 80039b8:	4770      	bx	lr
 80039ba:	46c0      	nop			(mov r8, r8)

080039bc <HardFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void HardFaultException(void)
{
 80039bc:	e7fe      	b.n	80039bc <HardFaultException>
 80039be:	46c0      	nop			(mov r8, r8)

080039c0 <MemManageException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void MemManageException(void)
{
 80039c0:	e7fe      	b.n	80039c0 <MemManageException>
 80039c2:	46c0      	nop			(mov r8, r8)

080039c4 <BusFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void BusFaultException(void)
{
 80039c4:	e7fe      	b.n	80039c4 <BusFaultException>
 80039c6:	46c0      	nop			(mov r8, r8)

080039c8 <UsageFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UsageFaultException(void)
{
 80039c8:	e7fe      	b.n	80039c8 <UsageFaultException>
 80039ca:	46c0      	nop			(mov r8, r8)

080039cc <DebugMonitor>:
* Output         : None
* Return         : None
*******************************************************************************/
void DebugMonitor(void)
{
}
 80039cc:	4770      	bx	lr
 80039ce:	46c0      	nop			(mov r8, r8)

080039d0 <SVCHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SVCHandler(void)
{
}
 80039d0:	4770      	bx	lr
 80039d2:	46c0      	nop			(mov r8, r8)

080039d4 <PendSVC>:
* Output         : None
* Return         : None
*******************************************************************************/
void PendSVC(void)
{
}
 80039d4:	4770      	bx	lr
 80039d6:	46c0      	nop			(mov r8, r8)

080039d8 <WWDG_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void WWDG_IRQHandler(void)
{
}
 80039d8:	4770      	bx	lr
 80039da:	46c0      	nop			(mov r8, r8)

080039dc <PVD_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void PVD_IRQHandler(void)
{
}
 80039dc:	4770      	bx	lr
 80039de:	46c0      	nop			(mov r8, r8)

080039e0 <TAMPER_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TAMPER_IRQHandler(void)
{
}
 80039e0:	4770      	bx	lr
 80039e2:	46c0      	nop			(mov r8, r8)

080039e4 <RTC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void RTC_IRQHandler(void)
{
}
 80039e4:	4770      	bx	lr
 80039e6:	46c0      	nop			(mov r8, r8)

080039e8 <FLASH_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_IRQHandler(void)
{
}
 80039e8:	4770      	bx	lr
 80039ea:	46c0      	nop			(mov r8, r8)

080039ec <RCC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_IRQHandler(void)
{
}
 80039ec:	4770      	bx	lr
 80039ee:	46c0      	nop			(mov r8, r8)

080039f0 <EXTI0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI0_IRQHandler(void)
{
}
 80039f0:	4770      	bx	lr
 80039f2:	46c0      	nop			(mov r8, r8)

080039f4 <EXTI1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI1_IRQHandler(void)
{
}
 80039f4:	4770      	bx	lr
 80039f6:	46c0      	nop			(mov r8, r8)

080039f8 <EXTI2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI2_IRQHandler(void)
{
}
 80039f8:	4770      	bx	lr
 80039fa:	46c0      	nop			(mov r8, r8)

080039fc <EXTI3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI3_IRQHandler(void)
{
}
 80039fc:	4770      	bx	lr
 80039fe:	46c0      	nop			(mov r8, r8)

08003a00 <EXTI4_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI4_IRQHandler(void)
{
}
 8003a00:	4770      	bx	lr
 8003a02:	46c0      	nop			(mov r8, r8)

08003a04 <DMA1_Channel1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel1_IRQHandler(void)
{
}
 8003a04:	4770      	bx	lr
 8003a06:	46c0      	nop			(mov r8, r8)

08003a08 <DMA1_Channel2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel2_IRQHandler(void)
{
}
 8003a08:	4770      	bx	lr
 8003a0a:	46c0      	nop			(mov r8, r8)

08003a0c <DMA1_Channel3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel3_IRQHandler(void)
{
}
 8003a0c:	4770      	bx	lr
 8003a0e:	46c0      	nop			(mov r8, r8)

08003a10 <DMA1_Channel4_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel4_IRQHandler(void)
{
}
 8003a10:	4770      	bx	lr
 8003a12:	46c0      	nop			(mov r8, r8)

08003a14 <DMA1_Channel5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel5_IRQHandler(void)
{
}
 8003a14:	4770      	bx	lr
 8003a16:	46c0      	nop			(mov r8, r8)

08003a18 <DMA1_Channel6_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel6_IRQHandler(void)
{
}
 8003a18:	4770      	bx	lr
 8003a1a:	46c0      	nop			(mov r8, r8)

08003a1c <DMA1_Channel7_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel7_IRQHandler(void)
{
}
 8003a1c:	4770      	bx	lr
 8003a1e:	46c0      	nop			(mov r8, r8)

08003a20 <ADC1_2_IRQHandler>:
* Return         : None
*******************************************************************************/

void ADC1_2_IRQHandler(void)
{
}
 8003a20:	4770      	bx	lr
 8003a22:	46c0      	nop			(mov r8, r8)

08003a24 <USB_HP_CAN_TX_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_HP_CAN_TX_IRQHandler(void)
{
}
 8003a24:	4770      	bx	lr
 8003a26:	46c0      	nop			(mov r8, r8)

08003a28 <USB_LP_CAN_RX0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN_RX0_IRQHandler(void)
{
}
 8003a28:	4770      	bx	lr
 8003a2a:	46c0      	nop			(mov r8, r8)

08003a2c <CAN_RX1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_RX1_IRQHandler(void)
{
}
 8003a2c:	4770      	bx	lr
 8003a2e:	46c0      	nop			(mov r8, r8)

08003a30 <CAN_SCE_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_SCE_IRQHandler(void)
{
}
 8003a30:	4770      	bx	lr
 8003a32:	46c0      	nop			(mov r8, r8)

08003a34 <EXTI9_5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI9_5_IRQHandler(void)
{
}
 8003a34:	4770      	bx	lr
 8003a36:	46c0      	nop			(mov r8, r8)

08003a38 <TIM1_BRK_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_BRK_IRQHandler(void)
{
}
 8003a38:	4770      	bx	lr
 8003a3a:	46c0      	nop			(mov r8, r8)

08003a3c <TIM1_UP_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
}
 8003a3c:	4770      	bx	lr
 8003a3e:	46c0      	nop			(mov r8, r8)

08003a40 <TIM1_TRG_COM_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_TRG_COM_IRQHandler(void)
{
}
 8003a40:	4770      	bx	lr
 8003a42:	46c0      	nop			(mov r8, r8)

08003a44 <TIM1_CC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_CC_IRQHandler(void)
{
}
 8003a44:	4770      	bx	lr
 8003a46:	46c0      	nop			(mov r8, r8)

08003a48 <TIM3_IRQHandler>:
* Return         : None
*******************************************************************************/
void TIM3_IRQHandler(void)
{

}
 8003a48:	4770      	bx	lr
 8003a4a:	46c0      	nop			(mov r8, r8)

08003a4c <TIM4_IRQHandler>:
* Return         : None
*******************************************************************************/
void TIM4_IRQHandler(void)
{
//	ISR_ADC_CONVERT_START(); // ADC TIMING
}
 8003a4c:	4770      	bx	lr
 8003a4e:	46c0      	nop			(mov r8, r8)

08003a50 <I2C1_EV_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_EV_IRQHandler(void)
{
}
 8003a50:	4770      	bx	lr
 8003a52:	46c0      	nop			(mov r8, r8)

08003a54 <I2C1_ER_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_ER_IRQHandler(void)
{
}
 8003a54:	4770      	bx	lr
 8003a56:	46c0      	nop			(mov r8, r8)

08003a58 <I2C2_EV_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_EV_IRQHandler(void)
{
}
 8003a58:	4770      	bx	lr
 8003a5a:	46c0      	nop			(mov r8, r8)

08003a5c <I2C2_ER_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_ER_IRQHandler(void)
{
}
 8003a5c:	4770      	bx	lr
 8003a5e:	46c0      	nop			(mov r8, r8)

08003a60 <SPI1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SPI1_IRQHandler(void)
{
}
 8003a60:	4770      	bx	lr
 8003a62:	46c0      	nop			(mov r8, r8)

08003a64 <SPI2_IRQHandler>:
		Push_SPI_Data( SPI_I2S_ReceiveData(SPI2) );

	}
*/

}
 8003a64:	4770      	bx	lr
 8003a66:	46c0      	nop			(mov r8, r8)

08003a68 <USART2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USART2_IRQHandler(void)
{
}
 8003a68:	4770      	bx	lr
 8003a6a:	46c0      	nop			(mov r8, r8)

08003a6c <EXTI15_10_IRQHandler>:
* Return         : None
*******************************************************************************/
void EXTI15_10_IRQHandler(void)
{

}
 8003a6c:	4770      	bx	lr
 8003a6e:	46c0      	nop			(mov r8, r8)

08003a70 <RTCAlarm_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void RTCAlarm_IRQHandler(void)
{
}
 8003a70:	4770      	bx	lr
 8003a72:	46c0      	nop			(mov r8, r8)

08003a74 <USBWakeUp_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USBWakeUp_IRQHandler(void)
{
}
 8003a74:	4770      	bx	lr
 8003a76:	46c0      	nop			(mov r8, r8)

08003a78 <TIM8_BRK_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_BRK_IRQHandler(void)
{
}
 8003a78:	4770      	bx	lr
 8003a7a:	46c0      	nop			(mov r8, r8)

08003a7c <TIM8_UP_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_UP_IRQHandler(void)
{
}
 8003a7c:	4770      	bx	lr
 8003a7e:	46c0      	nop			(mov r8, r8)

08003a80 <TIM8_TRG_COM_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_TRG_COM_IRQHandler(void)
{
}
 8003a80:	4770      	bx	lr
 8003a82:	46c0      	nop			(mov r8, r8)

08003a84 <TIM8_CC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_CC_IRQHandler(void)
{
}
 8003a84:	4770      	bx	lr
 8003a86:	46c0      	nop			(mov r8, r8)

08003a88 <ADC3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void ADC3_IRQHandler(void)
{
}
 8003a88:	4770      	bx	lr
 8003a8a:	46c0      	nop			(mov r8, r8)

08003a8c <FSMC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void FSMC_IRQHandler(void)
{
}
 8003a8c:	4770      	bx	lr
 8003a8e:	46c0      	nop			(mov r8, r8)

08003a90 <SDIO_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SDIO_IRQHandler(void)
{
}
 8003a90:	4770      	bx	lr
 8003a92:	46c0      	nop			(mov r8, r8)

08003a94 <TIM5_IRQHandler>:
* Return         : None
*******************************************************************************/
void TIM5_IRQHandler(void)
{
//	TimerInterrupt();  // MOTION, LED, CALLBACK
}
 8003a94:	4770      	bx	lr
 8003a96:	46c0      	nop			(mov r8, r8)

08003a98 <SPI3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SPI3_IRQHandler(void)
{
}
 8003a98:	4770      	bx	lr
 8003a9a:	46c0      	nop			(mov r8, r8)

08003a9c <UART4_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void UART4_IRQHandler(void)
{
}
 8003a9c:	4770      	bx	lr
 8003a9e:	46c0      	nop			(mov r8, r8)

08003aa0 <UART5_IRQHandler>:
*******************************************************************************/
void UART5_IRQHandler(void)
{
//	RxD2Interrupt();
	//__ISR_USART_ZIGBEE();
}
 8003aa0:	4770      	bx	lr
 8003aa2:	46c0      	nop			(mov r8, r8)

08003aa4 <TIM6_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM6_IRQHandler(void)
{
}
 8003aa4:	4770      	bx	lr
 8003aa6:	46c0      	nop			(mov r8, r8)

08003aa8 <TIM7_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM7_IRQHandler(void)
{
}
 8003aa8:	4770      	bx	lr
 8003aaa:	46c0      	nop			(mov r8, r8)

08003aac <DMA2_Channel1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel1_IRQHandler(void)
{
}
 8003aac:	4770      	bx	lr
 8003aae:	46c0      	nop			(mov r8, r8)

08003ab0 <DMA2_Channel2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel2_IRQHandler(void)
{
}
 8003ab0:	4770      	bx	lr
 8003ab2:	46c0      	nop			(mov r8, r8)

08003ab4 <DMA2_Channel3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel3_IRQHandler(void)
{
}
 8003ab4:	4770      	bx	lr
 8003ab6:	46c0      	nop			(mov r8, r8)

08003ab8 <DMA2_Channel4_5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel4_5_IRQHandler(void)
{
}
 8003ab8:	4770      	bx	lr
 8003aba:	46c0      	nop			(mov r8, r8)

08003abc <USART3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART3_IRQHandler(void)
{
 8003abc:	b500      	push	{lr}
 8003abe:	b081      	sub	sp, #4
	RxD1Interrupt();
 8003ac0:	f7ff fbd2 	bl	8003268 <RxD1Interrupt>
	//__ISR_USART_PC();
}
 8003ac4:	b001      	add	sp, #4
 8003ac6:	bd00      	pop	{pc}

08003ac8 <USART1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART1_IRQHandler(void)
{
 8003ac8:	b500      	push	{lr}
 8003aca:	b081      	sub	sp, #4
	RxD0Interrupt();
 8003acc:	f7ff fbb0 	bl	8003230 <RxD0Interrupt>
}
 8003ad0:	b001      	add	sp, #4
 8003ad2:	bd00      	pop	{pc}

08003ad4 <TIM2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM2_IRQHandler(void)
{
 8003ad4:	b500      	push	{lr}
 8003ad6:	b081      	sub	sp, #4
	TimerInterrupt_1ms();
 8003ad8:	f7ff fc38 	bl	800334c <TimerInterrupt_1ms>
}
 8003adc:	b001      	add	sp, #4
 8003ade:	bd00      	pop	{pc}

08003ae0 <SysTickHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SysTickHandler(void)
{
 8003ae0:	b500      	push	{lr}
 8003ae2:	b081      	sub	sp, #4
	__ISR_DELAY();
 8003ae4:	f7ff fb5a 	bl	800319c <__ISR_DELAY>
}
 8003ae8:	b001      	add	sp, #4
 8003aea:	bd00      	pop	{pc}

08003aec <dxl_hal_timeout>:
	//exceed range of int...
	StartDiscount(NumRcvByte*100);
}

int dxl_hal_timeout(void)
{
 8003aec:	b500      	push	{lr}
 8003aee:	b081      	sub	sp, #4
	// Check timeout
	// Return: 0 is false, 1 is true(timeout occurred)

	return CheckTimeOut();
 8003af0:	f7ff fb94 	bl	800321c <CheckTimeOut>
}
 8003af4:	b001      	add	sp, #4
 8003af6:	bd00      	pop	{pc}

08003af8 <dxl_hal_set_timeout>:

	return numPacket;
}

void dxl_hal_set_timeout( int NumRcvByte )
{
 8003af8:	b500      	push	{lr}
 8003afa:	4603      	mov	r3, r0
	// Start stop watch
	// NumRcvByte: number of recieving data(to calculate maximum waiting time)

	//exceed range of int...
	StartDiscount(NumRcvByte*100);
 8003afc:	2064      	movs	r0, #100

	return numPacket;
}

void dxl_hal_set_timeout( int NumRcvByte )
{
 8003afe:	b081      	sub	sp, #4
	// Start stop watch
	// NumRcvByte: number of recieving data(to calculate maximum waiting time)

	//exceed range of int...
	StartDiscount(NumRcvByte*100);
 8003b00:	fb00 f003 	mul.w	r0, r0, r3
 8003b04:	f7ff fb84 	bl	8003210 <StartDiscount>
}
 8003b08:	b001      	add	sp, #4
 8003b0a:	bd00      	pop	{pc}

08003b0c <dxl_hal_rx>:

	return numPacket;
}

int dxl_hal_rx( unsigned char *pPacket, int numPacket )
{
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	4606      	mov	r6, r0
 8003b10:	460d      	mov	r5, r1
 8003b12:	2400      	movs	r4, #0
 8003b14:	e009      	b.n	8003b2a <dxl_hal_rx+0x1e>
	// Return: number of data received. -1 is error.

	unsigned char i;
	for( i=0 ; i<numPacket ; i++ )
	{
		if (CheckNewArrive())
 8003b16:	f7ff fb57 	bl	80031c8 <CheckNewArrive>
 8003b1a:	b908      	cbnz	r0, 8003b20 <dxl_hal_rx+0x14>
 8003b1c:	4625      	mov	r5, r4
 8003b1e:	e006      	b.n	8003b2e <dxl_hal_rx+0x22>
			pPacket[i] =  RxDByte_DXL();
 8003b20:	f7ff fb5e 	bl	80031e0 <RxDByte_DXL>
	// *pPacket: data array pointer
	// numPacket: number of data array
	// Return: number of data received. -1 is error.

	unsigned char i;
	for( i=0 ; i<numPacket ; i++ )
 8003b24:	1c63      	adds	r3, r4, #1
	{
		if (CheckNewArrive())
			pPacket[i] =  RxDByte_DXL();
 8003b26:	5530      	strb	r0, [r6, r4]
	// *pPacket: data array pointer
	// numPacket: number of data array
	// Return: number of data received. -1 is error.

	unsigned char i;
	for( i=0 ; i<numPacket ; i++ )
 8003b28:	b2dc      	uxtb	r4, r3
 8003b2a:	42ac      	cmp	r4, r5
 8003b2c:	dbf3      	blt.n	8003b16 <dxl_hal_rx+0xa>
		else
			return i;
	}

	return numPacket;
}
 8003b2e:	4628      	mov	r0, r5
 8003b30:	bd70      	pop	{r4, r5, r6, pc}
 8003b32:	46c0      	nop			(mov r8, r8)

08003b34 <dxl_hal_tx>:

	ClearBuffer256();
}

int dxl_hal_tx( unsigned char *pPacket, int numPacket )
{
 8003b34:	b570      	push	{r4, r5, r6, lr}
 8003b36:	4606      	mov	r6, r0
 8003b38:	460d      	mov	r5, r1
 8003b3a:	2400      	movs	r4, #0
 8003b3c:	e004      	b.n	8003b48 <dxl_hal_tx+0x14>
	// numPacket: number of data array
	// Return: number of data transmitted. -1 is error.

	unsigned char i;
	for(i=0 ; i<numPacket; i++  )
		TxDByte_DXL(pPacket[i]);
 8003b3e:	5d30      	ldrb	r0, [r6, r4]
 8003b40:	f7ff fbc2 	bl	80032c8 <TxDByte_DXL>
	// *pPacket: data array pointer
	// numPacket: number of data array
	// Return: number of data transmitted. -1 is error.

	unsigned char i;
	for(i=0 ; i<numPacket; i++  )
 8003b44:	1c63      	adds	r3, r4, #1
 8003b46:	b2dc      	uxtb	r4, r3
 8003b48:	42ac      	cmp	r4, r5
 8003b4a:	dbf8      	blt.n	8003b3e <dxl_hal_tx+0xa>
		TxDByte_DXL(pPacket[i]);

	return numPacket;
}
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	bd70      	pop	{r4, r5, r6, pc}

08003b50 <dxl_hal_clear>:
	/* Disable the USART1 */
	DisableUSART1();
}

void dxl_hal_clear(void)
{
 8003b50:	b500      	push	{lr}
 8003b52:	b081      	sub	sp, #4
	// Clear communication buffer

	ClearBuffer256();
 8003b54:	f7ff fb2c 	bl	80031b0 <ClearBuffer256>
}
 8003b58:	b001      	add	sp, #4
 8003b5a:	bd00      	pop	{pc}

08003b5c <dxl_hal_close>:
	USART1_Configuration(baudrate);
	return 1;
}

void dxl_hal_close()
{
 8003b5c:	b500      	push	{lr}
 8003b5e:	b081      	sub	sp, #4
	// Closing device

	/* Disable the USART1 */
	DisableUSART1();
 8003b60:	f7ff fbd4 	bl	800330c <DisableUSART1>
}
 8003b64:	b001      	add	sp, #4
 8003b66:	bd00      	pop	{pc}

08003b68 <dxl_hal_open>:
#include "dxl_hal.h"
#include "stm32f10x_lib.h"


int dxl_hal_open( int devIndex, int baudrate )
{
 8003b68:	b500      	push	{lr}
	// Opening device
	// devIndex: Device index
	// baudrate: Real baudrate (ex> 115200, 57600, 38400...)
	// Return: 0(Failed), 1(Succeed)

	USART1_Configuration(baudrate);
 8003b6a:	4608      	mov	r0, r1
#include "dxl_hal.h"
#include "stm32f10x_lib.h"


int dxl_hal_open( int devIndex, int baudrate )
{
 8003b6c:	b081      	sub	sp, #4
	// Opening device
	// devIndex: Device index
	// baudrate: Real baudrate (ex> 115200, 57600, 38400...)
	// Return: 0(Failed), 1(Succeed)

	USART1_Configuration(baudrate);
 8003b6e:	f7ff fcb1 	bl	80034d4 <USART1_Configuration>
	return 1;
}
 8003b72:	2001      	movs	r0, #1
 8003b74:	b001      	add	sp, #4
 8003b76:	bd00      	pop	{pc}

08003b78 <dxl_get_result>:


}

int dxl_get_result()
{
 8003b78:	4b01      	ldr	r3, [pc, #4]	(8003b80 <dxl_get_result+0x8>)
 8003b7a:	6818      	ldr	r0, [r3, #0]
	return gbCommStatus;
}
 8003b7c:	4770      	bx	lr
 8003b7e:	46c0      	nop			(mov r8, r8)
 8003b80:	20000028 	.word	0x20000028

08003b84 <dxl_set_txpacket_id>:

void dxl_set_txpacket_id( int id )
{
	gbInstructionPacket[ID] = (unsigned char)id;
 8003b84:	4b01      	ldr	r3, [pc, #4]	(8003b8c <dxl_set_txpacket_id+0x8>)
 8003b86:	7098      	strb	r0, [r3, #2]
}
 8003b88:	4770      	bx	lr
 8003b8a:	46c0      	nop			(mov r8, r8)
 8003b8c:	20000188 	.word	0x20000188

08003b90 <dxl_set_txpacket_instruction>:

void dxl_set_txpacket_instruction( int instruction )
{
	gbInstructionPacket[INSTRUCTION] = (unsigned char)instruction;
 8003b90:	4b01      	ldr	r3, [pc, #4]	(8003b98 <dxl_set_txpacket_instruction+0x8>)
 8003b92:	7118      	strb	r0, [r3, #4]
}
 8003b94:	4770      	bx	lr
 8003b96:	46c0      	nop			(mov r8, r8)
 8003b98:	20000188 	.word	0x20000188

08003b9c <dxl_set_txpacket_parameter>:

void dxl_set_txpacket_parameter( int index, int value )
{
	gbInstructionPacket[PARAMETER+index] = (unsigned char)value;
 8003b9c:	4b01      	ldr	r3, [pc, #4]	(8003ba4 <dxl_set_txpacket_parameter+0x8>)
 8003b9e:	181b      	adds	r3, r3, r0
 8003ba0:	7159      	strb	r1, [r3, #5]
}
 8003ba2:	4770      	bx	lr
 8003ba4:	20000188 	.word	0x20000188

08003ba8 <dxl_set_txpacket_length>:

void dxl_set_txpacket_length( int length )
{
	gbInstructionPacket[LENGTH] = (unsigned char)length;
 8003ba8:	4b01      	ldr	r3, [pc, #4]	(8003bb0 <dxl_set_txpacket_length+0x8>)
 8003baa:	70d8      	strb	r0, [r3, #3]
}
 8003bac:	4770      	bx	lr
 8003bae:	46c0      	nop			(mov r8, r8)
 8003bb0:	20000188 	.word	0x20000188

08003bb4 <dxl_get_rxpacket_error>:

int dxl_get_rxpacket_error( int errbit )
{
 8003bb4:	4b03      	ldr	r3, [pc, #12]	(8003bc4 <dxl_get_rxpacket_error+0x10>)
 8003bb6:	791b      	ldrb	r3, [r3, #4]
 8003bb8:	4218      	tst	r0, r3
 8003bba:	bf0c      	ite	eq
 8003bbc:	2000      	moveq	r0, #0
 8003bbe:	2001      	movne	r0, #1
	if( gbStatusPacket[ERRBIT] & (unsigned char)errbit )
		return 1;

	return 0;
}
 8003bc0:	4770      	bx	lr
 8003bc2:	46c0      	nop			(mov r8, r8)
 8003bc4:	20000228 	.word	0x20000228

08003bc8 <dxl_get_rxpacket_length>:

int dxl_get_rxpacket_length()
{
 8003bc8:	4b01      	ldr	r3, [pc, #4]	(8003bd0 <dxl_get_rxpacket_length+0x8>)
 8003bca:	78d8      	ldrb	r0, [r3, #3]
	return (int)gbStatusPacket[LENGTH];
}
 8003bcc:	4770      	bx	lr
 8003bce:	46c0      	nop			(mov r8, r8)
 8003bd0:	20000228 	.word	0x20000228

08003bd4 <dxl_get_rxpacket_parameter>:

int dxl_get_rxpacket_parameter( int index )
{
 8003bd4:	4b01      	ldr	r3, [pc, #4]	(8003bdc <dxl_get_rxpacket_parameter+0x8>)
 8003bd6:	181b      	adds	r3, r3, r0
 8003bd8:	7958      	ldrb	r0, [r3, #5]
	return (int)gbStatusPacket[PARAMETER+index];
}
 8003bda:	4770      	bx	lr
 8003bdc:	20000228 	.word	0x20000228

08003be0 <dxl_makeword>:
int dxl_makeword( int lowbyte, int highbyte )
{
	unsigned short word;

	word = highbyte;
	word = word << 8;
 8003be0:	eb00 2001 	add.w	r0, r0, r1, lsl #8
 8003be4:	b280      	uxth	r0, r0
	word = word + lowbyte;
	return (int)word;
}
 8003be6:	4770      	bx	lr

08003be8 <dxl_get_lowbyte>:

int dxl_get_lowbyte( int word )
{
 8003be8:	b2c0      	uxtb	r0, r0
	unsigned short temp;

	temp = word & 0xff;
	return (int)temp;
}
 8003bea:	4770      	bx	lr

08003bec <dxl_get_highbyte>:

int dxl_get_highbyte( int word )
{
	unsigned short temp;

	temp = word & 0xff00;
 8003bec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8003bf0:	0a00      	lsrs	r0, r0, #8
	temp = temp >> 8;
	return (int)temp;
}
 8003bf2:	4770      	bx	lr

08003bf4 <dxl_rx_packet>:

	gbCommStatus = COMM_TXSUCCESS;
}

void dxl_rx_packet()
{
 8003bf4:	b530      	push	{r4, r5, lr}
	unsigned char i, j, nRead;
	unsigned char checksum = 0;

	if( giBusUsing == 0 )
 8003bf6:	4953      	ldr	r1, [pc, #332]	(8003d44 <dxl_rx_packet+0x150>)

	gbCommStatus = COMM_TXSUCCESS;
}

void dxl_rx_packet()
{
 8003bf8:	b081      	sub	sp, #4
	unsigned char i, j, nRead;
	unsigned char checksum = 0;

	if( giBusUsing == 0 )
 8003bfa:	680b      	ldr	r3, [r1, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 809f 	beq.w	8003d40 <dxl_rx_packet+0x14c>
		return;

	if( gbInstructionPacket[ID] == BROADCAST_ID )
 8003c02:	4b51      	ldr	r3, [pc, #324]	(8003d48 <dxl_rx_packet+0x154>)
 8003c04:	4a51      	ldr	r2, [pc, #324]	(8003d4c <dxl_rx_packet+0x158>)
 8003c06:	789b      	ldrb	r3, [r3, #2]
 8003c08:	2bfe      	cmp	r3, #254
 8003c0a:	f000 8095 	beq.w	8003d38 <dxl_rx_packet+0x144>
		gbCommStatus = COMM_RXSUCCESS;
		giBusUsing = 0;
		return;
	}
	
	if( gbCommStatus == COMM_TXSUCCESS )
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	b922      	cbnz	r2, 8003c1c <dxl_rx_packet+0x28>
	{
		gbRxGetLength = 0;
 8003c12:	4b4f      	ldr	r3, [pc, #316]	(8003d50 <dxl_rx_packet+0x15c>)
 8003c14:	701a      	strb	r2, [r3, #0]
		gbRxPacketLength = 6;
 8003c16:	4b4f      	ldr	r3, [pc, #316]	(8003d54 <dxl_rx_packet+0x160>)
 8003c18:	2206      	movs	r2, #6
 8003c1a:	701a      	strb	r2, [r3, #0]
	}

	nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
 8003c1c:	4d4c      	ldr	r5, [pc, #304]	(8003d50 <dxl_rx_packet+0x15c>)
 8003c1e:	4c4d      	ldr	r4, [pc, #308]	(8003d54 <dxl_rx_packet+0x160>)
 8003c20:	782b      	ldrb	r3, [r5, #0]
 8003c22:	7821      	ldrb	r1, [r4, #0]
 8003c24:	484c      	ldr	r0, [pc, #304]	(8003d58 <dxl_rx_packet+0x164>)
 8003c26:	1ac9      	subs	r1, r1, r3
 8003c28:	18c0      	adds	r0, r0, r3
 8003c2a:	f7ff ff6f 	bl	8003b0c <dxl_hal_rx>
/*
	TxDByte16(nRead);
	TxDByte_PC('\r');
	TxDByte_PC('\n');
*/
	gbRxGetLength += nRead;
 8003c2e:	782b      	ldrb	r3, [r5, #0]
 8003c30:	18c0      	adds	r0, r0, r3
	if( gbRxGetLength < gbRxPacketLength )
 8003c32:	7823      	ldrb	r3, [r4, #0]
/*
	TxDByte16(nRead);
	TxDByte_PC('\r');
	TxDByte_PC('\n');
*/
	gbRxGetLength += nRead;
 8003c34:	b2c0      	uxtb	r0, r0
	if( gbRxGetLength < gbRxPacketLength )
 8003c36:	4283      	cmp	r3, r0
/*
	TxDByte16(nRead);
	TxDByte_PC('\r');
	TxDByte_PC('\n');
*/
	gbRxGetLength += nRead;
 8003c38:	7028      	strb	r0, [r5, #0]
	if( gbRxGetLength < gbRxPacketLength )
 8003c3a:	d903      	bls.n	8003c44 <dxl_rx_packet+0x50>
	{
		if( dxl_hal_timeout() == 1 )
 8003c3c:	f7ff ff56 	bl	8003aec <dxl_hal_timeout>
 8003c40:	2801      	cmp	r0, #1
 8003c42:	d008      	beq.n	8003c56 <dxl_rx_packet+0x62>
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 8003c44:	4b42      	ldr	r3, [pc, #264]	(8003d50 <dxl_rx_packet+0x15c>)
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
 8003c46:	2000      	movs	r0, #0
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 8003c48:	781a      	ldrb	r2, [r3, #0]
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
 8003c4a:	4943      	ldr	r1, [pc, #268]	(8003d58 <dxl_rx_packet+0x164>)
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 8003c4c:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
 8003c50:	f1a2 0e02 	sub.w	lr, r2, #2	; 0x2
 8003c54:	e019      	b.n	8003c8a <dxl_rx_packet+0x96>
	{
		if( dxl_hal_timeout() == 1 )
		{


			if(gbRxGetLength == 0)
 8003c56:	782b      	ldrb	r3, [r5, #0]
 8003c58:	4a3c      	ldr	r2, [pc, #240]	(8003d4c <dxl_rx_packet+0x158>)
 8003c5a:	b90b      	cbnz	r3, 8003c60 <dxl_rx_packet+0x6c>
				gbCommStatus = COMM_RXTIMEOUT;
 8003c5c:	2306      	movs	r3, #6
 8003c5e:	e000      	b.n	8003c62 <dxl_rx_packet+0x6e>
			else
				gbCommStatus = COMM_RXCORRUPT;
 8003c60:	2307      	movs	r3, #7
 8003c62:	6013      	str	r3, [r2, #0]
			giBusUsing = 0;
 8003c64:	2200      	movs	r2, #0
 8003c66:	4b37      	ldr	r3, [pc, #220]	(8003d44 <dxl_rx_packet+0x150>)
 8003c68:	e04f      	b.n	8003d0a <dxl_rx_packet+0x116>
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
 8003c6a:	5c0b      	ldrb	r3, [r1, r0]
 8003c6c:	2bff      	cmp	r3, #255
 8003c6e:	d104      	bne.n	8003c7a <dxl_rx_packet+0x86>
 8003c70:	eb01 0300 	add.w	r3, r1, r0
 8003c74:	785b      	ldrb	r3, [r3, #1]
 8003c76:	2bff      	cmp	r3, #255
 8003c78:	d009      	beq.n	8003c8e <dxl_rx_packet+0x9a>
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
 8003c7a:	4570      	cmp	r0, lr
 8003c7c:	d103      	bne.n	8003c86 <dxl_rx_packet+0x92>
 8003c7e:	f811 300c 	ldrb.w	r3, [r1, ip]
 8003c82:	2bff      	cmp	r3, #255
 8003c84:	d003      	beq.n	8003c8e <dxl_rx_packet+0x9a>
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 8003c86:	1c43      	adds	r3, r0, #1
 8003c88:	b2d8      	uxtb	r0, r3
 8003c8a:	4560      	cmp	r0, ip
 8003c8c:	dbed      	blt.n	8003c6a <dxl_rx_packet+0x76>
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
		{
			break;
		}
	}	
	if( i > 0 )
 8003c8e:	b188      	cbz	r0, 8003cb4 <dxl_rx_packet+0xc0>
 8003c90:	2100      	movs	r1, #0
	{
		for( j=0; j<(gbRxGetLength-i); j++ )
 8003c92:	ebc0 0c02 	rsb	ip, r0, r2
			gbStatusPacket[j] = gbStatusPacket[j + i];
 8003c96:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 8003d58 <dxl_rx_packet+0x164>
 8003c9a:	e006      	b.n	8003caa <dxl_rx_packet+0xb6>
 8003c9c:	eb0e 0301 	add.w	r3, lr, r1
 8003ca0:	5c1b      	ldrb	r3, [r3, r0]
 8003ca2:	f80e 3001 	strb.w	r3, [lr, r1]
			break;
		}
	}	
	if( i > 0 )
	{
		for( j=0; j<(gbRxGetLength-i); j++ )
 8003ca6:	1c4b      	adds	r3, r1, #1
 8003ca8:	b2d9      	uxtb	r1, r3
 8003caa:	4561      	cmp	r1, ip
 8003cac:	dbf6      	blt.n	8003c9c <dxl_rx_packet+0xa8>
			gbStatusPacket[j] = gbStatusPacket[j + i];
			
		gbRxGetLength -= i;		
 8003cae:	4b28      	ldr	r3, [pc, #160]	(8003d50 <dxl_rx_packet+0x15c>)
 8003cb0:	1a12      	subs	r2, r2, r0
 8003cb2:	701a      	strb	r2, [r3, #0]
	}

	if( gbRxGetLength < gbRxPacketLength )
 8003cb4:	4d26      	ldr	r5, [pc, #152]	(8003d50 <dxl_rx_packet+0x15c>)
 8003cb6:	4c27      	ldr	r4, [pc, #156]	(8003d54 <dxl_rx_packet+0x160>)
 8003cb8:	f895 c000 	ldrb.w	ip, [r5]
 8003cbc:	7823      	ldrb	r3, [r4, #0]
 8003cbe:	4563      	cmp	r3, ip
 8003cc0:	d821      	bhi.n	8003d06 <dxl_rx_packet+0x112>
		return;
	}


	// Check id pairing
	if( gbInstructionPacket[ID] != gbStatusPacket[ID])
 8003cc2:	4b21      	ldr	r3, [pc, #132]	(8003d48 <dxl_rx_packet+0x154>)
 8003cc4:	4824      	ldr	r0, [pc, #144]	(8003d58 <dxl_rx_packet+0x164>)
 8003cc6:	789a      	ldrb	r2, [r3, #2]
 8003cc8:	7883      	ldrb	r3, [r0, #2]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d003      	beq.n	8003cd6 <dxl_rx_packet+0xe2>
	{
		gbCommStatus = COMM_RXCORRUPT;
 8003cce:	4b1f      	ldr	r3, [pc, #124]	(8003d4c <dxl_rx_packet+0x158>)
 8003cd0:	2207      	movs	r2, #7
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	e7c6      	b.n	8003c64 <dxl_rx_packet+0x70>
		giBusUsing = 0;
		return;
	}
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
 8003cd6:	78c3      	ldrb	r3, [r0, #3]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	b2d9      	uxtb	r1, r3
	if( gbRxGetLength < gbRxPacketLength )
 8003cdc:	458c      	cmp	ip, r1
		gbCommStatus = COMM_RXCORRUPT;
		giBusUsing = 0;
		return;
	}
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
 8003cde:	7021      	strb	r1, [r4, #0]
	if( gbRxGetLength < gbRxPacketLength )
 8003ce0:	d20b      	bcs.n	8003cfa <dxl_rx_packet+0x106>
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
 8003ce2:	4460      	add	r0, ip
 8003ce4:	ebcc 0101 	rsb	r1, ip, r1
 8003ce8:	f7ff ff10 	bl	8003b0c <dxl_hal_rx>
		gbRxGetLength += nRead;
 8003cec:	782b      	ldrb	r3, [r5, #0]
 8003cee:	18c0      	adds	r0, r0, r3
		if( gbRxGetLength < gbRxPacketLength )
 8003cf0:	7823      	ldrb	r3, [r4, #0]
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
	if( gbRxGetLength < gbRxPacketLength )
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
		gbRxGetLength += nRead;
 8003cf2:	b2c0      	uxtb	r0, r0
		if( gbRxGetLength < gbRxPacketLength )
 8003cf4:	4283      	cmp	r3, r0
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
	if( gbRxGetLength < gbRxPacketLength )
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
		gbRxGetLength += nRead;
 8003cf6:	7028      	strb	r0, [r5, #0]
		if( gbRxGetLength < gbRxPacketLength )
 8003cf8:	d805      	bhi.n	8003d06 <dxl_rx_packet+0x112>
			return;
		}
	}

	// Check checksum
	for( i=0; i<(gbStatusPacket[LENGTH]+1); i++ )
 8003cfa:	4b17      	ldr	r3, [pc, #92]	(8003d58 <dxl_rx_packet+0x164>)
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	78d8      	ldrb	r0, [r3, #3]
 8003d00:	2200      	movs	r2, #0
 8003d02:	469c      	mov	ip, r3
 8003d04:	e00a      	b.n	8003d1c <dxl_rx_packet+0x128>
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
		gbRxGetLength += nRead;
		if( gbRxGetLength < gbRxPacketLength )
		{
			gbCommStatus = COMM_RXWAITING;
 8003d06:	4b11      	ldr	r3, [pc, #68]	(8003d4c <dxl_rx_packet+0x158>)
 8003d08:	2205      	movs	r2, #5
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e018      	b.n	8003d40 <dxl_rx_packet+0x14c>
		}
	}

	// Check checksum
	for( i=0; i<(gbStatusPacket[LENGTH]+1); i++ )
		checksum += gbStatusPacket[i+2];
 8003d0e:	eb0c 0301 	add.w	r3, ip, r1
 8003d12:	789b      	ldrb	r3, [r3, #2]
 8003d14:	4413      	add	r3, r2
 8003d16:	b2da      	uxtb	r2, r3
			return;
		}
	}

	// Check checksum
	for( i=0; i<(gbStatusPacket[LENGTH]+1); i++ )
 8003d18:	1c4b      	adds	r3, r1, #1
 8003d1a:	b2d9      	uxtb	r1, r3
 8003d1c:	4288      	cmp	r0, r1
 8003d1e:	daf6      	bge.n	8003d0e <dxl_rx_packet+0x11a>
		checksum += gbStatusPacket[i+2];
	checksum = ~checksum;

	if( gbStatusPacket[gbStatusPacket[LENGTH]+3] != checksum )
 8003d20:	4b0d      	ldr	r3, [pc, #52]	(8003d58 <dxl_rx_packet+0x164>)
 8003d22:	ea6f 0202 	mvn.w	r2, r2
 8003d26:	181b      	adds	r3, r3, r0
 8003d28:	78db      	ldrb	r3, [r3, #3]
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	4905      	ldr	r1, [pc, #20]	(8003d44 <dxl_rx_packet+0x150>)
 8003d30:	4a06      	ldr	r2, [pc, #24]	(8003d4c <dxl_rx_packet+0x158>)
 8003d32:	d001      	beq.n	8003d38 <dxl_rx_packet+0x144>
	{
		gbCommStatus = COMM_RXCORRUPT;
 8003d34:	2307      	movs	r3, #7
 8003d36:	e000      	b.n	8003d3a <dxl_rx_packet+0x146>
		giBusUsing = 0;
		return;
	}

	gbCommStatus = COMM_RXSUCCESS;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	6013      	str	r3, [r2, #0]
	giBusUsing = 0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	600b      	str	r3, [r1, #0]
}
 8003d40:	b001      	add	sp, #4
 8003d42:	bd30      	pop	{r4, r5, pc}
 8003d44:	20000270 	.word	0x20000270
 8003d48:	20000188 	.word	0x20000188
 8003d4c:	20000028 	.word	0x20000028
 8003d50:	2000026f 	.word	0x2000026f
 8003d54:	2000026e 	.word	0x2000026e
 8003d58:	20000228 	.word	0x20000228

08003d5c <dxl_tx_packet>:
{
	dxl_hal_close();
}

void dxl_tx_packet()
{
 8003d5c:	b530      	push	{r4, r5, lr}
	unsigned char i;
	unsigned char TxNumByte, RealTxNumByte;
	unsigned char checksum = 0;

	if( giBusUsing == 1 )
 8003d5e:	492d      	ldr	r1, [pc, #180]	(8003e14 <dxl_tx_packet+0xb8>)
{
	dxl_hal_close();
}

void dxl_tx_packet()
{
 8003d60:	b081      	sub	sp, #4
	unsigned char i;
	unsigned char TxNumByte, RealTxNumByte;
	unsigned char checksum = 0;

	if( giBusUsing == 1 )
 8003d62:	680b      	ldr	r3, [r1, #0]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d052      	beq.n	8003e0e <dxl_tx_packet+0xb2>
	


	giBusUsing = 1;

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
 8003d68:	482b      	ldr	r0, [pc, #172]	(8003e18 <dxl_tx_packet+0xbc>)
	if( giBusUsing == 1 )
		return;
	


	giBusUsing = 1;
 8003d6a:	2301      	movs	r3, #1

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
 8003d6c:	f890 c003 	ldrb.w	ip, [r0, #3]
	if( giBusUsing == 1 )
		return;
	


	giBusUsing = 1;
 8003d70:	600b      	str	r3, [r1, #0]

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
 8003d72:	f1bc 0f98 	cmp.w	ip, #152	; 0x98
 8003d76:	d80b      	bhi.n	8003d90 <dxl_tx_packet+0x34>
		gbCommStatus = COMM_TXERROR;
		giBusUsing = 0;
		return;
	}

	if( gbInstructionPacket[INSTRUCTION] != INST_PING
 8003d78:	7903      	ldrb	r3, [r0, #4]
 8003d7a:	1e5a      	subs	r2, r3, #1
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	3b83      	subs	r3, #131
 8003d80:	bf18      	it	ne
 8003d82:	2301      	movne	r3, #1
 8003d84:	2a05      	cmp	r2, #5
 8003d86:	bf94      	ite	ls
 8003d88:	2300      	movls	r3, #0
 8003d8a:	f003 0301 	andhi.w	r3, r3, #1	; 0x1
 8003d8e:	b12b      	cbz	r3, 8003d9c <dxl_tx_packet+0x40>
		&& gbInstructionPacket[INSTRUCTION] != INST_REG_WRITE
		&& gbInstructionPacket[INSTRUCTION] != INST_ACTION
		&& gbInstructionPacket[INSTRUCTION] != INST_RESET
		&& gbInstructionPacket[INSTRUCTION] != INST_SYNC_WRITE )
	{
		gbCommStatus = COMM_TXERROR;
 8003d90:	4a22      	ldr	r2, [pc, #136]	(8003e1c <dxl_tx_packet+0xc0>)
 8003d92:	2304      	movs	r3, #4
 8003d94:	6013      	str	r3, [r2, #0]
		giBusUsing = 0;
 8003d96:	2300      	movs	r3, #0
 8003d98:	600b      	str	r3, [r1, #0]
 8003d9a:	e038      	b.n	8003e0e <dxl_tx_packet+0xb2>
		return;
	}
	
	gbInstructionPacket[0] = 0xff;
 8003d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003da0:	7003      	strb	r3, [r0, #0]
	gbInstructionPacket[1] = 0xff;
 8003da2:	7043      	strb	r3, [r0, #1]
	for( i=0; i<(gbInstructionPacket[LENGTH]+1); i++ )
 8003da4:	2100      	movs	r1, #0
 8003da6:	2200      	movs	r2, #0
 8003da8:	e006      	b.n	8003db8 <dxl_tx_packet+0x5c>
		checksum += gbInstructionPacket[i+2];
 8003daa:	eb00 0301 	add.w	r3, r0, r1
 8003dae:	789b      	ldrb	r3, [r3, #2]
 8003db0:	4413      	add	r3, r2
 8003db2:	b2da      	uxtb	r2, r3
		return;
	}
	
	gbInstructionPacket[0] = 0xff;
	gbInstructionPacket[1] = 0xff;
	for( i=0; i<(gbInstructionPacket[LENGTH]+1); i++ )
 8003db4:	1c4b      	adds	r3, r1, #1
 8003db6:	b2d9      	uxtb	r1, r3
 8003db8:	458c      	cmp	ip, r1
 8003dba:	daf6      	bge.n	8003daa <dxl_tx_packet+0x4e>
		checksum += gbInstructionPacket[i+2];
	gbInstructionPacket[gbInstructionPacket[LENGTH]+3] = ~checksum;
 8003dbc:	4b16      	ldr	r3, [pc, #88]	(8003e18 <dxl_tx_packet+0xbc>)
 8003dbe:	ea6f 0202 	mvn.w	r2, r2
 8003dc2:	4463      	add	r3, ip
 8003dc4:	70da      	strb	r2, [r3, #3]
	
	if( gbCommStatus == COMM_RXTIMEOUT || gbCommStatus == COMM_RXCORRUPT )
 8003dc6:	4b15      	ldr	r3, [pc, #84]	(8003e1c <dxl_tx_packet+0xc0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3b06      	subs	r3, #6
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d801      	bhi.n	8003dd4 <dxl_tx_packet+0x78>
	{




		dxl_hal_clear();
 8003dd0:	f7ff febe 	bl	8003b50 <dxl_hal_clear>
	}

	TxNumByte = gbInstructionPacket[LENGTH] + 4;
 8003dd4:	4d10      	ldr	r5, [pc, #64]	(8003e18 <dxl_tx_packet+0xbc>)
 8003dd6:	78ec      	ldrb	r4, [r5, #3]
	RealTxNumByte = dxl_hal_tx( (unsigned char*)gbInstructionPacket, TxNumByte );
 8003dd8:	4628      	mov	r0, r5


		dxl_hal_clear();
	}

	TxNumByte = gbInstructionPacket[LENGTH] + 4;
 8003dda:	3404      	adds	r4, #4
 8003ddc:	b2e4      	uxtb	r4, r4
	RealTxNumByte = dxl_hal_tx( (unsigned char*)gbInstructionPacket, TxNumByte );
 8003dde:	4621      	mov	r1, r4
 8003de0:	f7ff fea8 	bl	8003b34 <dxl_hal_tx>

	if( TxNumByte != RealTxNumByte )
 8003de4:	b2c0      	uxtb	r0, r0
 8003de6:	4284      	cmp	r4, r0
 8003de8:	d005      	beq.n	8003df6 <dxl_tx_packet+0x9a>
	{

		gbCommStatus = COMM_TXFAIL;
 8003dea:	4b0c      	ldr	r3, [pc, #48]	(8003e1c <dxl_tx_packet+0xc0>)
 8003dec:	2202      	movs	r2, #2
 8003dee:	601a      	str	r2, [r3, #0]
		giBusUsing = 0;
 8003df0:	2200      	movs	r2, #0
 8003df2:	4b08      	ldr	r3, [pc, #32]	(8003e14 <dxl_tx_packet+0xb8>)
 8003df4:	e00a      	b.n	8003e0c <dxl_tx_packet+0xb0>
		return;
	}

	if( gbInstructionPacket[INSTRUCTION] == INST_READ )
 8003df6:	792b      	ldrb	r3, [r5, #4]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d102      	bne.n	8003e02 <dxl_tx_packet+0xa6>
		dxl_hal_set_timeout( gbInstructionPacket[PARAMETER+1] + 6 );
 8003dfc:	79a8      	ldrb	r0, [r5, #6]
 8003dfe:	3006      	adds	r0, #6
 8003e00:	e000      	b.n	8003e04 <dxl_tx_packet+0xa8>
	else
		dxl_hal_set_timeout( 6 );
 8003e02:	2006      	movs	r0, #6
 8003e04:	f7ff fe78 	bl	8003af8 <dxl_hal_set_timeout>

	gbCommStatus = COMM_TXSUCCESS;
 8003e08:	4b04      	ldr	r3, [pc, #16]	(8003e1c <dxl_tx_packet+0xc0>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
}
 8003e0e:	b001      	add	sp, #4
 8003e10:	bd30      	pop	{r4, r5, pc}
 8003e12:	46c0      	nop			(mov r8, r8)
 8003e14:	20000270 	.word	0x20000270
 8003e18:	20000188 	.word	0x20000188
 8003e1c:	20000028 	.word	0x20000028

08003e20 <dxl_txrx_packet>:
	gbCommStatus = COMM_RXSUCCESS;
	giBusUsing = 0;
}

void dxl_txrx_packet()
{
 8003e20:	b510      	push	{r4, lr}

	dxl_tx_packet();
 8003e22:	f7ff ff9b 	bl	8003d5c <dxl_tx_packet>

	if( gbCommStatus != COMM_TXSUCCESS )
 8003e26:	4a05      	ldr	r2, [pc, #20]	(8003e3c <dxl_txrx_packet+0x1c>)
 8003e28:	6813      	ldr	r3, [r2, #0]
 8003e2a:	b92b      	cbnz	r3, 8003e38 <dxl_txrx_packet+0x18>

	do{

		dxl_rx_packet();

	}while( gbCommStatus == COMM_RXWAITING );	
 8003e2c:	4614      	mov	r4, r2
	if( gbCommStatus != COMM_TXSUCCESS )
		return;	

	do{

		dxl_rx_packet();
 8003e2e:	f7ff fee1 	bl	8003bf4 <dxl_rx_packet>

	}while( gbCommStatus == COMM_RXWAITING );	
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	2b05      	cmp	r3, #5
 8003e36:	d0fa      	beq.n	8003e2e <dxl_txrx_packet+0xe>


}
 8003e38:	bd10      	pop	{r4, pc}
 8003e3a:	46c0      	nop			(mov r8, r8)
 8003e3c:	20000028 	.word	0x20000028

08003e40 <dxl_write_word>:

	return dxl_makeword((int)gbStatusPacket[PARAMETER], (int)gbStatusPacket[PARAMETER+1]);
}

void dxl_write_word( int id, int address, int value )
{
 8003e40:	b500      	push	{lr}
	while(giBusUsing);
 8003e42:	4b0b      	ldr	r3, [pc, #44]	(8003e70 <dxl_write_word+0x30>)

	return dxl_makeword((int)gbStatusPacket[PARAMETER], (int)gbStatusPacket[PARAMETER+1]);
}

void dxl_write_word( int id, int address, int value )
{
 8003e44:	b081      	sub	sp, #4
	while(giBusUsing);
 8003e46:	681b      	ldr	r3, [r3, #0]

	return dxl_makeword((int)gbStatusPacket[PARAMETER], (int)gbStatusPacket[PARAMETER+1]);
}

void dxl_write_word( int id, int address, int value )
{
 8003e48:	4694      	mov	ip, r2
	while(giBusUsing);
 8003e4a:	b97b      	cbnz	r3, 8003e6c <dxl_write_word+0x2c>

	gbInstructionPacket[ID] = (unsigned char)id;
 8003e4c:	4a09      	ldr	r2, [pc, #36]	(8003e74 <dxl_write_word+0x34>)
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	7113      	strb	r3, [r2, #4]

int dxl_get_lowbyte( int word )
{
	unsigned short temp;

	temp = word & 0xff;
 8003e52:	fa1f f38c 	uxth.w	r3, ip
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
 8003e56:	7193      	strb	r3, [r2, #6]
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
 8003e58:	0a1b      	lsrs	r3, r3, #8
 8003e5a:	71d3      	strb	r3, [r2, #7]
	gbInstructionPacket[LENGTH] = 5;
 8003e5c:	2305      	movs	r3, #5

void dxl_write_word( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8003e5e:	7090      	strb	r0, [r2, #2]
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 8003e60:	7151      	strb	r1, [r2, #5]
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
	gbInstructionPacket[LENGTH] = 5;
 8003e62:	70d3      	strb	r3, [r2, #3]
	
	dxl_txrx_packet();
 8003e64:	f7ff ffdc 	bl	8003e20 <dxl_txrx_packet>
}
 8003e68:	b001      	add	sp, #4
 8003e6a:	bd00      	pop	{pc}
 8003e6c:	e7fe      	b.n	8003e6c <dxl_write_word+0x2c>
 8003e6e:	46c0      	nop			(mov r8, r8)
 8003e70:	20000270 	.word	0x20000270
 8003e74:	20000188 	.word	0x20000188

08003e78 <dxl_read_word>:
	
	dxl_txrx_packet();
}

int dxl_read_word( int id, int address )
{
 8003e78:	b500      	push	{lr}
	while(giBusUsing);
 8003e7a:	4b0b      	ldr	r3, [pc, #44]	(8003ea8 <dxl_read_word+0x30>)
	
	dxl_txrx_packet();
}

int dxl_read_word( int id, int address )
{
 8003e7c:	b081      	sub	sp, #4
	while(giBusUsing);
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	b98b      	cbnz	r3, 8003ea6 <dxl_read_word+0x2e>

	gbInstructionPacket[ID] = (unsigned char)id;
 8003e82:	4a0a      	ldr	r2, [pc, #40]	(8003eac <dxl_read_word+0x34>)
	gbInstructionPacket[INSTRUCTION] = INST_READ;
 8003e84:	2302      	movs	r3, #2
 8003e86:	7113      	strb	r3, [r2, #4]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = 2;
 8003e88:	7193      	strb	r3, [r2, #6]
	gbInstructionPacket[LENGTH] = 4;
 8003e8a:	2304      	movs	r3, #4

int dxl_read_word( int id, int address )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8003e8c:	7090      	strb	r0, [r2, #2]
	gbInstructionPacket[INSTRUCTION] = INST_READ;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 8003e8e:	7151      	strb	r1, [r2, #5]
	gbInstructionPacket[PARAMETER+1] = 2;
	gbInstructionPacket[LENGTH] = 4;
 8003e90:	70d3      	strb	r3, [r2, #3]
	



	dxl_txrx_packet();
 8003e92:	f7ff ffc5 	bl	8003e20 <dxl_txrx_packet>

int dxl_makeword( int lowbyte, int highbyte )
{
	unsigned short word;

	word = highbyte;
 8003e96:	4b06      	ldr	r3, [pc, #24]	(8003eb0 <dxl_read_word+0x38>)
 8003e98:	799a      	ldrb	r2, [r3, #6]
	word = word << 8;
 8003e9a:	7958      	ldrb	r0, [r3, #5]
 8003e9c:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8003ea0:	b280      	uxth	r0, r0


	dxl_txrx_packet();

	return dxl_makeword((int)gbStatusPacket[PARAMETER], (int)gbStatusPacket[PARAMETER+1]);
}
 8003ea2:	b001      	add	sp, #4
 8003ea4:	bd00      	pop	{pc}
 8003ea6:	e7fe      	b.n	8003ea6 <dxl_read_word+0x2e>
 8003ea8:	20000270 	.word	0x20000270
 8003eac:	20000188 	.word	0x20000188
 8003eb0:	20000228 	.word	0x20000228

08003eb4 <dxl_write_byte>:

	return (int)gbStatusPacket[PARAMETER];
}

void dxl_write_byte( int id, int address, int value )
{
 8003eb4:	b500      	push	{lr}
	while(giBusUsing);
 8003eb6:	4b09      	ldr	r3, [pc, #36]	(8003edc <dxl_write_byte+0x28>)

	return (int)gbStatusPacket[PARAMETER];
}

void dxl_write_byte( int id, int address, int value )
{
 8003eb8:	b081      	sub	sp, #4
	while(giBusUsing);
 8003eba:	681b      	ldr	r3, [r3, #0]

	return (int)gbStatusPacket[PARAMETER];
}

void dxl_write_byte( int id, int address, int value )
{
 8003ebc:	4694      	mov	ip, r2
	while(giBusUsing);
 8003ebe:	b963      	cbnz	r3, 8003eda <dxl_write_byte+0x26>

	gbInstructionPacket[ID] = (unsigned char)id;
 8003ec0:	4b07      	ldr	r3, [pc, #28]	(8003ee0 <dxl_write_byte+0x2c>)
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	711a      	strb	r2, [r3, #4]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
	gbInstructionPacket[LENGTH] = 4;
 8003ec6:	2204      	movs	r2, #4

void dxl_write_byte( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8003ec8:	7098      	strb	r0, [r3, #2]
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 8003eca:	7159      	strb	r1, [r3, #5]
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
 8003ecc:	f883 c006 	strb.w	ip, [r3, #6]
	gbInstructionPacket[LENGTH] = 4;
 8003ed0:	70da      	strb	r2, [r3, #3]
	
	dxl_txrx_packet();
 8003ed2:	f7ff ffa5 	bl	8003e20 <dxl_txrx_packet>
}
 8003ed6:	b001      	add	sp, #4
 8003ed8:	bd00      	pop	{pc}
 8003eda:	e7fe      	b.n	8003eda <dxl_write_byte+0x26>
 8003edc:	20000270 	.word	0x20000270
 8003ee0:	20000188 	.word	0x20000188

08003ee4 <dxl_read_byte>:
	
	dxl_txrx_packet();
}

int dxl_read_byte( int id, int address )
{
 8003ee4:	b500      	push	{lr}
	while(giBusUsing);
 8003ee6:	4b0a      	ldr	r3, [pc, #40]	(8003f10 <dxl_read_byte+0x2c>)
	
	dxl_txrx_packet();
}

int dxl_read_byte( int id, int address )
{
 8003ee8:	b081      	sub	sp, #4
	while(giBusUsing);
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	b973      	cbnz	r3, 8003f0c <dxl_read_byte+0x28>

	gbInstructionPacket[ID] = (unsigned char)id;
 8003eee:	4a09      	ldr	r2, [pc, #36]	(8003f14 <dxl_read_byte+0x30>)
	gbInstructionPacket[INSTRUCTION] = INST_READ;
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	7113      	strb	r3, [r2, #4]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = 1;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	7193      	strb	r3, [r2, #6]
	gbInstructionPacket[LENGTH] = 4;
 8003ef8:	2304      	movs	r3, #4

int dxl_read_byte( int id, int address )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8003efa:	7090      	strb	r0, [r2, #2]
	gbInstructionPacket[INSTRUCTION] = INST_READ;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = 1;
	gbInstructionPacket[LENGTH] = 4;
 8003efc:	70d3      	strb	r3, [r2, #3]
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_READ;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 8003efe:	7151      	strb	r1, [r2, #5]
	gbInstructionPacket[PARAMETER+1] = 1;
	gbInstructionPacket[LENGTH] = 4;
	
	dxl_txrx_packet();
 8003f00:	f7ff ff8e 	bl	8003e20 <dxl_txrx_packet>
 8003f04:	4b04      	ldr	r3, [pc, #16]	(8003f18 <dxl_read_byte+0x34>)
 8003f06:	7958      	ldrb	r0, [r3, #5]

	return (int)gbStatusPacket[PARAMETER];
}
 8003f08:	b001      	add	sp, #4
 8003f0a:	bd00      	pop	{pc}
 8003f0c:	e7fe      	b.n	8003f0c <dxl_read_byte+0x28>
 8003f0e:	46c0      	nop			(mov r8, r8)
 8003f10:	20000270 	.word	0x20000270
 8003f14:	20000188 	.word	0x20000188
 8003f18:	20000228 	.word	0x20000228

08003f1c <dxl_ping>:
	temp = temp >> 8;
	return (int)temp;
}

void dxl_ping( int id )
{
 8003f1c:	b500      	push	{lr}
	while(giBusUsing);
 8003f1e:	4b07      	ldr	r3, [pc, #28]	(8003f3c <dxl_ping+0x20>)
	temp = temp >> 8;
	return (int)temp;
}

void dxl_ping( int id )
{
 8003f20:	b081      	sub	sp, #4
	while(giBusUsing);
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	b94b      	cbnz	r3, 8003f3a <dxl_ping+0x1e>

	gbInstructionPacket[ID] = (unsigned char)id;
 8003f26:	4b06      	ldr	r3, [pc, #24]	(8003f40 <dxl_ping+0x24>)
	gbInstructionPacket[INSTRUCTION] = INST_PING;
 8003f28:	2201      	movs	r2, #1
 8003f2a:	711a      	strb	r2, [r3, #4]
	gbInstructionPacket[LENGTH] = 2;
 8003f2c:	2202      	movs	r2, #2

void dxl_ping( int id )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8003f2e:	7098      	strb	r0, [r3, #2]
	gbInstructionPacket[INSTRUCTION] = INST_PING;
	gbInstructionPacket[LENGTH] = 2;
 8003f30:	70da      	strb	r2, [r3, #3]
	
	dxl_txrx_packet();
 8003f32:	f7ff ff75 	bl	8003e20 <dxl_txrx_packet>
}
 8003f36:	b001      	add	sp, #4
 8003f38:	bd00      	pop	{pc}
 8003f3a:	e7fe      	b.n	8003f3a <dxl_ping+0x1e>
 8003f3c:	20000270 	.word	0x20000270
 8003f40:	20000188 	.word	0x20000188

08003f44 <dxl_terminate>:

	return 1;
}

void dxl_terminate()
{
 8003f44:	b500      	push	{lr}
 8003f46:	b081      	sub	sp, #4
	dxl_hal_close();
 8003f48:	f7ff fe08 	bl	8003b5c <dxl_hal_close>
}
 8003f4c:	b001      	add	sp, #4
 8003f4e:	bd00      	pop	{pc}

08003f50 <dxl_initialize>:
int gbCommStatus = COMM_RXSUCCESS;
int giBusUsing = 0;


int dxl_initialize( int devIndex, int baudnum )
{
 8003f50:	b500      	push	{lr}
	int baudrate;
	baudrate = 2000000 / (baudnum + 1);
	
	if( dxl_hal_open(devIndex, baudrate) == 0 )
 8003f52:	4b09      	ldr	r3, [pc, #36]	(8003f78 <dxl_initialize+0x28>)
 8003f54:	3101      	adds	r1, #1
 8003f56:	fb93 f3f1 	sdiv	r3, r3, r1
int gbCommStatus = COMM_RXSUCCESS;
int giBusUsing = 0;


int dxl_initialize( int devIndex, int baudnum )
{
 8003f5a:	b081      	sub	sp, #4
	int baudrate;
	baudrate = 2000000 / (baudnum + 1);
	
	if( dxl_hal_open(devIndex, baudrate) == 0 )
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	f7ff fe03 	bl	8003b68 <dxl_hal_open>
 8003f62:	b130      	cbz	r0, 8003f72 <dxl_initialize+0x22>
		return 0;

	gbCommStatus = COMM_RXSUCCESS;
 8003f64:	4b05      	ldr	r3, [pc, #20]	(8003f7c <dxl_initialize+0x2c>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
	giBusUsing = 0;
 8003f6a:	4b05      	ldr	r3, [pc, #20]	(8003f80 <dxl_initialize+0x30>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	2001      	movs	r0, #1



	return 1;
}
 8003f72:	b001      	add	sp, #4
 8003f74:	bd00      	pop	{pc}
 8003f76:	46c0      	nop			(mov r8, r8)
 8003f78:	001e8480 	.word	0x001e8480
 8003f7c:	20000028 	.word	0x20000028
 8003f80:	20000270 	.word	0x20000270

08003f84 <FLASH_SetLatency>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Sets the Latency value */
  FLASH->ACR &= ACR_LATENCY_Mask;
 8003f84:	4a04      	ldr	r2, [pc, #16]	(8003f98 <FLASH_SetLatency+0x14>)
 8003f86:	6813      	ldr	r3, [r2, #0]
 8003f88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f8c:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_Latency;
 8003f8e:	6813      	ldr	r3, [r2, #0]
 8003f90:	4318      	orrs	r0, r3
 8003f92:	6010      	str	r0, [r2, #0]
}
 8003f94:	4770      	bx	lr
 8003f96:	46c0      	nop			(mov r8, r8)
 8003f98:	40022000 	.word	0x40022000

08003f9c <FLASH_HalfCycleAccessCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
  
  /* Enable or disable the Half cycle access */
  FLASH->ACR &= ACR_HLFCYA_Mask;
 8003f9c:	4a04      	ldr	r2, [pc, #16]	(8003fb0 <FLASH_HalfCycleAccessCmd+0x14>)
 8003f9e:	6813      	ldr	r3, [r2, #0]
 8003fa0:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 8003fa4:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_HalfCycleAccess;
 8003fa6:	6813      	ldr	r3, [r2, #0]
 8003fa8:	4318      	orrs	r0, r3
 8003faa:	6010      	str	r0, [r2, #0]
}
 8003fac:	4770      	bx	lr
 8003fae:	46c0      	nop			(mov r8, r8)
 8003fb0:	40022000 	.word	0x40022000

08003fb4 <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 8003fb4:	4a04      	ldr	r2, [pc, #16]	(8003fc8 <FLASH_PrefetchBufferCmd+0x14>)
 8003fb6:	6813      	ldr	r3, [r2, #0]
 8003fb8:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 8003fbc:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 8003fbe:	6813      	ldr	r3, [r2, #0]
 8003fc0:	4318      	orrs	r0, r3
 8003fc2:	6010      	str	r0, [r2, #0]
}
 8003fc4:	4770      	bx	lr
 8003fc6:	46c0      	nop			(mov r8, r8)
 8003fc8:	40022000 	.word	0x40022000

08003fcc <FLASH_Unlock>:
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 8003fcc:	4b03      	ldr	r3, [pc, #12]	(8003fdc <FLASH_Unlock+0x10>)
 8003fce:	4a04      	ldr	r2, [pc, #16]	(8003fe0 <FLASH_Unlock+0x14>)
 8003fd0:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8003fd2:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8003fd6:	605a      	str	r2, [r3, #4]
}
 8003fd8:	4770      	bx	lr
 8003fda:	46c0      	nop			(mov r8, r8)
 8003fdc:	40022000 	.word	0x40022000
 8003fe0:	45670123 	.word	0x45670123

08003fe4 <FLASH_Lock>:
* Return         : None
*******************************************************************************/
void FLASH_Lock(void)
{
  /* Set the Lock Bit to lock the FPEC and the FCR */
  FLASH->CR |= CR_LOCK_Set;
 8003fe4:	4a02      	ldr	r2, [pc, #8]	(8003ff0 <FLASH_Lock+0xc>)
 8003fe6:	6913      	ldr	r3, [r2, #16]
 8003fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fec:	6113      	str	r3, [r2, #16]
}
 8003fee:	4770      	bx	lr
 8003ff0:	40022000 	.word	0x40022000

08003ff4 <FLASH_GetUserOptionByte>:
*                  and RST_STDBY(Bit2).
*******************************************************************************/
u32 FLASH_GetUserOptionByte(void)
{
  /* Return the User Option Byte */
  return (u32)(FLASH->OBR >> 2);
 8003ff4:	4b01      	ldr	r3, [pc, #4]	(8003ffc <FLASH_GetUserOptionByte+0x8>)
 8003ff6:	69d8      	ldr	r0, [r3, #28]
 8003ff8:	0880      	lsrs	r0, r0, #2
}
 8003ffa:	4770      	bx	lr
 8003ffc:	40022000 	.word	0x40022000

08004000 <FLASH_GetWriteProtectionOptionByte>:
* Return         : The FLASH Write Protection  Option Bytes Register value
*******************************************************************************/
u32 FLASH_GetWriteProtectionOptionByte(void)
{
  /* Return the Falsh write protection Register value */
  return (u32)(FLASH->WRPR);
 8004000:	4b01      	ldr	r3, [pc, #4]	(8004008 <FLASH_GetWriteProtectionOptionByte+0x8>)
 8004002:	6a18      	ldr	r0, [r3, #32]
}
 8004004:	4770      	bx	lr
 8004006:	46c0      	nop			(mov r8, r8)
 8004008:	40022000 	.word	0x40022000

0800400c <FLASH_GetReadOutProtectionStatus>:
*******************************************************************************/
FlagStatus FLASH_GetReadOutProtectionStatus(void)
{
  FlagStatus readoutstatus = RESET;

  if ((FLASH->OBR & RDPRT_Mask) != (u32)RESET)
 800400c:	4b02      	ldr	r3, [pc, #8]	(8004018 <FLASH_GetReadOutProtectionStatus+0xc>)
 800400e:	69d8      	ldr	r0, [r3, #28]
 8004010:	0840      	lsrs	r0, r0, #1
 8004012:	f000 0001 	and.w	r0, r0, #1	; 0x1
  else
  {
    readoutstatus = RESET;
  }
  return readoutstatus;
}
 8004016:	4770      	bx	lr
 8004018:	40022000 	.word	0x40022000

0800401c <FLASH_GetPrefetchBufferStatus>:
*******************************************************************************/
FlagStatus FLASH_GetPrefetchBufferStatus(void)
{
  FlagStatus bitstatus = RESET;
  
  if ((FLASH->ACR & ACR_PRFTBS_Mask) != (u32)RESET)
 800401c:	4b02      	ldr	r3, [pc, #8]	(8004028 <FLASH_GetPrefetchBufferStatus+0xc>)
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	0940      	lsrs	r0, r0, #5
 8004022:	f000 0001 	and.w	r0, r0, #1	; 0x1
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
  return bitstatus; 
}
 8004026:	4770      	bx	lr
 8004028:	40022000 	.word	0x40022000

0800402c <FLASH_ITConfig>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 800402c:	b121      	cbz	r1, 8004038 <FLASH_ITConfig+0xc>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 800402e:	4a05      	ldr	r2, [pc, #20]	(8004044 <FLASH_ITConfig+0x18>)
 8004030:	6913      	ldr	r3, [r2, #16]
 8004032:	ea40 0303 	orr.w	r3, r0, r3
 8004036:	e003      	b.n	8004040 <FLASH_ITConfig+0x14>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(u32)FLASH_IT;
 8004038:	4a02      	ldr	r2, [pc, #8]	(8004044 <FLASH_ITConfig+0x18>)
 800403a:	6913      	ldr	r3, [r2, #16]
 800403c:	ea23 0300 	bic.w	r3, r3, r0
 8004040:	6113      	str	r3, [r2, #16]
  }
}
 8004042:	4770      	bx	lr
 8004044:	40022000 	.word	0x40022000

08004048 <FLASH_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;

  if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
 8004048:	2801      	cmp	r0, #1
 800404a:	d104      	bne.n	8004056 <FLASH_GetFlagStatus+0xe>
  {
    if((FLASH->OBR & FLASH_FLAG_OPTERR) != (u32)RESET)
 800404c:	4b05      	ldr	r3, [pc, #20]	(8004064 <FLASH_GetFlagStatus+0x1c>)
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	f003 0001 	and.w	r0, r3, #1	; 0x1
 8004054:	e005      	b.n	8004062 <FLASH_GetFlagStatus+0x1a>
      bitstatus = RESET;
    }
  }
  else
  {
   if((FLASH->SR & FLASH_FLAG) != (u32)RESET)
 8004056:	4b03      	ldr	r3, [pc, #12]	(8004064 <FLASH_GetFlagStatus+0x1c>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	4218      	tst	r0, r3
 800405c:	bf0c      	ite	eq
 800405e:	2000      	moveq	r0, #0
 8004060:	2001      	movne	r0, #1
      bitstatus = RESET;
    }
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus;
}
 8004062:	4770      	bx	lr
 8004064:	40022000 	.word	0x40022000

08004068 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8004068:	4b01      	ldr	r3, [pc, #4]	(8004070 <FLASH_ClearFlag+0x8>)
 800406a:	60d8      	str	r0, [r3, #12]
}
 800406c:	4770      	bx	lr
 800406e:	46c0      	nop			(mov r8, r8)
 8004070:	40022000 	.word	0x40022000

08004074 <FLASH_GetStatus>:
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8004074:	4a09      	ldr	r2, [pc, #36]	(800409c <FLASH_GetStatus+0x28>)
 8004076:	68d3      	ldr	r3, [r2, #12]
 8004078:	f013 0f01 	tst.w	r3, #1	; 0x1
 800407c:	d001      	beq.n	8004082 <FLASH_GetStatus+0xe>
 800407e:	2001      	movs	r0, #1
 8004080:	e00b      	b.n	800409a <FLASH_GetStatus+0x26>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 8004082:	68d3      	ldr	r3, [r2, #12]
 8004084:	f013 0f04 	tst.w	r3, #4	; 0x4
 8004088:	d001      	beq.n	800408e <FLASH_GetStatus+0x1a>
 800408a:	2002      	movs	r0, #2
 800408c:	e005      	b.n	800409a <FLASH_GetStatus+0x26>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 800408e:	68d3      	ldr	r3, [r2, #12]
 8004090:	f013 0f10 	tst.w	r3, #16	; 0x10
 8004094:	bf14      	ite	ne
 8004096:	2003      	movne	r0, #3
 8004098:	2004      	moveq	r0, #4
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 800409a:	4770      	bx	lr
 800409c:	40022000 	.word	0x40022000

080040a0 <FLASH_WaitForLastOperation>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 80040a0:	b510      	push	{r4, lr}
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80040a2:	4a23      	ldr	r2, [pc, #140]	(8004130 <FLASH_WaitForLastOperation+0x90>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 80040a4:	b082      	sub	sp, #8
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80040a6:	68d3      	ldr	r3, [r2, #12]
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 80040a8:	4601      	mov	r1, r0
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80040aa:	f013 0f01 	tst.w	r3, #1	; 0x1
 80040ae:	d001      	beq.n	80040b4 <FLASH_WaitForLastOperation+0x14>
 80040b0:	2001      	movs	r0, #1
 80040b2:	e02a      	b.n	800410a <FLASH_WaitForLastOperation+0x6a>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 80040b4:	68d3      	ldr	r3, [r2, #12]
 80040b6:	f013 0f04 	tst.w	r3, #4	; 0x4
 80040ba:	d001      	beq.n	80040c0 <FLASH_WaitForLastOperation+0x20>
 80040bc:	2002      	movs	r0, #2
 80040be:	e024      	b.n	800410a <FLASH_WaitForLastOperation+0x6a>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 80040c0:	68d3      	ldr	r3, [r2, #12]
 80040c2:	f013 0f10 	tst.w	r3, #16	; 0x10
 80040c6:	bf14      	ite	ne
 80040c8:	2003      	movne	r0, #3
 80040ca:	2004      	moveq	r0, #4
 80040cc:	e01d      	b.n	800410a <FLASH_WaitForLastOperation+0x6a>
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 80040ce:	9401      	str	r4, [sp, #4]

  for(i = 0xFF; i != 0; i--)
 80040d0:	f8cd c004 	str.w	ip, [sp, #4]
 80040d4:	e002      	b.n	80040dc <FLASH_WaitForLastOperation+0x3c>
 80040d6:	9b01      	ldr	r3, [sp, #4]
 80040d8:	3b01      	subs	r3, #1
 80040da:	9301      	str	r3, [sp, #4]
 80040dc:	9b01      	ldr	r3, [sp, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f9      	bne.n	80040d6 <FLASH_WaitForLastOperation+0x36>
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80040e2:	68d3      	ldr	r3, [r2, #12]
 80040e4:	f013 0f01 	tst.w	r3, #1	; 0x1
 80040e8:	d001      	beq.n	80040ee <FLASH_WaitForLastOperation+0x4e>
 80040ea:	2001      	movs	r0, #1
 80040ec:	e00b      	b.n	8004106 <FLASH_WaitForLastOperation+0x66>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 80040ee:	68d3      	ldr	r3, [r2, #12]
 80040f0:	f013 0f04 	tst.w	r3, #4	; 0x4
 80040f4:	d001      	beq.n	80040fa <FLASH_WaitForLastOperation+0x5a>
 80040f6:	2002      	movs	r0, #2
 80040f8:	e005      	b.n	8004106 <FLASH_WaitForLastOperation+0x66>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 80040fa:	68d3      	ldr	r3, [r2, #12]
 80040fc:	f013 0f10 	tst.w	r3, #16	; 0x10
 8004100:	bf14      	ite	ne
 8004102:	2003      	movne	r0, #3
 8004104:	2004      	moveq	r0, #4
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    delay();
    status = FLASH_GetStatus();
    Timeout--;
 8004106:	3901      	subs	r1, #1
 8004108:	e003      	b.n	8004112 <FLASH_WaitForLastOperation+0x72>
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800410a:	4a09      	ldr	r2, [pc, #36]	(8004130 <FLASH_WaitForLastOperation+0x90>)
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 800410c:	2400      	movs	r4, #0

  for(i = 0xFF; i != 0; i--)
 800410e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8004112:	1e0b      	subs	r3, r1, #0
 8004114:	bf18      	it	ne
 8004116:	2301      	movne	r3, #1
 8004118:	2801      	cmp	r0, #1
 800411a:	bf14      	ite	ne
 800411c:	2300      	movne	r3, #0
 800411e:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1d3      	bne.n	80040ce <FLASH_WaitForLastOperation+0x2e>
    delay();
    status = FLASH_GetStatus();
    Timeout--;
  }

  if(Timeout == 0x00 )
 8004126:	2900      	cmp	r1, #0
 8004128:	bf08      	it	eq
 800412a:	2005      	moveq	r0, #5
    status = FLASH_TIMEOUT;
  }

  /* Return the operation status */
  return status;
}
 800412c:	b002      	add	sp, #8
 800412e:	bd10      	pop	{r4, pc}
 8004130:	40022000 	.word	0x40022000

08004134 <FLASH_UserOptionByteConfig>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8004134:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8004136:	4b13      	ldr	r3, [pc, #76]	(8004184 <FLASH_UserOptionByteConfig+0x50>)
 8004138:	4c13      	ldr	r4, [pc, #76]	(8004188 <FLASH_UserOptionByteConfig+0x54>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 800413a:	b081      	sub	sp, #4
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 800413c:	60a3      	str	r3, [r4, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 800413e:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8004142:	4605      	mov	r5, r0
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
 8004144:	60a3      	str	r3, [r4, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004146:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8004148:	460e      	mov	r6, r1
 800414a:	4617      	mov	r7, r2
  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800414c:	f7ff ffa8 	bl	80040a0 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8004150:	2804      	cmp	r0, #4
 8004152:	d115      	bne.n	8004180 <FLASH_UserOptionByteConfig+0x4c>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8004154:	6923      	ldr	r3, [r4, #16]
           
    OB->USER = ( OB_IWDG | OB_STOP |OB_STDBY) | (u16)0xF8; 
 8004156:	4a0d      	ldr	r2, [pc, #52]	(800418c <FLASH_UserOptionByteConfig+0x58>)
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8004158:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 800415c:	6123      	str	r3, [r4, #16]
           
    OB->USER = ( OB_IWDG | OB_STOP |OB_STDBY) | (u16)0xF8; 
 800415e:	f045 03f8 	orr.w	r3, r5, #248	; 0xf8
 8004162:	ea46 0303 	orr.w	r3, r6, r3
 8004166:	ea47 0303 	orr.w	r3, r7, r3
 800416a:	8053      	strh	r3, [r2, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 800416c:	200f      	movs	r0, #15
 800416e:	f7ff ff97 	bl	80040a0 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8004172:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 8004174:	bf1f      	itttt	ne
 8004176:	6922      	ldrne	r2, [r4, #16]
 8004178:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 800417c:	4013      	andne	r3, r2
 800417e:	6123      	strne	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 8004180:	b001      	add	sp, #4
 8004182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004184:	45670123 	.word	0x45670123
 8004188:	40022000 	.word	0x40022000
 800418c:	1ffff800 	.word	0x1ffff800

08004190 <FLASH_ReadOutProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
{
 8004190:	b530      	push	{r4, r5, lr}
 8004192:	4605      	mov	r5, r0
 8004194:	b081      	sub	sp, #4
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  status = FLASH_WaitForLastOperation(EraseTimeout);
 8004196:	f640 70ff 	movw	r0, #4095	; 0xfff
 800419a:	f7ff ff81 	bl	80040a0 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 800419e:	2804      	cmp	r0, #4
 80041a0:	d13c      	bne.n	800421c <FLASH_ReadOutProtection+0x8c>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80041a2:	4c1f      	ldr	r4, [pc, #124]	(8004220 <FLASH_ReadOutProtection+0x90>)
 80041a4:	4b1f      	ldr	r3, [pc, #124]	(8004224 <FLASH_ReadOutProtection+0x94>)

    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80041a6:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80041aa:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80041ac:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80041b0:	60a3      	str	r3, [r4, #8]

    FLASH->CR |= CR_OPTER_Set;
 80041b2:	6923      	ldr	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80041b4:	301b      	adds	r0, #27
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;

    FLASH->CR |= CR_OPTER_Set;
 80041b6:	f043 0320 	orr.w	r3, r3, #32	; 0x20
 80041ba:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 80041bc:	6923      	ldr	r3, [r4, #16]
 80041be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041c2:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80041c4:	f7ff ff6c 	bl	80040a0 <FLASH_WaitForLastOperation>

    if(status == FLASH_COMPLETE)
 80041c8:	2804      	cmp	r0, #4
 80041ca:	d120      	bne.n	800420e <FLASH_ReadOutProtection+0x7e>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 80041cc:	6923      	ldr	r3, [r4, #16]
 80041ce:	f641 72df 	movw	r2, #8159	; 0x1fdf
 80041d2:	ea03 0202 	and.w	r2, r3, r2
 80041d6:	6122      	str	r2, [r4, #16]

      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set; 
 80041d8:	6923      	ldr	r3, [r4, #16]
 80041da:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 80041de:	6123      	str	r3, [r4, #16]

      if(NewState != DISABLE)
 80041e0:	b11d      	cbz	r5, 80041ea <FLASH_ReadOutProtection+0x5a>
      {
        OB->RDP = 0x00;
 80041e2:	4b11      	ldr	r3, [pc, #68]	(8004228 <FLASH_ReadOutProtection+0x98>)
 80041e4:	f04f 0200 	mov.w	r2, #0	; 0x0
 80041e8:	e002      	b.n	80041f0 <FLASH_ReadOutProtection+0x60>
      }
      else
      {
        OB->RDP = RDP_Key;  
 80041ea:	4b0f      	ldr	r3, [pc, #60]	(8004228 <FLASH_ReadOutProtection+0x98>)
 80041ec:	f04f 02a5 	mov.w	r2, #165	; 0xa5
 80041f0:	801a      	strh	r2, [r3, #0]
      }

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(EraseTimeout); 
 80041f2:	f640 70ff 	movw	r0, #4095	; 0xfff
 80041f6:	f7ff ff53 	bl	80040a0 <FLASH_WaitForLastOperation>
    
      if(status != FLASH_BUSY)
 80041fa:	2801      	cmp	r0, #1
 80041fc:	d00e      	beq.n	800421c <FLASH_ReadOutProtection+0x8c>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 80041fe:	4908      	ldr	r1, [pc, #32]	(8004220 <FLASH_ReadOutProtection+0x90>)
 8004200:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8004204:	690a      	ldr	r2, [r1, #16]
 8004206:	ea02 0303 	and.w	r3, r2, r3
 800420a:	610b      	str	r3, [r1, #16]
 800420c:	e006      	b.n	800421c <FLASH_ReadOutProtection+0x8c>
      }
    }
    else 
    {
      if(status != FLASH_BUSY)
 800420e:	2801      	cmp	r0, #1
      {
        /* Disable the OPTER Bit */
        FLASH->CR &= CR_OPTER_Reset;
 8004210:	bf1f      	itttt	ne
 8004212:	6922      	ldrne	r2, [r4, #16]
 8004214:	f641 73df 	movwne	r3, #8159	; 0x1fdf
 8004218:	4013      	andne	r3, r2
 800421a:	6123      	strne	r3, [r4, #16]
      }
    }
  }
  /* Return the protection operation Status */
  return status;      
}
 800421c:	b001      	add	sp, #4
 800421e:	bd30      	pop	{r4, r5, pc}
 8004220:	40022000 	.word	0x40022000
 8004224:	45670123 	.word	0x45670123
 8004228:	1ffff800 	.word	0x1ffff800

0800422c <FLASH_EnableWriteProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EnableWriteProtection(u32 FLASH_Pages)
{
 800422c:	b510      	push	{r4, lr}
 800422e:	4604      	mov	r4, r0
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004230:	200f      	movs	r0, #15
 8004232:	f7ff ff35 	bl	80040a0 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8004236:	2804      	cmp	r0, #4
 8004238:	d150      	bne.n	80042dc <FLASH_EnableWriteProtection+0xb0>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800423a:	4a29      	ldr	r2, [pc, #164]	(80042e0 <FLASH_EnableWriteProtection+0xb4>)
 800423c:	4b29      	ldr	r3, [pc, #164]	(80042e4 <FLASH_EnableWriteProtection+0xb8>)
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
 800423e:	ea6f 0404 	mvn.w	r4, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8004242:	6093      	str	r3, [r2, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8004244:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8004248:	6093      	str	r3, [r2, #8]
    FLASH->CR |= CR_OPTPG_Set;
 800424a:	6913      	ldr	r3, [r2, #16]
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
 800424c:	b2e1      	uxtb	r1, r4
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 800424e:	f043 0310 	orr.w	r3, r3, #16	; 0x10

    if(WRP0_Data != 0xFF)
 8004252:	29ff      	cmp	r1, #255
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 8004254:	6113      	str	r3, [r2, #16]

    if(WRP0_Data != 0xFF)
 8004256:	d004      	beq.n	8004262 <FLASH_EnableWriteProtection+0x36>
    {
      OB->WRP0 = WRP0_Data;
 8004258:	4b23      	ldr	r3, [pc, #140]	(80042e8 <FLASH_EnableWriteProtection+0xbc>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800425a:	200f      	movs	r0, #15
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;

    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 800425c:	8119      	strh	r1, [r3, #8]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800425e:	f7ff ff1f 	bl	80040a0 <FLASH_WaitForLastOperation>
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
 8004262:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8004266:	0a1a      	lsrs	r2, r3, #8
      OB->WRP0 = WRP0_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8004268:	f1b2 03ff 	subs.w	r3, r2, #255	; 0xff
 800426c:	bf18      	it	ne
 800426e:	2301      	movne	r3, #1
 8004270:	2804      	cmp	r0, #4
 8004272:	bf14      	ite	ne
 8004274:	2300      	movne	r3, #0
 8004276:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 800427a:	b123      	cbz	r3, 8004286 <FLASH_EnableWriteProtection+0x5a>
    {
      OB->WRP1 = WRP1_Data;
 800427c:	4b1a      	ldr	r3, [pc, #104]	(80042e8 <FLASH_EnableWriteProtection+0xbc>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800427e:	200f      	movs	r0, #15
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
    {
      OB->WRP1 = WRP1_Data;
 8004280:	815a      	strh	r2, [r3, #10]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004282:	f7ff ff0d 	bl	80040a0 <FLASH_WaitForLastOperation>
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
 8004286:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
 800428a:	0c1a      	lsrs	r2, r3, #16
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 800428c:	f1b2 03ff 	subs.w	r3, r2, #255	; 0xff
 8004290:	bf18      	it	ne
 8004292:	2301      	movne	r3, #1
 8004294:	2804      	cmp	r0, #4
 8004296:	bf14      	ite	ne
 8004298:	2300      	movne	r3, #0
 800429a:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 800429e:	b123      	cbz	r3, 80042aa <FLASH_EnableWriteProtection+0x7e>
    {
      OB->WRP2 = WRP2_Data;
 80042a0:	4b11      	ldr	r3, [pc, #68]	(80042e8 <FLASH_EnableWriteProtection+0xbc>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80042a2:	200f      	movs	r0, #15
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
    {
      OB->WRP2 = WRP2_Data;
 80042a4:	819a      	strh	r2, [r3, #12]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80042a6:	f7ff fefb 	bl	80040a0 <FLASH_WaitForLastOperation>
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
 80042aa:	0e22      	lsrs	r2, r4, #24
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 80042ac:	f1b2 03ff 	subs.w	r3, r2, #255	; 0xff
 80042b0:	bf18      	it	ne
 80042b2:	2301      	movne	r3, #1
 80042b4:	2804      	cmp	r0, #4
 80042b6:	bf14      	ite	ne
 80042b8:	2300      	movne	r3, #0
 80042ba:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 80042be:	b123      	cbz	r3, 80042ca <FLASH_EnableWriteProtection+0x9e>
    {
      OB->WRP3 = WRP3_Data;
 80042c0:	4b09      	ldr	r3, [pc, #36]	(80042e8 <FLASH_EnableWriteProtection+0xbc>)
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80042c2:	200f      	movs	r0, #15
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
 80042c4:	81da      	strh	r2, [r3, #14]
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80042c6:	f7ff feeb 	bl	80040a0 <FLASH_WaitForLastOperation>
    }
          
    if(status != FLASH_BUSY)
 80042ca:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 80042cc:	bf1f      	itttt	ne
 80042ce:	4904      	ldrne	r1, [pc, #16]	(80042e0 <FLASH_EnableWriteProtection+0xb4>)
 80042d0:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 80042d4:	690a      	ldrne	r2, [r1, #16]
 80042d6:	4013      	andne	r3, r2
 80042d8:	bf18      	it	ne
 80042da:	610b      	strne	r3, [r1, #16]
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
 80042dc:	bd10      	pop	{r4, pc}
 80042de:	46c0      	nop			(mov r8, r8)
 80042e0:	40022000 	.word	0x40022000
 80042e4:	45670123 	.word	0x45670123
 80042e8:	1ffff800 	.word	0x1ffff800

080042ec <FLASH_ProgramOptionByteData>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	4606      	mov	r6, r0
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80042f0:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 80042f2:	460d      	mov	r5, r1
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80042f4:	f7ff fed4 	bl	80040a0 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 80042f8:	2804      	cmp	r0, #4
 80042fa:	d114      	bne.n	8004326 <FLASH_ProgramOptionByteData+0x3a>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80042fc:	4c0a      	ldr	r4, [pc, #40]	(8004328 <FLASH_ProgramOptionByteData+0x3c>)
 80042fe:	4b0b      	ldr	r3, [pc, #44]	(800432c <FLASH_ProgramOptionByteData+0x40>)
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
    *(vu16*)Address = Data;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004300:	200f      	movs	r0, #15
  status = FLASH_WaitForLastOperation(ProgramTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8004302:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8004304:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8004308:	60a3      	str	r3, [r4, #8]

    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 800430a:	6923      	ldr	r3, [r4, #16]
 800430c:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 8004310:	6123      	str	r3, [r4, #16]
    *(vu16*)Address = Data;
 8004312:	8035      	strh	r5, [r6, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004314:	f7ff fec4 	bl	80040a0 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8004318:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 800431a:	bf1f      	itttt	ne
 800431c:	6922      	ldrne	r2, [r4, #16]
 800431e:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8004322:	4013      	andne	r3, r2
 8004324:	6123      	strne	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte Data Program Status */
  return status;      
}
 8004326:	bd70      	pop	{r4, r5, r6, pc}
 8004328:	40022000 	.word	0x40022000
 800432c:	45670123 	.word	0x45670123

08004330 <FLASH_ProgramHalfWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 8004330:	b570      	push	{r4, r5, r6, lr}
 8004332:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004334:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 8004336:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004338:	f7ff feb2 	bl	80040a0 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800433c:	2804      	cmp	r0, #4
 800433e:	d10f      	bne.n	8004360 <FLASH_ProgramHalfWord+0x30>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8004340:	4c08      	ldr	r4, [pc, #32]	(8004364 <FLASH_ProgramHalfWord+0x34>)
  
    *(vu16*)Address = Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004342:	200f      	movs	r0, #15
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8004344:	6923      	ldr	r3, [r4, #16]
 8004346:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 800434a:	6123      	str	r3, [r4, #16]
  
    *(vu16*)Address = Data;
 800434c:	8035      	strh	r5, [r6, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 800434e:	f7ff fea7 	bl	80040a0 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8004352:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the PG Bit */
      FLASH->CR &= CR_PG_Reset;
 8004354:	bf1f      	itttt	ne
 8004356:	6922      	ldrne	r2, [r4, #16]
 8004358:	f641 73fe 	movwne	r3, #8190	; 0x1ffe
 800435c:	4013      	andne	r3, r2
 800435e:	6123      	strne	r3, [r4, #16]
    }
  } 
  /* Return the Program Status */
  return status;
}
 8004360:	bd70      	pop	{r4, r5, r6, pc}
 8004362:	46c0      	nop			(mov r8, r8)
 8004364:	40022000 	.word	0x40022000

08004368 <FLASH_ProgramWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800436c:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 800436e:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004370:	f7ff fe96 	bl	80040a0 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8004374:	2804      	cmp	r0, #4
 8004376:	d117      	bne.n	80043a8 <FLASH_ProgramWord+0x40>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8004378:	4c0c      	ldr	r4, [pc, #48]	(80043ac <FLASH_ProgramWord+0x44>)
  
    *(vu16*)Address = (u16)Data;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 800437a:	200f      	movs	r0, #15
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 800437c:	6923      	ldr	r3, [r4, #16]
 800437e:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 8004382:	6123      	str	r3, [r4, #16]
  
    *(vu16*)Address = (u16)Data;
 8004384:	b2ab      	uxth	r3, r5
 8004386:	8033      	strh	r3, [r6, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004388:	f7ff fe8a 	bl	80040a0 <FLASH_WaitForLastOperation>
 
    if(status == FLASH_COMPLETE)
 800438c:	2804      	cmp	r0, #4
 800438e:	d104      	bne.n	800439a <FLASH_ProgramWord+0x32>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      *(vu16*)(Address + 2) = Data >> 16;
 8004390:	0c2b      	lsrs	r3, r5, #16
 8004392:	8073      	strh	r3, [r6, #2]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004394:	200f      	movs	r0, #15
 8004396:	f7ff fe83 	bl	80040a0 <FLASH_WaitForLastOperation>
        FLASH->CR &= CR_PG_Reset;
      }
    }
    else
    {
      if (status != FLASH_BUSY)
 800439a:	2801      	cmp	r0, #1
      {
        /* Disable the PG Bit */
        FLASH->CR &= CR_PG_Reset;
 800439c:	bf1f      	itttt	ne
 800439e:	6922      	ldrne	r2, [r4, #16]
 80043a0:	f641 73fe 	movwne	r3, #8190	; 0x1ffe
 80043a4:	4013      	andne	r3, r2
 80043a6:	6123      	strne	r3, [r4, #16]
      }
     }
  }
  /* Return the Program Status */
  return status;
}
 80043a8:	bd70      	pop	{r4, r5, r6, pc}
 80043aa:	46c0      	nop			(mov r8, r8)
 80043ac:	40022000 	.word	0x40022000

080043b0 <FLASH_EraseOptionBytes>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseOptionBytes(void)
{
 80043b0:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 80043b2:	f640 70ff 	movw	r0, #4095	; 0xfff
 80043b6:	f7ff fe73 	bl	80040a0 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 80043ba:	2804      	cmp	r0, #4
 80043bc:	d12c      	bne.n	8004418 <FLASH_EraseOptionBytes+0x68>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80043be:	4c17      	ldr	r4, [pc, #92]	(800441c <FLASH_EraseOptionBytes+0x6c>)
 80043c0:	4b17      	ldr	r3, [pc, #92]	(8004420 <FLASH_EraseOptionBytes+0x70>)
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80043c2:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80043c6:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80043c8:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80043cc:	60a3      	str	r3, [r4, #8]
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 80043ce:	6923      	ldr	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80043d0:	301b      	adds	r0, #27
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 80043d2:	f043 0320 	orr.w	r3, r3, #32	; 0x20
 80043d6:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 80043d8:	6923      	ldr	r3, [r4, #16]
 80043da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043de:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80043e0:	f7ff fe5e 	bl	80040a0 <FLASH_WaitForLastOperation>
    
    if(status == FLASH_COMPLETE)
 80043e4:	2804      	cmp	r0, #4
 80043e6:	d110      	bne.n	800440a <FLASH_EraseOptionBytes+0x5a>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 80043e8:	6922      	ldr	r2, [r4, #16]
 80043ea:	f641 73df 	movw	r3, #8159	; 0x1fdf
 80043ee:	ea02 0303 	and.w	r3, r2, r3
 80043f2:	6123      	str	r3, [r4, #16]
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 80043f4:	6923      	ldr	r3, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 80043f6:	f04f 02a5 	mov.w	r2, #165	; 0xa5
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 80043fa:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 80043fe:	6123      	str	r3, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 8004400:	4b08      	ldr	r3, [pc, #32]	(8004424 <FLASH_EraseOptionBytes+0x74>)

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004402:	200f      	movs	r0, #15
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 8004404:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004406:	f7ff fe4b 	bl	80040a0 <FLASH_WaitForLastOperation>
        FLASH->CR &= CR_OPTPG_Reset;
      }
    }
    else
    {
      if (status != FLASH_BUSY)
 800440a:	2801      	cmp	r0, #1
      {
        /* Disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 800440c:	bf1f      	itttt	ne
 800440e:	6922      	ldrne	r2, [r4, #16]
 8004410:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8004414:	4013      	andne	r3, r2
 8004416:	6123      	strne	r3, [r4, #16]
      }
    }  
  }
  /* Return the erase status */
  return status;
}
 8004418:	bd10      	pop	{r4, pc}
 800441a:	46c0      	nop			(mov r8, r8)
 800441c:	40022000 	.word	0x40022000
 8004420:	45670123 	.word	0x45670123
 8004424:	1ffff800 	.word	0x1ffff800

08004428 <FLASH_EraseAllPages>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseAllPages(void)
{
 8004428:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 800442a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800442e:	f7ff fe37 	bl	80040a0 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8004432:	2804      	cmp	r0, #4
 8004434:	d113      	bne.n	800445e <FLASH_EraseAllPages+0x36>
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 8004436:	4c0a      	ldr	r4, [pc, #40]	(8004460 <FLASH_EraseAllPages+0x38>)
 8004438:	6923      	ldr	r3, [r4, #16]
 800443a:	4303      	orrs	r3, r0
 800443c:	6123      	str	r3, [r4, #16]
     FLASH->CR |= CR_STRT_Set;
 800443e:	6923      	ldr	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004440:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
     FLASH->CR |= CR_STRT_Set;
 8004444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004448:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800444a:	301b      	adds	r0, #27
 800444c:	f7ff fe28 	bl	80040a0 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8004450:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= CR_MER_Reset;
 8004452:	bf1f      	itttt	ne
 8004454:	6922      	ldrne	r2, [r4, #16]
 8004456:	f641 73fb 	movwne	r3, #8187	; 0x1ffb
 800445a:	4013      	andne	r3, r2
 800445c:	6123      	strne	r3, [r4, #16]
    }
  }	   
  /* Return the Erase Status */
  return status;
}
 800445e:	bd10      	pop	{r4, pc}
 8004460:	40022000 	.word	0x40022000

08004464 <FLASH_ErasePage>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ErasePage(u32 Page_Address)
{
 8004464:	b530      	push	{r4, r5, lr}
 8004466:	4605      	mov	r5, r0
 8004468:	b081      	sub	sp, #4

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Page_Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 800446a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800446e:	f7ff fe17 	bl	80040a0 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8004472:	2804      	cmp	r0, #4
 8004474:	d115      	bne.n	80044a2 <FLASH_ErasePage+0x3e>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8004476:	4c0c      	ldr	r4, [pc, #48]	(80044a8 <FLASH_ErasePage+0x44>)
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004478:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 800447c:	6923      	ldr	r3, [r4, #16]
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800447e:	301b      	adds	r0, #27
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8004480:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 8004484:	6123      	str	r3, [r4, #16]
    FLASH->AR = Page_Address; 
 8004486:	6165      	str	r5, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 8004488:	6923      	ldr	r3, [r4, #16]
 800448a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800448e:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004490:	f7ff fe06 	bl	80040a0 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8004494:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the PER Bit */
      FLASH->CR &= CR_PER_Reset;
 8004496:	bf1f      	itttt	ne
 8004498:	6922      	ldrne	r2, [r4, #16]
 800449a:	f641 73fd 	movwne	r3, #8189	; 0x1ffd
 800449e:	4013      	andne	r3, r2
 80044a0:	6123      	strne	r3, [r4, #16]
    }
  }
  /* Return the Erase Status */
  return status;
}
 80044a2:	b001      	add	sp, #4
 80044a4:	bd30      	pop	{r4, r5, pc}
 80044a6:	46c0      	nop			(mov r8, r8)
 80044a8:	40022000 	.word	0x40022000

080044ac <GPIO_Init>:
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80044ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 80044ae:	78cd      	ldrb	r5, [r1, #3]
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 80044b0:	880e      	ldrh	r6, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);

  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
 80044b2:	f015 0f10 	tst.w	r5, #16	; 0x10
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 80044b6:	bf18      	it	ne
 80044b8:	788b      	ldrbne	r3, [r1, #2]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 80044ba:	f005 070f 	and.w	r7, r5, #15	; 0xf
  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 80044be:	bf18      	it	ne
 80044c0:	431f      	orrne	r7, r3
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 80044c2:	f016 0fff 	tst.w	r6, #255	; 0xff
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80044c6:	b083      	sub	sp, #12
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 80044c8:	d01e      	beq.n	8004508 <GPIO_Init+0x5c>
  {
    tmpreg = GPIOx->CRL;
 80044ca:	6804      	ldr	r4, [r0, #0]
 80044cc:	2100      	movs	r1, #0

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((u32)0x01) << pinpos;
 80044ce:	2201      	movs	r2, #1
 80044d0:	fa12 f301 	lsls.w	r3, r2, r1
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80044d4:	ea03 0c06 	and.w	ip, r3, r6

      if (currentpin == pos)
 80044d8:	459c      	cmp	ip, r3
 80044da:	d111      	bne.n	8004500 <GPIO_Init+0x54>
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
 80044dc:	008a      	lsls	r2, r1, #2
        tmpreg &= ~pinmask;
 80044de:	230f      	movs	r3, #15
 80044e0:	4093      	lsls	r3, r2

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80044e2:	fa17 f202 	lsls.w	r2, r7, r2
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 80044e6:	ea24 0403 	bic.w	r4, r4, r3

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80044ea:	4314      	orrs	r4, r2

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80044ec:	2d28      	cmp	r5, #40
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 80044ee:	9301      	str	r3, [sp, #4]
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((u32)0x01) << pinpos);
 80044f0:	bf08      	it	eq
 80044f2:	f8c0 c014 	streq.w	ip, [r0, #20]

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80044f6:	d003      	beq.n	8004500 <GPIO_Init+0x54>
          GPIOx->BRR = (((u32)0x01) << pinpos);
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80044f8:	2d48      	cmp	r5, #72
          {
            GPIOx->BSRR = (((u32)0x01) << pinpos);
 80044fa:	bf08      	it	eq
 80044fc:	f8c0 c010 	streq.w	ip, [r0, #16]
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004500:	3101      	adds	r1, #1
 8004502:	2908      	cmp	r1, #8
 8004504:	d1e3      	bne.n	80044ce <GPIO_Init+0x22>
            GPIOx->BSRR = (((u32)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8004506:	6004      	str	r4, [r0, #0]
  }

/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8004508:	2eff      	cmp	r6, #255
 800450a:	d920      	bls.n	800454e <GPIO_Init+0xa2>
  {
    tmpreg = GPIOx->CRH;
 800450c:	6844      	ldr	r4, [r0, #4]
 800450e:	2100      	movs	r1, #0
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((u32)0x01) << (pinpos + 0x08));
 8004510:	2201      	movs	r2, #1
 8004512:	f101 0308 	add.w	r3, r1, #8	; 0x8
 8004516:	fa12 f303 	lsls.w	r3, r2, r3
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800451a:	ea03 0c06 	and.w	ip, r3, r6
      if (currentpin == pos)
 800451e:	459c      	cmp	ip, r3
 8004520:	d111      	bne.n	8004546 <GPIO_Init+0x9a>
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
 8004522:	008a      	lsls	r2, r1, #2
        tmpreg &= ~pinmask;
 8004524:	230f      	movs	r3, #15
 8004526:	4093      	lsls	r3, r2

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8004528:	fa17 f202 	lsls.w	r2, r7, r2
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 800452c:	ea24 0403 	bic.w	r4, r4, r3

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8004530:	4314      	orrs	r4, r2

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8004532:	2d28      	cmp	r5, #40
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 8004534:	9301      	str	r3, [sp, #4]
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
 8004536:	bf08      	it	eq
 8004538:	f8c0 c014 	streq.w	ip, [r0, #20]

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800453c:	d003      	beq.n	8004546 <GPIO_Init+0x9a>
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800453e:	2d48      	cmp	r5, #72
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
 8004540:	bf08      	it	eq
 8004542:	f8c0 c010 	streq.w	ip, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004546:	3101      	adds	r1, #1
 8004548:	2908      	cmp	r1, #8
 800454a:	d1e1      	bne.n	8004510 <GPIO_Init+0x64>
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 800454c:	6044      	str	r4, [r0, #4]
  }
}
 800454e:	b003      	add	sp, #12
 8004550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004552:	46c0      	nop			(mov r8, r8)

08004554 <GPIO_StructInit>:
* Return         : None
*******************************************************************************/
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8004554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004558:	8003      	strh	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800455a:	2302      	movs	r3, #2
 800455c:	7083      	strb	r3, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800455e:	2304      	movs	r3, #4
 8004560:	70c3      	strb	r3, [r0, #3]
}
 8004562:	4770      	bx	lr

08004564 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (u32)Bit_RESET)
 8004564:	6883      	ldr	r3, [r0, #8]
 8004566:	4219      	tst	r1, r3
 8004568:	bf0c      	ite	eq
 800456a:	2000      	moveq	r0, #0
 800456c:	2001      	movne	r0, #1
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 800456e:	4770      	bx	lr

08004570 <GPIO_ReadInputData>:
u16 GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((u16)GPIOx->IDR);
 8004570:	6880      	ldr	r0, [r0, #8]
 8004572:	b280      	uxth	r0, r0
}
 8004574:	4770      	bx	lr
 8004576:	46c0      	nop			(mov r8, r8)

08004578 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (u32)Bit_RESET)
 8004578:	68c3      	ldr	r3, [r0, #12]
 800457a:	4219      	tst	r1, r3
 800457c:	bf0c      	ite	eq
 800457e:	2000      	moveq	r0, #0
 8004580:	2001      	movne	r0, #1
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 8004582:	4770      	bx	lr

08004584 <GPIO_ReadOutputData>:
u16 GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((u16)GPIOx->ODR);
 8004584:	68c0      	ldr	r0, [r0, #12]
 8004586:	b280      	uxth	r0, r0
}
 8004588:	4770      	bx	lr
 800458a:	46c0      	nop			(mov r8, r8)

0800458c <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 800458c:	6101      	str	r1, [r0, #16]
}
 800458e:	4770      	bx	lr

08004590 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8004590:	6141      	str	r1, [r0, #20]
}
 8004592:	4770      	bx	lr

08004594 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8004594:	b10a      	cbz	r2, 800459a <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004596:	6101      	str	r1, [r0, #16]
 8004598:	e000      	b.n	800459c <GPIO_WriteBit+0x8>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 800459a:	6141      	str	r1, [r0, #20]
  }
}
 800459c:	4770      	bx	lr
 800459e:	46c0      	nop			(mov r8, r8)

080045a0 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, u16 PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 80045a0:	60c1      	str	r1, [r0, #12]
}
 80045a2:	4770      	bx	lr

080045a4 <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 80045a4:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80045a8:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80045aa:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80045ac:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80045ae:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80045b0:	6983      	ldr	r3, [r0, #24]
}
 80045b2:	4770      	bx	lr

080045b4 <GPIO_EventOutputConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 80045b4:	f8df c018 	ldr.w	ip, [pc, #24]	; 80045d0 <GPIO_EventOutputConfig+0x1c>
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 80045b8:	f64f 7380 	movw	r3, #65408	; 0xff80

  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 80045bc:	f8dc 2000 	ldr.w	r2, [ip]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
  tmpreg |= (u32)GPIO_PortSource << 0x04;
 80045c0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 80045c4:	ea02 0303 	and.w	r3, r2, r3
  tmpreg |= (u32)GPIO_PortSource << 0x04;
  tmpreg |= GPIO_PinSource;
 80045c8:	4319      	orrs	r1, r3

  AFIO->EVCR = tmpreg;
 80045ca:	f8cc 1000 	str.w	r1, [ip]
}
 80045ce:	4770      	bx	lr
 80045d0:	40010000 	.word	0x40010000

080045d4 <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(vu32 *) EVCR_EVOE_BB = (u32)NewState;
 80045d4:	4b01      	ldr	r3, [pc, #4]	(80045dc <GPIO_EventOutputCmd+0x8>)
 80045d6:	6018      	str	r0, [r3, #0]
}
 80045d8:	4770      	bx	lr
 80045da:	46c0      	nop			(mov r8, r8)
 80045dc:	4220001c 	.word	0x4220001c

080045e0 <GPIO_PinRemapConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
{
 80045e0:	b530      	push	{r4, r5, lr}
  tmpreg = AFIO->MAPR;

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80045e2:	f400 1340 	and.w	r3, r0, #3145728	; 0x300000
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 80045e6:	0404      	lsls	r4, r0, #16
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
{
 80045e8:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 80045ea:	4914      	ldr	r1, [pc, #80]	(800463c <GPIO_PinRemapConfig+0x5c>)

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 80045ec:	0c24      	lsrs	r4, r4, #16

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80045ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 80045f2:	f8d1 c004 	ldr.w	ip, [r1, #4]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80045f6:	d106      	bne.n	8004606 <GPIO_PinRemapConfig+0x26>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80045f8:	684b      	ldr	r3, [r1, #4]
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80045fa:	f02c 6270 	bic.w	r2, ip, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80045fe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004602:	604b      	str	r3, [r1, #4]
 8004604:	e010      	b.n	8004628 <GPIO_PinRemapConfig+0x48>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8004606:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800460a:	d005      	beq.n	8004618 <GPIO_PinRemapConfig+0x38>
  {
    tmp1 = ((u32)0x03) << tmpmask;
    tmpreg &= ~tmp1;
 800460c:	f400 2270 	and.w	r2, r0, #983040	; 0xf0000
 8004610:	0c12      	lsrs	r2, r2, #16
 8004612:	2303      	movs	r3, #3
 8004614:	4093      	lsls	r3, r2
 8004616:	e003      	b.n	8004620 <GPIO_PinRemapConfig+0x40>
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8004618:	0d43      	lsrs	r3, r0, #21
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	fa14 f303 	lsls.w	r3, r4, r3
 8004620:	ea2c 0303 	bic.w	r3, ip, r3
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8004624:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
  }

  if (NewState != DISABLE)
 8004628:	b125      	cbz	r5, 8004634 <GPIO_PinRemapConfig+0x54>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 800462a:	0d43      	lsrs	r3, r0, #21
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	fa14 f303 	lsls.w	r3, r4, r3
 8004632:	431a      	orrs	r2, r3
  }

  AFIO->MAPR = tmpreg;
 8004634:	4b01      	ldr	r3, [pc, #4]	(800463c <GPIO_PinRemapConfig+0x5c>)
 8004636:	605a      	str	r2, [r3, #4]
}
 8004638:	bd30      	pop	{r4, r5, pc}
 800463a:	46c0      	nop			(mov r8, r8)
 800463c:	40010000 	.word	0x40010000

08004640 <GPIO_EXTILineConfig>:
*                   This parameter can be GPIO_PinSourcex where x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_EXTILineConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
{
 8004640:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 8004642:	f001 0403 	and.w	r4, r1, #3	; 0x3
 8004646:	00a4      	lsls	r4, r4, #2

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8004648:	230f      	movs	r3, #15
 800464a:	40a3      	lsls	r3, r4
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
 800464c:	40a0      	lsls	r0, r4
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 800464e:	f8df c020 	ldr.w	ip, [pc, #32]	; 8004670 <GPIO_EXTILineConfig+0x30>
 8004652:	0889      	lsrs	r1, r1, #2
 8004654:	3102      	adds	r1, #2
 8004656:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 800465a:	ea22 0203 	bic.w	r2, r2, r3
 800465e:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
 8004662:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
 8004666:	4318      	orrs	r0, r3
 8004668:	f84c 0021 	str.w	r0, [ip, r1, lsl #2]
}
 800466c:	bd10      	pop	{r4, pc}
 800466e:	46c0      	nop			(mov r8, r8)
 8004670:	40010000 	.word	0x40010000

08004674 <GPIO_AFIODeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
 8004674:	b500      	push	{lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8004676:	2001      	movs	r0, #1
 8004678:	2101      	movs	r1, #1
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
 800467a:	b081      	sub	sp, #4
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 800467c:	f000 fbf6 	bl	8004e6c <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8004680:	2001      	movs	r0, #1
 8004682:	2100      	movs	r1, #0
 8004684:	f000 fbf2 	bl	8004e6c <RCC_APB2PeriphResetCmd>
}
 8004688:	b001      	add	sp, #4
 800468a:	bd00      	pop	{pc}

0800468c <GPIO_DeInit>:
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800468c:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 800468e:	4b27      	ldr	r3, [pc, #156]	(800472c <GPIO_DeInit+0xa0>)
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8004690:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 8004692:	4298      	cmp	r0, r3
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8004694:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 8004696:	d02b      	beq.n	80046f0 <GPIO_DeInit+0x64>
 8004698:	d80c      	bhi.n	80046b4 <GPIO_DeInit+0x28>
 800469a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800469e:	4298      	cmp	r0, r3
 80046a0:	d01a      	beq.n	80046d8 <GPIO_DeInit+0x4c>
 80046a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046a6:	4298      	cmp	r0, r3
 80046a8:	d01c      	beq.n	80046e4 <GPIO_DeInit+0x58>
 80046aa:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80046ae:	4298      	cmp	r0, r3
 80046b0:	d13a      	bne.n	8004728 <GPIO_DeInit+0x9c>
 80046b2:	e00b      	b.n	80046cc <GPIO_DeInit+0x40>
 80046b4:	4b1e      	ldr	r3, [pc, #120]	(8004730 <GPIO_DeInit+0xa4>)
 80046b6:	4298      	cmp	r0, r3
 80046b8:	d026      	beq.n	8004708 <GPIO_DeInit+0x7c>
 80046ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046be:	4298      	cmp	r0, r3
 80046c0:	d028      	beq.n	8004714 <GPIO_DeInit+0x88>
 80046c2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80046c6:	4298      	cmp	r0, r3
 80046c8:	d12e      	bne.n	8004728 <GPIO_DeInit+0x9c>
 80046ca:	e017      	b.n	80046fc <GPIO_DeInit+0x70>
  {
    case GPIOA_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80046cc:	2004      	movs	r0, #4
 80046ce:	2101      	movs	r1, #1
 80046d0:	f000 fbcc 	bl	8004e6c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 80046d4:	2004      	movs	r0, #4
 80046d6:	e024      	b.n	8004722 <GPIO_DeInit+0x96>
      break;

    case GPIOB_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80046d8:	2008      	movs	r0, #8
 80046da:	2101      	movs	r1, #1
 80046dc:	f000 fbc6 	bl	8004e6c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 80046e0:	2008      	movs	r0, #8
 80046e2:	e01e      	b.n	8004722 <GPIO_DeInit+0x96>
      break;

    case GPIOC_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80046e4:	2010      	movs	r0, #16
 80046e6:	2101      	movs	r1, #1
 80046e8:	f000 fbc0 	bl	8004e6c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 80046ec:	2010      	movs	r0, #16
 80046ee:	e018      	b.n	8004722 <GPIO_DeInit+0x96>
      break;

    case GPIOD_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 80046f0:	2020      	movs	r0, #32
 80046f2:	2101      	movs	r1, #1
 80046f4:	f000 fbba 	bl	8004e6c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 80046f8:	2020      	movs	r0, #32
 80046fa:	e012      	b.n	8004722 <GPIO_DeInit+0x96>
      break;
      
    case GPIOE_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 80046fc:	2040      	movs	r0, #64
 80046fe:	2101      	movs	r1, #1
 8004700:	f000 fbb4 	bl	8004e6c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 8004704:	2040      	movs	r0, #64
 8004706:	e00c      	b.n	8004722 <GPIO_DeInit+0x96>
      break; 

    case GPIOF_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 8004708:	2080      	movs	r0, #128
 800470a:	2101      	movs	r1, #1
 800470c:	f000 fbae 	bl	8004e6c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 8004710:	2080      	movs	r0, #128
 8004712:	e006      	b.n	8004722 <GPIO_DeInit+0x96>
      break;

    case GPIOG_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 8004714:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004718:	2101      	movs	r1, #1
 800471a:	f000 fba7 	bl	8004e6c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 800471e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004722:	2100      	movs	r1, #0
 8004724:	f000 fba2 	bl	8004e6c <RCC_APB2PeriphResetCmd>
      break;                       

    default:
      break;
  }
}
 8004728:	b003      	add	sp, #12
 800472a:	bd00      	pop	{pc}
 800472c:	40011400 	.word	0x40011400
 8004730:	40011c00 	.word	0x40011c00

08004734 <NVIC_DeInit>:
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 8004734:	4b0b      	ldr	r3, [pc, #44]	(8004764 <NVIC_DeInit+0x30>)
 8004736:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  NVIC->ICER[1] = 0x0FFFFFFF;
 800473a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 800473e:	f8c3 1080 	str.w	r1, [r3, #128]
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
  {
     NVIC->IPR[index] = 0x00000000;
 8004742:	4618      	mov	r0, r3
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
 8004744:	f8c3 2084 	str.w	r2, [r3, #132]
  NVIC->ICPR[0] = 0xFFFFFFFF;
 8004748:	f8c3 1180 	str.w	r1, [r3, #384]
  NVIC->ICPR[1] = 0x0FFFFFFF;
 800474c:	f8c3 2184 	str.w	r2, [r3, #388]
  
  for(index = 0; index < 0x0F; index++)
  {
     NVIC->IPR[index] = 0x00000000;
 8004750:	2100      	movs	r1, #0
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
 8004752:	2200      	movs	r2, #0
  
  for(index = 0; index < 0x0F; index++)
  {
     NVIC->IPR[index] = 0x00000000;
 8004754:	f102 03c0 	add.w	r3, r2, #192	; 0xc0
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 8004758:	3201      	adds	r2, #1
 800475a:	2a0f      	cmp	r2, #15
  {
     NVIC->IPR[index] = 0x00000000;
 800475c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 8004760:	d1f8      	bne.n	8004754 <NVIC_DeInit+0x20>
  {
     NVIC->IPR[index] = 0x00000000;
  } 
}
 8004762:	4770      	bx	lr
 8004764:	e000e100 	.word	0xe000e100

08004768 <NVIC_SCBDeInit>:
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 8004768:	4a09      	ldr	r2, [pc, #36]	(8004790 <NVIC_SCBDeInit+0x28>)
 800476a:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
  SCB->VTOR = 0x00000000;
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 800476e:	4909      	ldr	r1, [pc, #36]	(8004794 <NVIC_SCBDeInit+0x2c>)
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 8004770:	6053      	str	r3, [r2, #4]
  SCB->VTOR = 0x00000000;
 8004772:	2300      	movs	r3, #0
 8004774:	6093      	str	r3, [r2, #8]
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 8004776:	60d1      	str	r1, [r2, #12]
  SCB->SCR = 0x00000000;
 8004778:	6113      	str	r3, [r2, #16]
  SCB->CCR = 0x00000000;
 800477a:	6153      	str	r3, [r2, #20]
  for(index = 0; index < 0x03; index++)
  {
     SCB->SHPR[index] = 0;
 800477c:	6193      	str	r3, [r2, #24]
 800477e:	61d3      	str	r3, [r2, #28]
 8004780:	6213      	str	r3, [r2, #32]
  }
  SCB->SHCSR = 0x00000000;
 8004782:	6253      	str	r3, [r2, #36]
  SCB->CFSR = 0xFFFFFFFF;
 8004784:	3b01      	subs	r3, #1
 8004786:	6293      	str	r3, [r2, #40]
  SCB->HFSR = 0xFFFFFFFF;
 8004788:	62d3      	str	r3, [r2, #44]
  SCB->DFSR = 0xFFFFFFFF;
 800478a:	6313      	str	r3, [r2, #48]
}
 800478c:	4770      	bx	lr
 800478e:	46c0      	nop			(mov r8, r8)
 8004790:	e000ed00 	.word	0xe000ed00
 8004794:	05fa0000 	.word	0x05fa0000

08004798 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8004798:	f040 60be 	orr.w	r0, r0, #99614720	; 0x5f00000
 800479c:	4b02      	ldr	r3, [pc, #8]	(80047a8 <NVIC_PriorityGroupConfig+0x10>)
 800479e:	f440 2020 	orr.w	r0, r0, #655360	; 0xa0000
 80047a2:	60d8      	str	r0, [r3, #12]
}
 80047a4:	4770      	bx	lr
 80047a6:	46c0      	nop			(mov r8, r8)
 80047a8:	e000ed00 	.word	0xe000ed00

080047ac <NVIC_Init>:
*                    specified NVIC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80047ac:	b530      	push	{r4, r5, lr}
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80047ae:	78c3      	ldrb	r3, [r0, #3]
 80047b0:	7805      	ldrb	r5, [r0, #0]
 80047b2:	b35b      	cbz	r3, 800480c <NVIC_Init+0x60>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 80047b4:	4b1a      	ldr	r3, [pc, #104]	(8004820 <NVIC_Init+0x74>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80047b6:	7841      	ldrb	r1, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 80047b8:	68da      	ldr	r2, [r3, #12]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 80047ba:	4c1a      	ldr	r4, [pc, #104]	(8004824 <NVIC_Init+0x78>)
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 80047bc:	ea6f 0202 	mvn.w	r2, r2
 80047c0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80047c4:	0a12      	lsrs	r2, r2, #8
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80047c6:	f1c2 0304 	rsb	r3, r2, #4	; 0x4
 80047ca:	4099      	lsls	r1, r3
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80047cc:	230f      	movs	r3, #15
 80047ce:	40d3      	lsrs	r3, r2
 80047d0:	7882      	ldrb	r2, [r0, #2]

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80047d2:	f005 0003 	and.w	r0, r5, #3	; 0x3
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80047d6:	4013      	ands	r3, r2
 80047d8:	430b      	orrs	r3, r1

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80047da:	00c0      	lsls	r0, r0, #3
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 80047dc:	011b      	lsls	r3, r3, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80047de:	22ff      	movs	r2, #255
 80047e0:	4082      	lsls	r2, r0
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80047e2:	4083      	lsls	r3, r0
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 80047e4:	ea4f 0c95 	mov.w	ip, r5, lsr #2
 80047e8:	f10c 0cc0 	add.w	ip, ip, #192	; 0xc0
 80047ec:	f854 102c 	ldr.w	r1, [r4, ip, lsl #2]
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
    tmppriority &= tmpmask;  
    tmpreg |= tmppriority;
 80047f0:	4013      	ands	r3, r2
    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 80047f2:	ea21 0102 	bic.w	r1, r1, r2
    tmppriority &= tmpmask;  
    tmpreg |= tmppriority;
 80047f6:	430b      	orrs	r3, r1

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 80047f8:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 80047fc:	f005 021f 	and.w	r2, r5, #31	; 0x1f
 8004800:	2301      	movs	r3, #1
 8004802:	4093      	lsls	r3, r2
 8004804:	0969      	lsrs	r1, r5, #5
 8004806:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
 800480a:	e008      	b.n	800481e <NVIC_Init+0x72>
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 800480c:	f005 021f 	and.w	r2, r5, #31	; 0x1f
 8004810:	2301      	movs	r3, #1
 8004812:	4093      	lsls	r3, r2
 8004814:	0969      	lsrs	r1, r5, #5
 8004816:	4a03      	ldr	r2, [pc, #12]	(8004824 <NVIC_Init+0x78>)
 8004818:	3120      	adds	r1, #32
 800481a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
}
 800481e:	bd30      	pop	{r4, r5, pc}
 8004820:	e000ed00 	.word	0xe000ed00
 8004824:	e000e100 	.word	0xe000e100

08004828 <NVIC_StructInit>:
* Return         : None
*******************************************************************************/
void NVIC_StructInit(NVIC_InitTypeDef* NVIC_InitStruct)
{
  /* NVIC_InitStruct members default value */
  NVIC_InitStruct->NVIC_IRQChannel = 0x00;
 8004828:	2300      	movs	r3, #0
 800482a:	7003      	strb	r3, [r0, #0]
  NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority = 0x00;
 800482c:	7043      	strb	r3, [r0, #1]
  NVIC_InitStruct->NVIC_IRQChannelSubPriority = 0x00;
 800482e:	7083      	strb	r3, [r0, #2]
  NVIC_InitStruct->NVIC_IRQChannelCmd = DISABLE;
 8004830:	70c3      	strb	r3, [r0, #3]
}
 8004832:	4770      	bx	lr

08004834 <NVIC_GetCurrentPendingIRQChannel>:
* Output         : None
* Return         : Pending IRQ Channel Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentPendingIRQChannel(void)
{
  return ((u16)((SCB->ICSR & (u32)0x003FF000) >> 0x0C));
 8004834:	4b03      	ldr	r3, [pc, #12]	(8004844 <NVIC_GetCurrentPendingIRQChannel+0x10>)
 8004836:	4804      	ldr	r0, [pc, #16]	(8004848 <NVIC_GetCurrentPendingIRQChannel+0x14>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	ea03 0000 	and.w	r0, r3, r0
 800483e:	0b00      	lsrs	r0, r0, #12
}
 8004840:	4770      	bx	lr
 8004842:	46c0      	nop			(mov r8, r8)
 8004844:	e000ed00 	.word	0xe000ed00
 8004848:	003ff000 	.word	0x003ff000

0800484c <NVIC_GetIRQChannelPendingBitStatus>:
  u32 tmp = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 800484c:	f000 031f 	and.w	r3, r0, #31	; 0x1f
 8004850:	2201      	movs	r2, #1
 8004852:	409a      	lsls	r2, r3

  if (((NVIC->ISPR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp)
 8004854:	0940      	lsrs	r0, r0, #5
 8004856:	4b05      	ldr	r3, [pc, #20]	(800486c <NVIC_GetIRQChannelPendingBitStatus+0x20>)
 8004858:	3040      	adds	r0, #64
 800485a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800485e:	4010      	ands	r0, r2
 8004860:	4290      	cmp	r0, r2
 8004862:	bf14      	ite	ne
 8004864:	2000      	movne	r0, #0
 8004866:	2001      	moveq	r0, #1
  else
  {
    pendingirqstatus = RESET;
  }
  return pendingirqstatus;
}
 8004868:	4770      	bx	lr
 800486a:	46c0      	nop			(mov r8, r8)
 800486c:	e000e100 	.word	0xe000e100

08004870 <NVIC_SetIRQChannelPendingBit>:
void NVIC_SetIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  *(vu32*) 0xE000EF00 = (u32)NVIC_IRQChannel;
 8004870:	4b01      	ldr	r3, [pc, #4]	(8004878 <NVIC_SetIRQChannelPendingBit+0x8>)
 8004872:	6018      	str	r0, [r3, #0]
}
 8004874:	4770      	bx	lr
 8004876:	46c0      	nop			(mov r8, r8)
 8004878:	e000ef00 	.word	0xe000ef00

0800487c <NVIC_ClearIRQChannelPendingBit>:
void NVIC_ClearIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  NVIC->ICPR[(NVIC_IRQChannel >> 0x05)] = (u32)0x01 << (NVIC_IRQChannel & (u32)0x1F);
 800487c:	0941      	lsrs	r1, r0, #5
 800487e:	2301      	movs	r3, #1
 8004880:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 8004884:	4083      	lsls	r3, r0
 8004886:	4a02      	ldr	r2, [pc, #8]	(8004890 <NVIC_ClearIRQChannelPendingBit+0x14>)
 8004888:	3160      	adds	r1, #96
 800488a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 800488e:	4770      	bx	lr
 8004890:	e000e100 	.word	0xe000e100

08004894 <NVIC_GetCurrentActiveHandler>:
* Output         : None
* Return         : Active Handler Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentActiveHandler(void)
{
  return ((u16)(SCB->ICSR & (u32)0x3FF));
 8004894:	4b02      	ldr	r3, [pc, #8]	(80048a0 <NVIC_GetCurrentActiveHandler+0xc>)
 8004896:	6858      	ldr	r0, [r3, #4]
 8004898:	0580      	lsls	r0, r0, #22
 800489a:	0d80      	lsrs	r0, r0, #22
}
 800489c:	4770      	bx	lr
 800489e:	46c0      	nop			(mov r8, r8)
 80048a0:	e000ed00 	.word	0xe000ed00

080048a4 <NVIC_GetIRQChannelActiveBitStatus>:
  u32 tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 80048a4:	f000 031f 	and.w	r3, r0, #31	; 0x1f
 80048a8:	2201      	movs	r2, #1
 80048aa:	409a      	lsls	r2, r3

  if (((NVIC->IABR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp )
 80048ac:	0940      	lsrs	r0, r0, #5
 80048ae:	4b05      	ldr	r3, [pc, #20]	(80048c4 <NVIC_GetIRQChannelActiveBitStatus+0x20>)
 80048b0:	3080      	adds	r0, #128
 80048b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80048b6:	4010      	ands	r0, r2
 80048b8:	4290      	cmp	r0, r2
 80048ba:	bf14      	ite	ne
 80048bc:	2000      	movne	r0, #0
 80048be:	2001      	moveq	r0, #1
  else
  {
    activeirqstatus = RESET;
  }
  return activeirqstatus;
}
 80048c0:	4770      	bx	lr
 80048c2:	46c0      	nop			(mov r8, r8)
 80048c4:	e000e100 	.word	0xe000e100

080048c8 <NVIC_GetCPUID>:
* Output         : None
* Return         : CPU ID.
*******************************************************************************/
u32 NVIC_GetCPUID(void)
{
  return (SCB->CPUID);
 80048c8:	4b01      	ldr	r3, [pc, #4]	(80048d0 <NVIC_GetCPUID+0x8>)
 80048ca:	6818      	ldr	r0, [r3, #0]
}
 80048cc:	4770      	bx	lr
 80048ce:	46c0      	nop			(mov r8, r8)
 80048d0:	e000ed00 	.word	0xe000ed00

080048d4 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (u32)0x1FFFFF80);
 80048d4:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 80048d8:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80048dc:	4b01      	ldr	r3, [pc, #4]	(80048e4 <NVIC_SetVectorTable+0x10>)
 80048de:	4301      	orrs	r1, r0
 80048e0:	6099      	str	r1, [r3, #8]
}
 80048e2:	4770      	bx	lr
 80048e4:	e000ed00 	.word	0xe000ed00

080048e8 <NVIC_GenerateSystemReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateSystemReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x04;
 80048e8:	4a01      	ldr	r2, [pc, #4]	(80048f0 <NVIC_GenerateSystemReset+0x8>)
 80048ea:	4b02      	ldr	r3, [pc, #8]	(80048f4 <NVIC_GenerateSystemReset+0xc>)
 80048ec:	60da      	str	r2, [r3, #12]
}
 80048ee:	4770      	bx	lr
 80048f0:	05fa0004 	.word	0x05fa0004
 80048f4:	e000ed00 	.word	0xe000ed00

080048f8 <NVIC_GenerateCoreReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateCoreReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x01;
 80048f8:	4a01      	ldr	r2, [pc, #4]	(8004900 <NVIC_GenerateCoreReset+0x8>)
 80048fa:	4b02      	ldr	r3, [pc, #8]	(8004904 <NVIC_GenerateCoreReset+0xc>)
 80048fc:	60da      	str	r2, [r3, #12]
}
 80048fe:	4770      	bx	lr
 8004900:	05fa0001 	.word	0x05fa0001
 8004904:	e000ed00 	.word	0xe000ed00

08004908 <NVIC_SystemLPConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8004908:	b121      	cbz	r1, 8004914 <NVIC_SystemLPConfig+0xc>
  {
    SCB->SCR |= LowPowerMode;
 800490a:	4a05      	ldr	r2, [pc, #20]	(8004920 <NVIC_SystemLPConfig+0x18>)
 800490c:	6913      	ldr	r3, [r2, #16]
 800490e:	ea40 0303 	orr.w	r3, r0, r3
 8004912:	e003      	b.n	800491c <NVIC_SystemLPConfig+0x14>
  }
  else
  {
    SCB->SCR &= (u32)(~(u32)LowPowerMode);
 8004914:	4a02      	ldr	r2, [pc, #8]	(8004920 <NVIC_SystemLPConfig+0x18>)
 8004916:	6913      	ldr	r3, [r2, #16]
 8004918:	ea23 0300 	bic.w	r3, r3, r0
 800491c:	6113      	str	r3, [r2, #16]
  }
}
 800491e:	4770      	bx	lr
 8004920:	e000ed00 	.word	0xe000ed00

08004924 <NVIC_SystemHandlerConfig>:

  /* Check the parameters */
  assert_param(IS_CONFIG_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  tmpreg =  (u32)0x01 << (SystemHandler & (u32)0x1F);
 8004924:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 8004928:	2301      	movs	r3, #1
 800492a:	fa13 f000 	lsls.w	r0, r3, r0

  if (NewState != DISABLE)
 800492e:	b121      	cbz	r1, 800493a <NVIC_SystemHandlerConfig+0x16>
  {
    SCB->SHCSR |= tmpreg;
 8004930:	4a05      	ldr	r2, [pc, #20]	(8004948 <NVIC_SystemHandlerConfig+0x24>)
 8004932:	6a53      	ldr	r3, [r2, #36]
 8004934:	ea40 0303 	orr.w	r3, r0, r3
 8004938:	e003      	b.n	8004942 <NVIC_SystemHandlerConfig+0x1e>
  }
  else
  {
    SCB->SHCSR &= ~tmpreg;
 800493a:	4a03      	ldr	r2, [pc, #12]	(8004948 <NVIC_SystemHandlerConfig+0x24>)
 800493c:	6a53      	ldr	r3, [r2, #36]
 800493e:	ea23 0300 	bic.w	r3, r3, r0
 8004942:	6253      	str	r3, [r2, #36]
  }
}
 8004944:	4770      	bx	lr
 8004946:	46c0      	nop			(mov r8, r8)
 8004948:	e000ed00 	.word	0xe000ed00

0800494c <NVIC_SystemHandlerPriorityConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SystemHandlerPriorityConfig(u32 SystemHandler, u8 SystemHandlerPreemptionPriority,
                                      u8 SystemHandlerSubPriority)
{
 800494c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 800494e:	4c14      	ldr	r4, [pc, #80]	(80049a0 <NVIC_SystemHandlerPriorityConfig+0x54>)
 8004950:	68e3      	ldr	r3, [r4, #12]
 8004952:	ea6f 0303 	mvn.w	r3, r3
 8004956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800495a:	0a1b      	lsrs	r3, r3, #8
  tmp1 = (0x4 - tmppriority);
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
 800495c:	f1c3 0c04 	rsb	ip, r3, #4	; 0x4
 8004960:	fa01 f10c 	lsl.w	r1, r1, ip
  tmppriority |=  SystemHandlerSubPriority & tmp2;
 8004964:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004968:	fa2c f303 	lsr.w	r3, ip, r3
 800496c:	401a      	ands	r2, r3
 800496e:	430a      	orrs	r2, r1

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
 8004970:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
 8004974:	0940      	lsrs	r0, r0, #5
 8004976:	f000 0018 	and.w	r0, r0, #24	; 0x18
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
 800497a:	fa0c fc00 	lsl.w	ip, ip, r0
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;

  tmppriority = tmppriority << 0x04;
 800497e:	0112      	lsls	r2, r2, #4
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
  SCB->SHPR[tmp1] |= tmppriority;
 8004980:	4082      	lsls	r2, r0
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
 8004982:	0989      	lsrs	r1, r1, #6
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
 8004984:	3106      	adds	r1, #6
 8004986:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 800498a:	ea23 030c 	bic.w	r3, r3, ip
 800498e:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
  SCB->SHPR[tmp1] |= tmppriority;
 8004992:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 8004996:	431a      	orrs	r2, r3
 8004998:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
}
 800499c:	bd10      	pop	{r4, pc}
 800499e:	46c0      	nop			(mov r8, r8)
 80049a0:	e000ed00 	.word	0xe000ed00

080049a4 <NVIC_GetSystemHandlerPendingBitStatus>:
  u32 tmp = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_GET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0A);
 80049a4:	0a80      	lsrs	r0, r0, #10
  tmppos &= (u32)0x0F;

  tmppos = (u32)0x01 << tmppos;
 80049a6:	f000 000f 	and.w	r0, r0, #15	; 0xf
 80049aa:	2301      	movs	r3, #1
 80049ac:	4083      	lsls	r3, r0

  tmp = SCB->SHCSR & tmppos;
 80049ae:	4a04      	ldr	r2, [pc, #16]	(80049c0 <NVIC_GetSystemHandlerPendingBitStatus+0x1c>)
 80049b0:	6a50      	ldr	r0, [r2, #36]
 80049b2:	ea03 0000 	and.w	r0, r3, r0
 80049b6:	4298      	cmp	r0, r3
 80049b8:	bf14      	ite	ne
 80049ba:	2000      	movne	r0, #0
 80049bc:	2001      	moveq	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80049be:	4770      	bx	lr
 80049c0:	e000ed00 	.word	0xe000ed00

080049c4 <NVIC_SetSystemHandlerPendingBit>:
  assert_param(IS_SET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
  /* Set the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << tmp);
 80049c4:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 80049c8:	2301      	movs	r3, #1
 80049ca:	4083      	lsls	r3, r0
 80049cc:	4a02      	ldr	r2, [pc, #8]	(80049d8 <NVIC_SetSystemHandlerPendingBit+0x14>)
 80049ce:	6851      	ldr	r1, [r2, #4]
 80049d0:	430b      	orrs	r3, r1
 80049d2:	6053      	str	r3, [r2, #4]
}
 80049d4:	4770      	bx	lr
 80049d6:	46c0      	nop			(mov r8, r8)
 80049d8:	e000ed00 	.word	0xe000ed00

080049dc <NVIC_ClearSystemHandlerPendingBit>:
  assert_param(IS_CLEAR_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
  /* Clear the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << (tmp - 0x01));
 80049dc:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 80049e0:	3801      	subs	r0, #1
 80049e2:	2301      	movs	r3, #1
 80049e4:	4083      	lsls	r3, r0
 80049e6:	4a02      	ldr	r2, [pc, #8]	(80049f0 <NVIC_ClearSystemHandlerPendingBit+0x14>)
 80049e8:	6851      	ldr	r1, [r2, #4]
 80049ea:	430b      	orrs	r3, r1
 80049ec:	6053      	str	r3, [r2, #4]
}
 80049ee:	4770      	bx	lr
 80049f0:	e000ed00 	.word	0xe000ed00

080049f4 <NVIC_GetSystemHandlerActiveBitStatus>:
  /* Check the parameters */
  assert_param(IS_GET_ACTIVE_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0E) & (u32)0x0F;

  tmppos = (u32)0x01 << tmppos;
 80049f4:	0b80      	lsrs	r0, r0, #14
 80049f6:	f000 000f 	and.w	r0, r0, #15	; 0xf
 80049fa:	2301      	movs	r3, #1
 80049fc:	4083      	lsls	r3, r0

  tmp = SCB->SHCSR & tmppos;
 80049fe:	4a04      	ldr	r2, [pc, #16]	(8004a10 <NVIC_GetSystemHandlerActiveBitStatus+0x1c>)
 8004a00:	6a50      	ldr	r0, [r2, #36]
 8004a02:	ea03 0000 	and.w	r0, r3, r0
 8004a06:	4298      	cmp	r0, r3
 8004a08:	bf14      	ite	ne
 8004a0a:	2000      	movne	r0, #0
 8004a0c:	2001      	moveq	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004a0e:	4770      	bx	lr
 8004a10:	e000ed00 	.word	0xe000ed00

08004a14 <NVIC_GetFaultHandlerSources>:
  u32 tmpreg = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
 8004a14:	0c83      	lsrs	r3, r0, #18
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;

  if (tmpreg == 0x00)
 8004a16:	f013 0303 	ands.w	r3, r3, #3	; 0x3
 8004a1a:	d102      	bne.n	8004a22 <NVIC_GetFaultHandlerSources+0xe>
  {
    faultsources = SCB->HFSR;
 8004a1c:	4b0d      	ldr	r3, [pc, #52]	(8004a54 <NVIC_GetFaultHandlerSources+0x40>)
 8004a1e:	6ad8      	ldr	r0, [r3, #44]
 8004a20:	e017      	b.n	8004a52 <NVIC_GetFaultHandlerSources+0x3e>
  }
  else if (tmpreg == 0x01)
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d113      	bne.n	8004a4e <NVIC_GetFaultHandlerSources+0x3a>
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 8004a26:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8004a2a:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8004a2e:	33fe      	adds	r3, #254

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;
 8004a30:	0d02      	lsrs	r2, r0, #20
  {
    faultsources = SCB->HFSR;
  }
  else if (tmpreg == 0x01)
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 8004a32:	3301      	adds	r3, #1

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;
 8004a34:	f002 0203 	and.w	r2, r2, #3	; 0x3
  {
    faultsources = SCB->HFSR;
  }
  else if (tmpreg == 0x01)
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 8004a38:	6a99      	ldr	r1, [r3, #40]
 8004a3a:	00d3      	lsls	r3, r2, #3
 8004a3c:	fa31 f003 	lsrs.w	r0, r1, r3
    if (tmppos != 0x02)
 8004a40:	2a02      	cmp	r2, #2
    {
      faultsources &= (u32)0x0F;
 8004a42:	bf14      	ite	ne
 8004a44:	f000 000f 	andne.w	r0, r0, #15	; 0xf
    }
    else
    {
      faultsources &= (u32)0xFF;
 8004a48:	f000 00ff 	andeq.w	r0, r0, #255	; 0xff
 8004a4c:	e001      	b.n	8004a52 <NVIC_GetFaultHandlerSources+0x3e>
    }
  }
  else
  {
    faultsources = SCB->DFSR;
 8004a4e:	4b01      	ldr	r3, [pc, #4]	(8004a54 <NVIC_GetFaultHandlerSources+0x40>)
 8004a50:	6b18      	ldr	r0, [r3, #48]
  }
  return faultsources;
}
 8004a52:	4770      	bx	lr
 8004a54:	e000ed00 	.word	0xe000ed00

08004a58 <NVIC_GetFaultAddress>:
  /* Check the parameters */
  assert_param(IS_FAULT_ADDRESS_SYSTEM_HANDLER(SystemHandler));
  
  tmp = (SystemHandler >> 0x16) & (u32)0x01;

  if (tmp == 0x00)
 8004a58:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
  {
    faultaddress = SCB->MMFAR;
 8004a5c:	bf0b      	itete	eq
 8004a5e:	4b02      	ldreq	r3, [pc, #8]	(8004a68 <NVIC_GetFaultAddress+0x10>)
  }
  else
  {
    faultaddress = SCB->BFAR;
 8004a60:	4b01      	ldrne	r3, [pc, #4]	(8004a68 <NVIC_GetFaultAddress+0x10>)
  
  tmp = (SystemHandler >> 0x16) & (u32)0x01;

  if (tmp == 0x00)
  {
    faultaddress = SCB->MMFAR;
 8004a62:	6b58      	ldreq	r0, [r3, #52]
  }
  else
  {
    faultaddress = SCB->BFAR;
 8004a64:	6b98      	ldrne	r0, [r3, #56]
  }
  return faultaddress;
}
 8004a66:	4770      	bx	lr
 8004a68:	e000ed00 	.word	0xe000ed00

08004a6c <NVIC_GetBASEPRI>:
* Input          : None
* Output         : None
* Return         : BASEPRI register value
*******************************************************************************/
u32 NVIC_GetBASEPRI(void)
{
 8004a6c:	b500      	push	{lr}
 8004a6e:	b081      	sub	sp, #4
  return (__GetBASEPRI());
 8004a70:	f001 fb88 	bl	8006184 <__GetBASEPRI>
}
 8004a74:	b001      	add	sp, #4
 8004a76:	bd00      	pop	{pc}

08004a78 <NVIC_BASEPRICONFIG>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_BASEPRICONFIG(u32 NewPriority)
{
 8004a78:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_NVIC_BASE_PRI(NewPriority));
  
  __BASEPRICONFIG(NewPriority << 0x04);
 8004a7a:	0100      	lsls	r0, r0, #4
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_BASEPRICONFIG(u32 NewPriority)
{
 8004a7c:	b081      	sub	sp, #4
  /* Check the parameters */
  assert_param(IS_NVIC_BASE_PRI(NewPriority));
  
  __BASEPRICONFIG(NewPriority << 0x04);
 8004a7e:	f001 fb7e 	bl	800617e <__BASEPRICONFIG>
}
 8004a82:	b001      	add	sp, #4
 8004a84:	bd00      	pop	{pc}
 8004a86:	46c0      	nop			(mov r8, r8)

08004a88 <NVIC_RESETFAULTMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETFAULTMASK(void)
{
 8004a88:	b500      	push	{lr}
 8004a8a:	b081      	sub	sp, #4
  __RESETFAULTMASK();
 8004a8c:	f001 fb75 	bl	800617a <__RESETFAULTMASK>
}
 8004a90:	b001      	add	sp, #4
 8004a92:	bd00      	pop	{pc}

08004a94 <NVIC_SETFAULTMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETFAULTMASK(void)
{
 8004a94:	b500      	push	{lr}
 8004a96:	b081      	sub	sp, #4
  __SETFAULTMASK();
 8004a98:	f001 fb6d 	bl	8006176 <__SETFAULTMASK>
}
 8004a9c:	b001      	add	sp, #4
 8004a9e:	bd00      	pop	{pc}

08004aa0 <NVIC_RESETPRIMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETPRIMASK(void)
{
 8004aa0:	b500      	push	{lr}
 8004aa2:	b081      	sub	sp, #4
  __RESETPRIMASK();
 8004aa4:	f001 fb65 	bl	8006172 <__RESETPRIMASK>
}
 8004aa8:	b001      	add	sp, #4
 8004aaa:	bd00      	pop	{pc}

08004aac <NVIC_SETPRIMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETPRIMASK(void)
{
 8004aac:	b500      	push	{lr}
 8004aae:	b081      	sub	sp, #4
  __SETPRIMASK();
 8004ab0:	f001 fb5d 	bl	800616e <__SETPRIMASK>
}
 8004ab4:	b001      	add	sp, #4
 8004ab6:	bd00      	pop	{pc}

08004ab8 <PWR_BackupAccessCmd>:
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_DBP_BB = (u32)NewState;
 8004ab8:	4b01      	ldr	r3, [pc, #4]	(8004ac0 <PWR_BackupAccessCmd+0x8>)
 8004aba:	6018      	str	r0, [r3, #0]
}
 8004abc:	4770      	bx	lr
 8004abe:	46c0      	nop			(mov r8, r8)
 8004ac0:	420e0020 	.word	0x420e0020

08004ac4 <PWR_PVDCmd>:
void PWR_PVDCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PVDE_BB = (u32)NewState;
 8004ac4:	4b01      	ldr	r3, [pc, #4]	(8004acc <PWR_PVDCmd+0x8>)
 8004ac6:	6018      	str	r0, [r3, #0]
}
 8004ac8:	4770      	bx	lr
 8004aca:	46c0      	nop			(mov r8, r8)
 8004acc:	420e0010 	.word	0x420e0010

08004ad0 <PWR_PVDLevelConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));

  tmpreg = PWR->CR;
 8004ad0:	4a03      	ldr	r2, [pc, #12]	(8004ae0 <PWR_PVDLevelConfig+0x10>)
 8004ad2:	6813      	ldr	r3, [r2, #0]

  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_Mask;
 8004ad4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0

  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8004ad8:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8004ada:	6010      	str	r0, [r2, #0]
}
 8004adc:	4770      	bx	lr
 8004ade:	46c0      	nop			(mov r8, r8)
 8004ae0:	40007000 	.word	0x40007000

08004ae4 <PWR_WakeUpPinCmd>:
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_EWUP_BB = (u32)NewState;
 8004ae4:	4b01      	ldr	r3, [pc, #4]	(8004aec <PWR_WakeUpPinCmd+0x8>)
 8004ae6:	6018      	str	r0, [r3, #0]
}
 8004ae8:	4770      	bx	lr
 8004aea:	46c0      	nop			(mov r8, r8)
 8004aec:	420e00a0 	.word	0x420e00a0

08004af0 <PWR_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (u32)RESET)
 8004af0:	4b03      	ldr	r3, [pc, #12]	(8004b00 <PWR_GetFlagStatus+0x10>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	4218      	tst	r0, r3
 8004af6:	bf0c      	ite	eq
 8004af8:	2000      	moveq	r0, #0
 8004afa:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8004afc:	4770      	bx	lr
 8004afe:	46c0      	nop			(mov r8, r8)
 8004b00:	40007000 	.word	0x40007000

08004b04 <PWR_ClearFlag>:
void PWR_ClearFlag(u32 PWR_FLAG)
{
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 8004b04:	4a02      	ldr	r2, [pc, #8]	(8004b10 <PWR_ClearFlag+0xc>)
 8004b06:	6813      	ldr	r3, [r2, #0]
 8004b08:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 8004b0c:	6013      	str	r3, [r2, #0]
}
 8004b0e:	4770      	bx	lr
 8004b10:	40007000 	.word	0x40007000

08004b14 <PWR_EnterSTANDBYMode>:
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 8004b14:	4a0b      	ldr	r2, [pc, #44]	(8004b44 <PWR_EnterSTANDBYMode+0x30>)
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
 8004b16:	b500      	push	{lr}
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 8004b18:	6813      	ldr	r3, [r2, #0]
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
 8004b1a:	b081      	sub	sp, #4
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 8004b1c:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 8004b20:	6013      	str	r3, [r2, #0]

  /* Select STANDBY mode */
  PWR->CR |= CR_PDDS_Set;
 8004b22:	6813      	ldr	r3, [r2, #0]
 8004b24:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 8004b28:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 8004b2a:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
 8004b2e:	f502 42fa 	add.w	r2, r2, #32000	; 0x7d00
 8004b32:	3210      	adds	r2, #16
 8004b34:	6813      	ldr	r3, [r2, #0]
 8004b36:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 8004b3a:	6013      	str	r3, [r2, #0]

  /* Request Wait For Interrupt */
  __WFI();
 8004b3c:	f001 faf2 	bl	8006124 <__WFI>
}
 8004b40:	b001      	add	sp, #4
 8004b42:	bd00      	pop	{pc}
 8004b44:	40007000 	.word	0x40007000

08004b48 <PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004b48:	4a0c      	ldr	r2, [pc, #48]	(8004b7c <PWR_EnterSTOPMode+0x34>)
*                       - PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTOPMode(u32 PWR_Regulator, u8 PWR_STOPEntry)
{
 8004b4a:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004b4c:	6813      	ldr	r3, [r2, #0]
*                       - PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTOPMode(u32 PWR_Regulator, u8 PWR_STOPEntry)
{
 8004b4e:	b081      	sub	sp, #4
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_Mask;
 8004b50:	f023 0303 	bic.w	r3, r3, #3	; 0x3

  /* Set LPDS bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 8004b54:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8004b56:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 8004b58:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
 8004b5c:	f502 42fa 	add.w	r2, r2, #32000	; 0x7d00
 8004b60:	3210      	adds	r2, #16
 8004b62:	6813      	ldr	r3, [r2, #0]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8004b64:	2901      	cmp	r1, #1

  /* Store the new value */
  PWR->CR = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 8004b66:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 8004b6a:	6013      	str	r3, [r2, #0]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8004b6c:	d102      	bne.n	8004b74 <PWR_EnterSTOPMode+0x2c>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8004b6e:	f001 fad9 	bl	8006124 <__WFI>
 8004b72:	e001      	b.n	8004b78 <PWR_EnterSTOPMode+0x30>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
 8004b74:	f001 fad8 	bl	8006128 <__WFE>
  }
}
 8004b78:	b001      	add	sp, #4
 8004b7a:	bd00      	pop	{pc}
 8004b7c:	40007000 	.word	0x40007000

08004b80 <PWR_DeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_DeInit(void)
{
 8004b80:	b510      	push	{r4, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8004b82:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 8004b86:	4620      	mov	r0, r4
 8004b88:	2101      	movs	r1, #1
 8004b8a:	f000 f97d 	bl	8004e88 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8004b8e:	4620      	mov	r0, r4
 8004b90:	2100      	movs	r1, #0
 8004b92:	f000 f979 	bl	8004e88 <RCC_APB1PeriphResetCmd>
}
 8004b96:	bd10      	pop	{r4, pc}

08004b98 <RCC_DeInit>:
* Return         : None
*******************************************************************************/
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (u32)0x00000001;
 8004b98:	4a0d      	ldr	r2, [pc, #52]	(8004bd0 <RCC_DeInit+0x38>)
 8004b9a:	6813      	ldr	r3, [r2, #0]
 8004b9c:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 8004ba0:	6013      	str	r3, [r2, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
  RCC->CFGR &= (u32)0xF8FF0000;
 8004ba2:	6851      	ldr	r1, [r2, #4]
 8004ba4:	4b0b      	ldr	r3, [pc, #44]	(8004bd4 <RCC_DeInit+0x3c>)
 8004ba6:	ea01 0303 	and.w	r3, r1, r3
 8004baa:	6053      	str	r3, [r2, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (u32)0xFEF6FFFF;
 8004bac:	6813      	ldr	r3, [r2, #0]
 8004bae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bb6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (u32)0xFFFBFFFF;
 8004bb8:	6813      	ldr	r3, [r2, #0]
 8004bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bbe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
  RCC->CFGR &= (u32)0xFF80FFFF;
 8004bc0:	6853      	ldr	r3, [r2, #4]
 8004bc2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004bc6:	6053      	str	r3, [r2, #4]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	6093      	str	r3, [r2, #8]
}
 8004bcc:	4770      	bx	lr
 8004bce:	46c0      	nop			(mov r8, r8)
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	f8ff0000 	.word	0xf8ff0000

08004bd8 <RCC_HSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8004bd8:	4a0b      	ldr	r2, [pc, #44]	(8004c08 <RCC_HSEConfig+0x30>)

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8004bda:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8004bde:	6813      	ldr	r3, [r2, #0]
 8004be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004be4:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8004be6:	6813      	ldr	r3, [r2, #0]
 8004be8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bec:	6013      	str	r3, [r2, #0]

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8004bee:	d003      	beq.n	8004bf8 <RCC_HSEConfig+0x20>
 8004bf0:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8004bf4:	d107      	bne.n	8004c06 <RCC_HSEConfig+0x2e>
 8004bf6:	e002      	b.n	8004bfe <RCC_HSEConfig+0x26>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8004bf8:	6813      	ldr	r3, [r2, #0]
 8004bfa:	4303      	orrs	r3, r0
 8004bfc:	e002      	b.n	8004c04 <RCC_HSEConfig+0x2c>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8004bfe:	6813      	ldr	r3, [r2, #0]
 8004c00:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8004c04:	6013      	str	r3, [r2, #0]
      break;            
      
    default:
      break;      
  }
}
 8004c06:	4770      	bx	lr
 8004c08:	40021000 	.word	0x40021000

08004c0c <RCC_WaitForHSEStartUp>:
* Return         : An ErrorStatus enumuration value:
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8004c0c:	b082      	sub	sp, #8
  vu32 StartUpCounter = 0;
 8004c0e:	2300      	movs	r3, #0
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8004c10:	4909      	ldr	r1, [pc, #36]	(8004c38 <RCC_WaitForHSEStartUp+0x2c>)
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  vu32 StartUpCounter = 0;
 8004c12:	9301      	str	r3, [sp, #4]
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8004c14:	680a      	ldr	r2, [r1, #0]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
 8004c16:	9b01      	ldr	r3, [sp, #4]
 8004c18:	3301      	adds	r3, #1
  } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
 8004c1a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
 8004c1e:	9301      	str	r3, [sp, #4]
  } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
 8004c20:	d103      	bne.n	8004c2a <RCC_WaitForHSEStartUp+0x1e>
 8004c22:	9b01      	ldr	r3, [sp, #4]
 8004c24:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004c28:	d1f4      	bne.n	8004c14 <RCC_WaitForHSEStartUp+0x8>
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8004c2a:	4b03      	ldr	r3, [pc, #12]	(8004c38 <RCC_WaitForHSEStartUp+0x2c>)
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	0c40      	lsrs	r0, r0, #17
 8004c30:	f000 0001 	and.w	r0, r0, #1	; 0x1
  {
    status = ERROR;
  }  

  return (status);
}
 8004c34:	b002      	add	sp, #8
 8004c36:	4770      	bx	lr
 8004c38:	40021000 	.word	0x40021000

08004c3c <RCC_AdjustHSICalibrationValue>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8004c3c:	4a03      	ldr	r2, [pc, #12]	(8004c4c <RCC_AdjustHSICalibrationValue+0x10>)
 8004c3e:	6813      	ldr	r3, [r2, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 8004c40:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (u32)HSICalibrationValue << 3;
 8004c44:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8004c48:	6013      	str	r3, [r2, #0]
}
 8004c4a:	4770      	bx	lr
 8004c4c:	40021000 	.word	0x40021000

08004c50 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_HSION_BB = (u32)NewState;
 8004c50:	4b01      	ldr	r3, [pc, #4]	(8004c58 <RCC_HSICmd+0x8>)
 8004c52:	6018      	str	r0, [r3, #0]
}
 8004c54:	4770      	bx	lr
 8004c56:	46c0      	nop			(mov r8, r8)
 8004c58:	42420000 	.word	0x42420000

08004c5c <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8004c5c:	4a03      	ldr	r2, [pc, #12]	(8004c6c <RCC_PLLConfig+0x10>)
 8004c5e:	6853      	ldr	r3, [r2, #4]

  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;

  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8004c60:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004c64:	4318      	orrs	r0, r3
 8004c66:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004c68:	6050      	str	r0, [r2, #4]
}
 8004c6a:	4770      	bx	lr
 8004c6c:	40021000 	.word	0x40021000

08004c70 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PLLON_BB = (u32)NewState;
 8004c70:	4b01      	ldr	r3, [pc, #4]	(8004c78 <RCC_PLLCmd+0x8>)
 8004c72:	6018      	str	r0, [r3, #0]
}
 8004c74:	4770      	bx	lr
 8004c76:	46c0      	nop			(mov r8, r8)
 8004c78:	42420060 	.word	0x42420060

08004c7c <RCC_SYSCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8004c7c:	4a03      	ldr	r2, [pc, #12]	(8004c8c <RCC_SYSCLKConfig+0x10>)
 8004c7e:	6853      	ldr	r3, [r2, #4]

  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8004c80:	f023 0303 	bic.w	r3, r3, #3	; 0x3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8004c84:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004c86:	6050      	str	r0, [r2, #4]
}
 8004c88:	4770      	bx	lr
 8004c8a:	46c0      	nop			(mov r8, r8)
 8004c8c:	40021000 	.word	0x40021000

08004c90 <RCC_GetSYSCLKSource>:
*                       - 0x04: HSE used as system clock
*                       - 0x08: PLL used as system clock
*******************************************************************************/
u8 RCC_GetSYSCLKSource(void)
{
  return ((u8)(RCC->CFGR & CFGR_SWS_Mask));
 8004c90:	4b02      	ldr	r3, [pc, #8]	(8004c9c <RCC_GetSYSCLKSource+0xc>)
 8004c92:	6858      	ldr	r0, [r3, #4]
 8004c94:	f000 000c 	and.w	r0, r0, #12	; 0xc
}
 8004c98:	4770      	bx	lr
 8004c9a:	46c0      	nop			(mov r8, r8)
 8004c9c:	40021000 	.word	0x40021000

08004ca0 <RCC_HCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8004ca0:	4a03      	ldr	r2, [pc, #12]	(8004cb0 <RCC_HCLKConfig+0x10>)
 8004ca2:	6853      	ldr	r3, [r2, #4]

  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8004ca4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8004ca8:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004caa:	6050      	str	r0, [r2, #4]
}
 8004cac:	4770      	bx	lr
 8004cae:	46c0      	nop			(mov r8, r8)
 8004cb0:	40021000 	.word	0x40021000

08004cb4 <RCC_PCLK1Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8004cb4:	4a03      	ldr	r2, [pc, #12]	(8004cc4 <RCC_PCLK1Config+0x10>)
 8004cb6:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8004cb8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8004cbc:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004cbe:	6050      	str	r0, [r2, #4]
}
 8004cc0:	4770      	bx	lr
 8004cc2:	46c0      	nop			(mov r8, r8)
 8004cc4:	40021000 	.word	0x40021000

08004cc8 <RCC_PCLK2Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8004cc8:	4a03      	ldr	r2, [pc, #12]	(8004cd8 <RCC_PCLK2Config+0x10>)
 8004cca:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8004ccc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8004cd0:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004cd4:	6053      	str	r3, [r2, #4]
}
 8004cd6:	4770      	bx	lr
 8004cd8:	40021000 	.word	0x40021000

08004cdc <RCC_ITConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004cdc:	b121      	cbz	r1, 8004ce8 <RCC_ITConfig+0xc>
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8004cde:	4a05      	ldr	r2, [pc, #20]	(8004cf4 <RCC_ITConfig+0x18>)
 8004ce0:	7813      	ldrb	r3, [r2, #0]
 8004ce2:	ea40 0303 	orr.w	r3, r0, r3
 8004ce6:	e003      	b.n	8004cf0 <RCC_ITConfig+0x14>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to disable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS &= (u8)~RCC_IT;
 8004ce8:	4a02      	ldr	r2, [pc, #8]	(8004cf4 <RCC_ITConfig+0x18>)
 8004cea:	7813      	ldrb	r3, [r2, #0]
 8004cec:	ea23 0300 	bic.w	r3, r3, r0
 8004cf0:	7013      	strb	r3, [r2, #0]
  }
}
 8004cf2:	4770      	bx	lr
 8004cf4:	40021009 	.word	0x40021009

08004cf8 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(u32 RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(vu32 *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8004cf8:	4b01      	ldr	r3, [pc, #4]	(8004d00 <RCC_USBCLKConfig+0x8>)
 8004cfa:	6018      	str	r0, [r3, #0]
}
 8004cfc:	4770      	bx	lr
 8004cfe:	46c0      	nop			(mov r8, r8)
 8004d00:	424200d8 	.word	0x424200d8

08004d04 <RCC_ADCCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));

  tmpreg = RCC->CFGR;
 8004d04:	4a03      	ldr	r2, [pc, #12]	(8004d14 <RCC_ADCCLKConfig+0x10>)
 8004d06:	6853      	ldr	r3, [r2, #4]

  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8004d08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000

  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8004d0c:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004d0e:	6050      	str	r0, [r2, #4]
}
 8004d10:	4770      	bx	lr
 8004d12:	46c0      	nop			(mov r8, r8)
 8004d14:	40021000 	.word	0x40021000

08004d18 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004d18:	4a06      	ldr	r2, [pc, #24]	(8004d34 <RCC_LSEConfig+0x1c>)
 8004d1a:	2300      	movs	r3, #0

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8004d1c:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004d1e:	7013      	strb	r3, [r2, #0]

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004d20:	7013      	strb	r3, [r2, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_ON;
 8004d22:	bf08      	it	eq
 8004d24:	7010      	strbeq	r0, [r2, #0]

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8004d26:	d003      	beq.n	8004d30 <RCC_LSEConfig+0x18>
 8004d28:	2804      	cmp	r0, #4
 8004d2a:	d101      	bne.n	8004d30 <RCC_LSEConfig+0x18>
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8004d2c:	2305      	movs	r3, #5
 8004d2e:	7013      	strb	r3, [r2, #0]
      break;            
      
    default:
      break;      
  }
}
 8004d30:	4770      	bx	lr
 8004d32:	46c0      	nop			(mov r8, r8)
 8004d34:	40021020 	.word	0x40021020

08004d38 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_LSION_BB = (u32)NewState;
 8004d38:	4b01      	ldr	r3, [pc, #4]	(8004d40 <RCC_LSICmd+0x8>)
 8004d3a:	6018      	str	r0, [r3, #0]
}
 8004d3c:	4770      	bx	lr
 8004d3e:	46c0      	nop			(mov r8, r8)
 8004d40:	42420480 	.word	0x42420480

08004d44 <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8004d44:	4a02      	ldr	r2, [pc, #8]	(8004d50 <RCC_RTCCLKConfig+0xc>)
 8004d46:	6a13      	ldr	r3, [r2, #32]
 8004d48:	4318      	orrs	r0, r3
 8004d4a:	6210      	str	r0, [r2, #32]
}
 8004d4c:	4770      	bx	lr
 8004d4e:	46c0      	nop			(mov r8, r8)
 8004d50:	40021000 	.word	0x40021000

08004d54 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_RTCEN_BB = (u32)NewState;
 8004d54:	4b01      	ldr	r3, [pc, #4]	(8004d5c <RCC_RTCCLKCmd+0x8>)
 8004d56:	6018      	str	r0, [r3, #0]
}
 8004d58:	4770      	bx	lr
 8004d5a:	46c0      	nop			(mov r8, r8)
 8004d5c:	4242043c 	.word	0x4242043c

08004d60 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8004d60:	4929      	ldr	r1, [pc, #164]	(8004e08 <RCC_GetClocksFreq+0xa8>)
*                    will hold the clocks frequencies.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8004d62:	4684      	mov	ip, r0
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8004d64:	684b      	ldr	r3, [r1, #4]

  switch (tmp)
 8004d66:	f003 030c 	and.w	r3, r3, #12	; 0xc
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d021      	beq.n	8004db2 <RCC_GetClocksFreq+0x52>
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d11f      	bne.n	8004db2 <RCC_GetClocksFreq+0x52>
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8004d72:	684b      	ldr	r3, [r1, #4]
      pllmull = ( pllmull >> 18) + 2;
 8004d74:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004d78:	0c9b      	lsrs	r3, r3, #18
 8004d7a:	1c9a      	adds	r2, r3, #2

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8004d7c:	684b      	ldr	r3, [r1, #4]

      if (pllsource == 0x00)
 8004d7e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
 8004d82:	bf08      	it	eq
 8004d84:	ebc2 1342 	rsbeq	r3, r2, r2, lsl #5
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllmull = ( pllmull >> 18) + 2;

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;

      if (pllsource == 0x00)
 8004d88:	d006      	beq.n	8004d98 <RCC_GetClocksFreq+0x38>
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
      }
      else
      {/* HSE selected as PLL clock entry */

        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (u32)RESET)
 8004d8a:	684b      	ldr	r3, [r1, #4]
 8004d8c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004d90:	ea4f 1342 	mov.w	r3, r2, lsl #5
 8004d94:	d006      	beq.n	8004da4 <RCC_GetClocksFreq+0x44>
        {/* HSE oscillator clock divided by 2 */

          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8004d9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	e007      	b.n	8004db4 <RCC_GetClocksFreq+0x54>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 8004da4:	1a9b      	subs	r3, r3, r2
 8004da6:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8004daa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004dae:	025b      	lsls	r3, r3, #9
 8004db0:	e000      	b.n	8004db4 <RCC_GetClocksFreq+0x54>
        }
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 8004db2:	4b16      	ldr	r3, [pc, #88]	(8004e0c <RCC_GetClocksFreq+0xac>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8004db4:	4814      	ldr	r0, [pc, #80]	(8004e08 <RCC_GetClocksFreq+0xa8>)
        }
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 8004db6:	f8cc 3000 	str.w	r3, [ip]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8004dba:	6843      	ldr	r3, [r0, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8004dbc:	4a14      	ldr	r2, [pc, #80]	(8004e10 <RCC_GetClocksFreq+0xb0>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8004dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8004dc2:	091b      	lsrs	r3, r3, #4
 8004dc4:	5cd3      	ldrb	r3, [r2, r3]
 8004dc6:	f8dc 1000 	ldr.w	r1, [ip]
 8004dca:	40d9      	lsrs	r1, r3
 8004dcc:	f8cc 1004 	str.w	r1, [ip, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8004dd0:	6843      	ldr	r3, [r0, #4]
 8004dd2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  tmp = tmp >> 8;
  presc = APBAHBPrescTable[tmp];

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004dd6:	0a1b      	lsrs	r3, r3, #8
 8004dd8:	5cd3      	ldrb	r3, [r2, r3]
 8004dda:	fa31 f303 	lsrs.w	r3, r1, r3
 8004dde:	f8cc 3008 	str.w	r3, [ip, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8004de2:	6843      	ldr	r3, [r0, #4]
 8004de4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
  tmp = tmp >> 11;
  presc = APBAHBPrescTable[tmp];

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004de8:	0adb      	lsrs	r3, r3, #11
 8004dea:	5cd3      	ldrb	r3, [r2, r3]
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8004dec:	4a09      	ldr	r2, [pc, #36]	(8004e14 <RCC_GetClocksFreq+0xb4>)
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
  tmp = tmp >> 11;
  presc = APBAHBPrescTable[tmp];

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004dee:	40d9      	lsrs	r1, r3
 8004df0:	f8cc 100c 	str.w	r1, [ip, #12]

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8004df4:	6843      	ldr	r3, [r0, #4]
 8004df6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8004dfa:	0b9b      	lsrs	r3, r3, #14
 8004dfc:	5cd3      	ldrb	r3, [r2, r3]
 8004dfe:	fbb1 f1f3 	udiv	r1, r1, r3
 8004e02:	f8cc 1010 	str.w	r1, [ip, #16]
}
 8004e06:	4770      	bx	lr
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	007a1200 	.word	0x007a1200
 8004e10:	080061e8 	.word	0x080061e8
 8004e14:	080061f8 	.word	0x080061f8

08004e18 <RCC_AHBPeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004e18:	b121      	cbz	r1, 8004e24 <RCC_AHBPeriphClockCmd+0xc>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8004e1a:	4a05      	ldr	r2, [pc, #20]	(8004e30 <RCC_AHBPeriphClockCmd+0x18>)
 8004e1c:	6953      	ldr	r3, [r2, #20]
 8004e1e:	ea40 0303 	orr.w	r3, r0, r3
 8004e22:	e003      	b.n	8004e2c <RCC_AHBPeriphClockCmd+0x14>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8004e24:	4a02      	ldr	r2, [pc, #8]	(8004e30 <RCC_AHBPeriphClockCmd+0x18>)
 8004e26:	6953      	ldr	r3, [r2, #20]
 8004e28:	ea23 0300 	bic.w	r3, r3, r0
 8004e2c:	6153      	str	r3, [r2, #20]
  }
}
 8004e2e:	4770      	bx	lr
 8004e30:	40021000 	.word	0x40021000

08004e34 <RCC_APB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004e34:	b121      	cbz	r1, 8004e40 <RCC_APB2PeriphClockCmd+0xc>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8004e36:	4a05      	ldr	r2, [pc, #20]	(8004e4c <RCC_APB2PeriphClockCmd+0x18>)
 8004e38:	6993      	ldr	r3, [r2, #24]
 8004e3a:	ea40 0303 	orr.w	r3, r0, r3
 8004e3e:	e003      	b.n	8004e48 <RCC_APB2PeriphClockCmd+0x14>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8004e40:	4a02      	ldr	r2, [pc, #8]	(8004e4c <RCC_APB2PeriphClockCmd+0x18>)
 8004e42:	6993      	ldr	r3, [r2, #24]
 8004e44:	ea23 0300 	bic.w	r3, r3, r0
 8004e48:	6193      	str	r3, [r2, #24]
  }
}
 8004e4a:	4770      	bx	lr
 8004e4c:	40021000 	.word	0x40021000

08004e50 <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004e50:	b121      	cbz	r1, 8004e5c <RCC_APB1PeriphClockCmd+0xc>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8004e52:	4a05      	ldr	r2, [pc, #20]	(8004e68 <RCC_APB1PeriphClockCmd+0x18>)
 8004e54:	69d3      	ldr	r3, [r2, #28]
 8004e56:	ea40 0303 	orr.w	r3, r0, r3
 8004e5a:	e003      	b.n	8004e64 <RCC_APB1PeriphClockCmd+0x14>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8004e5c:	4a02      	ldr	r2, [pc, #8]	(8004e68 <RCC_APB1PeriphClockCmd+0x18>)
 8004e5e:	69d3      	ldr	r3, [r2, #28]
 8004e60:	ea23 0300 	bic.w	r3, r3, r0
 8004e64:	61d3      	str	r3, [r2, #28]
  }
}
 8004e66:	4770      	bx	lr
 8004e68:	40021000 	.word	0x40021000

08004e6c <RCC_APB2PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004e6c:	b121      	cbz	r1, 8004e78 <RCC_APB2PeriphResetCmd+0xc>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8004e6e:	4a05      	ldr	r2, [pc, #20]	(8004e84 <RCC_APB2PeriphResetCmd+0x18>)
 8004e70:	68d3      	ldr	r3, [r2, #12]
 8004e72:	ea40 0303 	orr.w	r3, r0, r3
 8004e76:	e003      	b.n	8004e80 <RCC_APB2PeriphResetCmd+0x14>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8004e78:	4a02      	ldr	r2, [pc, #8]	(8004e84 <RCC_APB2PeriphResetCmd+0x18>)
 8004e7a:	68d3      	ldr	r3, [r2, #12]
 8004e7c:	ea23 0300 	bic.w	r3, r3, r0
 8004e80:	60d3      	str	r3, [r2, #12]
  }
}
 8004e82:	4770      	bx	lr
 8004e84:	40021000 	.word	0x40021000

08004e88 <RCC_APB1PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004e88:	b121      	cbz	r1, 8004e94 <RCC_APB1PeriphResetCmd+0xc>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8004e8a:	4a05      	ldr	r2, [pc, #20]	(8004ea0 <RCC_APB1PeriphResetCmd+0x18>)
 8004e8c:	6913      	ldr	r3, [r2, #16]
 8004e8e:	ea40 0303 	orr.w	r3, r0, r3
 8004e92:	e003      	b.n	8004e9c <RCC_APB1PeriphResetCmd+0x14>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8004e94:	4a02      	ldr	r2, [pc, #8]	(8004ea0 <RCC_APB1PeriphResetCmd+0x18>)
 8004e96:	6913      	ldr	r3, [r2, #16]
 8004e98:	ea23 0300 	bic.w	r3, r3, r0
 8004e9c:	6113      	str	r3, [r2, #16]
  }
}
 8004e9e:	4770      	bx	lr
 8004ea0:	40021000 	.word	0x40021000

08004ea4 <RCC_BackupResetCmd>:
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_BDRST_BB = (u32)NewState;
 8004ea4:	4b01      	ldr	r3, [pc, #4]	(8004eac <RCC_BackupResetCmd+0x8>)
 8004ea6:	6018      	str	r0, [r3, #0]
}
 8004ea8:	4770      	bx	lr
 8004eaa:	46c0      	nop			(mov r8, r8)
 8004eac:	42420440 	.word	0x42420440

08004eb0 <RCC_ClockSecuritySystemCmd>:
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_CSSON_BB = (u32)NewState;
 8004eb0:	4b01      	ldr	r3, [pc, #4]	(8004eb8 <RCC_ClockSecuritySystemCmd+0x8>)
 8004eb2:	6018      	str	r0, [r3, #0]
}
 8004eb4:	4770      	bx	lr
 8004eb6:	46c0      	nop			(mov r8, r8)
 8004eb8:	4242004c 	.word	0x4242004c

08004ebc <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO[2:0] bits to select the MCO source */
  *(vu8 *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8004ebc:	4b01      	ldr	r3, [pc, #4]	(8004ec4 <RCC_MCOConfig+0x8>)
 8004ebe:	7018      	strb	r0, [r3, #0]
}
 8004ec0:	4770      	bx	lr
 8004ec2:	46c0      	nop			(mov r8, r8)
 8004ec4:	40021007 	.word	0x40021007

08004ec8 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8004ec8:	0943      	lsrs	r3, r0, #5

  if (tmp == 1)               /* The flag to check is in CR register */
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d108      	bne.n	8004ee0 <RCC_GetFlagStatus+0x18>
  {
    statusreg = RCC->CR;
 8004ece:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ed2:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004ed6:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8004eda:	3307      	adds	r3, #7
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	e00c      	b.n	8004efa <RCC_GetFlagStatus+0x32>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d108      	bne.n	8004ef6 <RCC_GetFlagStatus+0x2e>
  {
    statusreg = RCC->BDCR;
 8004ee4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ee8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004eec:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8004ef0:	3306      	adds	r3, #6
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	e001      	b.n	8004efa <RCC_GetFlagStatus+0x32>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8004ef6:	4b04      	ldr	r3, [pc, #16]	(8004f08 <RCC_GetFlagStatus+0x40>)
 8004ef8:	6a5b      	ldr	r3, [r3, #36]
 8004efa:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 8004efe:	fa33 f000 	lsrs.w	r0, r3, r0
 8004f02:	f000 0001 	and.w	r0, r0, #1	; 0x1
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8004f06:	4770      	bx	lr
 8004f08:	40021000 	.word	0x40021000

08004f0c <RCC_ClearFlag>:
* Return         : None
*******************************************************************************/
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8004f0c:	4a02      	ldr	r2, [pc, #8]	(8004f18 <RCC_ClearFlag+0xc>)
 8004f0e:	6a53      	ldr	r3, [r2, #36]
 8004f10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f14:	6253      	str	r3, [r2, #36]
}
 8004f16:	4770      	bx	lr
 8004f18:	40021000 	.word	0x40021000

08004f1c <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (u32)RESET)
 8004f1c:	4b03      	ldr	r3, [pc, #12]	(8004f2c <RCC_GetITStatus+0x10>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	4218      	tst	r0, r3
 8004f22:	bf0c      	ite	eq
 8004f24:	2000      	moveq	r0, #0
 8004f26:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
}
 8004f28:	4770      	bx	lr
 8004f2a:	46c0      	nop			(mov r8, r8)
 8004f2c:	40021000 	.word	0x40021000

08004f30 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(vu8 *) CIR_BYTE3_ADDRESS = RCC_IT;
 8004f30:	4b01      	ldr	r3, [pc, #4]	(8004f38 <RCC_ClearITPendingBit+0x8>)
 8004f32:	7018      	strb	r0, [r3, #0]
}
 8004f34:	4770      	bx	lr
 8004f36:	46c0      	nop			(mov r8, r8)
 8004f38:	4002100a 	.word	0x4002100a

08004f3c <SysTick_CLKSourceConfig>:
void SysTick_CLKSourceConfig(u32 SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));

  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8004f3c:	2804      	cmp	r0, #4
 8004f3e:	d103      	bne.n	8004f48 <SysTick_CLKSourceConfig+0xc>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8004f40:	4a04      	ldr	r2, [pc, #16]	(8004f54 <SysTick_CLKSourceConfig+0x18>)
 8004f42:	6813      	ldr	r3, [r2, #0]
 8004f44:	4303      	orrs	r3, r0
 8004f46:	e003      	b.n	8004f50 <SysTick_CLKSourceConfig+0x14>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8004f48:	4a02      	ldr	r2, [pc, #8]	(8004f54 <SysTick_CLKSourceConfig+0x18>)
 8004f4a:	6813      	ldr	r3, [r2, #0]
 8004f4c:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 8004f50:	6013      	str	r3, [r2, #0]
  }
}
 8004f52:	4770      	bx	lr
 8004f54:	e000e010 	.word	0xe000e010

08004f58 <SysTick_SetReload>:
void SysTick_SetReload(u32 Reload)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_RELOAD(Reload));

  SysTick->LOAD = Reload;
 8004f58:	4b01      	ldr	r3, [pc, #4]	(8004f60 <SysTick_SetReload+0x8>)
 8004f5a:	6058      	str	r0, [r3, #4]
}
 8004f5c:	4770      	bx	lr
 8004f5e:	46c0      	nop			(mov r8, r8)
 8004f60:	e000e010 	.word	0xe000e010

08004f64 <SysTick_CounterCmd>:
void SysTick_CounterCmd(u32 SysTick_Counter)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_COUNTER(SysTick_Counter));

  if (SysTick_Counter == SysTick_Counter_Enable)
 8004f64:	2801      	cmp	r0, #1
 8004f66:	d103      	bne.n	8004f70 <SysTick_CounterCmd+0xc>
  {
    SysTick->CTRL |= SysTick_Counter_Enable;
 8004f68:	4a08      	ldr	r2, [pc, #32]	(8004f8c <SysTick_CounterCmd+0x28>)
 8004f6a:	6813      	ldr	r3, [r2, #0]
 8004f6c:	4303      	orrs	r3, r0
 8004f6e:	e006      	b.n	8004f7e <SysTick_CounterCmd+0x1a>
  }
  else if (SysTick_Counter == SysTick_Counter_Disable) 
 8004f70:	f110 0f02 	cmn.w	r0, #2	; 0x2
 8004f74:	d105      	bne.n	8004f82 <SysTick_CounterCmd+0x1e>
  {
    SysTick->CTRL &= SysTick_Counter_Disable;
 8004f76:	4a05      	ldr	r2, [pc, #20]	(8004f8c <SysTick_CounterCmd+0x28>)
 8004f78:	6813      	ldr	r3, [r2, #0]
 8004f7a:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	e002      	b.n	8004f88 <SysTick_CounterCmd+0x24>
  }
  else /* SysTick_Counter == SysTick_Counter_Clear */
  {
    SysTick->VAL = SysTick_Counter_Clear;
 8004f82:	4b02      	ldr	r3, [pc, #8]	(8004f8c <SysTick_CounterCmd+0x28>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	609a      	str	r2, [r3, #8]
  }    
}
 8004f88:	4770      	bx	lr
 8004f8a:	46c0      	nop			(mov r8, r8)
 8004f8c:	e000e010 	.word	0xe000e010

08004f90 <SysTick_ITConfig>:
void SysTick_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004f90:	b120      	cbz	r0, 8004f9c <SysTick_ITConfig+0xc>
  {
    SysTick->CTRL |= CTRL_TICKINT_Set;
 8004f92:	4a05      	ldr	r2, [pc, #20]	(8004fa8 <SysTick_ITConfig+0x18>)
 8004f94:	6813      	ldr	r3, [r2, #0]
 8004f96:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 8004f9a:	e003      	b.n	8004fa4 <SysTick_ITConfig+0x14>
  }
  else
  {
    SysTick->CTRL &= CTRL_TICKINT_Reset;
 8004f9c:	4a02      	ldr	r2, [pc, #8]	(8004fa8 <SysTick_ITConfig+0x18>)
 8004f9e:	6813      	ldr	r3, [r2, #0]
 8004fa0:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 8004fa4:	6013      	str	r3, [r2, #0]
  }
}
 8004fa6:	4770      	bx	lr
 8004fa8:	e000e010 	.word	0xe000e010

08004fac <SysTick_GetCounter>:
* Output         : None
* Return         : SysTick current value
*******************************************************************************/
u32 SysTick_GetCounter(void)
{
  return(SysTick->VAL);
 8004fac:	4b01      	ldr	r3, [pc, #4]	(8004fb4 <SysTick_GetCounter+0x8>)
 8004fae:	6898      	ldr	r0, [r3, #8]
}
 8004fb0:	4770      	bx	lr
 8004fb2:	46c0      	nop			(mov r8, r8)
 8004fb4:	e000e010 	.word	0xe000e010

08004fb8 <SysTick_GetFlagStatus>:
  assert_param(IS_SYSTICK_FLAG(SysTick_FLAG));

  /* Get the SysTick register index */
  tmp = SysTick_FLAG >> 3;

  if (tmp == 2) /* The flag to check is in CTRL register */
 8004fb8:	08c3      	lsrs	r3, r0, #3
 8004fba:	2b02      	cmp	r3, #2
*                       - SysTick_FLAG_NOREF
* Output         : None
* Return         : None
*******************************************************************************/
FlagStatus SysTick_GetFlagStatus(u8 SysTick_FLAG)
{
 8004fbc:	4602      	mov	r2, r0
  assert_param(IS_SYSTICK_FLAG(SysTick_FLAG));

  /* Get the SysTick register index */
  tmp = SysTick_FLAG >> 3;

  if (tmp == 2) /* The flag to check is in CTRL register */
 8004fbe:	d106      	bne.n	8004fce <SysTick_GetFlagStatus+0x16>
  {
    statusreg = SysTick->CTRL;
 8004fc0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8004fc4:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8004fc8:	330e      	adds	r3, #14
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	e001      	b.n	8004fd2 <SysTick_GetFlagStatus+0x1a>
  }
  else          /* The flag to check is in CALIB register */
  {
    statusreg = SysTick->CALIB;
 8004fce:	4b03      	ldr	r3, [pc, #12]	(8004fdc <SysTick_GetFlagStatus+0x24>)
 8004fd0:	68d8      	ldr	r0, [r3, #12]
 8004fd2:	40d0      	lsrs	r0, r2
 8004fd4:	f000 0001 	and.w	r0, r0, #1	; 0x1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004fd8:	4770      	bx	lr
 8004fda:	46c0      	nop			(mov r8, r8)
 8004fdc:	e000e010 	.word	0xe000e010

08004fe0 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
 8004fe0:	8803      	ldrh	r3, [r0, #0]
*                   the specified TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8004fe2:	b082      	sub	sp, #8
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
 8004fe4:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 8004fe8:	8003      	strh	r3, [r0, #0]
  TIMx->CR1 |= (u32)TIM_TimeBaseInitStruct->TIM_ClockDivision |
 8004fea:	8803      	ldrh	r3, [r0, #0]
 8004fec:	88ca      	ldrh	r2, [r1, #6]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	884a      	ldrh	r2, [r1, #2]
*                   the specified TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8004ff4:	9001      	str	r0, [sp, #4]
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
  TIMx->CR1 |= (u32)TIM_TimeBaseInitStruct->TIM_ClockDivision |
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	8003      	strh	r3, [r0, #0]
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8004ffc:	888b      	ldrh	r3, [r1, #4]
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;

  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
    
  if (((*(u32*)&TIMx) == TIM1_BASE) || ((*(u32*)&TIMx) == TIM8_BASE))  
 8004ffe:	4a0b      	ldr	r2, [pc, #44]	(800502c <TIM_TimeBaseInit+0x4c>)
  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
  TIMx->CR1 |= (u32)TIM_TimeBaseInitStruct->TIM_ClockDivision |
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8005000:	8583      	strh	r3, [r0, #44]

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8005002:	880b      	ldrh	r3, [r1, #0]
*                   the specified TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8005004:	468c      	mov	ip, r1
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8005006:	8503      	strh	r3, [r0, #40]

  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 8005008:	f04f 0301 	mov.w	r3, #1	; 0x1
 800500c:	8283      	strh	r3, [r0, #20]
    
  if (((*(u32*)&TIMx) == TIM1_BASE) || ((*(u32*)&TIMx) == TIM8_BASE))  
 800500e:	4b08      	ldr	r3, [pc, #32]	(8005030 <TIM_TimeBaseInit+0x50>)
 8005010:	4298      	cmp	r0, r3
 8005012:	bf14      	ite	ne
 8005014:	2300      	movne	r3, #0
 8005016:	2301      	moveq	r3, #1
 8005018:	4290      	cmp	r0, r2
 800501a:	bf08      	it	eq
 800501c:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
 8005020:	b113      	cbz	r3, 8005028 <TIM_TimeBaseInit+0x48>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8005022:	f89c 3008 	ldrb.w	r3, [ip, #8]
 8005026:	8603      	strh	r3, [r0, #48]
  }        
}
 8005028:	b002      	add	sp, #8
 800502a:	4770      	bx	lr
 800502c:	40012c00 	.word	0x40012c00
 8005030:	40013400 	.word	0x40013400

08005034 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 8005034:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005036:	468c      	mov	ip, r1
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 8005038:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 800503c:	041b      	lsls	r3, r3, #16
 800503e:	0c1b      	lsrs	r3, r3, #16
 8005040:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005042:	8c01      	ldrh	r1, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005044:	8883      	ldrh	r3, [r0, #4]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005046:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005048:	b29d      	uxth	r5, r3
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800504a:	8b03      	ldrh	r3, [r0, #24]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800504c:	f8bc 2008 	ldrh.w	r2, [ip, #8]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005050:	b29e      	uxth	r6, r3
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8005052:	f8bc 3002 	ldrh.w	r3, [ip, #2]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
 8005056:	f021 0102 	bic.w	r1, r1, #2	; 0x2

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800505a:	4313      	orrs	r3, r2
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
 800505c:	0409      	lsls	r1, r1, #16

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800505e:	b29b      	uxth	r3, r3
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
 8005060:	0c09      	lsrs	r1, r1, #16

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8005062:	ea43 0401 	orr.w	r4, r3, r1
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8005066:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800506a:	f8bc 7000 	ldrh.w	r7, [ip]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800506e:	8683      	strh	r3, [r0, #52]
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8005070:	4b1a      	ldr	r3, [pc, #104]	(80050dc <TIM_OC1Init+0xa8>)
 8005072:	4a1b      	ldr	r2, [pc, #108]	(80050e0 <TIM_OC1Init+0xac>)
 8005074:	4298      	cmp	r0, r3
 8005076:	bf14      	ite	ne
 8005078:	2300      	movne	r3, #0
 800507a:	2301      	moveq	r3, #1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800507c:	b083      	sub	sp, #12
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 800507e:	4290      	cmp	r0, r2
 8005080:	bf08      	it	eq
 8005082:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005086:	9001      	str	r0, [sp, #4]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8005088:	b1eb      	cbz	r3, 80050c6 <TIM_OC1Init+0x92>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
 800508a:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
 800508e:	f5a2 5230 	sub.w	r2, r2, #11264	; 0x2c00

    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8005092:	f8bc 300a 	ldrh.w	r3, [ip, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
 8005096:	3a09      	subs	r2, #9
 8005098:	ea04 0202 	and.w	r2, r4, r2

    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800509c:	431a      	orrs	r2, r3

    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
 800509e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80050a2:	ea02 0303 	and.w	r3, r2, r3
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80050a6:	f8bc 2004 	ldrh.w	r2, [ip, #4]

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;
 80050aa:	f647 41ff 	movw	r1, #31999	; 0x7cff

    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80050ae:	ea43 0402 	orr.w	r4, r3, r2
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80050b2:	f8bc 300e 	ldrh.w	r3, [ip, #14]
 80050b6:	f8bc 200c 	ldrh.w	r2, [ip, #12]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;
 80050ba:	ea05 0101 	and.w	r1, r5, r1

    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80050be:	4313      	orrs	r3, r2
 80050c0:	b29b      	uxth	r3, r3

    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80050c2:	ea43 0501 	orr.w	r5, r3, r1
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
 80050c6:	f64f 738f 	movw	r3, #65423	; 0xff8f
 80050ca:	ea06 0303 	and.w	r3, r6, r3
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80050ce:	433b      	orrs	r3, r7

    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d0:	8085      	strh	r5, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050d2:	8303      	strh	r3, [r0, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d4:	8404      	strh	r4, [r0, #32]
}
 80050d6:	b003      	add	sp, #12
 80050d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050da:	46c0      	nop			(mov r8, r8)
 80050dc:	40013400 	.word	0x40013400
 80050e0:	40012c00 	.word	0x40012c00

080050e4 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 80050e4:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80050e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 80050e8:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 80050ec:	041b      	lsls	r3, r3, #16
 80050ee:	0c1b      	lsrs	r3, r3, #16
 80050f0:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80050f2:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f4:	8882      	ldrh	r2, [r0, #4]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
 80050f6:	f023 0320 	bic.w	r3, r3, #32	; 0x20
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050fa:	b295      	uxth	r5, r2
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050fc:	8b02      	ldrh	r2, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
 80050fe:	041b      	lsls	r3, r3, #16

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005100:	b296      	uxth	r6, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8005102:	890a      	ldrh	r2, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
 8005104:	0c1b      	lsrs	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8005106:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
 800510a:	884a      	ldrh	r2, [r1, #2]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800510c:	b29b      	uxth	r3, r3
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
 800510e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005112:	b29c      	uxth	r4, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8005114:	88cb      	ldrh	r3, [r1, #6]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005116:	880f      	ldrh	r7, [r1, #0]
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8005118:	8703      	strh	r3, [r0, #56]
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 800511a:	4b1e      	ldr	r3, [pc, #120]	(8005194 <TIM_OC2Init+0xb0>)
 800511c:	4a1e      	ldr	r2, [pc, #120]	(8005198 <TIM_OC2Init+0xb4>)
 800511e:	4298      	cmp	r0, r3
 8005120:	bf14      	ite	ne
 8005122:	2300      	movne	r3, #0
 8005124:	2301      	moveq	r3, #1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005126:	b083      	sub	sp, #12
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8005128:	4290      	cmp	r0, r2
 800512a:	bf08      	it	eq
 800512c:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005130:	9001      	str	r0, [sp, #4]
 8005132:	468c      	mov	ip, r1
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8005134:	b30b      	cbz	r3, 800517a <TIM_OC2Init+0x96>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
 8005136:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
 800513a:	f5a2 5232 	sub.w	r2, r2, #11392	; 0x2c80

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800513e:	f8bc 300a 	ldrh.w	r3, [ip, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
 8005142:	3a01      	subs	r2, #1
 8005144:	ea04 0202 	and.w	r2, r4, r2

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8005148:	ea42 1203 	orr.w	r2, r2, r3, lsl #4

    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
 800514c:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8005150:	ea02 0303 	and.w	r3, r2, r3
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8005154:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8005158:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800515c:	b29c      	uxth	r4, r3
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800515e:	f8bc 200c 	ldrh.w	r2, [ip, #12]
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 4);

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;
 8005162:	f247 33ff 	movw	r3, #29695	; 0x73ff
 8005166:	ea05 0303 	and.w	r3, r5, r3

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800516a:	ea43 0382 	orr.w	r3, r3, r2, lsl #2

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800516e:	f8bc 200e 	ldrh.w	r2, [ip, #14]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8005172:	b29b      	uxth	r3, r3

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8005174:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8005178:	b29d      	uxth	r5, r3
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
 800517a:	f648 73ff 	movw	r3, #36863	; 0x8fff
 800517e:	ea06 0303 	and.w	r3, r6, r3
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005182:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8005186:	b29b      	uxth	r3, r3
    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005188:	8085      	strh	r5, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800518a:	8303      	strh	r3, [r0, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518c:	8404      	strh	r4, [r0, #32]
}
 800518e:	b003      	add	sp, #12
 8005190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005192:	46c0      	nop			(mov r8, r8)
 8005194:	40013400 	.word	0x40013400
 8005198:	40012c00 	.word	0x40012c00

0800519c <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 800519c:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800519e:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 80051a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051a4:	041b      	lsls	r3, r3, #16
 80051a6:	0c1b      	lsrs	r3, r3, #16
 80051a8:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051aa:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ac:	8882      	ldrh	r2, [r0, #4]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
 80051ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b2:	b295      	uxth	r5, r2
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051b4:	8b82      	ldrh	r2, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
 80051b6:	041b      	lsls	r3, r3, #16

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051b8:	b296      	uxth	r6, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80051ba:	890a      	ldrh	r2, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
 80051bc:	0c1b      	lsrs	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80051be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
 80051c2:	884a      	ldrh	r2, [r1, #2]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80051c4:	b29b      	uxth	r3, r3
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
 80051c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80051ca:	b29c      	uxth	r4, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80051cc:	88cb      	ldrh	r3, [r1, #6]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80051ce:	880f      	ldrh	r7, [r1, #0]
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80051d0:	8783      	strh	r3, [r0, #60]
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 80051d2:	4b1d      	ldr	r3, [pc, #116]	(8005248 <TIM_OC3Init+0xac>)
 80051d4:	4a1d      	ldr	r2, [pc, #116]	(800524c <TIM_OC3Init+0xb0>)
 80051d6:	4298      	cmp	r0, r3
 80051d8:	bf14      	ite	ne
 80051da:	2300      	movne	r3, #0
 80051dc:	2301      	moveq	r3, #1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80051de:	b083      	sub	sp, #12
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 80051e0:	4290      	cmp	r0, r2
 80051e2:	bf08      	it	eq
 80051e4:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80051e8:	9001      	str	r0, [sp, #4]
 80051ea:	468c      	mov	ip, r1
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 80051ec:	b30b      	cbz	r3, 8005232 <TIM_OC3Init+0x96>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
 80051ee:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
 80051f2:	f5a2 5250 	sub.w	r2, r2, #13312	; 0x3400

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80051f6:	f8bc 300a 	ldrh.w	r3, [ip, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
 80051fa:	3a01      	subs	r2, #1
 80051fc:	ea04 0202 	and.w	r2, r4, r2

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8005200:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
 8005204:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8005208:	ea02 0303 	and.w	r3, r2, r3
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800520c:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8005210:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005214:	b29c      	uxth	r4, r3
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8005216:	f8bc 200c 	ldrh.w	r2, [ip, #12]
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;
 800521a:	f644 73ff 	movw	r3, #20479	; 0x4fff
 800521e:	ea05 0303 	and.w	r3, r5, r3

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8005222:	ea43 1302 	orr.w	r3, r3, r2, lsl #4

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8005226:	f8bc 200e 	ldrh.w	r2, [ip, #14]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800522a:	b29b      	uxth	r3, r3

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800522c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005230:	b29d      	uxth	r5, r3
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
 8005232:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8005236:	ea06 0303 	and.w	r3, r6, r3
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800523a:	433b      	orrs	r3, r7
    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523c:	8085      	strh	r5, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800523e:	8383      	strh	r3, [r0, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005240:	8404      	strh	r4, [r0, #32]
}
 8005242:	b003      	add	sp, #12
 8005244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005246:	46c0      	nop			(mov r8, r8)
 8005248:	40013400 	.word	0x40013400
 800524c:	40012c00 	.word	0x40012c00

08005250 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
 8005250:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005252:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
 8005254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005258:	041b      	lsls	r3, r3, #16
 800525a:	0c1b      	lsrs	r3, r3, #16
 800525c:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525e:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005260:	b085      	sub	sp, #20

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005262:	b29b      	uxth	r3, r3
 8005264:	9302      	str	r3, [sp, #8]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005266:	8883      	ldrh	r3, [r0, #4]

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005268:	884a      	ldrh	r2, [r1, #2]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800526a:	fa1f fc83 	uxth.w	ip, r3
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800526e:	8b83      	ldrh	r3, [r0, #28]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005270:	880e      	ldrh	r6, [r1, #0]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005272:	b29d      	uxth	r5, r3
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8005274:	88cb      	ldrh	r3, [r1, #6]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8005276:	890f      	ldrh	r7, [r1, #8]
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8005278:	f8a0 3040 	strh.w	r3, [r0, #64]
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 800527c:	4b17      	ldr	r3, [pc, #92]	(80052dc <TIM_OC4Init+0x8c>)

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 800527e:	9201      	str	r2, [sp, #4]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8005280:	4a17      	ldr	r2, [pc, #92]	(80052e0 <TIM_OC4Init+0x90>)
 8005282:	4298      	cmp	r0, r3
 8005284:	bf14      	ite	ne
 8005286:	2300      	movne	r3, #0
 8005288:	2301      	moveq	r3, #1
 800528a:	4290      	cmp	r0, r2
 800528c:	bf08      	it	eq
 800528e:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005292:	9003      	str	r0, [sp, #12]
 8005294:	460c      	mov	r4, r1
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8005296:	b13b      	cbz	r3, 80052a8 <TIM_OC4Init+0x58>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;
 8005298:	ea4f 438c 	mov.w	r3, ip, lsl #18

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800529c:	89a2      	ldrh	r2, [r4, #12]
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;
 800529e:	0c9b      	lsrs	r3, r3, #18

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80052a0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80052a4:	fa1f fc83 	uxth.w	ip, r3
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
 80052a8:	f648 73ff 	movw	r3, #36863	; 0x8fff
 80052ac:	ea05 0303 	and.w	r3, r5, r3
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 80052b0:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80052b4:	b29b      	uxth	r3, r3
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
 80052b6:	9a02      	ldr	r2, [sp, #8]
    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b8:	f8a0 c004 	strh.w	ip, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80052bc:	8383      	strh	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
 80052be:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80052c2:	ea02 0303 	and.w	r3, r2, r3

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80052c6:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 80052ca:	9a01      	ldr	r2, [sp, #4]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80052cc:	b29b      	uxth	r3, r3
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 80052ce:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80052d2:	b29b      	uxth	r3, r3
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d4:	8403      	strh	r3, [r0, #32]
}
 80052d6:	b005      	add	sp, #20
 80052d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052da:	46c0      	nop			(mov r8, r8)
 80052dc:	40013400 	.word	0x40013400
 80052e0:	40012c00 	.word	0x40012c00

080052e4 <TIM_ICInit>:
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80052e4:	880b      	ldrh	r3, [r1, #0]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80052e6:	b530      	push	{r4, r5, lr}
 80052e8:	4604      	mov	r4, r0
 80052ea:	460d      	mov	r5, r1
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80052ec:	bb43      	cbnz	r3, 8005340 <TIM_ICInit+0x5c>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 80052ee:	8c23      	ldrh	r3, [r4, #32]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80052f0:	8849      	ldrh	r1, [r1, #2]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 80052f2:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 80052f6:	041b      	lsls	r3, r3, #16
 80052f8:	0c1b      	lsrs	r3, r3, #16
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80052fa:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80052fe:	8928      	ldrh	r0, [r5, #8]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 8005300:	8423      	strh	r3, [r4, #32]

  tmpccmr1 = TIMx->CCMR1;
 8005302:	8b23      	ldrh	r3, [r4, #24]
  tmpccer = TIMx->CCER;
 8005304:	8c22      	ldrh	r2, [r4, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005306:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800530a:	041b      	lsls	r3, r3, #16
 800530c:	0c1b      	lsrs	r3, r3, #16

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 800530e:	f022 0202 	bic.w	r2, r2, #2	; 0x2
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005312:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 8005316:	0412      	lsls	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005318:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 800531a:	0c12      	lsrs	r2, r2, #16
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 800531c:	f041 0101 	orr.w	r1, r1, #1	; 0x1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005320:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8005324:	430a      	orrs	r2, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005326:	8323      	strh	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005328:	8422      	strh	r2, [r4, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 800532a:	8b23      	ldrh	r3, [r4, #24]
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800532c:	88ea      	ldrh	r2, [r5, #6]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 800532e:	f023 030c 	bic.w	r3, r3, #12	; 0xc
 8005332:	041b      	lsls	r3, r3, #16
 8005334:	0c1b      	lsrs	r3, r3, #16
 8005336:	8323      	strh	r3, [r4, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8005338:	8b23      	ldrh	r3, [r4, #24]
 800533a:	b29b      	uxth	r3, r3
 800533c:	4313      	orrs	r3, r2
 800533e:	e02e      	b.n	800539e <TIM_ICInit+0xba>
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8005340:	2b04      	cmp	r3, #4
 8005342:	d12e      	bne.n	80053a2 <TIM_ICInit+0xbe>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8005344:	8c23      	ldrh	r3, [r4, #32]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8005346:	f8b1 c002 	ldrh.w	ip, [r1, #2]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 800534a:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 800534e:	041b      	lsls	r3, r3, #16
 8005350:	0c1b      	lsrs	r3, r3, #16
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8005352:	8888      	ldrh	r0, [r1, #4]
 8005354:	8909      	ldrh	r1, [r1, #8]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8005356:	8423      	strh	r3, [r4, #32]

  tmpccmr1 = TIMx->CCMR1;
 8005358:	8b23      	ldrh	r3, [r4, #24]
  tmpccer = TIMx->CCER;
 800535a:	8c22      	ldrh	r2, [r4, #32]
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 800535c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005360:	051b      	lsls	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8005362:	f022 0220 	bic.w	r2, r2, #32	; 0x20
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8005366:	0d1b      	lsrs	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8005368:	0412      	lsls	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
 800536a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 800536e:	0c12      	lsrs	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
 8005370:	b29b      	uxth	r3, r3
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8005372:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 8005376:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 800537a:	b292      	uxth	r2, r2
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 800537c:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 800537e:	f042 0210 	orr.w	r2, r2, #16	; 0x10

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005382:	8323      	strh	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005384:	8422      	strh	r2, [r4, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 8005386:	8b23      	ldrh	r3, [r4, #24]
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005388:	88ea      	ldrh	r2, [r5, #6]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 800538a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800538e:	041b      	lsls	r3, r3, #16
 8005390:	0c1b      	lsrs	r3, r3, #16
 8005392:	8323      	strh	r3, [r4, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (u16)(TIM_ICPSC << 8);
 8005394:	8b23      	ldrh	r3, [r4, #24]
 8005396:	b29b      	uxth	r3, r3
 8005398:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800539c:	b29b      	uxth	r3, r3
 800539e:	8323      	strh	r3, [r4, #24]
 80053a0:	e055      	b.n	800544e <TIM_ICInit+0x16a>
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 80053a8:	8888      	ldrh	r0, [r1, #4]
 80053aa:	8909      	ldrh	r1, [r1, #8]
 80053ac:	d125      	bne.n	80053fa <TIM_ICInit+0x116>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 80053ae:	8c23      	ldrh	r3, [r4, #32]
 80053b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053b4:	041b      	lsls	r3, r3, #16
 80053b6:	0c1b      	lsrs	r3, r3, #16
 80053b8:	8423      	strh	r3, [r4, #32]

  tmpccmr2 = TIMx->CCMR2;
 80053ba:	8ba3      	ldrh	r3, [r4, #28]
  tmpccer = TIMx->CCER;
 80053bc:	8c22      	ldrh	r2, [r4, #32]
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80053be:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 80053c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80053c6:	041b      	lsls	r3, r3, #16

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 80053c8:	0412      	lsls	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80053ca:	0c1b      	lsrs	r3, r3, #16

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 80053cc:	0c12      	lsrs	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80053ce:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 80053d2:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80053d6:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 80053d8:	b292      	uxth	r2, r2
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80053da:	4303      	orrs	r3, r0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 80053dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053e0:	83a3      	strh	r3, [r4, #28]
  TIMx->CCER = tmpccer;
 80053e2:	8422      	strh	r2, [r4, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
 80053e4:	8ba3      	ldrh	r3, [r4, #28]
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80053e6:	88ea      	ldrh	r2, [r5, #6]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
 80053e8:	f023 030c 	bic.w	r3, r3, #12	; 0xc
 80053ec:	041b      	lsls	r3, r3, #16
 80053ee:	0c1b      	lsrs	r3, r3, #16
 80053f0:	83a3      	strh	r3, [r4, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80053f2:	8ba3      	ldrh	r3, [r4, #28]
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	4313      	orrs	r3, r2
 80053f8:	e028      	b.n	800544c <TIM_ICInit+0x168>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
 80053fa:	8c23      	ldrh	r3, [r4, #32]
 80053fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005400:	041b      	lsls	r3, r3, #16
 8005402:	0c1b      	lsrs	r3, r3, #16
 8005404:	8423      	strh	r3, [r4, #32]

  tmpccmr2 = TIMx->CCMR2;
 8005406:	8ba3      	ldrh	r3, [r4, #28]
  tmpccer = TIMx->CCER;
 8005408:	8c22      	ldrh	r2, [r4, #32]
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 800540a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800540e:	051b      	lsls	r3, r3, #20

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 8005410:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 8005414:	0d1b      	lsrs	r3, r3, #20

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 8005416:	0412      	lsls	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 8005418:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 800541c:	0c12      	lsrs	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 800541e:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 8005420:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 8005424:	ea43 3301 	orr.w	r3, r3, r1, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 8005428:	b292      	uxth	r2, r2
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 800542a:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 800542c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005430:	83a3      	strh	r3, [r4, #28]
  TIMx->CCER = tmpccer ;
 8005432:	8422      	strh	r2, [r4, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
 8005434:	8ba3      	ldrh	r3, [r4, #28]
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005436:	88ea      	ldrh	r2, [r5, #6]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
 8005438:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800543c:	041b      	lsls	r3, r3, #16
 800543e:	0c1b      	lsrs	r3, r3, #16
 8005440:	83a3      	strh	r3, [r4, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (u16)(TIM_ICPSC << 8);
 8005442:	8ba3      	ldrh	r3, [r4, #28]
 8005444:	b29b      	uxth	r3, r3
 8005446:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800544a:	b29b      	uxth	r3, r3
 800544c:	83a3      	strh	r3, [r4, #28]
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800544e:	bd30      	pop	{r4, r5, pc}

08005450 <TIM_PWMIConfig>:
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8005450:	468c      	mov	ip, r1
 8005452:	b5f0      	push	{r4, r5, r6, r7, lr}
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8005454:	f8bc 3000 	ldrh.w	r3, [ip]

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8005458:	884c      	ldrh	r4, [r1, #2]
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }

  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 800545a:	8889      	ldrh	r1, [r1, #4]

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 800545c:	2c00      	cmp	r4, #0
 800545e:	bf0c      	ite	eq
 8005460:	2702      	moveq	r7, #2
 8005462:	2700      	movne	r7, #0
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }

  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8005464:	2901      	cmp	r1, #1
 8005466:	bf0c      	ite	eq
 8005468:	2602      	moveq	r6, #2
 800546a:	2601      	movne	r6, #1
 800546c:	f8bc 5008 	ldrh.w	r5, [ip, #8]
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8005470:	2b00      	cmp	r3, #0
 8005472:	d14b      	bne.n	800550c <TIM_PWMIConfig+0xbc>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 8005474:	8c03      	ldrh	r3, [r0, #32]
 8005476:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 800547a:	041b      	lsls	r3, r3, #16
 800547c:	0c1b      	lsrs	r3, r3, #16
 800547e:	8403      	strh	r3, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 8005480:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 8005482:	8c02      	ldrh	r2, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005484:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8005488:	041b      	lsls	r3, r3, #16
 800548a:	0c1b      	lsrs	r3, r3, #16
 800548c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 8005490:	f022 0202 	bic.w	r2, r2, #2	; 0x2
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005494:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 8005496:	0412      	lsls	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005498:	430b      	orrs	r3, r1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 800549a:	0c12      	lsrs	r2, r2, #16
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 800549c:	f044 0101 	orr.w	r1, r4, #1	; 0x1
 80054a0:	430a      	orrs	r2, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054a2:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80054a4:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 80054a6:	8b03      	ldrh	r3, [r0, #24]
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80054a8:	f8bc 1006 	ldrh.w	r1, [ip, #6]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 80054ac:	f023 030c 	bic.w	r3, r3, #12	; 0xc
 80054b0:	041b      	lsls	r3, r3, #16
 80054b2:	0c1b      	lsrs	r3, r3, #16
 80054b4:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80054b6:	8b03      	ldrh	r3, [r0, #24]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	430b      	orrs	r3, r1
 80054bc:	8303      	strh	r3, [r0, #24]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 80054be:	8c03      	ldrh	r3, [r0, #32]
 80054c0:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 80054c4:	041b      	lsls	r3, r3, #16
 80054c6:	0c1b      	lsrs	r3, r3, #16
 80054c8:	8403      	strh	r3, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 80054ca:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 80054cc:	8c02      	ldrh	r2, [r0, #32]
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 80054ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d2:	051b      	lsls	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80054d4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 80054d8:	0d1b      	lsrs	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80054da:	0412      	lsls	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
 80054dc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80054e0:	0c12      	lsrs	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
 80054e2:	b29b      	uxth	r3, r3
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80054e4:	f042 0210 	orr.w	r2, r2, #16	; 0x10
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 80054e8:	ea43 2306 	orr.w	r3, r3, r6, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80054ec:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054f0:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80054f2:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 80054f4:	8b03      	ldrh	r3, [r0, #24]
 80054f6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80054fa:	041b      	lsls	r3, r3, #16
 80054fc:	0c1b      	lsrs	r3, r3, #16
 80054fe:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (u16)(TIM_ICPSC << 8);
 8005500:	8b03      	ldrh	r3, [r0, #24]
 8005502:	b29b      	uxth	r3, r3
 8005504:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005508:	b29b      	uxth	r3, r3
 800550a:	e04c      	b.n	80055a6 <TIM_PWMIConfig+0x156>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 800550c:	8c03      	ldrh	r3, [r0, #32]
 800550e:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 8005512:	041b      	lsls	r3, r3, #16
 8005514:	0c1b      	lsrs	r3, r3, #16
 8005516:	8403      	strh	r3, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 8005518:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 800551a:	8c02      	ldrh	r2, [r0, #32]
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 800551c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005520:	051b      	lsls	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8005522:	f022 0220 	bic.w	r2, r2, #32	; 0x20
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8005526:	0d1b      	lsrs	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8005528:	0412      	lsls	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
 800552a:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 800552e:	0c12      	lsrs	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
 8005530:	b29b      	uxth	r3, r3
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8005532:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 8005536:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 800553a:	b292      	uxth	r2, r2
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 800553c:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 800553e:	f042 0210 	orr.w	r2, r2, #16	; 0x10

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005542:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005544:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 8005546:	8b03      	ldrh	r3, [r0, #24]
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005548:	f8bc 1006 	ldrh.w	r1, [ip, #6]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 800554c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005550:	041b      	lsls	r3, r3, #16
 8005552:	0c1b      	lsrs	r3, r3, #16
 8005554:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (u16)(TIM_ICPSC << 8);
 8005556:	8b03      	ldrh	r3, [r0, #24]
 8005558:	b29b      	uxth	r3, r3
 800555a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800555e:	b29b      	uxth	r3, r3
 8005560:	8303      	strh	r3, [r0, #24]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 8005562:	8c03      	ldrh	r3, [r0, #32]
 8005564:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 8005568:	041b      	lsls	r3, r3, #16
 800556a:	0c1b      	lsrs	r3, r3, #16
 800556c:	8403      	strh	r3, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 800556e:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 8005570:	8c02      	ldrh	r2, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005572:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8005576:	041b      	lsls	r3, r3, #16

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8005578:	f022 0203 	bic.w	r2, r2, #3	; 0x3
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 800557c:	0c1b      	lsrs	r3, r3, #16

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 800557e:	0412      	lsls	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005580:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8005584:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005586:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8005588:	f042 0201 	orr.w	r2, r2, #1	; 0x1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 800558c:	4333      	orrs	r3, r6

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 800558e:	433a      	orrs	r2, r7

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005590:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005592:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 8005594:	8b03      	ldrh	r3, [r0, #24]
 8005596:	f023 030c 	bic.w	r3, r3, #12	; 0xc
 800559a:	041b      	lsls	r3, r3, #16
 800559c:	0c1b      	lsrs	r3, r3, #16
 800559e:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80055a0:	8b03      	ldrh	r3, [r0, #24]
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	430b      	orrs	r3, r1
 80055a6:	8303      	strh	r3, [r0, #24]
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80055a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055aa:	46c0      	nop			(mov r8, r8)

080055ac <TIM_BDTRConfig>:
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  TIMx->BDTR = (u32)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80055ac:	880a      	ldrh	r2, [r1, #0]
 80055ae:	884b      	ldrh	r3, [r1, #2]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	888a      	ldrh	r2, [r1, #4]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	88ca      	ldrh	r2, [r1, #6]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	890a      	ldrh	r2, [r1, #8]
 80055bc:	4313      	orrs	r3, r2
 80055be:	894a      	ldrh	r2, [r1, #10]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	898a      	ldrh	r2, [r1, #12]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	f8a0 3044 	strh.w	r3, [r0, #68]
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;

}
 80055cc:	4770      	bx	lr
 80055ce:	46c0      	nop			(mov r8, r8)

080055d0 <TIM_TimeBaseStructInit>:
* Return         : None
*******************************************************************************/
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 80055d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055d4:	8083      	strh	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80055d6:	f04f 0300 	mov.w	r3, #0	; 0x0
 80055da:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80055dc:	80c3      	strh	r3, [r0, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80055de:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80055e0:	2300      	movs	r3, #0
 80055e2:	7203      	strb	r3, [r0, #8]
}
 80055e4:	4770      	bx	lr
 80055e6:	46c0      	nop			(mov r8, r8)

080055e8 <TIM_OCStructInit>:
* Return         : None
*******************************************************************************/
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80055e8:	f04f 0300 	mov.w	r3, #0	; 0x0
 80055ec:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80055ee:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80055f0:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 80055f2:	80c3      	strh	r3, [r0, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80055f4:	8103      	strh	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80055f6:	8143      	strh	r3, [r0, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 80055f8:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 80055fa:	81c3      	strh	r3, [r0, #14]
}
 80055fc:	4770      	bx	lr
 80055fe:	46c0      	nop			(mov r8, r8)

08005600 <TIM_ICStructInit>:
* Return         : None
*******************************************************************************/
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8005600:	f04f 0300 	mov.w	r3, #0	; 0x0
 8005604:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8005606:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8005608:	f04f 0301 	mov.w	r3, #1	; 0x1
 800560c:	8083      	strh	r3, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800560e:	f04f 0300 	mov.w	r3, #0	; 0x0
 8005612:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8005614:	8103      	strh	r3, [r0, #8]
}
 8005616:	4770      	bx	lr

08005618 <TIM_BDTRStructInit>:
* Return         : None
*******************************************************************************/
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8005618:	f04f 0300 	mov.w	r3, #0	; 0x0
 800561c:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 800561e:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8005620:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8005622:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8005624:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8005626:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8005628:	8183      	strh	r3, [r0, #12]
}
 800562a:	4770      	bx	lr

0800562c <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800562c:	b121      	cbz	r1, 8005638 <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= CR1_CEN_Set;
 800562e:	8803      	ldrh	r3, [r0, #0]
 8005630:	b29b      	uxth	r3, r3
 8005632:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 8005636:	e004      	b.n	8005642 <TIM_Cmd+0x16>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= CR1_CEN_Reset;
 8005638:	8803      	ldrh	r3, [r0, #0]
 800563a:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 800563e:	059b      	lsls	r3, r3, #22
 8005640:	0d9b      	lsrs	r3, r3, #22
 8005642:	8003      	strh	r3, [r0, #0]
  }
}
 8005644:	4770      	bx	lr
 8005646:	46c0      	nop			(mov r8, r8)

08005648 <TIM_CtrlPWMOutputs>:
{
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005648:	b129      	cbz	r1, 8005656 <TIM_CtrlPWMOutputs+0xe>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= BDTR_MOE_Set;
 800564a:	f8b0 3044 	ldrh.w	r3, [r0, #68]
 800564e:	b29b      	uxth	r3, r3
 8005650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005654:	e003      	b.n	800565e <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= BDTR_MOE_Reset;
 8005656:	f8b0 3044 	ldrh.w	r3, [r0, #68]
 800565a:	045b      	lsls	r3, r3, #17
 800565c:	0c5b      	lsrs	r3, r3, #17
 800565e:	f8a0 3044 	strh.w	r3, [r0, #68]
  }  
}
 8005662:	4770      	bx	lr

08005664 <TIM_ITConfig>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_TIM_PERIPH_IT((TIMx), (TIM_IT)));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005664:	b122      	cbz	r2, 8005670 <TIM_ITConfig+0xc>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8005666:	8983      	ldrh	r3, [r0, #12]
 8005668:	b29b      	uxth	r3, r3
 800566a:	ea41 0303 	orr.w	r3, r1, r3
 800566e:	e003      	b.n	8005678 <TIM_ITConfig+0x14>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (u16)~TIM_IT;
 8005670:	8983      	ldrh	r3, [r0, #12]
 8005672:	b29b      	uxth	r3, r3
 8005674:	ea23 0301 	bic.w	r3, r3, r1
 8005678:	8183      	strh	r3, [r0, #12]
  }
}
 800567a:	4770      	bx	lr

0800567c <TIM_GenerateEvent>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  assert_param(IS_TIM_PERIPH_EVENT((TIMx), (TIM_EventSource)));

  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 800567c:	8281      	strh	r1, [r0, #20]
}
 800567e:	4770      	bx	lr

08005680 <TIM_DMAConfig>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8005680:	430a      	orrs	r2, r1
 8005682:	f8a0 2048 	strh.w	r2, [r0, #72]
}
 8005686:	4770      	bx	lr

08005688 <TIM_DMACmd>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_TIM_PERIPH_DMA(TIMx, TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005688:	b122      	cbz	r2, 8005694 <TIM_DMACmd+0xc>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800568a:	8983      	ldrh	r3, [r0, #12]
 800568c:	b29b      	uxth	r3, r3
 800568e:	ea41 0303 	orr.w	r3, r1, r3
 8005692:	e003      	b.n	800569c <TIM_DMACmd+0x14>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (u16)~TIM_DMASource;
 8005694:	8983      	ldrh	r3, [r0, #12]
 8005696:	b29b      	uxth	r3, r3
 8005698:	ea23 0301 	bic.w	r3, r3, r1
 800569c:	8183      	strh	r3, [r0, #12]
  }
}
 800569e:	4770      	bx	lr

080056a0 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  SMCR_SMS_Mask;
 80056a0:	8903      	ldrh	r3, [r0, #8]
 80056a2:	f023 0307 	bic.w	r3, r3, #7	; 0x7
 80056a6:	041b      	lsls	r3, r3, #16
 80056a8:	0c1b      	lsrs	r3, r3, #16
 80056aa:	8103      	strh	r3, [r0, #8]
}
 80056ac:	4770      	bx	lr
 80056ae:	46c0      	nop			(mov r8, r8)

080056b0 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056b0:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
 80056b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b6:	041b      	lsls	r3, r3, #16
 80056b8:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80056ba:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056bc:	8101      	strh	r1, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80056be:	8903      	ldrh	r3, [r0, #8]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f043 0307 	orr.w	r3, r3, #7	; 0x7
 80056c6:	8103      	strh	r3, [r0, #8]
}
 80056c8:	4770      	bx	lr
 80056ca:	46c0      	nop			(mov r8, r8)

080056cc <TIM_TIxExternalClockConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, u16 TIM_TIxExternalCLKSource,
                                u16 TIM_ICPolarity, u16 ICFilter)
{
 80056cc:	b510      	push	{r4, lr}
 80056ce:	460c      	mov	r4, r1
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80056d0:	2c60      	cmp	r4, #96
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, u16 TIM_TIxExternalCLKSource,
                                u16 TIM_ICPolarity, u16 ICFilter)
{
 80056d2:	4611      	mov	r1, r2
 80056d4:	469c      	mov	ip, r3
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80056d6:	d11a      	bne.n	800570e <TIM_TIxExternalClockConfig+0x42>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 80056d8:	8c03      	ldrh	r3, [r0, #32]
 80056da:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 80056de:	041b      	lsls	r3, r3, #16
 80056e0:	0c1b      	lsrs	r3, r3, #16
 80056e2:	8403      	strh	r3, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 80056e4:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 80056e6:	8c02      	ldrh	r2, [r0, #32]
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 80056e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80056ec:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 80056f0:	051b      	lsls	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80056f2:	0412      	lsls	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 80056f4:	0d1b      	lsrs	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80056f6:	0c12      	lsrs	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
 80056f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80056fc:	f042 0210 	orr.w	r2, r2, #16	; 0x10
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 8005700:	ea43 330c 	orr.w	r3, r3, ip, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8005704:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 8005708:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 800570a:	b292      	uxth	r2, r2
 800570c:	e017      	b.n	800573e <TIM_TIxExternalClockConfig+0x72>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 800570e:	8c03      	ldrh	r3, [r0, #32]
 8005710:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 8005714:	041b      	lsls	r3, r3, #16
 8005716:	0c1b      	lsrs	r3, r3, #16
 8005718:	8403      	strh	r3, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 800571a:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 800571c:	8c02      	ldrh	r2, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 800571e:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8005722:	041b      	lsls	r3, r3, #16

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8005724:	f022 0203 	bic.w	r2, r2, #3	; 0x3
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005728:	0c1b      	lsrs	r3, r3, #16

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 800572a:	0412      	lsls	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 800572c:	f043 0301 	orr.w	r3, r3, #1	; 0x1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8005730:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005732:	ea43 130c 	orr.w	r3, r3, ip, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8005736:	f042 0201 	orr.w	r2, r2, #1	; 0x1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 800573a:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 800573c:	430a      	orrs	r2, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800573e:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005740:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005742:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
 8005744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005748:	041b      	lsls	r3, r3, #16
 800574a:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800574c:	ea44 0303 	orr.w	r3, r4, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005750:	8103      	strh	r3, [r0, #8]

  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8005752:	8903      	ldrh	r3, [r0, #8]
 8005754:	b29b      	uxth	r3, r3
 8005756:	f043 0307 	orr.w	r3, r3, #7	; 0x7
 800575a:	8103      	strh	r3, [r0, #8]
}
 800575c:	bd10      	pop	{r4, pc}
 800575e:	46c0      	nop			(mov r8, r8)

08005760 <TIM_ETRClockMode1Config>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8005760:	f8b0 c008 	ldrh.w	ip, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= TIM_ExtTRGPrescaler | TIM_ExtTRGPolarity | (u16)(ExtTRGFilter << 8);
 8005764:	fa5f fc8c 	uxtb.w	ip, ip
 8005768:	ea41 010c 	orr.w	r1, r1, ip
 800576c:	430a      	orrs	r2, r1
 800576e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005772:	b292      	uxth	r2, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005774:	8102      	strh	r2, [r0, #8]

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005776:	8903      	ldrh	r3, [r0, #8]

  /* Reset the SMS Bits */
  tmpsmcr &= SMCR_SMS_Mask;
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8005778:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800577c:	041b      	lsls	r3, r3, #16
 800577e:	0c1b      	lsrs	r3, r3, #16

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= SMCR_TS_Mask;
  tmpsmcr |= TIM_TS_ETRF;
 8005780:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005784:	8103      	strh	r3, [r0, #8]
}
 8005786:	4770      	bx	lr

08005788 <TIM_ETRClockMode2Config>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8005788:	f8b0 c008 	ldrh.w	ip, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= TIM_ExtTRGPrescaler | TIM_ExtTRGPolarity | (u16)(ExtTRGFilter << 8);
 800578c:	fa5f fc8c 	uxtb.w	ip, ip
 8005790:	ea41 010c 	orr.w	r1, r1, ip
 8005794:	430a      	orrs	r2, r1
 8005796:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800579a:	b292      	uxth	r2, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800579c:	8102      	strh	r2, [r0, #8]

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);

  /* Enable the External clock mode2 */
  TIMx->SMCR |= SMCR_ECE_Set;
 800579e:	8903      	ldrh	r3, [r0, #8]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057a6:	8103      	strh	r3, [r0, #8]
}
 80057a8:	4770      	bx	lr
 80057aa:	46c0      	nop			(mov r8, r8)

080057ac <TIM_ETRConfig>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80057ac:	f8b0 c008 	ldrh.w	ip, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= TIM_ExtTRGPrescaler | TIM_ExtTRGPolarity | (u16)(ExtTRGFilter << 8);
 80057b0:	fa5f fc8c 	uxtb.w	ip, ip
 80057b4:	ea41 010c 	orr.w	r1, r1, ip
 80057b8:	430a      	orrs	r2, r1
 80057ba:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80057be:	b292      	uxth	r2, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057c0:	8102      	strh	r2, [r0, #8]
}
 80057c2:	4770      	bx	lr

080057c4 <TIM_PrescalerConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));

  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 80057c4:	8501      	strh	r1, [r0, #40]

  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 80057c6:	8282      	strh	r2, [r0, #20]
}
 80057c8:	4770      	bx	lr
 80057ca:	46c0      	nop			(mov r8, r8)

080057cc <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 80057cc:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= CR1_CounterMode_Mask;
 80057ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d2:	059b      	lsls	r3, r3, #22
 80057d4:	0d9b      	lsrs	r3, r3, #22

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 80057d6:	4319      	orrs	r1, r3

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 80057d8:	8001      	strh	r1, [r0, #0]
}
 80057da:	4770      	bx	lr

080057dc <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057dc:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
 80057de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e2:	041b      	lsls	r3, r3, #16
 80057e4:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80057e6:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057e8:	8101      	strh	r1, [r0, #8]
}
 80057ea:	4770      	bx	lr

080057ec <TIM_EncoderInterfaceConfig>:
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057ec:	f8b0 c008 	ldrh.w	ip, [r0, #8]
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, u16 TIM_EncoderMode,
                                u16 TIM_IC1Polarity, u16 TIM_IC2Polarity)
{
 80057f0:	b530      	push	{r4, r5, lr}

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80057f2:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057f4:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 80057f6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 80057fa:	f025 0522 	bic.w	r5, r5, #34	; 0x22
  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 80057fe:	f024 0403 	bic.w	r4, r4, #3	; 0x3
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 8005802:	042d      	lsls	r5, r5, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
 8005804:	f02c 0c07 	bic.w	ip, ip, #7	; 0x7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 8005808:	0424      	lsls	r4, r4, #16
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 800580a:	0c2d      	lsrs	r5, r5, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
 800580c:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 8005810:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 8005812:	432a      	orrs	r2, r5

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
 8005814:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
 8005818:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 800581c:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;
 8005820:	ea41 010c 	orr.w	r1, r1, ip

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
 8005824:	f044 0401 	orr.w	r4, r4, #1	; 0x1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 8005828:	b292      	uxth	r2, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582a:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800582c:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582e:	8402      	strh	r2, [r0, #32]
}
 8005830:	bd30      	pop	{r4, r5, pc}
 8005832:	46c0      	nop			(mov r8, r8)

08005834 <TIM_ForcedOC1Config>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr1 = TIMx->CCMR1;
 8005834:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= CCMR_OC13M_Mask;
 8005836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583a:	041b      	lsls	r3, r3, #16
 800583c:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 800583e:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005840:	8301      	strh	r1, [r0, #24]
}
 8005842:	4770      	bx	lr

08005844 <TIM_ForcedOC2Config>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr1 = TIMx->CCMR1;
 8005844:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= CCMR_OC24M_Mask;
 8005846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800584a:	041b      	lsls	r3, r3, #16
 800584c:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (u16)(TIM_ForcedAction << 8);
 800584e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005852:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005854:	8303      	strh	r3, [r0, #24]
}
 8005856:	4770      	bx	lr

08005858 <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8005858:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= CCMR_OC13M_Mask;
 800585a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585e:	041b      	lsls	r3, r3, #16
 8005860:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8005862:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005864:	8381      	strh	r1, [r0, #28]
}
 8005866:	4770      	bx	lr

08005868 <TIM_ForcedOC4Config>:
  u16 tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8005868:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= CCMR_OC24M_Mask;
 800586a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800586e:	041b      	lsls	r3, r3, #16
 8005870:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (u16)(TIM_ForcedAction << 8);
 8005872:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005876:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005878:	8383      	strh	r3, [r0, #28]
}
 800587a:	4770      	bx	lr

0800587c <TIM_ARRPreloadConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800587c:	b121      	cbz	r1, 8005888 <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= CR1_ARPE_Set;
 800587e:	8803      	ldrh	r3, [r0, #0]
 8005880:	b29b      	uxth	r3, r3
 8005882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005886:	e004      	b.n	8005892 <TIM_ARRPreloadConfig+0x16>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= CR1_ARPE_Reset;
 8005888:	8803      	ldrh	r3, [r0, #0]
 800588a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800588e:	059b      	lsls	r3, r3, #22
 8005890:	0d9b      	lsrs	r3, r3, #22
 8005892:	8003      	strh	r3, [r0, #0]
  }
}
 8005894:	4770      	bx	lr
 8005896:	46c0      	nop			(mov r8, r8)

08005898 <TIM_SelectCOM>:
{
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005898:	b121      	cbz	r1, 80058a4 <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= CR2_CCUS_Set;
 800589a:	8883      	ldrh	r3, [r0, #4]
 800589c:	b29b      	uxth	r3, r3
 800589e:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 80058a2:	e004      	b.n	80058ae <TIM_SelectCOM+0x16>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= CR2_CCUS_Reset;
 80058a4:	8883      	ldrh	r3, [r0, #4]
 80058a6:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 80058aa:	041b      	lsls	r3, r3, #16
 80058ac:	0c1b      	lsrs	r3, r3, #16
 80058ae:	8083      	strh	r3, [r0, #4]
  }
}
 80058b0:	4770      	bx	lr
 80058b2:	46c0      	nop			(mov r8, r8)

080058b4 <TIM_SelectCCDMA>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80058b4:	b121      	cbz	r1, 80058c0 <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= CR2_CCDS_Set;
 80058b6:	8883      	ldrh	r3, [r0, #4]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f043 0308 	orr.w	r3, r3, #8	; 0x8
 80058be:	e004      	b.n	80058ca <TIM_SelectCCDMA+0x16>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= CR2_CCDS_Reset;
 80058c0:	8883      	ldrh	r3, [r0, #4]
 80058c2:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 80058c6:	041b      	lsls	r3, r3, #16
 80058c8:	0c1b      	lsrs	r3, r3, #16
 80058ca:	8083      	strh	r3, [r0, #4]
  }
}
 80058cc:	4770      	bx	lr
 80058ce:	46c0      	nop			(mov r8, r8)

080058d0 <TIM_CCPreloadControl>:
{ 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80058d0:	b121      	cbz	r1, 80058dc <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= CR2_CCPC_Set;
 80058d2:	8883      	ldrh	r3, [r0, #4]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 80058da:	e004      	b.n	80058e6 <TIM_CCPreloadControl+0x16>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= CR2_CCPC_Reset;
 80058dc:	8883      	ldrh	r3, [r0, #4]
 80058de:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 80058e2:	041b      	lsls	r3, r3, #16
 80058e4:	0c1b      	lsrs	r3, r3, #16
 80058e6:	8083      	strh	r3, [r0, #4]
  }
}
 80058e8:	4770      	bx	lr
 80058ea:	46c0      	nop			(mov r8, r8)

080058ec <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80058ec:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= CCMR_OC13PE_Reset;
 80058ee:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 80058f2:	041b      	lsls	r3, r3, #16
 80058f4:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80058f6:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80058f8:	8301      	strh	r1, [r0, #24]
}
 80058fa:	4770      	bx	lr

080058fc <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80058fc:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= CCMR_OC24PE_Reset;
 80058fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005902:	041b      	lsls	r3, r3, #16
 8005904:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (u16)(TIM_OCPreload << 8);
 8005906:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800590a:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800590c:	8303      	strh	r3, [r0, #24]
}
 800590e:	4770      	bx	lr

08005910 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005910:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= CCMR_OC13PE_Reset;
 8005912:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 8005916:	041b      	lsls	r3, r3, #16
 8005918:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800591a:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800591c:	8381      	strh	r1, [r0, #28]
}
 800591e:	4770      	bx	lr

08005920 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005920:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= CCMR_OC24PE_Reset;
 8005922:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005926:	041b      	lsls	r3, r3, #16
 8005928:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (u16)(TIM_OCPreload << 8);
 800592a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800592e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005930:	8383      	strh	r3, [r0, #28]
}
 8005932:	4770      	bx	lr

08005934 <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8005934:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= CCMR_OC13FE_Reset;
 8005936:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 800593a:	041b      	lsls	r3, r3, #16
 800593c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 800593e:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8005940:	8301      	strh	r1, [r0, #24]
}
 8005942:	4770      	bx	lr

08005944 <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8005944:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= CCMR_OC24FE_Reset;
 8005946:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800594a:	041b      	lsls	r3, r3, #16
 800594c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (u16)(TIM_OCFast << 8);
 800594e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005952:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8005954:	8303      	strh	r3, [r0, #24]
}
 8005956:	4770      	bx	lr

08005958 <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8005958:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= CCMR_OC13FE_Reset;
 800595a:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 800595e:	041b      	lsls	r3, r3, #16
 8005960:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8005962:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8005964:	8381      	strh	r1, [r0, #28]
}
 8005966:	4770      	bx	lr

08005968 <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8005968:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= CCMR_OC24FE_Reset;
 800596a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800596e:	041b      	lsls	r3, r3, #16
 8005970:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (u16)(TIM_OCFast << 8);
 8005972:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005976:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8005978:	8383      	strh	r3, [r0, #28]
}
 800597a:	4770      	bx	lr

0800597c <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800597c:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= CCMR_OC13CE_Reset;
 800597e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005982:	041b      	lsls	r3, r3, #16
 8005984:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8005986:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005988:	8301      	strh	r1, [r0, #24]
}
 800598a:	4770      	bx	lr

0800598c <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800598c:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= CCMR_OC24CE_Reset;
 800598e:	045b      	lsls	r3, r3, #17
 8005990:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (u16)(TIM_OCClear << 8);
 8005992:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005996:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005998:	8303      	strh	r3, [r0, #24]
}
 800599a:	4770      	bx	lr

0800599c <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800599c:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= CCMR_OC13CE_Reset;
 800599e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059a2:	041b      	lsls	r3, r3, #16
 80059a4:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 80059a6:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80059a8:	8381      	strh	r1, [r0, #28]
}
 80059aa:	4770      	bx	lr

080059ac <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80059ac:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= CCMR_OC24CE_Reset;
 80059ae:	045b      	lsls	r3, r3, #17
 80059b0:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (u16)(TIM_OCClear << 8);
 80059b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80059b6:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80059b8:	8383      	strh	r3, [r0, #28]
}
 80059ba:	4770      	bx	lr

080059bc <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80059bc:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= CCER_CC1P_Reset;
 80059be:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 80059c2:	041b      	lsls	r3, r3, #16
 80059c4:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 80059c6:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80059c8:	8401      	strh	r1, [r0, #32]
}
 80059ca:	4770      	bx	lr

080059cc <TIM_OC1NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 80059cc:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= CCER_CC1NP_Reset;
 80059ce:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 80059d2:	041b      	lsls	r3, r3, #16
 80059d4:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 80059d6:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80059d8:	8401      	strh	r1, [r0, #32]
}
 80059da:	4770      	bx	lr

080059dc <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80059dc:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= CCER_CC2P_Reset;
 80059de:	f023 0320 	bic.w	r3, r3, #32	; 0x20
 80059e2:	041b      	lsls	r3, r3, #16
 80059e4:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCPolarity << 4);
 80059e6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80059ea:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80059ec:	8403      	strh	r3, [r0, #32]
}
 80059ee:	4770      	bx	lr

080059f0 <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 80059f0:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= CCER_CC2NP_Reset;
 80059f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059f6:	041b      	lsls	r3, r3, #16
 80059f8:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCNPolarity << 4);
 80059fa:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80059fe:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005a00:	8403      	strh	r3, [r0, #32]
}
 8005a02:	4770      	bx	lr

08005a04 <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8005a04:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= CCER_CC3P_Reset;
 8005a06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a0a:	041b      	lsls	r3, r3, #16
 8005a0c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCPolarity << 8);
 8005a0e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005a12:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005a14:	8403      	strh	r3, [r0, #32]
}
 8005a16:	4770      	bx	lr

08005a18 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8005a18:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= CCER_CC3NP_Reset;
 8005a1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a1e:	041b      	lsls	r3, r3, #16
 8005a20:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCNPolarity << 8);
 8005a22:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005a26:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005a28:	8403      	strh	r3, [r0, #32]
}
 8005a2a:	4770      	bx	lr

08005a2c <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8005a2c:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= CCER_CC4P_Reset;
 8005a2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a32:	041b      	lsls	r3, r3, #16
 8005a34:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCPolarity << 12);
 8005a36:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8005a3a:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005a3c:	8403      	strh	r3, [r0, #32]
}
 8005a3e:	4770      	bx	lr

08005a40 <TIM_CCxCmd>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  /* Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 8005a40:	2301      	movs	r3, #1
 8005a42:	408b      	lsls	r3, r1

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCx << TIM_Channel);
 8005a44:	408a      	lsls	r2, r1
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  /* Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 8005a46:	f8b0 c020 	ldrh.w	ip, [r0, #32]
 8005a4a:	fa1f fc8c 	uxth.w	ip, ip
 8005a4e:	ea2c 0c03 	bic.w	ip, ip, r3
 8005a52:	f8a0 c020 	strh.w	ip, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCx << TIM_Channel);
 8005a56:	8c03      	ldrh	r3, [r0, #32]
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	b292      	uxth	r2, r2
 8005a5c:	8402      	strh	r2, [r0, #32]
}
 8005a5e:	4770      	bx	lr

08005a60 <TIM_CCxNCmd>:
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCNE_Set << TIM_Channel)));
 8005a60:	2304      	movs	r3, #4
 8005a62:	408b      	lsls	r3, r1

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCxN << TIM_Channel);
 8005a64:	408a      	lsls	r2, r1
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCNE_Set << TIM_Channel)));
 8005a66:	f8b0 c020 	ldrh.w	ip, [r0, #32]
 8005a6a:	fa1f fc8c 	uxth.w	ip, ip
 8005a6e:	ea2c 0c03 	bic.w	ip, ip, r3
 8005a72:	f8a0 c020 	strh.w	ip, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCxN << TIM_Channel);
 8005a76:	8c03      	ldrh	r3, [r0, #32]
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	b292      	uxth	r2, r2
 8005a7c:	8402      	strh	r2, [r0, #32]
}
 8005a7e:	4770      	bx	lr

08005a80 <TIM_SelectOCxM>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 8005a80:	2301      	movs	r3, #1
 8005a82:	408b      	lsls	r3, r1
*                       - TIM_ForcedAction_InActive
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_SelectOCxM(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_OCMode)
{
 8005a84:	4694      	mov	ip, r2
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 8005a86:	8c02      	ldrh	r2, [r0, #32]
*                       - TIM_ForcedAction_InActive
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_SelectOCxM(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_OCMode)
{
 8005a88:	b082      	sub	sp, #8
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 8005a8a:	b292      	uxth	r2, r2
 8005a8c:	ea22 0203 	bic.w	r2, r2, r3

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8005a90:	2908      	cmp	r1, #8
 8005a92:	bf14      	ite	ne
 8005a94:	2300      	movne	r3, #0
 8005a96:	2301      	moveq	r3, #1
 8005a98:	2900      	cmp	r1, #0
 8005a9a:	bf08      	it	eq
 8005a9c:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
*                       - TIM_ForcedAction_InActive
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_SelectOCxM(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_OCMode)
{
 8005aa0:	9001      	str	r0, [sp, #4]
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 8005aa2:	8402      	strh	r2, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8005aa4:	b16b      	cbz	r3, 8005ac2 <TIM_SelectOCxM+0x42>
  {
    /* Reset the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + (TIM_Channel>>1))) &= CCMR_OC13M_Mask;
 8005aa6:	f110 0218 	adds.w	r2, r0, #24	; 0x18
 8005aaa:	0849      	lsrs	r1, r1, #1
 8005aac:	5850      	ldr	r0, [r2, r1]
 8005aae:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8005ab2:	ea00 0303 	and.w	r3, r0, r3
 8005ab6:	5053      	str	r3, [r2, r1]
   
    /* Configure the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + (TIM_Channel>>1))) |= TIM_OCMode;
 8005ab8:	5853      	ldr	r3, [r2, r1]
 8005aba:	ea43 030c 	orr.w	r3, r3, ip
 8005abe:	5053      	str	r3, [r2, r1]
 8005ac0:	e010      	b.n	8005ae4 <TIM_SelectOCxM+0x64>

  }
  else
  {
    /* Reset the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) &= CCMR_OC24M_Mask;
 8005ac2:	9801      	ldr	r0, [sp, #4]
 8005ac4:	1f0a      	subs	r2, r1, #4
 8005ac6:	b292      	uxth	r2, r2
 8005ac8:	3018      	adds	r0, #24
 8005aca:	0852      	lsrs	r2, r2, #1
 8005acc:	5881      	ldr	r1, [r0, r2]
 8005ace:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8005ad2:	ea01 0303 	and.w	r3, r1, r3
 8005ad6:	5083      	str	r3, [r0, r2]
    
    /* Configure the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) |= (u16)(TIM_OCMode << 8);
 8005ad8:	5881      	ldr	r1, [r0, r2]
 8005ada:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	4319      	orrs	r1, r3
 8005ae2:	5081      	str	r1, [r0, r2]
  }
}
 8005ae4:	b002      	add	sp, #8
 8005ae6:	4770      	bx	lr

08005ae8 <TIM_UpdateDisableConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005ae8:	b121      	cbz	r1, 8005af4 <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= CR1_UDIS_Set;
 8005aea:	8803      	ldrh	r3, [r0, #0]
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 8005af2:	e004      	b.n	8005afe <TIM_UpdateDisableConfig+0x16>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= CR1_UDIS_Reset;
 8005af4:	8803      	ldrh	r3, [r0, #0]
 8005af6:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 8005afa:	059b      	lsls	r3, r3, #22
 8005afc:	0d9b      	lsrs	r3, r3, #22
 8005afe:	8003      	strh	r3, [r0, #0]
  }
}
 8005b00:	4770      	bx	lr
 8005b02:	46c0      	nop			(mov r8, r8)

08005b04 <TIM_UpdateRequestConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8005b04:	b121      	cbz	r1, 8005b10 <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= CR1_URS_Set;
 8005b06:	8803      	ldrh	r3, [r0, #0]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 8005b0e:	e004      	b.n	8005b1a <TIM_UpdateRequestConfig+0x16>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= CR1_URS_Reset;
 8005b10:	8803      	ldrh	r3, [r0, #0]
 8005b12:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 8005b16:	059b      	lsls	r3, r3, #22
 8005b18:	0d9b      	lsrs	r3, r3, #22
 8005b1a:	8003      	strh	r3, [r0, #0]
  }
}
 8005b1c:	4770      	bx	lr
 8005b1e:	46c0      	nop			(mov r8, r8)

08005b20 <TIM_SelectHallSensor>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005b20:	b121      	cbz	r1, 8005b2c <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= CR2_TI1S_Set;
 8005b22:	8883      	ldrh	r3, [r0, #4]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b2a:	e004      	b.n	8005b36 <TIM_SelectHallSensor+0x16>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= CR2_TI1S_Reset;
 8005b2c:	8883      	ldrh	r3, [r0, #4]
 8005b2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b32:	041b      	lsls	r3, r3, #16
 8005b34:	0c1b      	lsrs	r3, r3, #16
 8005b36:	8083      	strh	r3, [r0, #4]
  }
}
 8005b38:	4770      	bx	lr
 8005b3a:	46c0      	nop			(mov r8, r8)

08005b3c <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= CR1_OPM_Reset;
 8005b3c:	8803      	ldrh	r3, [r0, #0]
 8005b3e:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 8005b42:	059b      	lsls	r3, r3, #22
 8005b44:	0d9b      	lsrs	r3, r3, #22
 8005b46:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8005b48:	8803      	ldrh	r3, [r0, #0]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	4319      	orrs	r1, r3
 8005b4e:	8001      	strh	r1, [r0, #0]
}
 8005b50:	4770      	bx	lr
 8005b52:	46c0      	nop			(mov r8, r8)

08005b54 <TIM_SelectOutputTrigger>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  assert_param(IS_TIM_PERIPH_TRGO(TIMx, TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= CR2_MMS_Mask;
 8005b54:	8883      	ldrh	r3, [r0, #4]
 8005b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5a:	041b      	lsls	r3, r3, #16
 8005b5c:	0c1b      	lsrs	r3, r3, #16
 8005b5e:	8083      	strh	r3, [r0, #4]

  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8005b60:	8883      	ldrh	r3, [r0, #4]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	4319      	orrs	r1, r3
 8005b66:	8081      	strh	r1, [r0, #4]
}
 8005b68:	4770      	bx	lr
 8005b6a:	46c0      	nop			(mov r8, r8)

08005b6c <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= SMCR_SMS_Mask;
 8005b6c:	8903      	ldrh	r3, [r0, #8]
 8005b6e:	f023 0307 	bic.w	r3, r3, #7	; 0x7
 8005b72:	041b      	lsls	r3, r3, #16
 8005b74:	0c1b      	lsrs	r3, r3, #16
 8005b76:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8005b78:	8903      	ldrh	r3, [r0, #8]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	4319      	orrs	r1, r3
 8005b7e:	8101      	strh	r1, [r0, #8]
}
 8005b80:	4770      	bx	lr
 8005b82:	46c0      	nop			(mov r8, r8)

08005b84 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= SMCR_MSM_Reset;
 8005b84:	8903      	ldrh	r3, [r0, #8]
 8005b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b8a:	041b      	lsls	r3, r3, #16
 8005b8c:	0c1b      	lsrs	r3, r3, #16
 8005b8e:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8005b90:	8903      	ldrh	r3, [r0, #8]
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	4319      	orrs	r1, r3
 8005b96:	8101      	strh	r1, [r0, #8]
}
 8005b98:	4770      	bx	lr
 8005b9a:	46c0      	nop			(mov r8, r8)

08005b9c <TIM_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8005b9c:	8481      	strh	r1, [r0, #36]
}
 8005b9e:	4770      	bx	lr

08005ba0 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8005ba0:	8581      	strh	r1, [r0, #44]
}
 8005ba2:	4770      	bx	lr

08005ba4 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8005ba4:	8681      	strh	r1, [r0, #52]
}
 8005ba6:	4770      	bx	lr

08005ba8 <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8005ba8:	8701      	strh	r1, [r0, #56]
}
 8005baa:	4770      	bx	lr

08005bac <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8005bac:	8781      	strh	r1, [r0, #60]
}
 8005bae:	4770      	bx	lr

08005bb0 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8005bb0:	f8a0 1040 	strh.w	r1, [r0, #64]
}
 8005bb4:	4770      	bx	lr
 8005bb6:	46c0      	nop			(mov r8, r8)

08005bb8 <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 8005bb8:	8b03      	ldrh	r3, [r0, #24]
 8005bba:	f023 030c 	bic.w	r3, r3, #12	; 0xc
 8005bbe:	041b      	lsls	r3, r3, #16
 8005bc0:	0c1b      	lsrs	r3, r3, #16
 8005bc2:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8005bc4:	8b03      	ldrh	r3, [r0, #24]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	4319      	orrs	r1, r3
 8005bca:	8301      	strh	r1, [r0, #24]
}
 8005bcc:	4770      	bx	lr
 8005bce:	46c0      	nop			(mov r8, r8)

08005bd0 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 8005bd0:	8b03      	ldrh	r3, [r0, #24]
 8005bd2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005bd6:	041b      	lsls	r3, r3, #16
 8005bd8:	0c1b      	lsrs	r3, r3, #16
 8005bda:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (u16)(TIM_ICPSC << 8);
 8005bdc:	8b03      	ldrh	r3, [r0, #24]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	8303      	strh	r3, [r0, #24]
}
 8005be8:	4770      	bx	lr
 8005bea:	46c0      	nop			(mov r8, r8)

08005bec <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
 8005bec:	8b83      	ldrh	r3, [r0, #28]
 8005bee:	f023 030c 	bic.w	r3, r3, #12	; 0xc
 8005bf2:	041b      	lsls	r3, r3, #16
 8005bf4:	0c1b      	lsrs	r3, r3, #16
 8005bf6:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8005bf8:	8b83      	ldrh	r3, [r0, #28]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	4319      	orrs	r1, r3
 8005bfe:	8381      	strh	r1, [r0, #28]
}
 8005c00:	4770      	bx	lr
 8005c02:	46c0      	nop			(mov r8, r8)

08005c04 <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
 8005c04:	8b83      	ldrh	r3, [r0, #28]
 8005c06:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005c0a:	041b      	lsls	r3, r3, #16
 8005c0c:	0c1b      	lsrs	r3, r3, #16
 8005c0e:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (u16)(TIM_ICPSC << 8);
 8005c10:	8b83      	ldrh	r3, [r0, #28]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	8383      	strh	r3, [r0, #28]
}
 8005c1c:	4770      	bx	lr
 8005c1e:	46c0      	nop			(mov r8, r8)

08005c20 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= CR1_CKD_Mask;
 8005c20:	8803      	ldrh	r3, [r0, #0]
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8005c26:	8803      	ldrh	r3, [r0, #0]
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	4319      	orrs	r1, r3
 8005c2c:	8001      	strh	r1, [r0, #0]
}
 8005c2e:	4770      	bx	lr

08005c30 <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8005c30:	8e80      	ldrh	r0, [r0, #52]
 8005c32:	b280      	uxth	r0, r0
}
 8005c34:	4770      	bx	lr
 8005c36:	46c0      	nop			(mov r8, r8)

08005c38 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8005c38:	8f00      	ldrh	r0, [r0, #56]
 8005c3a:	b280      	uxth	r0, r0
}
 8005c3c:	4770      	bx	lr
 8005c3e:	46c0      	nop			(mov r8, r8)

08005c40 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8005c40:	8f80      	ldrh	r0, [r0, #60]
 8005c42:	b280      	uxth	r0, r0
}
 8005c44:	4770      	bx	lr
 8005c46:	46c0      	nop			(mov r8, r8)

08005c48 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8005c48:	f8b0 0040 	ldrh.w	r0, [r0, #64]
 8005c4c:	b280      	uxth	r0, r0
}
 8005c4e:	4770      	bx	lr

08005c50 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8005c50:	8c80      	ldrh	r0, [r0, #36]
 8005c52:	b280      	uxth	r0, r0
}
 8005c54:	4770      	bx	lr
 8005c56:	46c0      	nop			(mov r8, r8)

08005c58 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8005c58:	8d00      	ldrh	r0, [r0, #40]
 8005c5a:	b280      	uxth	r0, r0
}
 8005c5c:	4770      	bx	lr
 8005c5e:	46c0      	nop			(mov r8, r8)

08005c60 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  assert_param(IS_TIM_PERIPH_FLAG(TIMx, TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (u16)RESET)
 8005c60:	8a03      	ldrh	r3, [r0, #16]
 8005c62:	4219      	tst	r1, r3
 8005c64:	bf0c      	ite	eq
 8005c66:	2000      	moveq	r0, #0
 8005c68:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005c6a:	4770      	bx	lr

08005c6c <TIM_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIMx, TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (u16)~TIM_FLAG;
 8005c6c:	ea6f 0101 	mvn.w	r1, r1
 8005c70:	b289      	uxth	r1, r1
 8005c72:	8201      	strh	r1, [r0, #16]
}
 8005c74:	4770      	bx	lr
 8005c76:	46c0      	nop			(mov r8, r8)

08005c78 <TIM_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
  assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8005c78:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8005c7a:	8982      	ldrh	r2, [r0, #12]

  if ((itstatus != (u16)RESET) && (itenable != (u16)RESET))
 8005c7c:	4219      	tst	r1, r3
 8005c7e:	bf0c      	ite	eq
 8005c80:	2000      	moveq	r0, #0
 8005c82:	2001      	movne	r0, #1
 8005c84:	4211      	tst	r1, r2
 8005c86:	bf0c      	ite	eq
 8005c88:	2000      	moveq	r0, #0
 8005c8a:	f000 0001 	andne.w	r0, r0, #1	; 0x1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005c8e:	4770      	bx	lr

08005c90 <TIM_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));

  /* Clear the IT pending Bit */
  TIMx->SR = (u16)~TIM_IT;
 8005c90:	ea6f 0101 	mvn.w	r1, r1
 8005c94:	b289      	uxth	r1, r1
 8005c96:	8201      	strh	r1, [r0, #16]
}
 8005c98:	4770      	bx	lr
 8005c9a:	46c0      	nop			(mov r8, r8)

08005c9c <TIM_DeInit>:
* Input          : - TIMx: where x can be 1 to 8 to select the TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8005c9c:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  switch (*(u32*)&TIMx)
 8005c9e:	4b2f      	ldr	r3, [pc, #188]	(8005d5c <TIM_DeInit+0xc0>)
* Input          : - TIMx: where x can be 1 to 8 to select the TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8005ca0:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  switch (*(u32*)&TIMx)
 8005ca2:	4298      	cmp	r0, r3
* Input          : - TIMx: where x can be 1 to 8 to select the TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8005ca4:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  switch (*(u32*)&TIMx)
 8005ca6:	d037      	beq.n	8005d18 <TIM_DeInit+0x7c>
 8005ca8:	d80b      	bhi.n	8005cc2 <TIM_DeInit+0x26>
 8005caa:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005cae:	4298      	cmp	r0, r3
 8005cb0:	d026      	beq.n	8005d00 <TIM_DeInit+0x64>
 8005cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cb6:	4298      	cmp	r0, r3
 8005cb8:	d028      	beq.n	8005d0c <TIM_DeInit+0x70>
 8005cba:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005cbe:	d14a      	bne.n	8005d56 <TIM_DeInit+0xba>
 8005cc0:	e018      	b.n	8005cf4 <TIM_DeInit+0x58>
 8005cc2:	4b27      	ldr	r3, [pc, #156]	(8005d60 <TIM_DeInit+0xc4>)
 8005cc4:	4298      	cmp	r0, r3
 8005cc6:	d033      	beq.n	8005d30 <TIM_DeInit+0x94>
 8005cc8:	d804      	bhi.n	8005cd4 <TIM_DeInit+0x38>
 8005cca:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005cce:	4298      	cmp	r0, r3
 8005cd0:	d141      	bne.n	8005d56 <TIM_DeInit+0xba>
 8005cd2:	e027      	b.n	8005d24 <TIM_DeInit+0x88>
 8005cd4:	4b23      	ldr	r3, [pc, #140]	(8005d64 <TIM_DeInit+0xc8>)
 8005cd6:	4298      	cmp	r0, r3
 8005cd8:	d004      	beq.n	8005ce4 <TIM_DeInit+0x48>
 8005cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cde:	4298      	cmp	r0, r3
 8005ce0:	d139      	bne.n	8005d56 <TIM_DeInit+0xba>
 8005ce2:	e02e      	b.n	8005d42 <TIM_DeInit+0xa6>
  {
    case TIM1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8005ce4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005ce8:	2101      	movs	r1, #1
 8005cea:	f7ff f8bf 	bl	8004e6c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8005cee:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005cf2:	e02d      	b.n	8005d50 <TIM_DeInit+0xb4>
      break; 
      
    case TIM2_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8005cf4:	2001      	movs	r0, #1
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	f7ff f8c6 	bl	8004e88 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8005cfc:	2001      	movs	r0, #1
 8005cfe:	e01c      	b.n	8005d3a <TIM_DeInit+0x9e>
      break;
 
    case TIM3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8005d00:	2002      	movs	r0, #2
 8005d02:	2101      	movs	r1, #1
 8005d04:	f7ff f8c0 	bl	8004e88 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8005d08:	2002      	movs	r0, #2
 8005d0a:	e016      	b.n	8005d3a <TIM_DeInit+0x9e>
      break;
 
    case TIM4_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8005d0c:	2004      	movs	r0, #4
 8005d0e:	2101      	movs	r1, #1
 8005d10:	f7ff f8ba 	bl	8004e88 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8005d14:	2004      	movs	r0, #4
 8005d16:	e010      	b.n	8005d3a <TIM_DeInit+0x9e>
      break;
      
    case TIM5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8005d18:	2008      	movs	r0, #8
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	f7ff f8b4 	bl	8004e88 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8005d20:	2008      	movs	r0, #8
 8005d22:	e00a      	b.n	8005d3a <TIM_DeInit+0x9e>
      break;
      
    case TIM6_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8005d24:	2010      	movs	r0, #16
 8005d26:	2101      	movs	r1, #1
 8005d28:	f7ff f8ae 	bl	8004e88 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8005d2c:	2010      	movs	r0, #16
 8005d2e:	e004      	b.n	8005d3a <TIM_DeInit+0x9e>
      break;
      
    case TIM7_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8005d30:	2020      	movs	r0, #32
 8005d32:	2101      	movs	r1, #1
 8005d34:	f7ff f8a8 	bl	8004e88 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8005d38:	2020      	movs	r0, #32
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	f7ff f8a4 	bl	8004e88 <RCC_APB1PeriphResetCmd>
 8005d40:	e009      	b.n	8005d56 <TIM_DeInit+0xba>
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8005d42:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005d46:	2101      	movs	r1, #1
 8005d48:	f7ff f890 	bl	8004e6c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8005d4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005d50:	2100      	movs	r1, #0
 8005d52:	f7ff f88b 	bl	8004e6c <RCC_APB2PeriphResetCmd>
      break; 
      
    default:
      break;
  }
}
 8005d56:	b003      	add	sp, #12
 8005d58:	bd00      	pop	{pc}
 8005d5a:	46c0      	nop			(mov r8, r8)
 8005d5c:	40000c00 	.word	0x40000c00
 8005d60:	40001400 	.word	0x40001400
 8005d64:	40012c00 	.word	0x40012c00

08005d68 <USART_StructInit>:
* Return         : None
*******************************************************************************/
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8005d68:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005d6c:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8005d6e:	f04f 0300 	mov.w	r3, #0	; 0x0
 8005d72:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8005d74:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8005d76:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8005d78:	f04f 030c 	mov.w	r3, #12	; 0xc
 8005d7c:	8143      	strh	r3, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8005d7e:	f04f 0300 	mov.w	r3, #0	; 0x0
 8005d82:	8183      	strh	r3, [r0, #12]
}
 8005d84:	4770      	bx	lr
 8005d86:	46c0      	nop			(mov r8, r8)

08005d88 <USART_ClockInit>:
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8005d88:	f8b1 c000 	ldrh.w	ip, [r1]
 8005d8c:	884b      	ldrh	r3, [r1, #2]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005d8e:	8a02      	ldrh	r2, [r0, #16]
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8005d90:	ea43 030c 	orr.w	r3, r3, ip
 8005d94:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 8005d98:	88c9      	ldrh	r1, [r1, #6]
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 8005d9a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8005d9e:	ea43 030c 	orr.w	r3, r3, ip
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 8005da2:	0412      	lsls	r2, r2, #16
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8005da4:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 8005da6:	0c12      	lsrs	r2, r2, #16
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	4313      	orrs	r3, r2
 8005dac:	8203      	strh	r3, [r0, #16]
}
 8005dae:	4770      	bx	lr

08005db0 <USART_ClockStructInit>:
* Return         : None
*******************************************************************************/
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8005db0:	f04f 0300 	mov.w	r3, #0	; 0x0
 8005db4:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8005db6:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8005db8:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8005dba:	80c3      	strh	r3, [r0, #6]
}
 8005dbc:	4770      	bx	lr
 8005dbe:	46c0      	nop			(mov r8, r8)

08005dc0 <USART_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005dc0:	b121      	cbz	r1, 8005dcc <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8005dc2:	8983      	ldrh	r3, [r0, #12]
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005dca:	e004      	b.n	8005dd6 <USART_Cmd+0x16>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8005dcc:	8983      	ldrh	r3, [r0, #12]
 8005dce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dd2:	041b      	lsls	r3, r3, #16
 8005dd4:	0c1b      	lsrs	r3, r3, #16
 8005dd6:	8183      	strh	r3, [r0, #12]
  }
}
 8005dd8:	4770      	bx	lr
 8005dda:	46c0      	nop			(mov r8, r8)

08005ddc <USART_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  usartxbase = (*(u32*)&(USARTx));

  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 8005ddc:	b2cb      	uxtb	r3, r1
 8005dde:	ea4f 1c53 	mov.w	ip, r3, lsr #5

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 8005de2:	f001 011f 	and.w	r1, r1, #31	; 0x1f
 8005de6:	2301      	movs	r3, #1
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ITConfig(USART_TypeDef* USARTx, u16 USART_IT, FunctionalState NewState)
{
 8005de8:	b082      	sub	sp, #8
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 8005dea:	fa13 f101 	lsls.w	r1, r3, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8005dee:	f1bc 0f01 	cmp.w	ip, #1	; 0x1
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ITConfig(USART_TypeDef* USARTx, u16 USART_IT, FunctionalState NewState)
{
 8005df2:	9001      	str	r0, [sp, #4]
  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8005df4:	d101      	bne.n	8005dfa <USART_ITConfig+0x1e>
  {
    usartxbase += 0x0C;
 8005df6:	300c      	adds	r0, #12
 8005df8:	e005      	b.n	8005e06 <USART_ITConfig+0x2a>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8005dfa:	f1bc 0f02 	cmp.w	ip, #2	; 0x2
 8005dfe:	d101      	bne.n	8005e04 <USART_ITConfig+0x28>
  {
    usartxbase += 0x10;
 8005e00:	3010      	adds	r0, #16
 8005e02:	e000      	b.n	8005e06 <USART_ITConfig+0x2a>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8005e04:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
 8005e06:	b112      	cbz	r2, 8005e0e <USART_ITConfig+0x32>
  {
    *(vu32*)usartxbase  |= itmask;
 8005e08:	6803      	ldr	r3, [r0, #0]
 8005e0a:	430b      	orrs	r3, r1
 8005e0c:	e002      	b.n	8005e14 <USART_ITConfig+0x38>
  }
  else
  {
    *(vu32*)usartxbase &= ~itmask;
 8005e0e:	6803      	ldr	r3, [r0, #0]
 8005e10:	ea23 0301 	bic.w	r3, r3, r1
 8005e14:	6003      	str	r3, [r0, #0]
  }
}
 8005e16:	b002      	add	sp, #8
 8005e18:	4770      	bx	lr
 8005e1a:	46c0      	nop			(mov r8, r8)

08005e1c <USART_DMACmd>:
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8005e1c:	b122      	cbz	r2, 8005e28 <USART_DMACmd+0xc>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8005e1e:	8a83      	ldrh	r3, [r0, #20]
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	ea41 0303 	orr.w	r3, r1, r3
 8005e26:	e003      	b.n	8005e30 <USART_DMACmd+0x14>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (u16)~USART_DMAReq;
 8005e28:	8a83      	ldrh	r3, [r0, #20]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	ea23 0301 	bic.w	r3, r3, r1
 8005e30:	8283      	strh	r3, [r0, #20]
  }
}
 8005e32:	4770      	bx	lr

08005e34 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 8005e34:	8a03      	ldrh	r3, [r0, #16]
 8005e36:	f023 030f 	bic.w	r3, r3, #15	; 0xf
 8005e3a:	041b      	lsls	r3, r3, #16
 8005e3c:	0c1b      	lsrs	r3, r3, #16
 8005e3e:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8005e40:	8a03      	ldrh	r3, [r0, #16]
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	430b      	orrs	r3, r1
 8005e46:	8203      	strh	r3, [r0, #16]
}
 8005e48:	4770      	bx	lr
 8005e4a:	46c0      	nop			(mov r8, r8)

08005e4c <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 8005e4c:	8983      	ldrh	r3, [r0, #12]
 8005e4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e52:	041b      	lsls	r3, r3, #16
 8005e54:	0c1b      	lsrs	r3, r3, #16
 8005e56:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8005e58:	8983      	ldrh	r3, [r0, #12]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	4319      	orrs	r1, r3
 8005e5e:	8181      	strh	r1, [r0, #12]
}
 8005e60:	4770      	bx	lr
 8005e62:	46c0      	nop			(mov r8, r8)

08005e64 <USART_ReceiverWakeUpCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8005e64:	b121      	cbz	r1, 8005e70 <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8005e66:	8983      	ldrh	r3, [r0, #12]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 8005e6e:	e004      	b.n	8005e7a <USART_ReceiverWakeUpCmd+0x16>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 8005e70:	8983      	ldrh	r3, [r0, #12]
 8005e72:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 8005e76:	041b      	lsls	r3, r3, #16
 8005e78:	0c1b      	lsrs	r3, r3, #16
 8005e7a:	8183      	strh	r3, [r0, #12]
  }
}
 8005e7c:	4770      	bx	lr
 8005e7e:	46c0      	nop			(mov r8, r8)

08005e80 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 8005e80:	8a03      	ldrh	r3, [r0, #16]
 8005e82:	f023 0320 	bic.w	r3, r3, #32	; 0x20
 8005e86:	041b      	lsls	r3, r3, #16
 8005e88:	0c1b      	lsrs	r3, r3, #16
 8005e8a:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8005e8c:	8a03      	ldrh	r3, [r0, #16]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	4319      	orrs	r1, r3
 8005e92:	8201      	strh	r1, [r0, #16]
}
 8005e94:	4770      	bx	lr
 8005e96:	46c0      	nop			(mov r8, r8)

08005e98 <USART_LINCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005e98:	b121      	cbz	r1, 8005ea4 <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 8005e9a:	8a03      	ldrh	r3, [r0, #16]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ea2:	e004      	b.n	8005eae <USART_LINCmd+0x16>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 8005ea4:	8a03      	ldrh	r3, [r0, #16]
 8005ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eaa:	041b      	lsls	r3, r3, #16
 8005eac:	0c1b      	lsrs	r3, r3, #16
 8005eae:	8203      	strh	r3, [r0, #16]
  }
}
 8005eb0:	4770      	bx	lr
 8005eb2:	46c0      	nop			(mov r8, r8)

08005eb4 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (u16)0x01FF);
 8005eb4:	05c9      	lsls	r1, r1, #23
 8005eb6:	0dc9      	lsrs	r1, r1, #23
 8005eb8:	8081      	strh	r1, [r0, #4]
}
 8005eba:	4770      	bx	lr

08005ebc <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (u16)(USARTx->DR & (u16)0x01FF);
 8005ebc:	8880      	ldrh	r0, [r0, #4]
 8005ebe:	05c0      	lsls	r0, r0, #23
 8005ec0:	0dc0      	lsrs	r0, r0, #23
}
 8005ec2:	4770      	bx	lr

08005ec4 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 8005ec4:	8983      	ldrh	r3, [r0, #12]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 8005ecc:	8183      	strh	r3, [r0, #12]
}
 8005ece:	4770      	bx	lr

08005ed0 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 8005ed0:	8b03      	ldrh	r3, [r0, #24]
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (u16)((u16)USART_GuardTime << 0x08);
 8005ed6:	8b03      	ldrh	r3, [r0, #24]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005ede:	8303      	strh	r3, [r0, #24]
}
 8005ee0:	4770      	bx	lr
 8005ee2:	46c0      	nop			(mov r8, r8)

08005ee4 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 8005ee4:	8b03      	ldrh	r3, [r0, #24]
 8005ee6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005eea:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8005eec:	8b03      	ldrh	r3, [r0, #24]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	430b      	orrs	r3, r1
 8005ef2:	8303      	strh	r3, [r0, #24]
}
 8005ef4:	4770      	bx	lr
 8005ef6:	46c0      	nop			(mov r8, r8)

08005ef8 <USART_SmartCardCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005ef8:	b121      	cbz	r1, 8005f04 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 8005efa:	8a83      	ldrh	r3, [r0, #20]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	f043 0320 	orr.w	r3, r3, #32	; 0x20
 8005f02:	e004      	b.n	8005f0e <USART_SmartCardCmd+0x16>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 8005f04:	8a83      	ldrh	r3, [r0, #20]
 8005f06:	f023 0320 	bic.w	r3, r3, #32	; 0x20
 8005f0a:	041b      	lsls	r3, r3, #16
 8005f0c:	0c1b      	lsrs	r3, r3, #16
 8005f0e:	8283      	strh	r3, [r0, #20]
  }
}
 8005f10:	4770      	bx	lr
 8005f12:	46c0      	nop			(mov r8, r8)

08005f14 <USART_SmartCardNACKCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005f14:	b121      	cbz	r1, 8005f20 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 8005f16:	8a83      	ldrh	r3, [r0, #20]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 8005f1e:	e004      	b.n	8005f2a <USART_SmartCardNACKCmd+0x16>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 8005f20:	8a83      	ldrh	r3, [r0, #20]
 8005f22:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 8005f26:	041b      	lsls	r3, r3, #16
 8005f28:	0c1b      	lsrs	r3, r3, #16
 8005f2a:	8283      	strh	r3, [r0, #20]
  }
}
 8005f2c:	4770      	bx	lr
 8005f2e:	46c0      	nop			(mov r8, r8)

08005f30 <USART_HalfDuplexCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005f30:	b121      	cbz	r1, 8005f3c <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 8005f32:	8a83      	ldrh	r3, [r0, #20]
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	f043 0308 	orr.w	r3, r3, #8	; 0x8
 8005f3a:	e004      	b.n	8005f46 <USART_HalfDuplexCmd+0x16>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 8005f3c:	8a83      	ldrh	r3, [r0, #20]
 8005f3e:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 8005f42:	041b      	lsls	r3, r3, #16
 8005f44:	0c1b      	lsrs	r3, r3, #16
 8005f46:	8283      	strh	r3, [r0, #20]
  }
}
 8005f48:	4770      	bx	lr
 8005f4a:	46c0      	nop			(mov r8, r8)

08005f4c <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 8005f4c:	8a83      	ldrh	r3, [r0, #20]
 8005f4e:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 8005f52:	041b      	lsls	r3, r3, #16
 8005f54:	0c1b      	lsrs	r3, r3, #16
 8005f56:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8005f58:	8a83      	ldrh	r3, [r0, #20]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	4319      	orrs	r1, r3
 8005f5e:	8281      	strh	r1, [r0, #20]
}
 8005f60:	4770      	bx	lr
 8005f62:	46c0      	nop			(mov r8, r8)

08005f64 <USART_IrDACmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8005f64:	b121      	cbz	r1, 8005f70 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 8005f66:	8a83      	ldrh	r3, [r0, #20]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 8005f6e:	e004      	b.n	8005f7a <USART_IrDACmd+0x16>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 8005f70:	8a83      	ldrh	r3, [r0, #20]
 8005f72:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 8005f76:	041b      	lsls	r3, r3, #16
 8005f78:	0c1b      	lsrs	r3, r3, #16
 8005f7a:	8283      	strh	r3, [r0, #20]
  }
}
 8005f7c:	4770      	bx	lr
 8005f7e:	46c0      	nop			(mov r8, r8)

08005f80 <USART_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   

  if ((USARTx->SR & USART_FLAG) != (u16)RESET)
 8005f80:	8803      	ldrh	r3, [r0, #0]
 8005f82:	4219      	tst	r1, r3
 8005f84:	bf0c      	ite	eq
 8005f86:	2000      	moveq	r0, #0
 8005f88:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005f8a:	4770      	bx	lr

08005f8c <USART_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   
   
  USARTx->SR = (u16)~USART_FLAG;
 8005f8c:	ea6f 0101 	mvn.w	r1, r1
 8005f90:	b289      	uxth	r1, r1
 8005f92:	8001      	strh	r1, [r0, #0]
}
 8005f94:	4770      	bx	lr
 8005f96:	46c0      	nop			(mov r8, r8)

08005f98 <USART_GetITStatus>:
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT));
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */  
  
  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 8005f98:	b2cb      	uxtb	r3, r1
 8005f9a:	ea4f 1c53 	mov.w	ip, r3, lsr #5

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
 8005f9e:	f001 021f 	and.w	r2, r1, #31	; 0x1f
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	fa13 f202 	lsls.w	r2, r3, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8005fa8:	f1bc 0f01 	cmp.w	ip, #1	; 0x1
  {
    itmask &= USARTx->CR1;
 8005fac:	bf08      	it	eq
 8005fae:	8983      	ldrheq	r3, [r0, #12]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8005fb0:	d004      	beq.n	8005fbc <USART_GetITStatus+0x24>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8005fb2:	f1bc 0f02 	cmp.w	ip, #2	; 0x2
  {
    itmask &= USARTx->CR2;
 8005fb6:	bf0c      	ite	eq
 8005fb8:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8005fba:	8a83      	ldrhne	r3, [r0, #20]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	ea02 0c03 	and.w	ip, r2, r3
  }
  
  bitpos = USART_IT >> 0x08;

  bitpos = (u32)0x01 << bitpos;
 8005fc2:	0a0b      	lsrs	r3, r1, #8
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	409a      	lsls	r2, r3
  bitpos &= USARTx->SR;
 8005fc8:	8803      	ldrh	r3, [r0, #0]
 8005fca:	b29b      	uxth	r3, r3

  if ((itmask != (u16)RESET)&&(bitpos != (u16)RESET))
 8005fcc:	421a      	tst	r2, r3
 8005fce:	bf0c      	ite	eq
 8005fd0:	2000      	moveq	r0, #0
 8005fd2:	2001      	movne	r0, #1
 8005fd4:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
 8005fd8:	bf0c      	ite	eq
 8005fda:	2000      	moveq	r0, #0
 8005fdc:	f000 0001 	andne.w	r0, r0, #1	; 0x1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 8005fe0:	4770      	bx	lr
 8005fe2:	46c0      	nop			(mov r8, r8)

08005fe4 <USART_ClearITPendingBit>:
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */
  
  bitpos = USART_IT >> 0x08;

  itmask = (u16)((u16)0x01 << bitpos);
  USARTx->SR = (u16)~itmask;
 8005fe4:	0a09      	lsrs	r1, r1, #8
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	408b      	lsls	r3, r1
 8005fea:	ea6f 0303 	mvn.w	r3, r3
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	8003      	strh	r3, [r0, #0]
}
 8005ff2:	4770      	bx	lr

08005ff4 <USART_Init>:
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005ff4:	8a03      	ldrh	r3, [r0, #16]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8005ff6:	88ca      	ldrh	r2, [r1, #6]
  usartxbase = (*(u32*)&USARTx);

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8005ff8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005ffc:	041b      	lsls	r3, r3, #16
 8005ffe:	0c1b      	lsrs	r3, r3, #16
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8006000:	4313      	orrs	r3, r2
 8006002:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8006004:	8982      	ldrh	r2, [r0, #12]
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8006006:	b570      	push	{r4, r5, r6, lr}
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 8006008:	890b      	ldrh	r3, [r1, #8]
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800600a:	460e      	mov	r6, r1
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 800600c:	8889      	ldrh	r1, [r1, #4]
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 800600e:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 8006012:	430b      	orrs	r3, r1
 8006014:	8971      	ldrh	r1, [r6, #10]
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8006016:	f022 020c 	bic.w	r2, r2, #12	; 0xc
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 800601a:	430b      	orrs	r3, r1
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 800601c:	0412      	lsls	r2, r2, #16
 800601e:	0c12      	lsrs	r2, r2, #16
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 8006020:	b29b      	uxth	r3, r3
 8006022:	4313      	orrs	r3, r2
 8006024:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8006026:	8a83      	ldrh	r3, [r0, #20]
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 8006028:	89b2      	ldrh	r2, [r6, #12]
  USARTx->CR1 = (u16)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 800602a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	0c1b      	lsrs	r3, r3, #16
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8006032:	b088      	sub	sp, #32
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 8006034:	4313      	orrs	r3, r2
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8006036:	4605      	mov	r5, r0
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 8006038:	8283      	strh	r3, [r0, #20]
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800603a:	9001      	str	r0, [sp, #4]
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  /* The hardware flow control is available only for USART1, USART2 and USART3 */          
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);
 800603c:	4604      	mov	r4, r0
  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800603e:	a803      	add	r0, sp, #12
 8006040:	f7fe fe8e 	bl	8004d60 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8006044:	4b10      	ldr	r3, [pc, #64]	(8006088 <USART_Init+0x94>)
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
  tmpreg = (integerdivider / 0x64) << 0x04;
 8006046:	4811      	ldr	r0, [pc, #68]	(800608c <USART_Init+0x98>)
  USARTx->CR3 = (u16)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
 8006048:	429d      	cmp	r5, r3
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800604a:	bf0c      	ite	eq
 800604c:	9b06      	ldreq	r3, [sp, #24]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800604e:	9b05      	ldrne	r3, [sp, #20]
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
 8006050:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006054:	6833      	ldr	r3, [r6, #0]
 8006056:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	fbb1 f1f3 	udiv	r1, r1, r3
  tmpreg = (integerdivider / 0x64) << 0x04;
 8006060:	fba1 2300 	umull	r2, r3, r1, r0

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((u8)0x0F);
 8006064:	2264      	movs	r2, #100
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
  tmpreg = (integerdivider / 0x64) << 0x04;
 8006066:	ea4f 1c53 	mov.w	ip, r3, lsr #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((u8)0x0F);
 800606a:	fb0c 1212 	mls	r2, ip, r2, r1
 800606e:	0112      	lsls	r2, r2, #4
 8006070:	3232      	adds	r2, #50
 8006072:	fba2 2300 	umull	r2, r3, r2, r0
 8006076:	095b      	lsrs	r3, r3, #5
 8006078:	f003 030f 	and.w	r3, r3, #15	; 0xf

  /* Write to USART BRR */
  USARTx->BRR = (u16)tmpreg;
 800607c:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8006080:	b29b      	uxth	r3, r3
 8006082:	812b      	strh	r3, [r5, #8]
}
 8006084:	b008      	add	sp, #32
 8006086:	bd70      	pop	{r4, r5, r6, pc}
 8006088:	40013800 	.word	0x40013800
 800608c:	51eb851f 	.word	0x51eb851f

08006090 <USART_DeInit>:
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
 8006090:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 8006092:	4b22      	ldr	r3, [pc, #136]	(800611c <USART_DeInit+0x8c>)
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
 8006094:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 8006096:	4298      	cmp	r0, r3
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
 8006098:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 800609a:	d02b      	beq.n	80060f4 <USART_DeInit+0x64>
 800609c:	d808      	bhi.n	80060b0 <USART_DeInit+0x20>
 800609e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80060a2:	4298      	cmp	r0, r3
 80060a4:	d016      	beq.n	80060d4 <USART_DeInit+0x44>
 80060a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060aa:	4298      	cmp	r0, r3
 80060ac:	d134      	bne.n	8006118 <USART_DeInit+0x88>
 80060ae:	e019      	b.n	80060e4 <USART_DeInit+0x54>
 80060b0:	4b1b      	ldr	r3, [pc, #108]	(8006120 <USART_DeInit+0x90>)
 80060b2:	4298      	cmp	r0, r3
 80060b4:	d026      	beq.n	8006104 <USART_DeInit+0x74>
 80060b6:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 80060ba:	4298      	cmp	r0, r3
 80060bc:	d12c      	bne.n	8006118 <USART_DeInit+0x88>
  {
    case USART1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 80060be:	2101      	movs	r1, #1
 80060c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80060c4:	f7fe fed2 	bl	8004e6c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80060c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80060cc:	2100      	movs	r1, #0
 80060ce:	f7fe fecd 	bl	8004e6c <RCC_APB2PeriphResetCmd>
 80060d2:	e021      	b.n	8006118 <USART_DeInit+0x88>
      break;

    case USART2_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 80060d4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80060d8:	2101      	movs	r1, #1
 80060da:	f7fe fed5 	bl	8004e88 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80060de:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80060e2:	e016      	b.n	8006112 <USART_DeInit+0x82>
      break;

    case USART3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 80060e4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80060e8:	2101      	movs	r1, #1
 80060ea:	f7fe fecd 	bl	8004e88 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80060ee:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80060f2:	e00e      	b.n	8006112 <USART_DeInit+0x82>
      break;
    
    case UART4_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80060f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80060f8:	2101      	movs	r1, #1
 80060fa:	f7fe fec5 	bl	8004e88 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80060fe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006102:	e006      	b.n	8006112 <USART_DeInit+0x82>
      break;
    
    case UART5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8006104:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006108:	2101      	movs	r1, #1
 800610a:	f7fe febd 	bl	8004e88 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800610e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006112:	2100      	movs	r1, #0
 8006114:	f7fe feb8 	bl	8004e88 <RCC_APB1PeriphResetCmd>
      break;            

    default:
      break;
  }
}
 8006118:	b003      	add	sp, #12
 800611a:	bd00      	pop	{pc}
 800611c:	40004c00 	.word	0x40004c00
 8006120:	40005000 	.word	0x40005000

08006124 <__WFI>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFI: 
 
    WFI
 8006124:	bf30      	wfi
    BX r14
 8006126:	4770      	bx	lr

08006128 <__WFE>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFE:

    WFE
 8006128:	bf20      	wfe
    BX r14
 800612a:	4770      	bx	lr

0800612c <__SEV>:
; Return         : None
;******************************************************************************/
.thumb_func
__SEV:

    SEV
 800612c:	bf40      	sev
    BX r14
 800612e:	4770      	bx	lr

08006130 <__ISB>:
; Return         : None
;******************************************************************************/
.thumb_func
__ISB:

    ISB
 8006130:	f3bf 8f6f 	isb	sy
    BX r14
 8006134:	4770      	bx	lr

08006136 <__DSB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DSB:

    DSB
 8006136:	f3bf 8f4f 	dsb	sy
    BX r14
 800613a:	4770      	bx	lr

0800613c <__DMB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DMB:

    DMB
 800613c:	f3bf 8f5f 	dmb	sy
    BX r14
 8006140:	4770      	bx	lr

08006142 <__SVC>:
; Return         : None
;******************************************************************************/
.thumb_func
__SVC:

    SVC 0x01
 8006142:	df01      	svc	1
    BX r14
 8006144:	4770      	bx	lr

08006146 <__MRS_CONTROL>:
; Return         : - r4 : Cortex-M3 CONTROL register value.
;******************************************************************************/
.thumb_func
__MRS_CONTROL:

  MRS  r0,control
 8006146:	f3ef 8014 	mrs	r0, CONTROL
  BX r14
 800614a:	4770      	bx	lr

0800614c <__MSR_CONTROL>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_CONTROL:

  MSR control, r0
 800614c:	f380 8814 	msr	CONTROL, r0
  ISB
 8006150:	f3bf 8f6f 	isb	sy
  BX r14
 8006154:	4770      	bx	lr

08006156 <__MRS_PSP>:
; Return         : - r0 : Process Stack value.
;******************************************************************************/
.thumb_func
__MRS_PSP:

  MRS r0, psp
 8006156:	f3ef 8009 	mrs	r0, PSP
  BX r14
 800615a:	4770      	bx	lr

0800615c <__MSR_PSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_PSP:
 
    MSR psp,  r0      /* set Process Stack value*/
 800615c:	f380 8809 	msr	PSP, r0
    BX r14
 8006160:	4770      	bx	lr

08006162 <__MRS_MSP>:
; Return         : - r0 : Main Stack value.
;******************************************************************************/
.thumb_func
__MRS_MSP:

  MRS r0, msp
 8006162:	f3ef 8008 	mrs	r0, MSP
  BX r14
 8006166:	4770      	bx	lr

08006168 <__MSR_MSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_MSP: 
 
    MSR msp, r0  /*; set Main Stack value*/
 8006168:	f380 8808 	msr	MSP, r0
    BX r14
 800616c:	4770      	bx	lr

0800616e <__SETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETPRIMASK:

  CPSID i
 800616e:	b672      	cpsid	i
  BX r14
 8006170:	4770      	bx	lr

08006172 <__RESETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETPRIMASK:

  CPSIE i
 8006172:	b662      	cpsie	i
  BX r14
 8006174:	4770      	bx	lr

08006176 <__SETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETFAULTMASK:

  CPSID f
 8006176:	b671      	cpsid	f
  BX r14
 8006178:	4770      	bx	lr

0800617a <__RESETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETFAULTMASK:

  CPSIE f
 800617a:	b661      	cpsie	f
  BX r14
 800617c:	4770      	bx	lr

0800617e <__BASEPRICONFIG>:
; Return         : None
;******************************************************************************/
.thumb_func
__BASEPRICONFIG:

  MSR basepri, r0
 800617e:	f380 8811 	msr	BASEPRI, r0
  BX r14
 8006182:	4770      	bx	lr

08006184 <__GetBASEPRI>:
; Return         : - r0 : Base Priority value 
;******************************************************************************/
.thumb_func
__GetBASEPRI:

  MRS r0, basepri_max
 8006184:	f3ef 8012 	mrs	r0, BASEPRI_MASK
  BX r14
 8006188:	4770      	bx	lr

0800618a <__REV_HalfWord>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_HalfWord: 
 
  REV16 r0, r0
 800618a:	ba40      	rev16	r0, r0
  BX r14
 800618c:	4770      	bx	lr

0800618e <__REV_Word>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_Word: 
 
  REV r0, r0
 800618e:	ba00      	rev	r0, r0
  BX r14
 8006190:	4770      	bx	lr
	...

08006194 <Reset_Handler>:
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void Reset_Handler(void)
{
 8006194:	f02d 0107 	bic.w	r1, sp, #7	; 0x7
 8006198:	4668      	mov	r0, sp
 800619a:	468d      	mov	sp, r1
 800619c:	b501      	push	{r0, lr}
 800619e:	2200      	movs	r2, #0

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
    for(pulDest = &_sdata; pulDest < &_edata; )
 80061a0:	490c      	ldr	r1, [pc, #48]	(80061d4 <Reset_Handler+0x40>)
 80061a2:	f8df c034 	ldr.w	ip, [pc, #52]	; 80061d8 <Reset_Handler+0x44>
    {
        *(pulDest++) = *(pulSrc++);
 80061a6:	480d      	ldr	r0, [pc, #52]	(80061dc <Reset_Handler+0x48>)
 80061a8:	e002      	b.n	80061b0 <Reset_Handler+0x1c>
 80061aa:	5883      	ldr	r3, [r0, r2]
 80061ac:	508b      	str	r3, [r1, r2]
 80061ae:	3204      	adds	r2, #4

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
    for(pulDest = &_sdata; pulDest < &_edata; )
 80061b0:	eb01 0302 	add.w	r3, r1, r2
 80061b4:	4563      	cmp	r3, ip
 80061b6:	d3f8      	bcc.n	80061aa <Reset_Handler+0x16>
 80061b8:	4b09      	ldr	r3, [pc, #36]	(80061e0 <Reset_Handler+0x4c>)
    }

    //
    // Zero fill the bss segment.
    //
    for(pulDest = &_sbss; pulDest < &_ebss; )
 80061ba:	490a      	ldr	r1, [pc, #40]	(80061e4 <Reset_Handler+0x50>)
    {
        *(pulDest++) = 0;
 80061bc:	2200      	movs	r2, #0
 80061be:	e001      	b.n	80061c4 <Reset_Handler+0x30>
 80061c0:	f843 2b04 	str.w	r2, [r3], #4
    }

    //
    // Zero fill the bss segment.
    //
    for(pulDest = &_sbss; pulDest < &_ebss; )
 80061c4:	428b      	cmp	r3, r1
 80061c6:	d3fb      	bcc.n	80061c0 <Reset_Handler+0x2c>
    }

    //
    // Call the application's entry point.
    //
    main();
 80061c8:	f7fd fb6a 	bl	80038a0 <main>
}
 80061cc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 80061d0:	4685      	mov	sp, r0
 80061d2:	4770      	bx	lr
 80061d4:	20000000 	.word	0x20000000
 80061d8:	2000002c 	.word	0x2000002c
 80061dc:	080061fc 	.word	0x080061fc
 80061e0:	2000002c 	.word	0x2000002c
 80061e4:	20000274 	.word	0x20000274

080061e8 <APBAHBPrescTable>:
 80061e8:	00000000 	.word	0x00000000
 80061ec:	04030201 	.word	0x04030201
 80061f0:	04030201 	.word	0x04030201
 80061f4:	09080706 	.word	0x09080706

080061f8 <ADCPrescTable>:
 80061f8:	08060402 	.word	0x08060402

Disassembly of section .data:

20000000 <Baudrate_DXL>:
20000000:	000f4240 	.word	0x000f4240

20000004 <Baudrate_PC>:
20000004:	0000e100 	.word	0x0000e100

20000008 <CCR1_Val>:
20000008:	0064      	.short	0x0064

2000000a <motor_ids>:
2000000a:	0201      	.short	0x0201
2000000c:	06050403 	.word	0x06050403

20000010 <ShoulderPitches1>:
20000010:	032000c8 	.word	0x032000c8

20000014 <ShoulderRolls3>:
20000014:	01f400fa 	.word	0x01f400fa

20000018 <EllbowRolls5>:
20000018:	01f400c8 	.word	0x01f400c8

2000001c <ShoulderPitches2>:
2000001c:	032000c8 	.word	0x032000c8

20000020 <ShoulderRolls4>:
20000020:	02ee01f4 	.word	0x02ee01f4

20000024 <EllbowRolls6>:
20000024:	032001f4 	.word	0x032001f4

20000028 <gbCommStatus>:
20000028:	00000001 	.word	0x00000001

Disassembly of section .bss:

2000002c <_sbss>:
2000002c:	00000000 	.word	0x00000000

20000030 <gbpRxInterruptBuffer>:
	...

20000130 <gbRxBufferWritePointer>:
	...

20000131 <gbRxBufferReadPointer>:
20000131:	00          	.byte	0x00
	...

20000134 <gwTimingDelay>:
20000134:	00000000 	.word	0x00000000

20000138 <gw1msCounter>:
20000138:	00000000 	.word	0x00000000

2000013c <i>:
	...

2000013d <CommStatus>:
	...

2000013e <gbPacketWritePointer>:
	...

2000013f <gbPacketReadPointer>:
	...

20000140 <gbpPacketDataBuffer>:
	...

20000162 <bMoving1>:
	...

20000164 <bMoving2>:
	...

20000166 <bMoving3>:
	...

20000168 <bMoving4>:
	...

2000016a <bMoving5>:
	...

2000016c <bMoving6>:
	...

2000016e <postion1>:
	...

20000170 <postion2>:
	...

20000172 <postion3>:
	...

20000174 <postion4>:
	...

20000176 <postion5>:
	...

20000178 <postion6>:
	...

2000017a <ReceivedData>:
	...

20000188 <gbInstructionPacket>:
	...

20000228 <gbStatusPacket>:
	...

2000026e <gbRxPacketLength>:
	...

2000026f <gbRxGetLength>:
	...

20000270 <giBusUsing>:
20000270:	00000000 	.word	0x00000000

Disassembly of section ._usrstack:

20000274 <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	5728203a 	undefined
   8:	52416e69 	subpl	r6, r1, #1680	; 0x690
   c:	614d204d 	cmpvs	sp, sp, asr #32
  10:	20686372 	rsbcs	r6, r8, r2, ror r3
  14:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  18:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  1c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  20:	43434700 	movtmi	r4, #14080	; 0x3700
  24:	5728203a 	undefined
  28:	52416e69 	subpl	r6, r1, #1680	; 0x690
  2c:	614d204d 	cmpvs	sp, sp, asr #32
  30:	20686372 	rsbcs	r6, r8, r2, ror r3
  34:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  38:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  3c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  40:	43434700 	movtmi	r4, #14080	; 0x3700
  44:	5728203a 	undefined
  48:	52416e69 	subpl	r6, r1, #1680	; 0x690
  4c:	614d204d 	cmpvs	sp, sp, asr #32
  50:	20686372 	rsbcs	r6, r8, r2, ror r3
  54:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  58:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  5c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  60:	43434700 	movtmi	r4, #14080	; 0x3700
  64:	5728203a 	undefined
  68:	52416e69 	subpl	r6, r1, #1680	; 0x690
  6c:	614d204d 	cmpvs	sp, sp, asr #32
  70:	20686372 	rsbcs	r6, r8, r2, ror r3
  74:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  78:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  7c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  80:	43434700 	movtmi	r4, #14080	; 0x3700
  84:	5728203a 	undefined
  88:	52416e69 	subpl	r6, r1, #1680	; 0x690
  8c:	614d204d 	cmpvs	sp, sp, asr #32
  90:	20686372 	rsbcs	r6, r8, r2, ror r3
  94:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  98:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  9c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  a0:	43434700 	movtmi	r4, #14080	; 0x3700
  a4:	5728203a 	undefined
  a8:	52416e69 	subpl	r6, r1, #1680	; 0x690
  ac:	614d204d 	cmpvs	sp, sp, asr #32
  b0:	20686372 	rsbcs	r6, r8, r2, ror r3
  b4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  b8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  bc:	00302e33 	eorseq	r2, r0, r3, lsr lr
  c0:	43434700 	movtmi	r4, #14080	; 0x3700
  c4:	5728203a 	undefined
  c8:	52416e69 	subpl	r6, r1, #1680	; 0x690
  cc:	614d204d 	cmpvs	sp, sp, asr #32
  d0:	20686372 	rsbcs	r6, r8, r2, ror r3
  d4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  d8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  dc:	00302e33 	eorseq	r2, r0, r3, lsr lr
  e0:	43434700 	movtmi	r4, #14080	; 0x3700
  e4:	5728203a 	undefined
  e8:	52416e69 	subpl	r6, r1, #1680	; 0x690
  ec:	614d204d 	cmpvs	sp, sp, asr #32
  f0:	20686372 	rsbcs	r6, r8, r2, ror r3
  f4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  f8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  fc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 100:	43434700 	movtmi	r4, #14080	; 0x3700
 104:	5728203a 	undefined
 108:	52416e69 	subpl	r6, r1, #1680	; 0x690
 10c:	614d204d 	cmpvs	sp, sp, asr #32
 110:	20686372 	rsbcs	r6, r8, r2, ror r3
 114:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 118:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 11c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 120:	43434700 	movtmi	r4, #14080	; 0x3700
 124:	5728203a 	undefined
 128:	52416e69 	subpl	r6, r1, #1680	; 0x690
 12c:	614d204d 	cmpvs	sp, sp, asr #32
 130:	20686372 	rsbcs	r6, r8, r2, ror r3
 134:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 138:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 13c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 140:	43434700 	movtmi	r4, #14080	; 0x3700
 144:	5728203a 	undefined
 148:	52416e69 	subpl	r6, r1, #1680	; 0x690
 14c:	614d204d 	cmpvs	sp, sp, asr #32
 150:	20686372 	rsbcs	r6, r8, r2, ror r3
 154:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 158:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 15c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 160:	43434700 	movtmi	r4, #14080	; 0x3700
 164:	5728203a 	undefined
 168:	52416e69 	subpl	r6, r1, #1680	; 0x690
 16c:	614d204d 	cmpvs	sp, sp, asr #32
 170:	20686372 	rsbcs	r6, r8, r2, ror r3
 174:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 178:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 17c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 180:	43434700 	movtmi	r4, #14080	; 0x3700
 184:	5728203a 	undefined
 188:	52416e69 	subpl	r6, r1, #1680	; 0x690
 18c:	614d204d 	cmpvs	sp, sp, asr #32
 190:	20686372 	rsbcs	r6, r8, r2, ror r3
 194:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 198:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 19c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 1a0:	43434700 	movtmi	r4, #14080	; 0x3700
 1a4:	5728203a 	undefined
 1a8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 1ac:	614d204d 	cmpvs	sp, sp, asr #32
 1b0:	20686372 	rsbcs	r6, r8, r2, ror r3
 1b4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 1b8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 1bc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 1c0:	43434700 	movtmi	r4, #14080	; 0x3700
 1c4:	5728203a 	undefined
 1c8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 1cc:	614d204d 	cmpvs	sp, sp, asr #32
 1d0:	20686372 	rsbcs	r6, r8, r2, ror r3
 1d4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 1d8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 1dc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 1e0:	43434700 	movtmi	r4, #14080	; 0x3700
 1e4:	5728203a 	undefined
 1e8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 1ec:	614d204d 	cmpvs	sp, sp, asr #32
 1f0:	20686372 	rsbcs	r6, r8, r2, ror r3
 1f4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 1f8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 1fc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 200:	43434700 	movtmi	r4, #14080	; 0x3700
 204:	5728203a 	undefined
 208:	52416e69 	subpl	r6, r1, #1680	; 0x690
 20c:	614d204d 	cmpvs	sp, sp, asr #32
 210:	20686372 	rsbcs	r6, r8, r2, ror r3
 214:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 218:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 21c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 220:	43434700 	movtmi	r4, #14080	; 0x3700
 224:	5728203a 	undefined
 228:	52416e69 	subpl	r6, r1, #1680	; 0x690
 22c:	614d204d 	cmpvs	sp, sp, asr #32
 230:	20686372 	rsbcs	r6, r8, r2, ror r3
 234:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 238:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 23c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 240:	43434700 	movtmi	r4, #14080	; 0x3700
 244:	5728203a 	undefined
 248:	52416e69 	subpl	r6, r1, #1680	; 0x690
 24c:	614d204d 	cmpvs	sp, sp, asr #32
 250:	20686372 	rsbcs	r6, r8, r2, ror r3
 254:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 258:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 25c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 260:	43434700 	movtmi	r4, #14080	; 0x3700
 264:	5728203a 	undefined
 268:	52416e69 	subpl	r6, r1, #1680	; 0x690
 26c:	614d204d 	cmpvs	sp, sp, asr #32
 270:	20686372 	rsbcs	r6, r8, r2, ror r3
 274:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 278:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 27c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 280:	43434700 	movtmi	r4, #14080	; 0x3700
 284:	5728203a 	undefined
 288:	52416e69 	subpl	r6, r1, #1680	; 0x690
 28c:	614d204d 	cmpvs	sp, sp, asr #32
 290:	20686372 	rsbcs	r6, r8, r2, ror r3
 294:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 298:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 29c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 2a0:	43434700 	movtmi	r4, #14080	; 0x3700
 2a4:	5728203a 	undefined
 2a8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 2ac:	614d204d 	cmpvs	sp, sp, asr #32
 2b0:	20686372 	rsbcs	r6, r8, r2, ror r3
 2b4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 2b8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 2bc:	00302e33 	eorseq	r2, r0, r3, lsr lr

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
	...
  14:	0000000c 	andeq	r0, r0, ip
  18:	00000000 	andeq	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	004d0002 	subeq	r0, sp, r2
  30:	00040000 	andeq	r0, r4, r0
	...
  3c:	00000104 	andeq	r0, r0, r4, lsl #2
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	00d10002 	sbcseq	r0, r1, r2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
  5c:	00000884 	andeq	r0, r0, r4, lsl #17
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0eb00002 	cdpeq	0, 11, cr0, cr0, cr2, {0}
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	080039b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, fp, ip, sp}
  7c:	00000134 	andeq	r0, r0, r4, lsr r1
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	142f0002 	strtne	r0, [pc], #2	; 94 <_Minimum_Stack_Size-0x6c>
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	08003aec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, fp, ip, sp}
  9c:	0000008c 	andeq	r0, r0, ip, lsl #1
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	15c10002 	strbne	r0, [r1, #2]
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	08003b78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, fp, ip, sp}
  bc:	0000040c 	andeq	r0, r0, ip, lsl #8
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	1b4e0002 	blne	13800dc <__Stack_Size+0x137fcdc>
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	08003f84 	stmdaeq	r0, {r2, r7, r8, r9, sl, fp, ip, sp}
  dc:	00000528 	andeq	r0, r0, r8, lsr #10
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	22880002 	addcs	r0, r8, #2	; 0x2
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	080044ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, lr}
  fc:	00000288 	andeq	r0, r0, r8, lsl #5
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	28d00002 	ldmcs	r0, {r1}^
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	08004734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, lr}
 11c:	00000384 	andeq	r0, r0, r4, lsl #7
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	31b70002 	undefined instruction 0x31b70002
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	08004ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp, lr}
 13c:	000000e0 	andeq	r0, r0, r0, ror #1
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	33fe0002 	mvnscc	r0, #2	; 0x2
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	08004b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp, lr}
 15c:	000003a4 	andeq	r0, r0, r4, lsr #7
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	3cbb0002 	ldccc	0, cr0, [fp], #8
 170:	00040000 	andeq	r0, r4, r0
 174:	00000000 	andeq	r0, r0, r0
 178:	08004f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, lr}
 17c:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	3eaa0002 	cdpcc	0, 10, cr0, cr10, cr2, {0}
 190:	00040000 	andeq	r0, r4, r0
 194:	00000000 	andeq	r0, r0, r0
 198:	08004fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, lr}
 19c:	00000d88 	andeq	r0, r0, r8, lsl #27
	...
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	5ff30002 	svcpl	0x00f30002
 1b0:	00040000 	andeq	r0, r4, r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	08005d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip, lr}
 1bc:	000003bc 	strheq	r0, [r0], -ip
	...
 1c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1cc:	69430002 	stmdbvs	r3, {r1}^
 1d0:	00040000 	andeq	r0, r4, r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	08006124 	stmdaeq	r0, {r2, r5, r8, sp, lr}
 1dc:	0000006e 	andeq	r0, r0, lr, rrx
	...
 1e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ec:	69e10002 	stmibvs	r1!, {r1}^
 1f0:	00040000 	andeq	r0, r4, r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	08006194 	stmdaeq	r0, {r2, r4, r7, r8, sp, lr}
 1fc:	00000054 	andeq	r0, r0, r4, asr r0
	...
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	6ae70002 	bvs	ff9c021c <SCS_BASE+0x1f9b221c>
 210:	00040000 	andeq	r0, r4, r0
	...
 21c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 228:	0000001c 	andeq	r0, r0, ip, lsl r0
 22c:	6bac0002 	blvs	feb0023c <SCS_BASE+0x1eaf223c>
 230:	00040000 	andeq	r0, r4, r0
	...
 23c:	00000030 	andeq	r0, r0, r0, lsr r0
	...
 248:	0000001c 	andeq	r0, r0, ip, lsl r0
 24c:	7e200002 	cdpvc	0, 2, cr0, cr0, cr2, {0}
 250:	00040000 	andeq	r0, r4, r0
	...
 25c:	000000c8 	andeq	r0, r0, r8, asr #1
	...
 268:	0000001c 	andeq	r0, r0, ip, lsl r0
 26c:	7f660002 	svcvc	0x00660002
 270:	00040000 	andeq	r0, r4, r0
	...
 27c:	000000d0 	ldrdeq	r0, [r0], -r0
	...
 288:	0000001c 	andeq	r0, r0, ip, lsl r0
 28c:	80790002 	rsbshi	r0, r9, r2
 290:	00040000 	andeq	r0, r4, r0
	...
 29c:	0000009c 	muleq	r0, ip, r0
	...
 2a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ac:	8a1e0002 	bhi	7802bc <__Stack_Size+0x77febc>
 2b0:	00040000 	andeq	r0, r4, r0
	...
 2bc:	0000010c 	andeq	r0, r0, ip, lsl #2
	...
 2c8:	00000024 	andeq	r0, r0, r4, lsr #32
 2cc:	93d00002 	bicsls	r0, r0, #2	; 0x2
 2d0:	00040000 	andeq	r0, r4, r0
	...
 2dc:	0000000c 	andeq	r0, r0, ip
 2e0:	00000000 	andeq	r0, r0, r0
 2e4:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_pubnames:

00000000 <.debug_pubnames>:
       0:	00000437 	andeq	r0, r0, r7, lsr r4
       4:	00d10002 	sbcseq	r0, r1, r2
       8:	0ddf0000 	ldcleq	0, cr0, [pc]
       c:	06e50000 	strbteq	r0, [r5], r0
      10:	72700000 	rsbsvc	r0, r0, #0	; 0x0
      14:	6e656675 	mcrvs	6, 3, r6, cr5, cr5, {3}
      18:	61666e41 	cmnvs	r6, r1, asr #28
      1c:	3500676e 	strcc	r6, [r0, #-1902]
      20:	70000007 	andvc	r0, r0, r7
      24:	65667572 	strbvs	r7, [r6, #-1394]!
      28:	646e456e 	strbtvs	r4, [lr], #-1390
      2c:	07780065 	ldrbeq	r0, [r8, -r5, rrx]!
      30:	78520000 	ldmdavc	r2, {}^
      34:	74794244 	ldrbtvc	r4, [r9], #-580
      38:	43505f65 	cmpmi	r0, #404	; 0x194
      3c:	00079300 	andeq	r9, r7, r0, lsl #6
      40:	495f5f00 	ldmdbmi	pc, {r8, r9, sl, fp, ip, lr}^
      44:	445f5253 	ldrbmi	r5, [pc], #595	; 4c <_Minimum_Stack_Size-0xb4>
      48:	59414c45 	stmdbpl	r1, {r0, r2, r6, sl, fp, lr}^
      4c:	0007a700 	andeq	sl, r7, r0, lsl #14
      50:	656c4300 	strbvs	r4, [ip, #-768]!
      54:	75427261 	strbvc	r7, [r2, #-609]
      58:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
      5c:	00363532 	eorseq	r3, r6, r2, lsr r5
      60:	000007bb 	strheq	r0, [r0], -fp
      64:	63656843 	cmnvs	r5, #4390912	; 0x430000
      68:	77654e6b 	strbvc	r4, [r5, -fp, ror #28]!
      6c:	69727241 	ldmdbvs	r2!, {r0, r6, r9, ip, sp, lr}^
      70:	d3006576 	movwle	r6, #1398	; 0x576
      74:	52000007 	andpl	r0, r0, #7	; 0x7
      78:	79424478 	stmdbvc	r2, {r3, r4, r5, r6, sl, lr}^
      7c:	445f6574 	ldrbmi	r6, [pc], #1396	; 84 <_Minimum_Stack_Size-0x7c>
      80:	fe004c58 	mcr2	12, 0, r4, cr0, cr8, {2}
      84:	53000007 	movwpl	r0, #7	; 0x7
      88:	74726174 	ldrbtvc	r6, [r2], #-372
      8c:	63736944 	cmnvs	r3, #1114112	; 0x110000
      90:	746e756f 	strbtvc	r7, [lr], #-1391
      94:	00082500 	andeq	r2, r8, r0, lsl #10
      98:	65684300 	strbvs	r4, [r8, #-768]!
      9c:	69546b63 	ldmdbvs	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
      a0:	754f656d 	strbvc	r6, [pc, #-1389]	; fffffb3b <SCS_BASE+0x1fff1b3b>
      a4:	083d0074 	ldmdaeq	sp!, {r2, r4, r5, r6}
      a8:	78520000 	ldmdavc	r2, {}^
      ac:	6e493044 	cdpvs	0, 4, cr3, cr9, cr4, {2}
      b0:	72726574 	rsbsvc	r6, r2, #486539264	; 0x1d000000
      b4:	00747075 	rsbseq	r7, r4, r5, ror r0
      b8:	00000853 	andeq	r0, r0, r3, asr r8
      bc:	31447852 	cmpcc	r4, r2, asr r8
      c0:	65746e49 	ldrbvs	r6, [r4, #-3657]!
      c4:	70757272 	rsbsvc	r7, r5, r2, ror r2
      c8:	087c0074 	ldmdaeq	ip!, {r2, r4, r5, r6}^
      cc:	78540000 	ldmdavc	r4, {}^
      d0:	74794244 	ldrbtvc	r4, [r9], #-580
      d4:	43505f65 	cmpmi	r0, #404	; 0x194
      d8:	0008a700 	andeq	sl, r8, r0, lsl #14
      dc:	44785400 	ldrbtmi	r5, [r8], #-1024
      e0:	65747942 	ldrbvs	r7, [r4, #-2370]!
      e4:	4c58445f 	cfldrdmi	mvd4, [r8], {95}
      e8:	0008d200 	andeq	sp, r8, r0, lsl #4
      ec:	73694400 	cmnvc	r9, #0	; 0x0
      f0:	656c6261 	strbvs	r6, [ip, #-609]!
      f4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
      f8:	e8003154 	stmda	r0, {r2, r4, r6, r8, ip, sp}
      fc:	6d000008 	stcvs	0, cr0, [r0, #-32]
     100:	616c6544 	cmnvs	ip, r4, asr #10
     104:	09130079 	ldmdbeq	r3, {r0, r3, r4, r5, r6}
     108:	69540000 	ldmdbvs	r4, {}^
     10c:	4972656d 	ldmdbmi	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
     110:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     114:	74707572 	ldrbtvc	r7, [r0], #-1394
     118:	736d315f 	cmnvc	sp, #-1073741801	; 0xc0000017
     11c:	00092900 	andeq	r2, r9, r0, lsl #18
     120:	73795300 	cmnvc	r9, #0	; 0x0
     124:	6b636954 	blvs	18da67c <__Stack_Size+0x18da27c>
     128:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     12c:	75676966 	strbvc	r6, [r7, #-2406]!
     130:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     134:	3f006e6f 	svccc	0x00006e6f
     138:	54000009 	strpl	r0, [r0], #-9
     13c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     140:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     144:	75676966 	strbvc	r6, [r7, #-2406]!
     148:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     14c:	78006e6f 	stmdavc	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
     150:	55000009 	strpl	r0, [r0, #-9]
     154:	54524153 	ldrbpl	r4, [r2], #-339
     158:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     15c:	75676966 	strbvc	r6, [r7, #-2406]!
     160:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     164:	c2006e6f 	andgt	r6, r0, #1776	; 0x6f0
     168:	55000009 	strpl	r0, [r0, #-9]
     16c:	54524153 	ldrbpl	r4, [r2], #-339
     170:	6f435f31 	svcvs	0x00435f31
     174:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     178:	74617275 	strbtvc	r7, [r1], #-629
     17c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     180:	000009ed 	andeq	r0, r0, sp, ror #19
     184:	4f495047 	svcmi	0x00495047
     188:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     18c:	75676966 	strbvc	r6, [r7, #-2406]!
     190:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     194:	17006e6f 	strne	r6, [r0, -pc, ror #28]
     198:	4e00000a 	cdpmi	0, 0, cr0, cr0, cr10, {0}
     19c:	5f434956 	svcpl	0x00434956
     1a0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     1a4:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     1a8:	6f697461 	svcvs	0x00697461
     1ac:	0a41006e 	beq	104036c <__Stack_Size+0x103ff6c>
     1b0:	43520000 	cmpmi	r2, #0	; 0x0
     1b4:	6f435f43 	svcvs	0x00435f43
     1b8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     1bc:	74617275 	strbtvc	r7, [r1], #-629
     1c0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     1c4:	00000a68 	andeq	r0, r0, r8, ror #20
     1c8:	6f746f4d 	svcvs	0x00746f4d
     1cc:	6d694c72 	stclvs	12, cr4, [r9, #-456]!
     1d0:	00737469 	rsbseq	r7, r3, r9, ror #8
     1d4:	00000a7e 	andeq	r0, r0, lr, ror sl
     1d8:	746e6f43 	strbtvc	r6, [lr], #-3907
     1dc:	4d6c6f72 	stclmi	15, cr6, [ip, #-456]!
     1e0:	726f746f 	rsbvc	r7, pc, #1862270976	; 0x6f000000
     1e4:	000ad300 	andeq	sp, sl, r0, lsl #6
     1e8:	746f4d00 	strbtvc	r4, [pc], #3328	; 1f0 <_Minimum_Stack_Size+0xf0>
     1ec:	6e65726f 	cdpvs	2, 6, cr7, cr5, cr15, {3}
     1f0:	65776542 	ldrbvs	r6, [r7, #-1346]!
     1f4:	006e6567 	rsbeq	r6, lr, r7, ror #10
     1f8:	00000ae8 	andeq	r0, r0, r8, ror #21
     1fc:	6e69616d 	powvsez	f6, f1, #5.0
     200:	000b2d00 	andeq	r2, fp, r0, lsl #26
     204:	70626700 	rsbvc	r6, r2, r0, lsl #14
     208:	6e497852 	mcrvs	8, 2, r7, cr9, cr2, {2}
     20c:	72726574 	rsbsvc	r6, r2, #486539264	; 0x1d000000
     210:	42747075 	rsbsmi	r7, r4, #117	; 0x75
     214:	65666675 	strbvs	r6, [r6, #-1653]!
     218:	0b440072 	bleq	11003e8 <__Stack_Size+0x10fffe8>
     21c:	62670000 	rsbvs	r0, r7, #0	; 0x0
     220:	75427852 	strbvc	r7, [r2, #-2130]
     224:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     228:	74697257 	strbtvc	r7, [r9], #-599
     22c:	696f5065 	stmdbvs	pc!, {r0, r2, r5, r6, ip, lr}^
     230:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     234:	000b5b00 	andeq	r5, fp, r0, lsl #22
     238:	52626700 	rsbpl	r6, r2, #0	; 0x0
     23c:	66754278 	undefined
     240:	52726566 	rsbspl	r6, r2, #427819008	; 0x19800000
     244:	50646165 	rsbpl	r6, r4, r5, ror #2
     248:	746e696f 	strbtvc	r6, [lr], #-2415
     24c:	6d007265 	sfmvs	f7, 4, [r0, #-404]
     250:	6700000b 	strvs	r0, [r0, -fp]
     254:	6d695477 	cfstrdvs	mvd5, [r9, #-476]!
     258:	44676e69 	strbtmi	r6, [r7], #-3689
     25c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     260:	000b7f00 	andeq	r7, fp, r0, lsl #30
     264:	31776700 	cmncc	r7, r0, lsl #14
     268:	6f43736d 	svcvs	0x0043736d
     26c:	65746e75 	ldrbvs	r6, [r4, #-3701]!
     270:	0b910072 	bleq	fe440440 <SCS_BASE+0x1e432440>
     274:	61420000 	cmpvs	r2, r0
     278:	61726475 	cmnvs	r2, r5, ror r4
     27c:	445f6574 	ldrbmi	r6, [pc], #1396	; 284 <_Minimum_Stack_Size+0x184>
     280:	a3004c58 	movwge	r4, #3160	; 0xc58
     284:	4200000b 	andmi	r0, r0, #11	; 0xb
     288:	72647561 	rsbvc	r7, r4, #406847488	; 0x18400000
     28c:	5f657461 	svcpl	0x00657461
     290:	b5004350 	strlt	r4, [r0, #-848]
     294:	4300000b 	movwmi	r0, #11	; 0xb
     298:	5f315243 	svcpl	0x00315243
     29c:	006c6156 	rsbeq	r6, ip, r6, asr r1
     2a0:	00000bc7 	andeq	r0, r0, r7, asr #23
     2a4:	74706163 	ldrbtvc	r6, [r0], #-355
     2a8:	00657275 	rsbeq	r7, r5, r5, ror r2
     2ac:	00000bd9 	ldrdeq	r0, [r0], -r9
     2b0:	0bf90069 	bleq	ffe4045c <SCS_BASE+0x1fe3245c>
     2b4:	6f6d0000 	svcvs	0x006d0000
     2b8:	5f726f74 	svcpl	0x00726f74
     2bc:	00736469 	rsbseq	r6, r3, r9, ror #8
     2c0:	00000c0b 	andeq	r0, r0, fp, lsl #24
     2c4:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!
     2c8:	74617453 	strbtvc	r7, [r1], #-1107
     2cc:	1d007375 	stcne	3, cr7, [r0, #-468]
     2d0:	6700000c 	strvs	r0, [r0, -ip]
     2d4:	63615062 	cmnvs	r1, #98	; 0x62
     2d8:	5774656b 	ldrbpl	r6, [r4, -fp, ror #10]!
     2dc:	65746972 	ldrbvs	r6, [r4, #-2418]!
     2e0:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
     2e4:	00726574 	rsbseq	r6, r2, r4, ror r5
     2e8:	00000c2f 	andeq	r0, r0, pc, lsr #24
     2ec:	61506267 	cmpvs	r0, r7, ror #4
     2f0:	74656b63 	strbtvc	r6, [r5], #-2915
     2f4:	64616552 	strbtvs	r6, [r1], #-1362
     2f8:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
     2fc:	00726574 	rsbseq	r6, r2, r4, ror r5
     300:	00000c51 	andeq	r0, r0, r1, asr ip
     304:	50706267 	rsbspl	r6, r0, r7, ror #4
     308:	656b6361 	strbvs	r6, [fp, #-865]!
     30c:	74614474 	strbtvc	r4, [r1], #-1140
     310:	66754261 	ldrbtvs	r4, [r5], -r1, ror #4
     314:	00726566 	rsbseq	r6, r2, r6, ror #10
     318:	00000c78 	andeq	r0, r0, r8, ror ip
     31c:	756f6853 	strbvc	r6, [pc, #-2131]!	; fffffad1 <SCS_BASE+0x1fff1ad1>
     320:	7265646c 	rsbvc	r6, r5, #1811939328	; 0x6c000000
     324:	63746950 	cmnvs	r4, #1310720	; 0x140000
     328:	31736568 	cmncc	r3, r8, ror #10
     32c:	000c8a00 	andeq	r8, ip, r0, lsl #20
     330:	6f685300 	svcvs	0x00685300
     334:	65646c75 	strbvs	r6, [r4, #-3189]!
     338:	6c6f5272 	sfmvs	f5, 2, [pc], #-456
     33c:	0033736c 	eorseq	r7, r3, ip, ror #6
     340:	00000c9c 	muleq	r0, ip, ip
     344:	626c6c45 	rsbvs	r6, ip, #17664	; 0x4500
     348:	6f52776f 	svcvs	0x0052776f
     34c:	35736c6c 	ldrbcc	r6, [r3, #-3180]!
     350:	000cae00 	andeq	sl, ip, r0, lsl #28
     354:	6f685300 	svcvs	0x00685300
     358:	65646c75 	strbvs	r6, [r4, #-3189]!
     35c:	74695072 	strbtvc	r5, [r9], #-114
     360:	73656863 	cmnvc	r5, #6488064	; 0x630000
     364:	0cc00032 	stcleq	0, cr0, [r0], {50}
     368:	68530000 	ldmdavs	r3, {}^
     36c:	646c756f 	strbtvs	r7, [ip], #-1391
     370:	6f527265 	svcvs	0x00527265
     374:	34736c6c 	ldrbtcc	r6, [r3], #-3180
     378:	000cd200 	andeq	sp, ip, r0, lsl #4
     37c:	6c6c4500 	cfstr64vs	mvdx4, [ip]
     380:	52776f62 	rsbspl	r6, r7, #392	; 0x188
     384:	736c6c6f 	cmnvc	ip, #28416	; 0x6f00
     388:	0ce40036 	stcleq	0, cr0, [r4], #216
     38c:	4d620000 	stclmi	0, cr0, [r2]
     390:	6e69766f 	cdpvs	6, 6, cr7, cr9, cr15, {3}
     394:	f6003167 	undefined instruction 0xf6003167
     398:	6200000c 	andvs	r0, r0, #12	; 0xc
     39c:	69766f4d 	ldmdbvs	r6!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
     3a0:	0032676e 	eorseq	r6, r2, lr, ror #14
     3a4:	00000d08 	andeq	r0, r0, r8, lsl #26
     3a8:	766f4d62 	strbtvc	r4, [pc], -r2, ror #26
     3ac:	33676e69 	cmncc	r7, #1680	; 0x690
     3b0:	000d1a00 	andeq	r1, sp, r0, lsl #20
     3b4:	6f4d6200 	svcvs	0x004d6200
     3b8:	676e6976 	undefined
     3bc:	0d2c0034 	stceq	0, cr0, [ip, #-208]!
     3c0:	4d620000 	stclmi	0, cr0, [r2]
     3c4:	6e69766f 	cdpvs	6, 6, cr7, cr9, cr15, {3}
     3c8:	3e003567 	cfsh32cc	mvfx3, mvfx0, #55
     3cc:	6200000d 	andvs	r0, r0, #13	; 0xd
     3d0:	69766f4d 	ldmdbvs	r6!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
     3d4:	0036676e 	eorseq	r6, r6, lr, ror #14
     3d8:	00000d50 	andeq	r0, r0, r0, asr sp
     3dc:	74736f70 	ldrbtvc	r6, [r3], #-3952
     3e0:	316e6f69 	cmncc	lr, r9, ror #30
     3e4:	000d6200 	andeq	r6, sp, r0, lsl #4
     3e8:	736f7000 	cmnvc	pc, #0	; 0x0
     3ec:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     3f0:	0d740032 	ldcleq	0, cr0, [r4, #-200]!
     3f4:	6f700000 	svcvs	0x00700000
     3f8:	6f697473 	svcvs	0x00697473
     3fc:	8600336e 	strhi	r3, [r0], -lr, ror #6
     400:	7000000d 	andvc	r0, r0, sp
     404:	6974736f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
     408:	00346e6f 	eorseq	r6, r4, pc, ror #28
     40c:	00000d98 	muleq	r0, r8, sp
     410:	74736f70 	ldrbtvc	r6, [r3], #-3952
     414:	356e6f69 	strbcc	r6, [lr, #-3945]!
     418:	000daa00 	andeq	sl, sp, r0, lsl #20
     41c:	736f7000 	cmnvc	pc, #0	; 0x0
     420:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     424:	0dcc0036 	stcleq	0, cr0, [ip, #216]
     428:	65520000 	ldrbvs	r0, [r2]
     42c:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     430:	61446465 	cmpvs	r4, r5, ror #8
     434:	00006174 	andeq	r6, r0, r4, ror r1
     438:	38000000 	stmdacc	r0, {}
     43c:	02000006 	andeq	r0, r0, #6	; 0x6
     440:	000eb000 	andeq	fp, lr, r0
     444:	00057f00 	andeq	r7, r5, r0, lsl #30
     448:	00002500 	andeq	r2, r0, r0, lsl #10
     44c:	494d4e00 	stmdbmi	sp, {r9, sl, fp, lr}^
     450:	65637845 	strbvs	r7, [r3, #-2117]!
     454:	6f697470 	svcvs	0x00697470
     458:	0038006e 	eorseq	r0, r8, lr, rrx
     45c:	61480000 	cmpvs	r8, r0
     460:	61466472 	cmpvs	r6, r2, ror r4
     464:	45746c75 	ldrbmi	r6, [r4, #-3189]!
     468:	70656378 	rsbvc	r6, r5, r8, ror r3
     46c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     470:	00004b00 	andeq	r4, r0, r0, lsl #22
     474:	6d654d00 	stclvs	13, cr4, [r5]
     478:	616e614d 	cmnvs	lr, sp, asr #2
     47c:	78456567 	stmdavc	r5, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
     480:	74706563 	ldrbtvc	r6, [r0], #-1379
     484:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     488:	0000005e 	andeq	r0, r0, lr, asr r0
     48c:	46737542 	ldrbtmi	r7, [r3], -r2, asr #10
     490:	746c7561 	strbtvc	r7, [ip], #-1377
     494:	65637845 	strbvs	r7, [r3, #-2117]!
     498:	6f697470 	svcvs	0x00697470
     49c:	0071006e 	rsbseq	r0, r1, lr, rrx
     4a0:	73550000 	cmpvc	r5, #0	; 0x0
     4a4:	46656761 	strbtmi	r6, [r5], -r1, ror #14
     4a8:	746c7561 	strbtvc	r7, [ip], #-1377
     4ac:	65637845 	strbvs	r7, [r3, #-2117]!
     4b0:	6f697470 	svcvs	0x00697470
     4b4:	0084006e 	addeq	r0, r4, lr, rrx
     4b8:	65440000 	strbvs	r0, [r4]
     4bc:	4d677562 	cfstr64mi	mvdx7, [r7, #-392]!
     4c0:	74696e6f 	strbtvc	r6, [r9], #-3695
     4c4:	9700726f 	strls	r7, [r0, -pc, ror #4]
     4c8:	53000000 	movwpl	r0, #0	; 0x0
     4cc:	61484356 	cmpvs	r8, r6, asr r3
     4d0:	656c646e 	strbvs	r6, [ip, #-1134]!
     4d4:	00aa0072 	adceq	r0, sl, r2, ror r0
     4d8:	65500000 	ldrbvs	r0, [r0]
     4dc:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
     4e0:	00bd0043 	adcseq	r0, sp, r3, asr #32
     4e4:	57570000 	ldrbpl	r0, [r7, -r0]
     4e8:	495f4744 	ldmdbmi	pc, {r2, r6, r8, r9, sl, lr}^
     4ec:	61485152 	cmpvs	r8, r2, asr r1
     4f0:	656c646e 	strbvs	r6, [ip, #-1134]!
     4f4:	00d00072 	sbcseq	r0, r0, r2, ror r0
     4f8:	56500000 	ldrbpl	r0, [r0], -r0
     4fc:	52495f44 	subpl	r5, r9, #272	; 0x110
     500:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     504:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     508:	0000e300 	andeq	lr, r0, r0, lsl #6
     50c:	4d415400 	cfstrdmi	mvd5, [r1]
     510:	5f524550 	svcpl	0x00524550
     514:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     518:	6c646e61 	stclvs	14, cr6, [r4], #-388
     51c:	f6007265 	undefined instruction 0xf6007265
     520:	52000000 	andpl	r0, r0, #0	; 0x0
     524:	495f4354 	ldmdbmi	pc, {r2, r4, r6, r8, r9, lr}^
     528:	61485152 	cmpvs	r8, r2, asr r1
     52c:	656c646e 	strbvs	r6, [ip, #-1134]!
     530:	01090072 	tsteq	r9, r2, ror r0
     534:	4c460000 	marmi	acc0, r0, r6
     538:	5f485341 	svcpl	0x00485341
     53c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     540:	6c646e61 	stclvs	14, cr6, [r4], #-388
     544:	1c007265 	sfmne	f7, 4, [r0], {101}
     548:	52000001 	andpl	r0, r0, #1	; 0x1
     54c:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^
     550:	61485152 	cmpvs	r8, r2, asr r1
     554:	656c646e 	strbvs	r6, [ip, #-1134]!
     558:	012f0072 	teqeq	pc, r2, ror r0
     55c:	58450000 	stmdapl	r5, {}^
     560:	5f304954 	svcpl	0x00304954
     564:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     568:	6c646e61 	stclvs	14, cr6, [r4], #-388
     56c:	42007265 	andmi	r7, r0, #1342177286	; 0x50000006
     570:	45000001 	strmi	r0, [r0, #-1]
     574:	31495458 	cmpcc	r9, r8, asr r4
     578:	5152495f 	cmppl	r2, pc, asr r9
     57c:	646e6148 	strbtvs	r6, [lr], #-328
     580:	0072656c 	rsbseq	r6, r2, ip, ror #10
     584:	00000155 	andeq	r0, r0, r5, asr r1
     588:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     58c:	52495f32 	subpl	r5, r9, #200	; 0xc8
     590:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     594:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     598:	00016800 	andeq	r6, r1, r0, lsl #16
     59c:	54584500 	ldrbpl	r4, [r8], #-1280
     5a0:	495f3349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, ip, sp}^
     5a4:	61485152 	cmpvs	r8, r2, asr r1
     5a8:	656c646e 	strbvs	r6, [ip, #-1134]!
     5ac:	017b0072 	cmneq	fp, r2, ror r0
     5b0:	58450000 	stmdapl	r5, {}^
     5b4:	5f344954 	svcpl	0x00344954
     5b8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     5bc:	6c646e61 	stclvs	14, cr6, [r4], #-388
     5c0:	8f007265 	svchi	0x00007265
     5c4:	44000001 	strmi	r0, [r0], #-1
     5c8:	5f31414d 	svcpl	0x0031414d
     5cc:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     5d0:	316c656e 	cmncc	ip, lr, ror #10
     5d4:	5152495f 	cmppl	r2, pc, asr r9
     5d8:	646e6148 	strbtvs	r6, [lr], #-328
     5dc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     5e0:	000001a3 	andeq	r0, r0, r3, lsr #3
     5e4:	31414d44 	cmpcc	r1, r4, asr #26
     5e8:	6168435f 	cmnvs	r8, pc, asr r3
     5ec:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     5f0:	52495f32 	subpl	r5, r9, #200	; 0xc8
     5f4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     5f8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     5fc:	0001b700 	andeq	fp, r1, r0, lsl #14
     600:	414d4400 	cmpmi	sp, r0, lsl #8
     604:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     608:	656e6e61 	strbvs	r6, [lr, #-3681]!
     60c:	495f336c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, ip, sp}^
     610:	61485152 	cmpvs	r8, r2, asr r1
     614:	656c646e 	strbvs	r6, [ip, #-1134]!
     618:	01cb0072 	biceq	r0, fp, r2, ror r0
     61c:	4d440000 	stclmi	0, cr0, [r4]
     620:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     624:	6e6e6168 	powvsez	f6, f6, #0.0
     628:	5f346c65 	svcpl	0x00346c65
     62c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     630:	6c646e61 	stclvs	14, cr6, [r4], #-388
     634:	df007265 	svcle	0x00007265
     638:	44000001 	strmi	r0, [r0], #-1
     63c:	5f31414d 	svcpl	0x0031414d
     640:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     644:	356c656e 	strbcc	r6, [ip, #-1390]!
     648:	5152495f 	cmppl	r2, pc, asr r9
     64c:	646e6148 	strbtvs	r6, [lr], #-328
     650:	0072656c 	rsbseq	r6, r2, ip, ror #10
     654:	000001f3 	strdeq	r0, [r0], -r3
     658:	31414d44 	cmpcc	r1, r4, asr #26
     65c:	6168435f 	cmnvs	r8, pc, asr r3
     660:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     664:	52495f36 	subpl	r5, r9, #216	; 0xd8
     668:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     66c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     670:	00020700 	andeq	r0, r2, r0, lsl #14
     674:	414d4400 	cmpmi	sp, r0, lsl #8
     678:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     67c:	656e6e61 	strbvs	r6, [lr, #-3681]!
     680:	495f376c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, sl, ip, sp}^
     684:	61485152 	cmpvs	r8, r2, asr r1
     688:	656c646e 	strbvs	r6, [ip, #-1134]!
     68c:	021b0072 	andseq	r0, fp, #114	; 0x72
     690:	44410000 	strbmi	r0, [r1]
     694:	325f3143 	subscc	r3, pc, #-1073741808	; 0xc0000010
     698:	5152495f 	cmppl	r2, pc, asr r9
     69c:	646e6148 	strbtvs	r6, [lr], #-328
     6a0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     6a4:	0000022f 	andeq	r0, r0, pc, lsr #4
     6a8:	5f425355 	svcpl	0x00425355
     6ac:	435f5048 	cmpmi	pc, #72	; 0x48
     6b0:	545f4e41 	ldrbpl	r4, [pc], #3649	; 6b8 <__Stack_Size+0x2b8>
     6b4:	52495f58 	subpl	r5, r9, #352	; 0x160
     6b8:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     6bc:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     6c0:	00024300 	andeq	r4, r2, r0, lsl #6
     6c4:	42535500 	subsmi	r5, r3, #0	; 0x0
     6c8:	5f504c5f 	svcpl	0x00504c5f
     6cc:	5f4e4143 	svcpl	0x004e4143
     6d0:	5f305852 	svcpl	0x00305852
     6d4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     6d8:	6c646e61 	stclvs	14, cr6, [r4], #-388
     6dc:	57007265 	strpl	r7, [r0, -r5, ror #4]
     6e0:	43000002 	movwmi	r0, #2	; 0x2
     6e4:	525f4e41 	subspl	r4, pc, #1040	; 0x410
     6e8:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^
     6ec:	61485152 	cmpvs	r8, r2, asr r1
     6f0:	656c646e 	strbvs	r6, [ip, #-1134]!
     6f4:	026b0072 	rsbeq	r0, fp, #114	; 0x72
     6f8:	41430000 	cmpmi	r3, r0
     6fc:	43535f4e 	cmpmi	r3, #312	; 0x138
     700:	52495f45 	subpl	r5, r9, #276	; 0x114
     704:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     708:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     70c:	00027f00 	andeq	r7, r2, r0, lsl #30
     710:	54584500 	ldrbpl	r4, [r8], #-1280
     714:	355f3949 	ldrbcc	r3, [pc, #-2377]	; fffffdd3 <SCS_BASE+0x1fff1dd3>
     718:	5152495f 	cmppl	r2, pc, asr r9
     71c:	646e6148 	strbtvs	r6, [lr], #-328
     720:	0072656c 	rsbseq	r6, r2, ip, ror #10
     724:	00000293 	muleq	r0, r3, r2
     728:	314d4954 	cmpcc	sp, r4, asr r9
     72c:	4b52425f 	blmi	14910b0 <__Stack_Size+0x1490cb0>
     730:	5152495f 	cmppl	r2, pc, asr r9
     734:	646e6148 	strbtvs	r6, [lr], #-328
     738:	0072656c 	rsbseq	r6, r2, ip, ror #10
     73c:	000002a7 	andeq	r0, r0, r7, lsr #5
     740:	314d4954 	cmpcc	sp, r4, asr r9
     744:	5f50555f 	svcpl	0x0050555f
     748:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     74c:	6c646e61 	stclvs	14, cr6, [r4], #-388
     750:	bb007265 	bllt	1d0ec <__Stack_Size+0x1ccec>
     754:	54000002 	strpl	r0, [r0], #-2
     758:	5f314d49 	svcpl	0x00314d49
     75c:	5f475254 	svcpl	0x00475254
     760:	5f4d4f43 	svcpl	0x004d4f43
     764:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     768:	6c646e61 	stclvs	14, cr6, [r4], #-388
     76c:	cf007265 	svcgt	0x00007265
     770:	54000002 	strpl	r0, [r0], #-2
     774:	5f314d49 	svcpl	0x00314d49
     778:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^
     77c:	61485152 	cmpvs	r8, r2, asr r1
     780:	656c646e 	strbvs	r6, [ip, #-1134]!
     784:	02e30072 	rsceq	r0, r3, #114	; 0x72
     788:	49540000 	ldmdbmi	r4, {}^
     78c:	495f334d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, ip, sp}^
     790:	61485152 	cmpvs	r8, r2, asr r1
     794:	656c646e 	strbvs	r6, [ip, #-1134]!
     798:	02f70072 	rscseq	r0, r7, #114	; 0x72
     79c:	49540000 	ldmdbmi	r4, {}^
     7a0:	495f344d 	ldmdbmi	pc, {r0, r2, r3, r6, sl, ip, sp}^
     7a4:	61485152 	cmpvs	r8, r2, asr r1
     7a8:	656c646e 	strbvs	r6, [ip, #-1134]!
     7ac:	030b0072 	movweq	r0, #45170	; 0xb072
     7b0:	32490000 	subcc	r0, r9, #0	; 0x0
     7b4:	455f3143 	ldrbmi	r3, [pc, #-323]	; 679 <__Stack_Size+0x279>
     7b8:	52495f56 	subpl	r5, r9, #344	; 0x158
     7bc:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     7c0:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     7c4:	00031f00 	andeq	r1, r3, r0, lsl #30
     7c8:	43324900 	teqmi	r2, #0	; 0x0
     7cc:	52455f31 	subpl	r5, r5, #196	; 0xc4
     7d0:	5152495f 	cmppl	r2, pc, asr r9
     7d4:	646e6148 	strbtvs	r6, [lr], #-328
     7d8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     7dc:	00000333 	andeq	r0, r0, r3, lsr r3
     7e0:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     7e4:	5f56455f 	svcpl	0x0056455f
     7e8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     7ec:	6c646e61 	stclvs	14, cr6, [r4], #-388
     7f0:	47007265 	strmi	r7, [r0, -r5, ror #4]
     7f4:	49000003 	stmdbmi	r0, {r0, r1}
     7f8:	5f324332 	svcpl	0x00324332
     7fc:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^
     800:	61485152 	cmpvs	r8, r2, asr r1
     804:	656c646e 	strbvs	r6, [ip, #-1134]!
     808:	035b0072 	cmpeq	fp, #114	; 0x72
     80c:	50530000 	subspl	r0, r3, r0
     810:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^
     814:	61485152 	cmpvs	r8, r2, asr r1
     818:	656c646e 	strbvs	r6, [ip, #-1134]!
     81c:	036f0072 	cmneq	pc, #114	; 0x72
     820:	50530000 	subspl	r0, r3, r0
     824:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^
     828:	61485152 	cmpvs	r8, r2, asr r1
     82c:	656c646e 	strbvs	r6, [ip, #-1134]!
     830:	03830072 	orreq	r0, r3, #114	; 0x72
     834:	53550000 	cmppl	r5, #0	; 0x0
     838:	32545241 	subscc	r5, r4, #268435460	; 0x10000004
     83c:	5152495f 	cmppl	r2, pc, asr r9
     840:	646e6148 	strbtvs	r6, [lr], #-328
     844:	0072656c 	rsbseq	r6, r2, ip, ror #10
     848:	00000397 	muleq	r0, r7, r3
     84c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     850:	315f3531 	cmpcc	pc, r1, lsr r5
     854:	52495f30 	subpl	r5, r9, #192	; 0xc0
     858:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     85c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     860:	0003ab00 	andeq	sl, r3, r0, lsl #22
     864:	43545200 	cmpmi	r4, #0	; 0x0
     868:	72616c41 	rsbvc	r6, r1, #16640	; 0x4100
     86c:	52495f6d 	subpl	r5, r9, #436	; 0x1b4
     870:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     874:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     878:	0003bf00 	andeq	fp, r3, r0, lsl #30
     87c:	42535500 	subsmi	r5, r3, #0	; 0x0
     880:	656b6157 	strbvs	r6, [fp, #-343]!
     884:	495f7055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, sp, lr}^
     888:	61485152 	cmpvs	r8, r2, asr r1
     88c:	656c646e 	strbvs	r6, [ip, #-1134]!
     890:	03d30072 	bicseq	r0, r3, #114	; 0x72
     894:	49540000 	ldmdbmi	r4, {}^
     898:	425f384d 	subsmi	r3, pc, #5046272	; 0x4d0000
     89c:	495f4b52 	ldmdbmi	pc, {r1, r4, r6, r8, r9, fp, lr}^
     8a0:	61485152 	cmpvs	r8, r2, asr r1
     8a4:	656c646e 	strbvs	r6, [ip, #-1134]!
     8a8:	03e70072 	mvneq	r0, #114	; 0x72
     8ac:	49540000 	ldmdbmi	r4, {}^
     8b0:	555f384d 	ldrbpl	r3, [pc, #-2125]	; 6b <_Minimum_Stack_Size-0x95>
     8b4:	52495f50 	subpl	r5, r9, #320	; 0x140
     8b8:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     8bc:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     8c0:	0003fb00 	andeq	pc, r3, r0, lsl #22
     8c4:	4d495400 	cfstrdmi	mvd5, [r9]
     8c8:	52545f38 	subspl	r5, r4, #224	; 0xe0
     8cc:	4f435f47 	svcmi	0x00435f47
     8d0:	52495f4d 	subpl	r5, r9, #308	; 0x134
     8d4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     8d8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     8dc:	00040f00 	andeq	r0, r4, r0, lsl #30
     8e0:	4d495400 	cfstrdmi	mvd5, [r9]
     8e4:	43435f38 	movtmi	r5, #16184	; 0x3f38
     8e8:	5152495f 	cmppl	r2, pc, asr r9
     8ec:	646e6148 	strbtvs	r6, [lr], #-328
     8f0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     8f4:	00000423 	andeq	r0, r0, r3, lsr #8
     8f8:	33434441 	movtcc	r4, #13377	; 0x3441
     8fc:	5152495f 	cmppl	r2, pc, asr r9
     900:	646e6148 	strbtvs	r6, [lr], #-328
     904:	0072656c 	rsbseq	r6, r2, ip, ror #10
     908:	00000437 	andeq	r0, r0, r7, lsr r4
     90c:	434d5346 	movtmi	r5, #54086	; 0xd346
     910:	5152495f 	cmppl	r2, pc, asr r9
     914:	646e6148 	strbtvs	r6, [lr], #-328
     918:	0072656c 	rsbseq	r6, r2, ip, ror #10
     91c:	0000044b 	andeq	r0, r0, fp, asr #8
     920:	4f494453 	svcmi	0x00494453
     924:	5152495f 	cmppl	r2, pc, asr r9
     928:	646e6148 	strbtvs	r6, [lr], #-328
     92c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     930:	0000045f 	andeq	r0, r0, pc, asr r4
     934:	354d4954 	strbcc	r4, [sp, #-2388]
     938:	5152495f 	cmppl	r2, pc, asr r9
     93c:	646e6148 	strbtvs	r6, [lr], #-328
     940:	0072656c 	rsbseq	r6, r2, ip, ror #10
     944:	00000473 	andeq	r0, r0, r3, ror r4
     948:	33495053 	movtcc	r5, #36947	; 0x9053
     94c:	5152495f 	cmppl	r2, pc, asr r9
     950:	646e6148 	strbtvs	r6, [lr], #-328
     954:	0072656c 	rsbseq	r6, r2, ip, ror #10
     958:	00000487 	andeq	r0, r0, r7, lsl #9
     95c:	54524155 	ldrbpl	r4, [r2], #-341
     960:	52495f34 	subpl	r5, r9, #208	; 0xd0
     964:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     968:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     96c:	00049b00 	andeq	r9, r4, r0, lsl #22
     970:	52415500 	subpl	r5, r1, #0	; 0x0
     974:	495f3554 	ldmdbmi	pc, {r2, r4, r6, r8, sl, ip, sp}^
     978:	61485152 	cmpvs	r8, r2, asr r1
     97c:	656c646e 	strbvs	r6, [ip, #-1134]!
     980:	04af0072 	strteq	r0, [pc], #114	; 988 <__Stack_Size+0x588>
     984:	49540000 	ldmdbmi	r4, {}^
     988:	495f364d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, sl, ip, sp}^
     98c:	61485152 	cmpvs	r8, r2, asr r1
     990:	656c646e 	strbvs	r6, [ip, #-1134]!
     994:	04c30072 	strbeq	r0, [r3], #114
     998:	49540000 	ldmdbmi	r4, {}^
     99c:	495f374d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, sl, ip, sp}^
     9a0:	61485152 	cmpvs	r8, r2, asr r1
     9a4:	656c646e 	strbvs	r6, [ip, #-1134]!
     9a8:	04d70072 	ldrbeq	r0, [r7], #114
     9ac:	4d440000 	stclmi	0, cr0, [r4]
     9b0:	435f3241 	cmpmi	pc, #268435460	; 0x10000004
     9b4:	6e6e6168 	powvsez	f6, f6, #0.0
     9b8:	5f316c65 	svcpl	0x00316c65
     9bc:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     9c0:	6c646e61 	stclvs	14, cr6, [r4], #-388
     9c4:	eb007265 	bl	1d360 <__Stack_Size+0x1cf60>
     9c8:	44000004 	strmi	r0, [r0], #-4
     9cc:	5f32414d 	svcpl	0x0032414d
     9d0:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     9d4:	326c656e 	rsbcc	r6, ip, #461373440	; 0x1b800000
     9d8:	5152495f 	cmppl	r2, pc, asr r9
     9dc:	646e6148 	strbtvs	r6, [lr], #-328
     9e0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     9e4:	000004ff 	strdeq	r0, [r0], -pc
     9e8:	32414d44 	subcc	r4, r1, #4352	; 0x1100
     9ec:	6168435f 	cmnvs	r8, pc, asr r3
     9f0:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     9f4:	52495f33 	subpl	r5, r9, #204	; 0xcc
     9f8:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     9fc:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     a00:	00051300 	andeq	r1, r5, r0, lsl #6
     a04:	414d4400 	cmpmi	sp, r0, lsl #8
     a08:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     a0c:	656e6e61 	strbvs	r6, [lr, #-3681]!
     a10:	355f346c 	ldrbcc	r3, [pc, #-1132]	; 5ac <__Stack_Size+0x1ac>
     a14:	5152495f 	cmppl	r2, pc, asr r9
     a18:	646e6148 	strbtvs	r6, [lr], #-328
     a1c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     a20:	00000527 	andeq	r0, r0, r7, lsr #10
     a24:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     a28:	495f3354 	ldmdbmi	pc, {r2, r4, r6, r8, r9, ip, sp}^
     a2c:	61485152 	cmpvs	r8, r2, asr r1
     a30:	656c646e 	strbvs	r6, [ip, #-1134]!
     a34:	053d0072 	ldreq	r0, [sp, #-114]!
     a38:	53550000 	cmppl	r5, #0	; 0x0
     a3c:	31545241 	cmpcc	r4, r1, asr #4
     a40:	5152495f 	cmppl	r2, pc, asr r9
     a44:	646e6148 	strbtvs	r6, [lr], #-328
     a48:	0072656c 	rsbseq	r6, r2, ip, ror #10
     a4c:	00000553 	andeq	r0, r0, r3, asr r5
     a50:	324d4954 	subcc	r4, sp, #1376256	; 0x150000
     a54:	5152495f 	cmppl	r2, pc, asr r9
     a58:	646e6148 	strbtvs	r6, [lr], #-328
     a5c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     a60:	00000569 	andeq	r0, r0, r9, ror #10
     a64:	54737953 	ldrbtpl	r7, [r3], #-2387
     a68:	486b6369 	stmdami	fp!, {r0, r3, r5, r6, r8, r9, sp, lr}^
     a6c:	6c646e61 	stclvs	14, cr6, [r4], #-388
     a70:	00007265 	andeq	r7, r0, r5, ror #4
     a74:	8d000000 	stchi	0, cr0, [r0]
     a78:	02000000 	andeq	r0, r0, #0	; 0x0
     a7c:	00142f00 	andseq	r2, r4, r0, lsl #30
     a80:	00019200 	andeq	r9, r1, r0, lsl #4
     a84:	00005200 	andeq	r5, r0, r0, lsl #4
     a88:	6c786400 	cfldrdvs	mvd6, [r8]
     a8c:	6c61685f 	stclvs	8, cr6, [r1], #-380
     a90:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!
     a94:	74756f65 	ldrbtvc	r6, [r5], #-3941
     a98:	00007200 	andeq	r7, r0, r0, lsl #4
     a9c:	6c786400 	cfldrdvs	mvd6, [r8]
     aa0:	6c61685f 	stclvs	8, cr6, [r1], #-380
     aa4:	7465735f 	strbtvc	r7, [r5], #-863
     aa8:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!
     aac:	74756f65 	ldrbtvc	r6, [r5], #-3941
     ab0:	00009b00 	andeq	r9, r0, r0, lsl #22
     ab4:	6c786400 	cfldrdvs	mvd6, [r8]
     ab8:	6c61685f 	stclvs	8, cr6, [r1], #-380
     abc:	0078725f 	rsbseq	r7, r8, pc, asr r2
     ac0:	000000e8 	andeq	r0, r0, r8, ror #1
     ac4:	5f6c7864 	svcpl	0x006c7864
     ac8:	5f6c6168 	svcpl	0x006c6168
     acc:	2f007874 	svccs	0x00007874
     ad0:	64000001 	strvs	r0, [r0], #-1
     ad4:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
     ad8:	635f6c61 	cmpvs	pc, #24832	; 0x6100
     adc:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
     ae0:	00014400 	andeq	r4, r1, r0, lsl #8
     ae4:	6c786400 	cfldrdvs	mvd6, [r8]
     ae8:	6c61685f 	stclvs	8, cr6, [r1], #-380
     aec:	6f6c635f 	svcvs	0x006c635f
     af0:	59006573 	stmdbpl	r0, {r0, r1, r4, r5, r6, r8, sl, sp, lr}
     af4:	64000001 	strvs	r0, [r0], #-1
     af8:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
     afc:	6f5f6c61 	svcvs	0x005f6c61
     b00:	006e6570 	rsbeq	r6, lr, r0, ror r5
     b04:	00000000 	andeq	r0, r0, r0
     b08:	0000024b 	andeq	r0, r0, fp, asr #4
     b0c:	15c10002 	strbne	r0, [r1, #2]
     b10:	058d0000 	streq	r0, [sp]
     b14:	00c30000 	sbceq	r0, r3, r0
     b18:	78640000 	stmdavc	r4!, {}^
     b1c:	65675f6c 	strbvs	r5, [r7, #-3948]!
     b20:	65725f74 	ldrbvs	r5, [r2, #-3956]!
     b24:	746c7573 	strbtvc	r7, [ip], #-1395
     b28:	0000da00 	andeq	sp, r0, r0, lsl #20
     b2c:	6c786400 	cfldrdvs	mvd6, [r8]
     b30:	7465735f 	strbtvc	r7, [r5], #-863
     b34:	7078745f 	rsbsvc	r7, r8, pc, asr r4
     b38:	656b6361 	strbvs	r6, [fp, #-865]!
     b3c:	64695f74 	strbtvs	r5, [r9], #-3956
     b40:	0000fe00 	andeq	pc, r0, r0, lsl #28
     b44:	6c786400 	cfldrdvs	mvd6, [r8]
     b48:	7465735f 	strbtvc	r7, [r5], #-863
     b4c:	7078745f 	rsbsvc	r7, r8, pc, asr r4
     b50:	656b6361 	strbvs	r6, [fp, #-865]!
     b54:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
     b58:	75727473 	ldrbvc	r7, [r2, #-1139]!
     b5c:	6f697463 	svcvs	0x00697463
     b60:	0123006e 	teqeq	r3, lr, rrx
     b64:	78640000 	stmdavc	r4!, {}^
     b68:	65735f6c 	ldrbvs	r5, [r3, #-3948]!
     b6c:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     b70:	6b636170 	blvs	18d9138 <__Stack_Size+0x18d8d38>
     b74:	705f7465 	subsvc	r7, pc, r5, ror #8
     b78:	6d617261 	sfmvs	f7, 2, [r1, #-388]!
     b7c:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
     b80:	00015500 	andeq	r5, r1, r0, lsl #10
     b84:	6c786400 	cfldrdvs	mvd6, [r8]
     b88:	7465735f 	strbtvc	r7, [r5], #-863
     b8c:	7078745f 	rsbsvc	r7, r8, pc, asr r4
     b90:	656b6361 	strbvs	r6, [fp, #-865]!
     b94:	656c5f74 	strbvs	r5, [ip, #-3956]!
     b98:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     b9c:	00017a00 	andeq	r7, r1, r0, lsl #20
     ba0:	6c786400 	cfldrdvs	mvd6, [r8]
     ba4:	7465675f 	strbtvc	r6, [r5], #-1887
     ba8:	7078725f 	rsbsvc	r7, r8, pc, asr r2
     bac:	656b6361 	strbvs	r6, [fp, #-865]!
     bb0:	72655f74 	rsbvc	r5, r5, #464	; 0x1d0
     bb4:	00726f72 	rsbseq	r6, r2, r2, ror pc
     bb8:	000001a6 	andeq	r0, r0, r6, lsr #3
     bbc:	5f6c7864 	svcpl	0x006c7864
     bc0:	5f746567 	svcpl	0x00746567
     bc4:	61707872 	cmnvs	r0, r2, ror r8
     bc8:	74656b63 	strbtvc	r6, [r5], #-2915
     bcc:	6e656c5f 	mcrvs	12, 3, r6, cr5, cr15, {2}
     bd0:	00687467 	rsbeq	r7, r8, r7, ror #8
     bd4:	000001be 	strheq	r0, [r0], -lr
     bd8:	5f6c7864 	svcpl	0x006c7864
     bdc:	5f746567 	svcpl	0x00746567
     be0:	61707872 	cmnvs	r0, r2, ror r8
     be4:	74656b63 	strbtvc	r6, [r5], #-2915
     be8:	7261705f 	rsbvc	r7, r1, #95	; 0x5f
     bec:	74656d61 	strbtvc	r6, [r5], #-3425
     bf0:	eb007265 	bl	1d58c <__Stack_Size+0x1d18c>
     bf4:	64000001 	strvs	r0, [r0], #-1
     bf8:	6d5f6c78 	ldclvs	12, cr6, [pc, #-480]
     bfc:	77656b61 	strbvc	r6, [r5, -r1, ror #22]!
     c00:	0064726f 	rsbeq	r7, r4, pc, ror #4
     c04:	00000214 	andeq	r0, r0, r4, lsl r2
     c08:	5f6c7864 	svcpl	0x006c7864
     c0c:	5f746567 	svcpl	0x00746567
     c10:	62776f6c 	rsbsvs	r6, r7, #432	; 0x1b0
     c14:	00657479 	rsbeq	r7, r5, r9, ror r4
     c18:	00000236 	andeq	r0, r0, r6, lsr r2
     c1c:	5f6c7864 	svcpl	0x006c7864
     c20:	5f746567 	svcpl	0x00746567
     c24:	68676968 	stmdavs	r7!, {r3, r5, r6, r8, fp, sp, lr}^
     c28:	65747962 	ldrbvs	r7, [r4, #-2402]!
     c2c:	00025c00 	andeq	r5, r2, r0, lsl #24
     c30:	6c786400 	cfldrdvs	mvd6, [r8]
     c34:	5f78725f 	svcpl	0x0078725f
     c38:	6b636170 	blvs	18d9200 <__Stack_Size+0x18d8e00>
     c3c:	b1007465 	tstlt	r0, r5, ror #8
     c40:	64000002 	strvs	r0, [r0], #-2
     c44:	745f6c78 	ldrbvc	r6, [pc], #3192	; c4c <__Stack_Size+0x84c>
     c48:	61705f78 	cmnvs	r0, r8, ror pc
     c4c:	74656b63 	strbtvc	r6, [r5], #-2915
     c50:	0002ff00 	andeq	pc, r2, r0, lsl #30
     c54:	6c786400 	cfldrdvs	mvd6, [r8]
     c58:	7278745f 	rsbsvc	r7, r8, #1593835520	; 0x5f000000
     c5c:	61705f78 	cmnvs	r0, r8, ror pc
     c60:	74656b63 	strbtvc	r6, [r5], #-2915
     c64:	00031400 	andeq	r1, r3, r0, lsl #8
     c68:	6c786400 	cfldrdvs	mvd6, [r8]
     c6c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     c70:	775f6574 	undefined
     c74:	0064726f 	rsbeq	r7, r4, pc, ror #4
     c78:	00000383 	andeq	r0, r0, r3, lsl #7
     c7c:	5f6c7864 	svcpl	0x006c7864
     c80:	64616572 	strbtvs	r6, [r1], #-1394
     c84:	726f775f 	rsbvc	r7, pc, #24903680	; 0x17c0000
     c88:	03ef0064 	mvneq	r0, #100	; 0x64
     c8c:	78640000 	stmdavc	r4!, {}^
     c90:	72775f6c 	rsbsvc	r5, r7, #432	; 0x1b0
     c94:	5f657469 	svcpl	0x00657469
     c98:	65747962 	ldrbvs	r7, [r4, #-2402]!
     c9c:	00043900 	andeq	r3, r4, r0, lsl #18
     ca0:	6c786400 	cfldrdvs	mvd6, [r8]
     ca4:	6165725f 	cmnvs	r5, pc, asr r2
     ca8:	79625f64 	stmdbvc	r2!, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     cac:	77006574 	smlsdxvc	r0, r4, r5, r6
     cb0:	64000004 	strvs	r0, [r0], #-4
     cb4:	705f6c78 	subsvc	r6, pc, r8, ror ip
     cb8:	00676e69 	rsbeq	r6, r7, r9, ror #28
     cbc:	000004a1 	andeq	r0, r0, r1, lsr #9
     cc0:	5f6c7864 	svcpl	0x006c7864
     cc4:	6d726574 	cfldr64vs	mvdx6, [r2, #-464]!
     cc8:	74616e69 	strbtvc	r6, [r1], #-3689
     ccc:	04b60065 	ldrteq	r0, [r6], #101
     cd0:	78640000 	stmdavc	r4!, {}^
     cd4:	6e695f6c 	cdpvs	15, 6, cr5, cr9, cr12, {3}
     cd8:	61697469 	cmnvs	r9, r9, ror #8
     cdc:	657a696c 	ldrbvs	r6, [sl, #-2412]!
     ce0:	00051000 	andeq	r1, r5, r0
     ce4:	49626700 	stmdbmi	r2!, {r8, r9, sl, sp, lr}^
     ce8:	7274736e 	rsbsvc	r7, r4, #-1207959551	; 0xb8000001
     cec:	69746375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
     cf0:	61506e6f 	cmpvs	r0, pc, ror #28
     cf4:	74656b63 	strbtvc	r6, [r5], #-2915
     cf8:	00053200 	andeq	r3, r5, r0, lsl #4
     cfc:	53626700 	cmnpl	r2, #0	; 0x0
     d00:	75746174 	ldrbvc	r6, [r4, #-372]!
     d04:	63615073 	cmnvs	r1, #115	; 0x73
     d08:	0074656b 	rsbseq	r6, r4, fp, ror #10
     d0c:	00000544 	andeq	r0, r0, r4, asr #10
     d10:	78526267 	ldmdavc	r2, {r0, r1, r2, r5, r6, r9, sp, lr}^
     d14:	6b636150 	blvs	18d925c <__Stack_Size+0x18d8e5c>
     d18:	654c7465 	strbvs	r7, [ip, #-1125]
     d1c:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     d20:	00055600 	andeq	r5, r5, r0, lsl #12
     d24:	52626700 	rsbpl	r6, r2, #0	; 0x0
     d28:	74654778 	strbtvc	r4, [r5], #-1912
     d2c:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     d30:	68006874 	stmdavs	r0, {r2, r4, r5, r6, fp, sp, lr}
     d34:	67000005 	strvs	r0, [r0, -r5]
     d38:	6d6f4362 	stclvs	3, cr4, [pc, #-392]!
     d3c:	6174536d 	cmnvs	r4, sp, ror #6
     d40:	00737574 	rsbseq	r7, r3, r4, ror r5
     d44:	0000057a 	andeq	r0, r0, sl, ror r5
     d48:	75426967 	strbvc	r6, [r2, #-2407]
     d4c:	69735573 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, sl, ip, lr}^
     d50:	0000676e 	andeq	r6, r0, lr, ror #14
     d54:	6a000000 	bvs	d5c <__Stack_Size+0x95c>
     d58:	02000002 	andeq	r0, r0, #2	; 0x2
     d5c:	001b4e00 	andseq	r4, fp, r0, lsl #28
     d60:	00073a00 	andeq	r3, r7, r0, lsl #20
     d64:	00023700 	andeq	r3, r2, r0, lsl #14
     d68:	414c4600 	cmpmi	ip, r0, lsl #12
     d6c:	535f4853 	cmppl	pc, #5439488	; 0x530000
     d70:	614c7465 	cmpvs	ip, r5, ror #8
     d74:	636e6574 	cmnvs	lr, #486539264	; 0x1d000000
     d78:	025e0079 	subseq	r0, lr, #121	; 0x79
     d7c:	4c460000 	marmi	acc0, r0, r6
     d80:	5f485341 	svcpl	0x00485341
     d84:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
     d88:	6c637943 	stclvs	9, cr7, [r3], #-268
     d8c:	63634165 	cmnvs	r3, #1073741849	; 0x40000019
     d90:	43737365 	cmnmi	r3, #-1811939327	; 0x94000001
     d94:	8500646d 	strhi	r6, [r0, #-1133]
     d98:	46000002 	strmi	r0, [r0], -r2
     d9c:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     da0:	6572505f 	ldrbvs	r5, [r2, #-95]!
     da4:	63746566 	cmnvs	r4, #427819008	; 0x19800000
     da8:	66754268 	ldrbtvs	r4, [r5], -r8, ror #4
     dac:	43726566 	cmnmi	r2, #427819008	; 0x19800000
     db0:	ac00646d 	cfstrsge	mvf6, [r0], {109}
     db4:	46000002 	strmi	r0, [r0], -r2
     db8:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     dbc:	6c6e555f 	cfstr64vs	mvdx5, [lr], #-380
     dc0:	006b636f 	rsbeq	r6, fp, pc, ror #6
     dc4:	000002bf 	strheq	r0, [r0], -pc
     dc8:	53414c46 	movtpl	r4, #7238	; 0x1c46
     dcc:	6f4c5f48 	svcvs	0x004c5f48
     dd0:	d2006b63 	andle	r6, r0, #101376	; 0x18c00
     dd4:	46000002 	strmi	r0, [r0], -r2
     dd8:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     ddc:	7465475f 	strbtvc	r4, [r5], #-1887
     de0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     de4:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
     de8:	79426e6f 	stmdbvc	r2, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     dec:	ea006574 	b	1a3c4 <__Stack_Size+0x19fc4>
     df0:	46000002 	strmi	r0, [r0], -r2
     df4:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     df8:	7465475f 	strbtvc	r4, [r5], #-1887
     dfc:	74697257 	strbtvc	r7, [r9], #-599
     e00:	6f725065 	svcvs	0x00725065
     e04:	74636574 	strbtvc	r6, [r3], #-1396
     e08:	4f6e6f69 	svcmi	0x006e6f69
     e0c:	6f697470 	svcvs	0x00697470
     e10:	7479426e 	ldrbtvc	r4, [r9], #-622
     e14:	03020065 	movweq	r0, #8293	; 0x2065
     e18:	4c460000 	marmi	acc0, r0, r6
     e1c:	5f485341 	svcpl	0x00485341
     e20:	52746547 	rsbspl	r6, r4, #297795584	; 0x11c00000
     e24:	4f646165 	svcmi	0x00646165
     e28:	72507475 	subsvc	r7, r0, #1962934272	; 0x75000000
     e2c:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
     e30:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     e34:	74617453 	strbtvc	r7, [r1], #-1107
     e38:	2b007375 	blcs	1dc14 <__Stack_Size+0x1d814>
     e3c:	46000003 	strmi	r0, [r0], -r3
     e40:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     e44:	7465475f 	strbtvc	r4, [r5], #-1887
     e48:	66657250 	undefined
     e4c:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     e50:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     e54:	74537265 	ldrbvc	r7, [r3], #-613
     e58:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     e5c:	00035400 	andeq	r5, r3, r0, lsl #8
     e60:	414c4600 	cmpmi	ip, r0, lsl #12
     e64:	495f4853 	ldmdbmi	pc, {r0, r1, r4, r6, fp, lr}^
     e68:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
     e6c:	00676966 	rsbeq	r6, r7, r6, ror #18
     e70:	00000389 	andeq	r0, r0, r9, lsl #7
     e74:	53414c46 	movtpl	r4, #7238	; 0x1c46
     e78:	65475f48 	strbvs	r5, [r7, #-3912]
     e7c:	616c4674 	smcvs	50276
     e80:	61745367 	cmnvs	r4, r7, ror #6
     e84:	00737574 	rsbseq	r7, r3, r4, ror r5
     e88:	000003c6 	andeq	r0, r0, r6, asr #7
     e8c:	53414c46 	movtpl	r4, #7238	; 0x1c46
     e90:	6c435f48 	mcrrvs	15, 4, r5, r3, cr8
     e94:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
     e98:	0067616c 	rsbeq	r6, r7, ip, ror #2
     e9c:	000003ed 	andeq	r0, r0, sp, ror #7
     ea0:	53414c46 	movtpl	r4, #7238	; 0x1c46
     ea4:	65475f48 	strbvs	r5, [r7, #-3912]
     ea8:	61745374 	cmnvs	r4, r4, ror r3
     eac:	00737574 	rsbseq	r7, r3, r4, ror r5
     eb0:	0000040a 	andeq	r0, r0, sl, lsl #8
     eb4:	53414c46 	movtpl	r4, #7238	; 0x1c46
     eb8:	61575f48 	cmpvs	r7, r8, asr #30
     ebc:	6f467469 	svcvs	0x00467469
     ec0:	73614c72 	cmnvc	r1, #29184	; 0x7200
     ec4:	65704f74 	ldrbvs	r4, [r0, #-3956]!
     ec8:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     ecc:	9d006e6f 	stcls	14, cr6, [r0, #-444]
     ed0:	46000004 	strmi	r0, [r0], -r4
     ed4:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     ed8:	6573555f 	ldrbvs	r5, [r3, #-1375]!
     edc:	74704f72 	ldrbtvc	r4, [r0], #-3954
     ee0:	426e6f69 	rsbmi	r6, lr, #420	; 0x1a4
     ee4:	43657479 	cmnmi	r5, #2030043136	; 0x79000000
     ee8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     eec:	04fc0067 	ldrbteq	r0, [ip], #103
     ef0:	4c460000 	marmi	acc0, r0, r6
     ef4:	5f485341 	svcpl	0x00485341
     ef8:	64616552 	strbtvs	r6, [r1], #-1362
     efc:	5074754f 	rsbspl	r7, r4, pc, asr #10
     f00:	65746f72 	ldrbvs	r6, [r4, #-3954]!
     f04:	6f697463 	svcvs	0x00697463
     f08:	053b006e 	ldreq	r0, [fp, #-110]!
     f0c:	4c460000 	marmi	acc0, r0, r6
     f10:	5f485341 	svcpl	0x00485341
     f14:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     f18:	7257656c 	subsvc	r6, r7, #452984832	; 0x1b000000
     f1c:	50657469 	rsbpl	r7, r5, r9, ror #8
     f20:	65746f72 	ldrbvs	r6, [r4, #-3954]!
     f24:	6f697463 	svcvs	0x00697463
     f28:	05ba006e 	ldreq	r0, [sl, #110]!
     f2c:	4c460000 	marmi	acc0, r0, r6
     f30:	5f485341 	svcpl	0x00485341
     f34:	676f7250 	undefined
     f38:	4f6d6172 	svcmi	0x006d6172
     f3c:	6f697470 	svcvs	0x00697470
     f40:	7479426e 	ldrbtvc	r4, [r9], #-622
     f44:	74614465 	strbtvc	r4, [r1], #-1125
     f48:	06090061 	streq	r0, [r9], -r1, rrx
     f4c:	4c460000 	marmi	acc0, r0, r6
     f50:	5f485341 	svcpl	0x00485341
     f54:	676f7250 	undefined
     f58:	486d6172 	stmdami	sp!, {r1, r4, r5, r6, r8, sp, lr}^
     f5c:	57666c61 	strbpl	r6, [r6, -r1, ror #24]!
     f60:	0064726f 	rsbeq	r7, r4, pc, ror #4
     f64:	00000658 	andeq	r0, r0, r8, asr r6
     f68:	53414c46 	movtpl	r4, #7238	; 0x1c46
     f6c:	72505f48 	subsvc	r5, r0, #288	; 0x120
     f70:	6172676f 	cmnvs	r2, pc, ror #14
     f74:	726f576d 	rsbvc	r5, pc, #28573696	; 0x1b40000
     f78:	06a70064 	strteq	r0, [r7], r4, rrx
     f7c:	4c460000 	marmi	acc0, r0, r6
     f80:	5f485341 	svcpl	0x00485341
     f84:	73617245 	cmnvc	r1, #1342177284	; 0x50000004
     f88:	74704f65 	ldrbtvc	r4, [r0], #-3941
     f8c:	426e6f69 	rsbmi	r6, lr, #420	; 0x1a4
     f90:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
     f94:	0006d400 	andeq	sp, r6, r0, lsl #8
     f98:	414c4600 	cmpmi	ip, r0, lsl #12
     f9c:	455f4853 	ldrbmi	r4, [pc, #-2131]	; 751 <__Stack_Size+0x351>
     fa0:	65736172 	ldrbvs	r6, [r3, #-370]!
     fa4:	506c6c41 	rsbpl	r6, ip, r1, asr #24
     fa8:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     fac:	00070100 	andeq	r0, r7, r0, lsl #2
     fb0:	414c4600 	cmpmi	ip, r0, lsl #12
     fb4:	455f4853 	ldrbmi	r4, [pc, #-2131]	; 769 <__Stack_Size+0x369>
     fb8:	65736172 	ldrbvs	r6, [r3, #-370]!
     fbc:	65676150 	strbvs	r6, [r7, #-336]!
     fc0:	00000000 	andeq	r0, r0, r0
     fc4:	00017700 	andeq	r7, r1, r0, lsl #14
     fc8:	88000200 	stmdahi	r0, {r9}
     fcc:	48000022 	stmdami	r0, {r1, r5}
     fd0:	2b000006 	blcs	ff0 <__Stack_Size+0xbf0>
     fd4:	47000002 	strmi	r0, [r0, -r2]
     fd8:	5f4f4950 	svcpl	0x004f4950
     fdc:	74696e49 	strbtvc	r6, [r9], #-3657
     fe0:	0002bb00 	andeq	fp, r2, r0, lsl #22
     fe4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     fe8:	74535f4f 	ldrbvc	r5, [r3], #-3919
     fec:	74637572 	strbtvc	r7, [r3], #-1394
     ff0:	74696e49 	strbtvc	r6, [r9], #-3657
     ff4:	0002e000 	andeq	lr, r2, r0
     ff8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     ffc:	65525f4f 	ldrbvs	r5, [r2, #-3919]
    1000:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    1004:	44747570 	ldrbtmi	r7, [r4], #-1392
    1008:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    100c:	23007469 	movwcs	r7, #1129	; 0x469
    1010:	47000003 	strmi	r0, [r0, -r3]
    1014:	5f4f4950 	svcpl	0x004f4950
    1018:	64616552 	strbtvs	r6, [r1], #-1362
    101c:	75706e49 	ldrbvc	r6, [r0, #-3657]!
    1020:	74614474 	strbtvc	r4, [r1], #-1140
    1024:	03500061 	cmpeq	r0, #97	; 0x61
    1028:	50470000 	subpl	r0, r7, r0
    102c:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1030:	4f646165 	svcmi	0x00646165
    1034:	75707475 	ldrbvc	r7, [r0, #-1141]!
    1038:	74614474 	strbtvc	r4, [r1], #-1140
    103c:	74694261 	strbtvc	r4, [r9], #-609
    1040:	00039700 	andeq	r9, r3, r0, lsl #14
    1044:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1048:	65525f4f 	ldrbvs	r5, [r2, #-3919]
    104c:	754f6461 	strbvc	r6, [pc, #-1121]	; bf3 <__Stack_Size+0x7f3>
    1050:	74757074 	ldrbtvc	r7, [r5], #-116
    1054:	61746144 	cmnvs	r4, r4, asr #2
    1058:	0003c400 	andeq	ip, r3, r0, lsl #8
    105c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1060:	65535f4f 	ldrbvs	r5, [r3, #-3919]
    1064:	74694274 	strbtvc	r4, [r9], #-628
    1068:	03f90073 	mvnseq	r0, #115	; 0x73
    106c:	50470000 	subpl	r0, r7, r0
    1070:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1074:	74657365 	strbtvc	r7, [r5], #-869
    1078:	73746942 	cmnvc	r4, #1081344	; 0x108000
    107c:	00042e00 	andeq	r2, r4, r0, lsl #28
    1080:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1084:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    1088:	42657469 	rsbmi	r7, r5, #1761607680	; 0x69000000
    108c:	71007469 	tstvc	r0, r9, ror #8
    1090:	47000004 	strmi	r0, [r0, -r4]
    1094:	5f4f4950 	svcpl	0x004f4950
    1098:	74697257 	strbtvc	r7, [r9], #-599
    109c:	04a60065 	strteq	r0, [r6], #101
    10a0:	50470000 	subpl	r0, r7, r0
    10a4:	505f4f49 	subspl	r4, pc, r9, asr #30
    10a8:	6f4c6e69 	svcvs	0x004c6e69
    10ac:	6f436b63 	svcvs	0x00436b63
    10b0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    10b4:	0004e900 	andeq	lr, r4, r0, lsl #18
    10b8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    10bc:	76455f4f 	strbvc	r5, [r5], -pc, asr #30
    10c0:	4f746e65 	svcmi	0x00746e65
    10c4:	75707475 	ldrbvc	r7, [r0, #-1141]!
    10c8:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    10cc:	00676966 	rsbeq	r6, r7, r6, ror #18
    10d0:	00000530 	andeq	r0, r0, r0, lsr r5
    10d4:	4f495047 	svcmi	0x00495047
    10d8:	6576455f 	ldrbvs	r4, [r6, #-1375]!
    10dc:	754f746e 	strbvc	r7, [pc, #-1134]	; c76 <__Stack_Size+0x876>
    10e0:	74757074 	ldrbtvc	r7, [r5], #-116
    10e4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    10e8:	00000557 	andeq	r0, r0, r7, asr r5
    10ec:	4f495047 	svcmi	0x00495047
    10f0:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    10f4:	616d6552 	cmnvs	sp, r2, asr r5
    10f8:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    10fc:	00676966 	rsbeq	r6, r7, r6, ror #18
    1100:	000005c6 	andeq	r0, r0, r6, asr #11
    1104:	4f495047 	svcmi	0x00495047
    1108:	5458455f 	ldrbpl	r4, [r8], #-1375
    110c:	6e694c49 	cdpvs	12, 6, cr4, cr9, cr9, {2}
    1110:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    1114:	00676966 	rsbeq	r6, r7, r6, ror #18
    1118:	0000060d 	andeq	r0, r0, sp, lsl #12
    111c:	4f495047 	svcmi	0x00495047
    1120:	4946415f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, lr}^
    1124:	4965444f 	stmdbmi	r5!, {r0, r1, r2, r3, r6, sl, lr}^
    1128:	0074696e 	rsbseq	r6, r4, lr, ror #18
    112c:	00000622 	andeq	r0, r0, r2, lsr #12
    1130:	4f495047 	svcmi	0x00495047
    1134:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1138:	0074696e 	rsbseq	r6, r4, lr, ror #18
    113c:	00000000 	andeq	r0, r0, r0
    1140:	0000035c 	andeq	r0, r0, ip, asr r3
    1144:	28d00002 	ldmcs	r0, {r1}^
    1148:	08e70000 	stmiaeq	r7!, {}^
    114c:	03100000 	tsteq	r0, #0	; 0x0
    1150:	564e0000 	strbpl	r0, [lr], -r0
    1154:	445f4349 	ldrbmi	r4, [pc], #841	; 115c <__Stack_Size+0xd5c>
    1158:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    115c:	03350074 	teqeq	r5, #116	; 0x74
    1160:	564e0000 	strbpl	r0, [lr], -r0
    1164:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1168:	65444243 	strbvs	r4, [r4, #-579]
    116c:	74696e49 	strbtvc	r6, [r9], #-3657
    1170:	00035800 	andeq	r5, r3, r0, lsl #16
    1174:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1178:	72505f43 	subsvc	r5, r0, #268	; 0x10c
    117c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1180:	72477974 	subvc	r7, r7, #1900544	; 0x1d0000
    1184:	4370756f 	cmnmi	r0, #465567744	; 0x1bc00000
    1188:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    118c:	037f0067 	cmneq	pc, #103	; 0x67
    1190:	564e0000 	strbpl	r0, [lr], -r0
    1194:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^
    1198:	0074696e 	rsbseq	r6, r4, lr, ror #18
    119c:	000003f1 	strdeq	r0, [r0], -r1
    11a0:	4349564e 	movtmi	r5, #38478	; 0x964e
    11a4:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    11a8:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    11ac:	0074696e 	rsbseq	r6, r4, lr, ror #18
    11b0:	00000416 	andeq	r0, r0, r6, lsl r4
    11b4:	4349564e 	movtmi	r5, #38478	; 0x964e
    11b8:	7465475f 	strbtvc	r4, [r5], #-1887
    11bc:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    11c0:	50746e65 	rsbspl	r6, r4, r5, ror #28
    11c4:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    11c8:	5249676e 	subpl	r6, r9, #28835840	; 0x1b80000
    11cc:	61684351 	cmnvs	r8, r1, asr r3
    11d0:	6c656e6e 	stclvs	14, cr6, [r5], #-440
    11d4:	00042e00 	andeq	r2, r4, r0, lsl #28
    11d8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    11dc:	65475f43 	strbvs	r5, [r7, #-3907]
    11e0:	51524974 	cmppl	r2, r4, ror r9
    11e4:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    11e8:	506c656e 	rsbpl	r6, ip, lr, ror #10
    11ec:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    11f0:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    11f4:	61745374 	cmnvs	r4, r4, ror r3
    11f8:	00737574 	rsbseq	r7, r3, r4, ror r5
    11fc:	00000475 	andeq	r0, r0, r5, ror r4
    1200:	4349564e 	movtmi	r5, #38478	; 0x964e
    1204:	7465535f 	strbtvc	r5, [r5], #-863
    1208:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    120c:	6e6e6168 	powvsez	f6, f6, #0.0
    1210:	65506c65 	ldrbvs	r6, [r0, #-3173]
    1214:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1218:	74694267 	strbtvc	r4, [r9], #-615
    121c:	00049c00 	andeq	r9, r4, r0, lsl #24
    1220:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1224:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    1228:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    122c:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    1230:	656e6e61 	strbvs	r6, [lr, #-3681]!
    1234:	6e65506c 	cdpvs	0, 6, cr5, cr5, cr12, {3}
    1238:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    123c:	00746942 	rsbseq	r6, r4, r2, asr #18
    1240:	000004c5 	andeq	r0, r0, r5, asr #9
    1244:	4349564e 	movtmi	r5, #38478	; 0x964e
    1248:	7465475f 	strbtvc	r4, [r5], #-1887
    124c:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    1250:	41746e65 	cmnmi	r4, r5, ror #28
    1254:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    1258:	6e614865 	cdpvs	8, 6, cr4, cr1, cr5, {3}
    125c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    1260:	0004dd00 	andeq	sp, r4, r0, lsl #26
    1264:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1268:	65475f43 	strbvs	r5, [r7, #-3907]
    126c:	51524974 	cmppl	r2, r4, ror r9
    1270:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1274:	416c656e 	cmnmi	ip, lr, ror #10
    1278:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    127c:	74694265 	strbtvc	r4, [r9], #-613
    1280:	74617453 	strbtvc	r7, [r1], #-1107
    1284:	24007375 	strcs	r7, [r0], #-885
    1288:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
    128c:	5f434956 	svcpl	0x00434956
    1290:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1294:	44495550 	strbmi	r5, [r9], #-1360
    1298:	00053c00 	andeq	r3, r5, r0, lsl #24
    129c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    12a0:	65535f43 	ldrbvs	r5, [r3, #-3907]
    12a4:	63655674 	cmnvs	r5, #121634816	; 0x7400000
    12a8:	54726f74 	ldrbtpl	r6, [r2], #-3956
    12ac:	656c6261 	strbvs	r6, [ip, #-609]!
    12b0:	00057300 	andeq	r7, r5, r0, lsl #6
    12b4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    12b8:	65475f43 	strbvs	r5, [r7, #-3907]
    12bc:	6172656e 	cmnvs	r2, lr, ror #10
    12c0:	79536574 	ldmdbvc	r3, {r2, r4, r5, r6, r8, sl, sp, lr}^
    12c4:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    12c8:	65736552 	ldrbvs	r6, [r3, #-1362]!
    12cc:	05870074 	streq	r0, [r7, #116]
    12d0:	564e0000 	strbpl	r0, [lr], -r0
    12d4:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    12d8:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    12dc:	43657461 	cmnmi	r5, #1627389952	; 0x61000000
    12e0:	5265726f 	rsbpl	r7, r5, #-268435450	; 0xf0000006
    12e4:	74657365 	strbtvc	r7, [r5], #-869
    12e8:	00059b00 	andeq	r9, r5, r0, lsl #22
    12ec:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    12f0:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    12f4:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    12f8:	6f43504c 	svcvs	0x0043504c
    12fc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1300:	0005d000 	andeq	sp, r5, r0
    1304:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1308:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    130c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    1310:	646e6148 	strbtvs	r6, [lr], #-328
    1314:	4372656c 	cmnmi	r2, #452984832	; 0x1b000000
    1318:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    131c:	06150067 	ldreq	r0, [r5], -r7, rrx
    1320:	564e0000 	strbpl	r0, [lr], -r0
    1324:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1328:	65747379 	ldrbvs	r7, [r4, #-889]!
    132c:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    1330:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    1334:	6f697250 	svcvs	0x00697250
    1338:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    133c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1340:	98006769 	stmdals	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    1344:	4e000006 	cdpmi	0, 0, cr0, cr0, cr6, {0}
    1348:	5f434956 	svcpl	0x00434956
    134c:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    1350:	65747379 	ldrbvs	r7, [r4, #-889]!
    1354:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    1358:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    135c:	646e6550 	strbtvs	r6, [lr], #-1360
    1360:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1364:	74537469 	ldrbvc	r7, [r3], #-1129
    1368:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    136c:	0006ed00 	andeq	lr, r6, r0, lsl #26
    1370:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1374:	65535f43 	ldrbvs	r5, [r3, #-3907]
    1378:	73795374 	cmnvc	r9, #-805306367	; 0xd0000001
    137c:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1380:	6c646e61 	stclvs	14, cr6, [r4], #-388
    1384:	65507265 	ldrbvs	r7, [r0, #-613]
    1388:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    138c:	74694267 	strbtvc	r4, [r9], #-615
    1390:	00072200 	andeq	r2, r7, r0, lsl #4
    1394:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1398:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    139c:	53726165 	cmnpl	r2, #1073741849	; 0x40000019
    13a0:	65747379 	ldrbvs	r7, [r4, #-889]!
    13a4:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    13a8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    13ac:	646e6550 	strbtvs	r6, [lr], #-1360
    13b0:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    13b4:	57007469 	strpl	r7, [r0, -r9, ror #8]
    13b8:	4e000007 	cdpmi	0, 0, cr0, cr0, cr7, {0}
    13bc:	5f434956 	svcpl	0x00434956
    13c0:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    13c4:	65747379 	ldrbvs	r7, [r4, #-889]!
    13c8:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    13cc:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    13d0:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    13d4:	69426576 	stmdbvs	r2, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    13d8:	61745374 	cmnvs	r4, r4, ror r3
    13dc:	00737574 	rsbseq	r7, r3, r4, ror r5
    13e0:	000007aa 	andeq	r0, r0, sl, lsr #15
    13e4:	4349564e 	movtmi	r5, #38478	; 0x964e
    13e8:	7465475f 	strbtvc	r4, [r5], #-1887
    13ec:	6c756146 	ldfvse	f6, [r5], #-280
    13f0:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
    13f4:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    13f8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    13fc:	00736563 	rsbseq	r6, r3, r3, ror #10
    1400:	00000807 	andeq	r0, r0, r7, lsl #16
    1404:	4349564e 	movtmi	r5, #38478	; 0x964e
    1408:	7465475f 	strbtvc	r4, [r5], #-1887
    140c:	6c756146 	ldfvse	f6, [r5], #-280
    1410:	64644174 	strbtvs	r4, [r4], #-372
    1414:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1418:	00085000 	andeq	r5, r8, r0
    141c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1420:	65475f43 	strbvs	r5, [r7, #-3907]
    1424:	53414274 	movtpl	r4, #4724	; 0x1274
    1428:	49525045 	ldmdbmi	r2, {r0, r2, r6, ip, lr}^
    142c:	00086900 	andeq	r6, r8, r0, lsl #18
    1430:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1434:	41425f43 	cmpmi	r2, r3, asr #30
    1438:	52504553 	subspl	r4, r0, #348127232	; 0x14c00000
    143c:	4e4f4349 	cdpmi	3, 4, cr4, cr15, cr9, {2}
    1440:	00474946 	subeq	r4, r7, r6, asr #18
    1444:	00000892 	muleq	r0, r2, r8
    1448:	4349564e 	movtmi	r5, #38478	; 0x964e
    144c:	5345525f 	movtpl	r5, #21087	; 0x525f
    1450:	41465445 	cmpmi	r6, r5, asr #8
    1454:	4d544c55 	ldclmi	12, cr4, [r4, #-340]
    1458:	004b5341 	subeq	r5, fp, r1, asr #6
    145c:	000008a7 	andeq	r0, r0, r7, lsr #17
    1460:	4349564e 	movtmi	r5, #38478	; 0x964e
    1464:	5445535f 	strbpl	r5, [r5], #-863
    1468:	4c554146 	ldfmie	f4, [r5], {70}
    146c:	53414d54 	movtpl	r4, #7508	; 0x1d54
    1470:	08bc004b 	ldmeq	ip!, {r0, r1, r3, r6}
    1474:	564e0000 	strbpl	r0, [lr], -r0
    1478:	525f4349 	subspl	r4, pc, #603979777	; 0x24000001
    147c:	54455345 	strbpl	r5, [r5], #-837
    1480:	4d495250 	sfmmi	f5, 2, [r9, #-320]
    1484:	004b5341 	subeq	r5, fp, r1, asr #6
    1488:	000008d1 	ldrdeq	r0, [r0], -r1
    148c:	4349564e 	movtmi	r5, #38478	; 0x964e
    1490:	5445535f 	strbpl	r5, [r5], #-863
    1494:	4d495250 	sfmmi	f5, 2, [r9, #-320]
    1498:	004b5341 	subeq	r5, fp, r1, asr #6
    149c:	00000000 	andeq	r0, r0, r0
    14a0:	000000c7 	andeq	r0, r0, r7, asr #1
    14a4:	31b70002 	undefined instruction 0x31b70002
    14a8:	02470000 	subeq	r0, r7, #0	; 0x0
    14ac:	00d30000 	sbcseq	r0, r3, r0
    14b0:	57500000 	ldrbpl	r0, [r0, -r0]
    14b4:	61425f52 	cmpvs	r2, r2, asr pc
    14b8:	70756b63 	rsbsvc	r6, r5, r3, ror #22
    14bc:	65636341 	strbvs	r6, [r3, #-833]!
    14c0:	6d437373 	stclvs	3, cr7, [r3, #-460]
    14c4:	00f80064 	rscseq	r0, r8, r4, rrx
    14c8:	57500000 	ldrbpl	r0, [r0, -r0]
    14cc:	56505f52 	usubaddxpl	r5, r0, r2
    14d0:	646d4344 	strbtvs	r4, [sp], #-836
    14d4:	00011d00 	andeq	r1, r1, r0, lsl #26
    14d8:	52575000 	subspl	r5, r7, #0	; 0x0
    14dc:	4456505f 	ldrbmi	r5, [r6], #-95
    14e0:	6576654c 	ldrbvs	r6, [r6, #-1356]!
    14e4:	6e6f436c 	cdpvs	3, 6, cr4, cr15, cr12, {3}
    14e8:	00676966 	rsbeq	r6, r7, r6, ror #18
    14ec:	00000153 	andeq	r0, r0, r3, asr r1
    14f0:	5f525750 	svcpl	0x00525750
    14f4:	656b6157 	strbvs	r6, [fp, #-343]!
    14f8:	69507055 	ldmdbvs	r0, {r0, r2, r4, r6, ip, sp, lr}^
    14fc:	646d436e 	strbtvs	r4, [sp], #-878
    1500:	00017800 	andeq	r7, r1, r0, lsl #16
    1504:	52575000 	subspl	r5, r7, #0	; 0x0
    1508:	7465475f 	strbtvc	r4, [r5], #-1887
    150c:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1510:	74617453 	strbtvc	r7, [r1], #-1107
    1514:	ae007375 	mcrge	3, 0, r7, cr0, cr5, {3}
    1518:	50000001 	andpl	r0, r0, r1
    151c:	435f5257 	cmpmi	pc, #1879048197	; 0x70000005
    1520:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    1524:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1528:	0001d500 	andeq	sp, r1, r0, lsl #10
    152c:	52575000 	subspl	r5, r7, #0	; 0x0
    1530:	746e455f 	strbtvc	r4, [lr], #-1375
    1534:	54537265 	ldrbpl	r7, [r3], #-613
    1538:	42444e41 	submi	r4, r4, #1040	; 0x410
    153c:	646f4d59 	strbtvs	r4, [pc], #3417	; 1544 <__Stack_Size+0x1144>
    1540:	01ea0065 	mvneq	r0, r5, rrx
    1544:	57500000 	ldrbpl	r0, [r0, -r0]
    1548:	6e455f52 	mcrvs	15, 2, r5, cr5, cr2, {2}
    154c:	53726574 	cmnpl	r2, #486539264	; 0x1d000000
    1550:	4d504f54 	ldclmi	15, cr4, [r0, #-336]
    1554:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1558:	00000231 	andeq	r0, r0, r1, lsr r2
    155c:	5f525750 	svcpl	0x00525750
    1560:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    1564:	00007469 	andeq	r7, r0, r9, ror #8
    1568:	c0000000 	andgt	r0, r0, r0
    156c:	02000002 	andeq	r0, r0, #2	; 0x2
    1570:	0033fe00 	eorseq	pc, r3, r0, lsl #28
    1574:	0008bd00 	andeq	fp, r8, r0, lsl #26
    1578:	00021400 	andeq	r1, r2, r0, lsl #8
    157c:	43435200 	movtmi	r5, #12800	; 0x3200
    1580:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1584:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1588:	00000227 	andeq	r0, r0, r7, lsr #4
    158c:	5f434352 	svcpl	0x00434352
    1590:	43455348 	movtmi	r5, #21320	; 0x5348
    1594:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1598:	024c0067 	subeq	r0, ip, #103	; 0x67
    159c:	43520000 	cmpmi	r2, #0	; 0x0
    15a0:	61575f43 	cmpvs	r7, r3, asr #30
    15a4:	6f467469 	svcvs	0x00467469
    15a8:	45534872 	ldrbmi	r4, [r3, #-2162]
    15ac:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    15b0:	00705574 	rsbseq	r5, r0, r4, ror r5
    15b4:	000002f1 	strdeq	r0, [r0], -r1
    15b8:	5f434352 	svcpl	0x00434352
    15bc:	756a6441 	strbvc	r6, [sl, #-1089]!
    15c0:	53487473 	movtpl	r7, #33907	; 0x8473
    15c4:	6c614349 	stclvs	3, cr4, [r1], #-292
    15c8:	61726269 	cmnvs	r2, r9, ror #4
    15cc:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    15d0:	756c6156 	strbvc	r6, [ip, #-342]!
    15d4:	03230065 	teqeq	r3, #101	; 0x65
    15d8:	43520000 	cmpmi	r2, #0	; 0x0
    15dc:	53485f43 	movtpl	r5, #36675	; 0x8f43
    15e0:	646d4349 	strbtvs	r4, [sp], #-841
    15e4:	00034a00 	andeq	r4, r3, r0, lsl #20
    15e8:	43435200 	movtmi	r5, #12800	; 0x3200
    15ec:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    15f0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    15f4:	91006769 	tstls	r0, r9, ror #14
    15f8:	52000003 	andpl	r0, r0, #3	; 0x3
    15fc:	505f4343 	subspl	r4, pc, r3, asr #6
    1600:	6d434c4c 	stclvs	12, cr4, [r3, #-304]
    1604:	03b80064 	undefined instruction 0x03b80064
    1608:	43520000 	cmpmi	r2, #0	; 0x0
    160c:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1610:	4b4c4353 	blmi	1312364 <__Stack_Size+0x1311f64>
    1614:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1618:	f1006769 	undefined instruction 0xf1006769
    161c:	52000003 	andpl	r0, r0, #3	; 0x3
    1620:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    1624:	59537465 	ldmdbpl	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1628:	4b4c4353 	blmi	131237c <__Stack_Size+0x1311f7c>
    162c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1630:	09006563 	stmdbeq	r0, {r0, r1, r5, r6, r8, sl, sp, lr}
    1634:	52000004 	andpl	r0, r0, #4	; 0x4
    1638:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^
    163c:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    1640:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1644:	04420067 	strbeq	r0, [r2], #-103
    1648:	43520000 	cmpmi	r2, #0	; 0x0
    164c:	43505f43 	cmpmi	r0, #268	; 0x10c
    1650:	43314b4c 	teqmi	r1, #77824	; 0x13000
    1654:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1658:	047b0067 	ldrbteq	r0, [fp], #-103
    165c:	43520000 	cmpmi	r2, #0	; 0x0
    1660:	43505f43 	cmpmi	r0, #268	; 0x10c
    1664:	43324b4c 	teqmi	r2, #77824	; 0x13000
    1668:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    166c:	04b00067 	ldrteq	r0, [r0], #103
    1670:	43520000 	cmpmi	r2, #0	; 0x0
    1674:	54495f43 	strbpl	r5, [r9], #-3907
    1678:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    167c:	e5006769 	str	r6, [r0, #-1897]
    1680:	52000004 	andpl	r0, r0, #4	; 0x4
    1684:	555f4343 	ldrbpl	r4, [pc, #-835]	; 1349 <__Stack_Size+0xf49>
    1688:	4c434253 	sfmmi	f4, 2, [r3], {83}
    168c:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1690:	00676966 	rsbeq	r6, r7, r6, ror #18
    1694:	0000050c 	andeq	r0, r0, ip, lsl #10
    1698:	5f434352 	svcpl	0x00434352
    169c:	43434441 	movtmi	r4, #13377	; 0x3441
    16a0:	6f434b4c 	svcvs	0x00434b4c
    16a4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    16a8:	00054500 	andeq	r4, r5, r0, lsl #10
    16ac:	43435200 	movtmi	r5, #12800	; 0x3200
    16b0:	45534c5f 	ldrbmi	r4, [r3, #-3167]
    16b4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    16b8:	6c006769 	stcvs	7, cr6, [r0], {105}
    16bc:	52000005 	andpl	r0, r0, #5	; 0x5
    16c0:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3
    16c4:	6d434953 	stclvs	9, cr4, [r3, #-332]
    16c8:	05930064 	ldreq	r0, [r3, #100]
    16cc:	43520000 	cmpmi	r2, #0	; 0x0
    16d0:	54525f43 	ldrbpl	r5, [r2], #-3907
    16d4:	4b4c4343 	blmi	13123e8 <__Stack_Size+0x1311fe8>
    16d8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    16dc:	bc006769 	stclt	7, cr6, [r0], {105}
    16e0:	52000005 	andpl	r0, r0, #5	; 0x5
    16e4:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
    16e8:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
    16ec:	646d434b 	strbtvs	r4, [sp], #-843
    16f0:	0005e300 	andeq	lr, r5, r0, lsl #6
    16f4:	43435200 	movtmi	r5, #12800	; 0x3200
    16f8:	7465475f 	strbtvc	r4, [r5], #-1887
    16fc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1700:	7246736b 	subvc	r7, r6, #-1409286143	; 0xac000001
    1704:	4a007165 	bmi	1dca0 <__Stack_Size+0x1d8a0>
    1708:	52000006 	andpl	r0, r0, #6	; 0x6
    170c:	415f4343 	cmpmi	pc, r3, asr #6
    1710:	65504248 	ldrbvs	r4, [r0, #-584]
    1714:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1718:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    171c:	646d436b 	strbtvs	r4, [sp], #-875
    1720:	00067f00 	andeq	r7, r6, r0, lsl #30
    1724:	43435200 	movtmi	r5, #12800	; 0x3200
    1728:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    172c:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1730:	43687069 	cmnmi	r8, #105	; 0x69
    1734:	6b636f6c 	blvs	18dd4ec <__Stack_Size+0x18dd0ec>
    1738:	00646d43 	rsbeq	r6, r4, r3, asr #26
    173c:	000006b4 	strheq	r0, [r0], -r4
    1740:	5f434352 	svcpl	0x00434352
    1744:	31425041 	cmpcc	r2, r1, asr #32
    1748:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    174c:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    1750:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    1754:	e900646d 	stmdb	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    1758:	52000006 	andpl	r0, r0, #6	; 0x6
    175c:	415f4343 	cmpmi	pc, r3, asr #6
    1760:	50324250 	eorspl	r4, r2, r0, asr r2
    1764:	70697265 	rsbvc	r7, r9, r5, ror #4
    1768:	73655268 	cmnvc	r5, #-2147483642	; 0x80000006
    176c:	6d437465 	cfstrdvs	mvd7, [r3, #-404]
    1770:	071e0064 	ldreq	r0, [lr, -r4, rrx]
    1774:	43520000 	cmpmi	r2, #0	; 0x0
    1778:	50415f43 	subpl	r5, r1, r3, asr #30
    177c:	65503142 	ldrbvs	r3, [r0, #-322]
    1780:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1784:	65736552 	ldrbvs	r6, [r3, #-1362]!
    1788:	646d4374 	strbtvs	r4, [sp], #-884
    178c:	00075300 	andeq	r5, r7, r0, lsl #6
    1790:	43435200 	movtmi	r5, #12800	; 0x3200
    1794:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
    1798:	5270756b 	rsbspl	r7, r0, #448790528	; 0x1ac00000
    179c:	74657365 	strbtvc	r7, [r5], #-869
    17a0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    17a4:	0000077a 	andeq	r0, r0, sl, ror r7
    17a8:	5f434352 	svcpl	0x00434352
    17ac:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    17b0:	6365536b 	cmnvs	r5, #-1409286143	; 0xac000001
    17b4:	74697275 	strbtvc	r7, [r9], #-629
    17b8:	73795379 	cmnvc	r9, #-469762047	; 0xe4000001
    17bc:	436d6574 	cmnmi	sp, #486539264	; 0x1d000000
    17c0:	a100646d 	tstge	r0, sp, ror #8
    17c4:	52000007 	andpl	r0, r0, #7	; 0x7
    17c8:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]
    17cc:	6f434f43 	svcvs	0x00434f43
    17d0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    17d4:	0007c800 	andeq	ip, r7, r0, lsl #16
    17d8:	43435200 	movtmi	r5, #12800	; 0x3200
    17dc:	7465475f 	strbtvc	r4, [r5], #-1887
    17e0:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    17e4:	74617453 	strbtvc	r7, [r1], #-1107
    17e8:	fc007375 	stc2	3, cr7, [r0], {117}
    17ec:	52000007 	andpl	r0, r0, #7	; 0x7
    17f0:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    17f4:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    17f8:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    17fc:	00081000 	andeq	r1, r8, r0
    1800:	43435200 	movtmi	r5, #12800	; 0x3200
    1804:	7465475f 	strbtvc	r4, [r5], #-1887
    1808:	74535449 	ldrbvc	r5, [r3], #-1097
    180c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1810:	00084900 	andeq	r4, r8, r0, lsl #18
    1814:	43435200 	movtmi	r5, #12800	; 0x3200
    1818:	656c435f 	strbvs	r4, [ip, #-863]!
    181c:	54497261 	strbpl	r7, [r9], #-609
    1820:	646e6550 	strbtvs	r6, [lr], #-1360
    1824:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1828:	00007469 	andeq	r7, r0, r9, ror #8
    182c:	9d000000 	stcls	0, cr0, [r0]
    1830:	02000000 	andeq	r0, r0, #0	; 0x0
    1834:	003cbb00 	eorseq	fp, ip, r0, lsl #22
    1838:	0001ef00 	andeq	lr, r1, r0, lsl #30
    183c:	0000f700 	andeq	pc, r0, r0, lsl #14
    1840:	73795300 	cmnvc	r9, #0	; 0x0
    1844:	6b636954 	blvs	18dbd9c <__Stack_Size+0x18db99c>
    1848:	4b4c435f 	blmi	13125cc <__Stack_Size+0x13121cc>
    184c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1850:	6f436563 	svcvs	0x00436563
    1854:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1858:	00011c00 	andeq	r1, r1, r0, lsl #24
    185c:	73795300 	cmnvc	r9, #0	; 0x0
    1860:	6b636954 	blvs	18dbdb8 <__Stack_Size+0x18db9b8>
    1864:	7465535f 	strbtvc	r5, [r5], #-863
    1868:	6f6c6552 	svcvs	0x006c6552
    186c:	41006461 	tstmi	r0, r1, ror #8
    1870:	53000001 	movwpl	r0, #1	; 0x1
    1874:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1878:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    187c:	746e756f 	strbtvc	r7, [lr], #-1391
    1880:	6d437265 	sfmvs	f7, 2, [r3, #-404]
    1884:	01660064 	cmneq	r6, r4, rrx
    1888:	79530000 	ldmdbvc	r3, {}^
    188c:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    1890:	54495f6b 	strbpl	r5, [r9], #-3947
    1894:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1898:	8b006769 	blhi	1b644 <__Stack_Size+0x1b244>
    189c:	53000001 	movwpl	r0, #1	; 0x1
    18a0:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    18a4:	475f6b63 	ldrbmi	r6, [pc, -r3, ror #22]
    18a8:	6f437465 	svcvs	0x00437465
    18ac:	65746e75 	ldrbvs	r6, [r4, #-3701]!
    18b0:	01a20072 	undefined instruction 0x01a20072
    18b4:	79530000 	ldmdbvc	r3, {}^
    18b8:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    18bc:	65475f6b 	strbvs	r5, [r7, #-3947]
    18c0:	616c4674 	smcvs	50276
    18c4:	61745367 	cmnvs	r4, r7, ror #6
    18c8:	00737574 	rsbseq	r7, r3, r4, ror r5
    18cc:	00000000 	andeq	r0, r0, r0
    18d0:	000007ac 	andeq	r0, r0, ip, lsr #15
    18d4:	3eaa0002 	cdpcc	0, 10, cr0, cr10, cr2, {0}
    18d8:	21490000 	cmpcs	r9, r0
    18dc:	07780000 	ldrbeq	r0, [r8, -r0]!
    18e0:	49540000 	ldmdbmi	r4, {}^
    18e4:	69545f4d 	ldmdbvs	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    18e8:	6142656d 	cmpvs	r2, sp, ror #10
    18ec:	6e496573 	mcrvs	5, 2, r6, cr9, cr3, {3}
    18f0:	b6007469 	strlt	r7, [r0], -r9, ror #8
    18f4:	54000007 	strpl	r0, [r0], #-7
    18f8:	4f5f4d49 	svcmi	0x005f4d49
    18fc:	6e493143 	dvfvsem	f3, f1, f3
    1900:	21007469 	tstcs	r0, r9, ror #8
    1904:	54000008 	strpl	r0, [r0], #-8
    1908:	4f5f4d49 	svcmi	0x005f4d49
    190c:	6e493243 	cdpvs	2, 4, cr3, cr9, cr3, {2}
    1910:	8c007469 	cfstrshi	mvf7, [r0], {105}
    1914:	54000008 	strpl	r0, [r0], #-8
    1918:	4f5f4d49 	svcmi	0x005f4d49
    191c:	6e493343 	cdpvs	3, 4, cr3, cr9, cr3, {2}
    1920:	f7007469 	undefined instruction 0xf7007469
    1924:	54000008 	strpl	r0, [r0], #-8
    1928:	4f5f4d49 	svcmi	0x005f4d49
    192c:	6e493443 	cdpvs	4, 4, cr3, cr9, cr3, {2}
    1930:	62007469 	andvs	r7, r0, #1761607680	; 0x69000000
    1934:	54000009 	strpl	r0, [r0], #-9
    1938:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^
    193c:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
    1940:	0b2e0074 	bleq	b81b18 <__Stack_Size+0xb81718>
    1944:	49540000 	ldmdbmi	r4, {}^
    1948:	57505f4d 	ldrbpl	r5, [r0, -sp, asr #30]
    194c:	6f43494d 	svcvs	0x0043494d
    1950:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1954:	000d1700 	andeq	r1, sp, r0, lsl #14
    1958:	4d495400 	cfstrdmi	mvd5, [r9]
    195c:	5444425f 	strbpl	r4, [r4], #-607
    1960:	6e6f4352 	mcrvs	3, 3, r4, cr15, cr2, {2}
    1964:	00676966 	rsbeq	r6, r7, r6, ror #18
    1968:	00000d52 	andeq	r0, r0, r2, asr sp
    196c:	5f4d4954 	svcpl	0x004d4954
    1970:	656d6954 	strbvs	r6, [sp, #-2388]!
    1974:	65736142 	ldrbvs	r6, [r3, #-322]!
    1978:	75727453 	ldrbvc	r7, [r2, #-1107]!
    197c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    1980:	79007469 	stmdbvc	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    1984:	5400000d 	strpl	r0, [r0], #-13
    1988:	4f5f4d49 	svcmi	0x005f4d49
    198c:	72745343 	rsbsvc	r5, r4, #201326593	; 0xc000001
    1990:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    1994:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1998:	00000da0 	andeq	r0, r0, r0, lsr #27
    199c:	5f4d4954 	svcpl	0x004d4954
    19a0:	74534349 	ldrbvc	r4, [r3], #-841
    19a4:	74637572 	strbtvc	r7, [r3], #-1394
    19a8:	74696e49 	strbtvc	r6, [r9], #-3657
    19ac:	000dc700 	andeq	ip, sp, r0, lsl #14
    19b0:	4d495400 	cfstrdmi	mvd5, [r9]
    19b4:	5444425f 	strbpl	r4, [r4], #-607
    19b8:	72745352 	rsbsvc	r5, r4, #1207959553	; 0x48000001
    19bc:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    19c0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    19c4:	00000dee 	andeq	r0, r0, lr, ror #27
    19c8:	5f4d4954 	svcpl	0x004d4954
    19cc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    19d0:	00000e23 	andeq	r0, r0, r3, lsr #28
    19d4:	5f4d4954 	svcpl	0x004d4954
    19d8:	6c727443 	cfldrdvs	mvd7, [r2], #-268
    19dc:	4f4d5750 	svcmi	0x004d5750
    19e0:	75707475 	ldrbvc	r7, [r0, #-1141]!
    19e4:	58007374 	stmdapl	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    19e8:	5400000e 	strpl	r0, [r0], #-14
    19ec:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^
    19f0:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    19f4:	00676966 	rsbeq	r6, r7, r6, ror #18
    19f8:	00000e9b 	muleq	r0, fp, lr
    19fc:	5f4d4954 	svcpl	0x004d4954
    1a00:	656e6547 	strbvs	r6, [lr, #-1351]!
    1a04:	65746172 	ldrbvs	r6, [r4, #-370]!
    1a08:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    1a0c:	0ed00074 	mrceq	0, 6, r0, cr0, cr4, {3}
    1a10:	49540000 	ldmdbmi	r4, {}^
    1a14:	4d445f4d 	stclmi	15, cr5, [r4, #-308]
    1a18:	6e6f4341 	cdpvs	3, 6, cr4, cr15, cr1, {2}
    1a1c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1a20:	00000f15 	andeq	r0, r0, r5, lsl pc
    1a24:	5f4d4954 	svcpl	0x004d4954
    1a28:	43414d44 	movtmi	r4, #7492	; 0x1d44
    1a2c:	5800646d 	stmdapl	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    1a30:	5400000f 	strpl	r0, [r0], #-15
    1a34:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^
    1a38:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1a3c:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    1a40:	6b636f6c 	blvs	18dd7f8 <__Stack_Size+0x18dd3f8>
    1a44:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1a48:	7f006769 	svcvc	0x00006769
    1a4c:	5400000f 	strpl	r0, [r0], #-15
    1a50:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^
    1a54:	45785254 	ldrbmi	r5, [r8, #-596]!
    1a58:	72657478 	rsbvc	r7, r5, #2013265920	; 0x78000000
    1a5c:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    1a60:	6b636f6c 	blvs	18dd818 <__Stack_Size+0x18dd418>
    1a64:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1a68:	e4006769 	str	r6, [r0], #-1897
    1a6c:	5400000f 	strpl	r0, [r0], #-15
    1a70:	545f4d49 	ldrbpl	r4, [pc], #3401	; 1a78 <__Stack_Size+0x1678>
    1a74:	78457849 	stmdavc	r5, {r0, r3, r6, fp, ip, sp, lr}^
    1a78:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    1a7c:	6c436c61 	mcrrvs	12, 6, r6, r3, cr1
    1a80:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    1a84:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1a88:	10f80067 	rscsne	r0, r8, r7, rrx
    1a8c:	49540000 	ldmdbmi	r4, {}^
    1a90:	54455f4d 	strbpl	r5, [r5], #-3917
    1a94:	6f6c4352 	svcvs	0x006c4352
    1a98:	6f4d6b63 	svcvs	0x004d6b63
    1a9c:	43316564 	teqmi	r1, #419430400	; 0x19000000
    1aa0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1aa4:	11930067 	orrsne	r0, r3, r7, rrx
    1aa8:	49540000 	ldmdbmi	r4, {}^
    1aac:	54455f4d 	strbpl	r5, [r5], #-3917
    1ab0:	6f6c4352 	svcvs	0x006c4352
    1ab4:	6f4d6b63 	svcvs	0x004d6b63
    1ab8:	43326564 	teqmi	r2, #419430400	; 0x19000000
    1abc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1ac0:	12200067 	eorne	r0, r0, #103	; 0x67
    1ac4:	49540000 	ldmdbmi	r4, {}^
    1ac8:	54455f4d 	strbpl	r5, [r5], #-3917
    1acc:	6e6f4352 	mcrvs	3, 3, r4, cr15, cr2, {2}
    1ad0:	00676966 	rsbeq	r6, r7, r6, ror #18
    1ad4:	0000125b 	andeq	r1, r0, fp, asr r2
    1ad8:	5f4d4954 	svcpl	0x004d4954
    1adc:	73657250 	cmnvc	r5, #5	; 0x5
    1ae0:	656c6163 	strbvs	r6, [ip, #-355]!
    1ae4:	6e6f4372 	mcrvs	3, 3, r4, cr15, cr2, {3}
    1ae8:	00676966 	rsbeq	r6, r7, r6, ror #18
    1aec:	0000129e 	muleq	r0, lr, r2
    1af0:	5f4d4954 	svcpl	0x004d4954
    1af4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1af8:	4d726574 	cfldr64mi	mvdx6, [r2, #-464]!
    1afc:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    1b00:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1b04:	12e50067 	rscne	r0, r5, #103	; 0x67
    1b08:	49540000 	ldmdbmi	r4, {}^
    1b0c:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    1b10:	7463656c 	strbtvc	r6, [r3], #-1388
    1b14:	75706e49 	ldrbvc	r6, [r0, #-3657]!
    1b18:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1b1c:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    1b20:	00131200 	andseq	r1, r3, r0, lsl #4
    1b24:	4d495400 	cfstrdmi	mvd5, [r9]
    1b28:	636e455f 	cmnvs	lr, #398458880	; 0x17c00000
    1b2c:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
    1b30:	65746e49 	ldrbvs	r6, [r4, #-3657]!
    1b34:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    1b38:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    1b3c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1b40:	00001395 	muleq	r0, r5, r3
    1b44:	5f4d4954 	svcpl	0x004d4954
    1b48:	63726f46 	cmnvs	r2, #280	; 0x118
    1b4c:	434f6465 	movtmi	r6, #62565	; 0xf465
    1b50:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
    1b54:	00676966 	rsbeq	r6, r7, r6, ror #18
    1b58:	000013dc 	ldrdeq	r1, [r0], -ip
    1b5c:	5f4d4954 	svcpl	0x004d4954
    1b60:	63726f46 	cmnvs	r2, #280	; 0x118
    1b64:	434f6465 	movtmi	r6, #62565	; 0xf465
    1b68:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    1b6c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1b70:	00001421 	andeq	r1, r0, r1, lsr #8
    1b74:	5f4d4954 	svcpl	0x004d4954
    1b78:	63726f46 	cmnvs	r2, #280	; 0x118
    1b7c:	434f6465 	movtmi	r6, #62565	; 0xf465
    1b80:	6e6f4333 	mcrvs	3, 3, r4, cr15, cr3, {1}
    1b84:	00676966 	rsbeq	r6, r7, r6, ror #18
    1b88:	00001468 	andeq	r1, r0, r8, ror #8
    1b8c:	5f4d4954 	svcpl	0x004d4954
    1b90:	63726f46 	cmnvs	r2, #280	; 0x118
    1b94:	434f6465 	movtmi	r6, #62565	; 0xf465
    1b98:	6e6f4334 	mcrvs	3, 3, r4, cr15, cr4, {1}
    1b9c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1ba0:	000014ad 	andeq	r1, r0, sp, lsr #9
    1ba4:	5f4d4954 	svcpl	0x004d4954
    1ba8:	50525241 	subspl	r5, r2, r1, asr #4
    1bac:	6f6c6572 	svcvs	0x006c6572
    1bb0:	6f436461 	svcvs	0x00436461
    1bb4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1bb8:	0014e200 	andseq	lr, r4, r0, lsl #4
    1bbc:	4d495400 	cfstrdmi	mvd5, [r9]
    1bc0:	6c65535f 	stclvs	3, cr5, [r5], #-380
    1bc4:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
    1bc8:	17004d4f 	strne	r4, [r0, -pc, asr #26]
    1bcc:	54000015 	strpl	r0, [r0], #-21
    1bd0:	535f4d49 	cmppl	pc, #4672	; 0x1240
    1bd4:	63656c65 	cmnvs	r5, #25856	; 0x6500
    1bd8:	44434374 	strbmi	r4, [r3], #-884
    1bdc:	4c00414d 	stfmis	f4, [r0], {77}
    1be0:	54000015 	strpl	r0, [r0], #-21
    1be4:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    1be8:	65725043 	ldrbvs	r5, [r2, #-67]!
    1bec:	64616f6c 	strbtvs	r6, [r1], #-3948
    1bf0:	746e6f43 	strbtvc	r6, [lr], #-3907
    1bf4:	006c6f72 	rsbeq	r6, ip, r2, ror pc
    1bf8:	00001581 	andeq	r1, r0, r1, lsl #11
    1bfc:	5f4d4954 	svcpl	0x004d4954
    1c00:	5031434f 	eorspl	r4, r1, pc, asr #6
    1c04:	6f6c6572 	svcvs	0x006c6572
    1c08:	6f436461 	svcvs	0x00436461
    1c0c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1c10:	0015c800 	andseq	ip, r5, r0, lsl #16
    1c14:	4d495400 	cfstrdmi	mvd5, [r9]
    1c18:	32434f5f 	subcc	r4, r3, #380	; 0x17c
    1c1c:	6c657250 	sfmvs	f7, 2, [r5], #-320
    1c20:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    1c24:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1c28:	160d0067 	strne	r0, [sp], -r7, rrx
    1c2c:	49540000 	ldmdbmi	r4, {}^
    1c30:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1c34:	65725033 	ldrbvs	r5, [r2, #-51]!
    1c38:	64616f6c 	strbtvs	r6, [r1], #-3948
    1c3c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1c40:	54006769 	strpl	r6, [r0], #-1897
    1c44:	54000016 	strpl	r0, [r0], #-22
    1c48:	4f5f4d49 	svcmi	0x005f4d49
    1c4c:	72503443 	subsvc	r3, r0, #1124073472	; 0x43000000
    1c50:	616f6c65 	cmnvs	pc, r5, ror #24
    1c54:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    1c58:	00676966 	rsbeq	r6, r7, r6, ror #18
    1c5c:	00001699 	muleq	r0, r9, r6
    1c60:	5f4d4954 	svcpl	0x004d4954
    1c64:	4631434f 	ldrtmi	r4, [r1], -pc, asr #6
    1c68:	43747361 	cmnmi	r4, #-2080374783	; 0x84000001
    1c6c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1c70:	16e00067 	strbtne	r0, [r0], r7, rrx
    1c74:	49540000 	ldmdbmi	r4, {}^
    1c78:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1c7c:	73614632 	cmnvc	r1, #52428800	; 0x3200000
    1c80:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    1c84:	00676966 	rsbeq	r6, r7, r6, ror #18
    1c88:	00001725 	andeq	r1, r0, r5, lsr #14
    1c8c:	5f4d4954 	svcpl	0x004d4954
    1c90:	4633434f 	ldrtmi	r4, [r3], -pc, asr #6
    1c94:	43747361 	cmnmi	r4, #-2080374783	; 0x84000001
    1c98:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1c9c:	176c0067 	strbne	r0, [ip, -r7, rrx]!
    1ca0:	49540000 	ldmdbmi	r4, {}^
    1ca4:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1ca8:	73614634 	cmnvc	r1, #54525952	; 0x3400000
    1cac:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    1cb0:	00676966 	rsbeq	r6, r7, r6, ror #18
    1cb4:	000017b1 	strheq	r1, [r0], -r1
    1cb8:	5f4d4954 	svcpl	0x004d4954
    1cbc:	61656c43 	cmnvs	r5, r3, asr #24
    1cc0:	31434f72 	cmpcc	r3, r2, ror pc
    1cc4:	00666552 	rsbeq	r6, r6, r2, asr r5
    1cc8:	000017f8 	strdeq	r1, [r0], -r8
    1ccc:	5f4d4954 	svcpl	0x004d4954
    1cd0:	61656c43 	cmnvs	r5, r3, asr #24
    1cd4:	32434f72 	subcc	r4, r3, #456	; 0x1c8
    1cd8:	00666552 	rsbeq	r6, r6, r2, asr r5
    1cdc:	0000183d 	andeq	r1, r0, sp, lsr r8
    1ce0:	5f4d4954 	svcpl	0x004d4954
    1ce4:	61656c43 	cmnvs	r5, r3, asr #24
    1ce8:	33434f72 	movtcc	r4, #16242	; 0x3f72
    1cec:	00666552 	rsbeq	r6, r6, r2, asr r5
    1cf0:	00001884 	andeq	r1, r0, r4, lsl #17
    1cf4:	5f4d4954 	svcpl	0x004d4954
    1cf8:	61656c43 	cmnvs	r5, r3, asr #24
    1cfc:	34434f72 	strbcc	r4, [r3], #-3954
    1d00:	00666552 	rsbeq	r6, r6, r2, asr r5
    1d04:	000018c9 	andeq	r1, r0, r9, asr #17
    1d08:	5f4d4954 	svcpl	0x004d4954
    1d0c:	5031434f 	eorspl	r4, r1, pc, asr #6
    1d10:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    1d14:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    1d18:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1d1c:	19100067 	ldmdbne	r0, {r0, r1, r2, r5, r6}
    1d20:	49540000 	ldmdbmi	r4, {}^
    1d24:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1d28:	6f504e31 	svcvs	0x00504e31
    1d2c:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    1d30:	6f437974 	svcvs	0x00437974
    1d34:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1d38:	00195700 	andseq	r5, r9, r0, lsl #14
    1d3c:	4d495400 	cfstrdmi	mvd5, [r9]
    1d40:	32434f5f 	subcc	r4, r3, #380	; 0x17c
    1d44:	616c6f50 	cmnvs	ip, r0, asr pc
    1d48:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1d4c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1d50:	9c006769 	stcls	7, cr6, [r0], {105}
    1d54:	54000019 	strpl	r0, [r0], #-25
    1d58:	4f5f4d49 	svcmi	0x005f4d49
    1d5c:	504e3243 	subpl	r3, lr, r3, asr #4
    1d60:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    1d64:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    1d68:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1d6c:	19e10067 	stmibne	r1!, {r0, r1, r2, r5, r6}^
    1d70:	49540000 	ldmdbmi	r4, {}^
    1d74:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1d78:	6c6f5033 	stclvs	0, cr5, [pc], #-204
    1d7c:	74697261 	strbtvc	r7, [r9], #-609
    1d80:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    1d84:	00676966 	rsbeq	r6, r7, r6, ror #18
    1d88:	00001a26 	andeq	r1, r0, r6, lsr #20
    1d8c:	5f4d4954 	svcpl	0x004d4954
    1d90:	4e33434f 	cdpmi	3, 3, cr4, cr3, cr15, {2}
    1d94:	616c6f50 	cmnvs	ip, r0, asr pc
    1d98:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1d9c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1da0:	6b006769 	blvs	1bb4c <__Stack_Size+0x1b74c>
    1da4:	5400001a 	strpl	r0, [r0], #-26
    1da8:	4f5f4d49 	svcmi	0x005f4d49
    1dac:	6f503443 	svcvs	0x00503443
    1db0:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    1db4:	6f437974 	svcvs	0x00437974
    1db8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1dbc:	001ab000 	andseq	fp, sl, r0
    1dc0:	4d495400 	cfstrdmi	mvd5, [r9]
    1dc4:	7843435f 	stmdavc	r3, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    1dc8:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1dcc:	00001af5 	strdeq	r1, [r0], -r5
    1dd0:	5f4d4954 	svcpl	0x004d4954
    1dd4:	4e784343 	cdpmi	3, 7, cr4, cr8, cr3, {2}
    1dd8:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1ddc:	00001b3a 	andeq	r1, r0, sl, lsr fp
    1de0:	5f4d4954 	svcpl	0x004d4954
    1de4:	656c6553 	strbvs	r6, [ip, #-1363]!
    1de8:	434f7463 	movtmi	r7, #62563	; 0xf463
    1dec:	85004d78 	strhi	r4, [r0, #-3448]
    1df0:	5400001b 	strpl	r0, [r0], #-27
    1df4:	555f4d49 	ldrbpl	r4, [pc, #-3401]	; 10b3 <__Stack_Size+0xcb3>
    1df8:	74616470 	strbtvc	r6, [r1], #-1136
    1dfc:	73694465 	cmnvc	r9, #1694498816	; 0x65000000
    1e00:	656c6261 	strbvs	r6, [ip, #-609]!
    1e04:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1e08:	ba006769 	blt	1bbb4 <__Stack_Size+0x1b7b4>
    1e0c:	5400001b 	strpl	r0, [r0], #-27
    1e10:	555f4d49 	ldrbpl	r4, [pc, #-3401]	; 10cf <__Stack_Size+0xccf>
    1e14:	74616470 	strbtvc	r6, [r1], #-1136
    1e18:	71655265 	cmnvc	r5, r5, ror #4
    1e1c:	74736575 	ldrbtvc	r6, [r3], #-1397
    1e20:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1e24:	ef006769 	svc	0x00006769
    1e28:	5400001b 	strpl	r0, [r0], #-27
    1e2c:	535f4d49 	cmppl	pc, #4672	; 0x1240
    1e30:	63656c65 	cmnvs	r5, #25856	; 0x6500
    1e34:	6c614874 	stclvs	8, cr4, [r1], #-464
    1e38:	6e65536c 	cdpvs	3, 6, cr5, cr5, cr12, {3}
    1e3c:	00726f73 	rsbseq	r6, r2, r3, ror pc
    1e40:	00001c24 	andeq	r1, r0, r4, lsr #24
    1e44:	5f4d4954 	svcpl	0x004d4954
    1e48:	656c6553 	strbvs	r6, [ip, #-1363]!
    1e4c:	6e4f7463 	cdpvs	4, 4, cr7, cr15, cr3, {3}
    1e50:	6c755065 	ldclvs	0, cr5, [r5], #-404
    1e54:	6f4d6573 	svcvs	0x004d6573
    1e58:	5b006564 	blpl	1b3f0 <__Stack_Size+0x1aff0>
    1e5c:	5400001c 	strpl	r0, [r0], #-28
    1e60:	535f4d49 	cmppl	pc, #4672	; 0x1240
    1e64:	63656c65 	cmnvs	r5, #25856	; 0x6500
    1e68:	74754f74 	ldrbtvc	r4, [r5], #-3956
    1e6c:	54747570 	ldrbtpl	r7, [r4], #-1392
    1e70:	67676972 	undefined
    1e74:	92007265 	andls	r7, r0, #1342177286	; 0x50000006
    1e78:	5400001c 	strpl	r0, [r0], #-28
    1e7c:	535f4d49 	cmppl	pc, #4672	; 0x1240
    1e80:	63656c65 	cmnvs	r5, #25856	; 0x6500
    1e84:	616c5374 	smcvs	50484
    1e88:	6f4d6576 	svcvs	0x004d6576
    1e8c:	c9006564 	stmdbgt	r0, {r2, r5, r6, r8, sl, sp, lr}
    1e90:	5400001c 	strpl	r0, [r0], #-28
    1e94:	535f4d49 	cmppl	pc, #4672	; 0x1240
    1e98:	63656c65 	cmnvs	r5, #25856	; 0x6500
    1e9c:	73614d74 	cmnvc	r1, #7424	; 0x1d00
    1ea0:	53726574 	cmnpl	r2, #486539264	; 0x1d000000
    1ea4:	6576616c 	ldrbvs	r6, [r6, #-364]!
    1ea8:	65646f4d 	strbvs	r6, [r4, #-3917]!
    1eac:	001d0000 	andseq	r0, sp, r0
    1eb0:	4d495400 	cfstrdmi	mvd5, [r9]
    1eb4:	7465535f 	strbtvc	r5, [r5], #-863
    1eb8:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1ebc:	00726574 	rsbseq	r6, r2, r4, ror r5
    1ec0:	00001d35 	andeq	r1, r0, r5, lsr sp
    1ec4:	5f4d4954 	svcpl	0x004d4954
    1ec8:	41746553 	cmnmi	r4, r3, asr r5
    1ecc:	726f7475 	rsbvc	r7, pc, #1962934272	; 0x75000000
    1ed0:	616f6c65 	cmnvs	pc, r5, ror #24
    1ed4:	1d6a0064 	stclne	0, cr0, [sl, #-400]!
    1ed8:	49540000 	ldmdbmi	r4, {}^
    1edc:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    1ee0:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!
    1ee4:	65726170 	ldrbvs	r6, [r2, #-368]!
    1ee8:	1d9f0031 	ldcne	0, cr0, [pc, #196]
    1eec:	49540000 	ldmdbmi	r4, {}^
    1ef0:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    1ef4:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!
    1ef8:	65726170 	ldrbvs	r6, [r2, #-368]!
    1efc:	1dd40032 	ldclne	0, cr0, [r4, #200]
    1f00:	49540000 	ldmdbmi	r4, {}^
    1f04:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    1f08:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!
    1f0c:	65726170 	ldrbvs	r6, [r2, #-368]!
    1f10:	1e090033 	mcrne	0, 0, r0, cr9, cr3, {1}
    1f14:	49540000 	ldmdbmi	r4, {}^
    1f18:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    1f1c:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!
    1f20:	65726170 	ldrbvs	r6, [r2, #-368]!
    1f24:	1e3e0034 	mrcne	0, 1, r0, cr14, cr4, {1}
    1f28:	49540000 	ldmdbmi	r4, {}^
    1f2c:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    1f30:	31434974 	cmpcc	r3, r4, ror r9
    1f34:	73657250 	cmnvc	r5, #5	; 0x5
    1f38:	656c6163 	strbvs	r6, [ip, #-355]!
    1f3c:	1e620072 	mcrne	0, 3, r0, cr2, cr2, {3}
    1f40:	49540000 	ldmdbmi	r4, {}^
    1f44:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    1f48:	32434974 	subcc	r4, r3, #1900544	; 0x1d0000
    1f4c:	73657250 	cmnvc	r5, #5	; 0x5
    1f50:	656c6163 	strbvs	r6, [ip, #-355]!
    1f54:	1e840072 	mcrne	0, 4, r0, cr4, cr2, {3}
    1f58:	49540000 	ldmdbmi	r4, {}^
    1f5c:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    1f60:	33434974 	movtcc	r4, #14708	; 0x3974
    1f64:	73657250 	cmnvc	r5, #5	; 0x5
    1f68:	656c6163 	strbvs	r6, [ip, #-355]!
    1f6c:	1ea80072 	mcrne	0, 5, r0, cr8, cr2, {3}
    1f70:	49540000 	ldmdbmi	r4, {}^
    1f74:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    1f78:	34434974 	strbcc	r4, [r3], #-2420
    1f7c:	73657250 	cmnvc	r5, #5	; 0x5
    1f80:	656c6163 	strbvs	r6, [ip, #-355]!
    1f84:	1eca0072 	mcrne	0, 6, r0, cr10, cr2, {3}
    1f88:	49540000 	ldmdbmi	r4, {}^
    1f8c:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    1f90:	6f6c4374 	svcvs	0x006c4374
    1f94:	69446b63 	stmdbvs	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    1f98:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    1f9c:	01006e6f 	tsteq	r0, pc, ror #28
    1fa0:	5400001f 	strpl	r0, [r0], #-31
    1fa4:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    1fa8:	61437465 	cmpvs	r3, r5, ror #8
    1fac:	72757470 	rsbsvc	r7, r5, #1879048192	; 0x70000000
    1fb0:	2e003165 	adfcssz	f3, f0, f5
    1fb4:	5400001f 	strpl	r0, [r0], #-31
    1fb8:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    1fbc:	61437465 	cmpvs	r3, r5, ror #8
    1fc0:	72757470 	rsbsvc	r7, r5, #1879048192	; 0x70000000
    1fc4:	5b003265 	blpl	e960 <__Stack_Size+0xe560>
    1fc8:	5400001f 	strpl	r0, [r0], #-31
    1fcc:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    1fd0:	61437465 	cmpvs	r3, r5, ror #8
    1fd4:	72757470 	rsbsvc	r7, r5, #1879048192	; 0x70000000
    1fd8:	88003365 	stmdahi	r0, {r0, r2, r5, r6, r8, r9, ip, sp}
    1fdc:	5400001f 	strpl	r0, [r0], #-31
    1fe0:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    1fe4:	61437465 	cmpvs	r3, r5, ror #8
    1fe8:	72757470 	rsbsvc	r7, r5, #1879048192	; 0x70000000
    1fec:	b5003465 	strlt	r3, [r0, #-1125]
    1ff0:	5400001f 	strpl	r0, [r0], #-31
    1ff4:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    1ff8:	6f437465 	svcvs	0x00437465
    1ffc:	65746e75 	ldrbvs	r6, [r4, #-3701]!
    2000:	1fe20072 	svcne	0x00e20072
    2004:	49540000 	ldmdbmi	r4, {}^
    2008:	65475f4d 	strbvs	r5, [r7, #-3917]
    200c:	65725074 	ldrbvs	r5, [r2, #-116]!
    2010:	6c616373 	stclvs	3, cr6, [r1], #-460
    2014:	0f007265 	svceq	0x00007265
    2018:	54000020 	strpl	r0, [r0], #-32
    201c:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    2020:	6c467465 	cfstrdvs	mvd7, [r6], {101}
    2024:	74536761 	ldrbvc	r6, [r3], #-1889
    2028:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    202c:	00205600 	eoreq	r5, r0, r0, lsl #12
    2030:	4d495400 	cfstrdmi	mvd5, [r9]
    2034:	656c435f 	strbvs	r4, [ip, #-863]!
    2038:	6c467261 	sfmvs	f7, 2, [r6], {97}
    203c:	8d006761 	stchi	7, cr6, [r0, #-388]
    2040:	54000020 	strpl	r0, [r0], #-32
    2044:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    2048:	54497465 	strbpl	r7, [r9], #-1125
    204c:	74617453 	strbtvc	r7, [r1], #-1107
    2050:	ec007375 	stc	3, cr7, [r0], {117}
    2054:	54000020 	strpl	r0, [r0], #-32
    2058:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    205c:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    2060:	65505449 	ldrbvs	r5, [r0, #-1097]
    2064:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    2068:	74694267 	strbtvc	r4, [r9], #-615
    206c:	00212300 	eoreq	r2, r1, r0, lsl #6
    2070:	4d495400 	cfstrdmi	mvd5, [r9]
    2074:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2078:	0074696e 	rsbseq	r6, r4, lr, ror #18
    207c:	00000000 	andeq	r0, r0, r0
    2080:	0000025b 	andeq	r0, r0, fp, asr r2
    2084:	5ff30002 	svcpl	0x00f30002
    2088:	09500000 	ldmdbeq	r0, {}^
    208c:	02b60000 	adcseq	r0, r6, #0	; 0x0
    2090:	53550000 	cmppl	r5, #0	; 0x0
    2094:	5f545241 	svcpl	0x00545241
    2098:	75727453 	ldrbvc	r7, [r2, #-1107]!
    209c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    20a0:	e1007469 	tst	r0, r9, ror #8
    20a4:	55000002 	strpl	r0, [r0, #-2]
    20a8:	54524153 	ldrbpl	r4, [r2], #-339
    20ac:	6f6c435f 	svcvs	0x006c435f
    20b0:	6e496b63 	fnmacdvs	d22, d9, d19
    20b4:	30007469 	andcc	r7, r0, r9, ror #8
    20b8:	55000003 	strpl	r0, [r0, #-3]
    20bc:	54524153 	ldrbpl	r4, [r2], #-339
    20c0:	6f6c435f 	svcvs	0x006c435f
    20c4:	74536b63 	ldrbvc	r6, [r3], #-2915
    20c8:	74637572 	strbtvc	r7, [r3], #-1394
    20cc:	74696e49 	strbtvc	r6, [r9], #-3657
    20d0:	00035700 	andeq	r5, r3, r0, lsl #14
    20d4:	41535500 	cmpmi	r3, r0, lsl #10
    20d8:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    20dc:	8c00646d 	cfstrshi	mvf6, [r0], {109}
    20e0:	55000003 	strpl	r0, [r0, #-3]
    20e4:	54524153 	ldrbpl	r4, [r2], #-339
    20e8:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    20ec:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    20f0:	040d0067 	streq	r0, [sp], #-103
    20f4:	53550000 	cmppl	r5, #0	; 0x0
    20f8:	5f545241 	svcpl	0x00545241
    20fc:	43414d44 	movtmi	r4, #7492	; 0x1d44
    2100:	5000646d 	andpl	r6, r0, sp, ror #8
    2104:	55000004 	strpl	r0, [r0, #-4]
    2108:	54524153 	ldrbpl	r4, [r2], #-339
    210c:	7465535f 	strbtvc	r5, [r5], #-863
    2110:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    2114:	00737365 	rsbseq	r7, r3, r5, ror #6
    2118:	00000485 	andeq	r0, r0, r5, lsl #9
    211c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2120:	61575f54 	cmpvs	r7, r4, asr pc
    2124:	7055656b 	subsvc	r6, r5, fp, ror #10
    2128:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    212c:	bc006769 	stclt	7, cr6, [r0], {105}
    2130:	55000004 	strpl	r0, [r0, #-4]
    2134:	54524153 	ldrbpl	r4, [r2], #-339
    2138:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    213c:	65766965 	ldrbvs	r6, [r6, #-2405]!
    2140:	6b615772 	blvs	1857f10 <__Stack_Size+0x1857b10>
    2144:	43705565 	cmnmi	r0, #423624704	; 0x19400000
    2148:	f100646d 	undefined instruction 0xf100646d
    214c:	55000004 	strpl	r0, [r0, #-4]
    2150:	54524153 	ldrbpl	r4, [r2], #-339
    2154:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    2158:	61657242 	cmnvs	r5, r2, asr #4
    215c:	7465446b 	strbtvc	r4, [r5], #-1131
    2160:	4c746365 	ldclmi	3, cr6, [r4], #-404
    2164:	74676e65 	strbtvc	r6, [r7], #-3685
    2168:	6e6f4368 	cdpvs	3, 6, cr4, cr15, cr8, {3}
    216c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2170:	00000528 	andeq	r0, r0, r8, lsr #10
    2174:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2178:	494c5f54 	stmdbmi	ip, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    217c:	646d434e 	strbtvs	r4, [sp], #-846
    2180:	00055d00 	andeq	r5, r5, r0, lsl #26
    2184:	41535500 	cmpmi	r3, r0, lsl #10
    2188:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    218c:	44646e65 	strbtmi	r6, [r4], #-3685
    2190:	00617461 	rsbeq	r7, r1, r1, ror #8
    2194:	00000594 	muleq	r0, r4, r5
    2198:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    219c:	65525f54 	ldrbvs	r5, [r2, #-3924]
    21a0:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    21a4:	74614465 	strbtvc	r4, [r1], #-1125
    21a8:	05c10061 	strbeq	r0, [r1, #97]
    21ac:	53550000 	cmppl	r5, #0	; 0x0
    21b0:	5f545241 	svcpl	0x00545241
    21b4:	646e6553 	strbtvs	r6, [lr], #-1363
    21b8:	61657242 	cmnvs	r5, r2, asr #4
    21bc:	05e8006b 	strbeq	r0, [r8, #107]!
    21c0:	53550000 	cmppl	r5, #0	; 0x0
    21c4:	5f545241 	svcpl	0x00545241
    21c8:	47746553 	undefined
    21cc:	64726175 	ldrbtvs	r6, [r2], #-373
    21d0:	656d6954 	strbvs	r6, [sp, #-2388]!
    21d4:	00061d00 	andeq	r1, r6, r0, lsl #26
    21d8:	41535500 	cmpmi	r3, r0, lsl #10
    21dc:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    21e0:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
    21e4:	61637365 	cmnvs	r3, r5, ror #6
    21e8:	0072656c 	rsbseq	r6, r2, ip, ror #10
    21ec:	00000652 	andeq	r0, r0, r2, asr r6
    21f0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    21f4:	6d535f54 	ldclvs	15, cr5, [r3, #-336]
    21f8:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    21fc:	43647261 	cmnmi	r4, #268435462	; 0x10000006
    2200:	8700646d 	strhi	r6, [r0, -sp, ror #8]
    2204:	55000006 	strpl	r0, [r0, #-6]
    2208:	54524153 	ldrbpl	r4, [r2], #-339
    220c:	616d535f 	cmnvs	sp, pc, asr r3
    2210:	61437472 	cmpvs	r3, r2, ror r4
    2214:	414e6472 	cmpmi	lr, r2, ror r4
    2218:	6d434b43 	vstrvs	d20, [r3, #-268]
    221c:	06bc0064 	ldrteq	r0, [ip], r4, rrx
    2220:	53550000 	cmppl	r5, #0	; 0x0
    2224:	5f545241 	svcpl	0x00545241
    2228:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    222c:	6c707544 	cfldr64vs	mvdx7, [r0], #-272
    2230:	6d437865 	stclvs	8, cr7, [r3, #-404]
    2234:	06f10064 	ldrbteq	r0, [r1], r4, rrx
    2238:	53550000 	cmppl	r5, #0	; 0x0
    223c:	5f545241 	svcpl	0x00545241
    2240:	41447249 	cmpmi	r4, r9, asr #4
    2244:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2248:	28006769 	stmdacs	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    224c:	55000007 	strpl	r0, [r0, #-7]
    2250:	54524153 	ldrbpl	r4, [r2], #-339
    2254:	4472495f 	ldrbtmi	r4, [r2], #-2399
    2258:	646d4341 	strbtvs	r4, [sp], #-833
    225c:	00075d00 	andeq	r5, r7, r0, lsl #26
    2260:	41535500 	cmpmi	r3, r0, lsl #10
    2264:	475f5452 	undefined
    2268:	6c467465 	cfstrdvs	mvd7, [r6], {101}
    226c:	74536761 	ldrbvc	r6, [r3], #-1889
    2270:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2274:	0007a400 	andeq	sl, r7, r0, lsl #8
    2278:	41535500 	cmpmi	r3, r0, lsl #10
    227c:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2280:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    2284:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    2288:	0007db00 	andeq	sp, r7, r0, lsl #22
    228c:	41535500 	cmpmi	r3, r0, lsl #10
    2290:	475f5452 	undefined
    2294:	54497465 	strbpl	r7, [r9], #-1125
    2298:	74617453 	strbtvc	r7, [r1], #-1107
    229c:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
    22a0:	55000008 	strpl	r0, [r0, #-8]
    22a4:	54524153 	ldrbpl	r4, [r2], #-339
    22a8:	656c435f 	strbvs	r4, [ip, #-863]!
    22ac:	54497261 	strbpl	r7, [r9], #-609
    22b0:	646e6550 	strbtvs	r6, [lr], #-1360
    22b4:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    22b8:	a1007469 	tstge	r0, r9, ror #8
    22bc:	55000008 	strpl	r0, [r0, #-8]
    22c0:	54524153 	ldrbpl	r4, [r2], #-339
    22c4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    22c8:	092a0074 	stmdbeq	sl!, {r2, r4, r5, r6}
    22cc:	53550000 	cmppl	r5, #0	; 0x0
    22d0:	5f545241 	svcpl	0x00545241
    22d4:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    22d8:	00007469 	andeq	r7, r0, r9, ror #8
    22dc:	31000000 	tstcc	r0, r0
    22e0:	02000000 	andeq	r0, r0, #0	; 0x0
    22e4:	0069e100 	rsbeq	lr, r9, r0, lsl #2
    22e8:	00010600 	andeq	r0, r1, r0, lsl #12
    22ec:	00005200 	andeq	r5, r0, r0, lsl #4
    22f0:	73655200 	cmnvc	r5, #0	; 0x0
    22f4:	485f7465 	ldmdami	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^
    22f8:	6c646e61 	stclvs	14, cr6, [r4], #-388
    22fc:	ee007265 	cdp	2, 0, cr7, cr0, cr5, {3}
    2300:	67000000 	strvs	r0, [r0, -r0]
    2304:	6e66705f 	mcrvs	0, 3, r7, cr6, cr15, {2}
    2308:	74636556 	strbtvc	r6, [r3], #-1366
    230c:	0073726f 	rsbseq	r7, r3, pc, ror #4
    2310:	00000000 	andeq	r0, r0, r0
    2314:	00000019 	andeq	r0, r0, r9, lsl r0
    2318:	6ae70002 	bvs	ff9c2328 <SCS_BASE+0x1f9b4328>
    231c:	00c50000 	sbceq	r0, r5, r0
    2320:	009c0000 	addseq	r0, ip, r0
    2324:	74610000 	strbtvc	r0, [r1]
    2328:	74697865 	strbtvc	r7, [r9], #-2149
    232c:	00000000 	andeq	r0, r0, r0
    2330:	00001700 	andeq	r1, r0, r0, lsl #14
    2334:	ac000200 	sfmge	f0, 4, [r0], {0}
    2338:	3a00006b 	bcc	24ec <__Stack_Size+0x20ec>
    233c:	ff000009 	undefined instruction 0xff000009
    2340:	65000008 	strvs	r0, [r0, #-8]
    2344:	00746978 	rsbseq	r6, r4, r8, ror r9
    2348:	00000000 	andeq	r0, r0, r0
    234c:	00000035 	andeq	r0, r0, r5, lsr r0
    2350:	74e60002 	strbtvc	r0, [r6], #2
    2354:	093a0000 	ldmdbeq	sl!, {}
    2358:	09100000 	ldmdbeq	r0, {}
    235c:	695f0000 	ldmdbvs	pc, {}^
    2360:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    2364:	74705f65 	ldrbtvc	r5, [r0], #-3941
    2368:	09220072 	stmdbeq	r2!, {r1, r4, r5, r6}
    236c:	675f0000 	ldrbvs	r0, [pc, -r0]
    2370:	61626f6c 	cmnvs	r2, ip, ror #30
    2374:	6d695f6c 	stclvs	15, cr5, [r9, #-432]!
    2378:	65727570 	ldrbvs	r7, [r2, #-1392]!
    237c:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
    2380:	00000000 	andeq	r0, r0, r0
    2384:	00003a00 	andeq	r3, r0, r0, lsl #20
    2388:	20000200 	andcs	r0, r0, r0, lsl #4
    238c:	4600007e 	undefined
    2390:	80000001 	andhi	r0, r0, r1
    2394:	5f000000 	svcpl	0x00000000
    2398:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    239c:	69665f63 	stmdbvs	r6!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    23a0:	615f696e 	cmpvs	pc, lr, ror #18
    23a4:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    23a8:	0000b200 	andeq	fp, r0, r0, lsl #4
    23ac:	6c5f5f00 	mrrcvs	15, 0, r5, pc, cr0
    23b0:	5f636269 	svcpl	0x00636269
    23b4:	74696e69 	strbtvc	r6, [r9], #-3689
    23b8:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
    23bc:	00007961 	andeq	r7, r0, r1, ror #18
    23c0:	19000000 	stmdbne	r0, {}
    23c4:	02000000 	andeq	r0, r0, #0	; 0x0
    23c8:	007f6600 	rsbseq	r6, pc, r0, lsl #12
    23cc:	00011300 	andeq	r1, r1, r0, lsl #6
    23d0:	00008800 	andeq	r8, r0, r0, lsl #16
    23d4:	6d656d00 	stclvs	13, cr6, [r5]
    23d8:	00746573 	rsbseq	r6, r4, r3, ror r5
    23dc:	00000000 	andeq	r0, r0, r0
    23e0:	00000026 	andeq	r0, r0, r6, lsr #32
    23e4:	80790002 	rsbshi	r0, r9, r2
    23e8:	09a50000 	stmibeq	r5!, {}
    23ec:	091e0000 	ldmdbeq	lr, {}
    23f0:	5f5f0000 	svcpl	0x005f0000
    23f4:	69676572 	stmdbvs	r7!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    23f8:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    23fc:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    2400:	6f727074 	svcvs	0x00727074
    2404:	00000063 	andeq	r0, r0, r3, rrx
    2408:	00230000 	eoreq	r0, r3, r0
    240c:	00020000 	andeq	r0, r2, r0
    2410:	00008a1e 	andeq	r8, r0, lr, lsl sl
    2414:	000009b2 	strheq	r0, [r0], -r2
    2418:	000008ff 	strdeq	r0, [r0], -pc
    241c:	61635f5f 	cmnvs	r3, pc, asr pc
    2420:	655f6c6c 	ldrbvs	r6, [pc, #-3180]	; 17bc <__Stack_Size+0x13bc>
    2424:	70746978 	rsbsvc	r6, r4, r8, ror r9
    2428:	73636f72 	cmnvc	r3, #456	; 0x1c8
    242c:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000049 	andeq	r0, r0, r9, asr #32
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	tsteq	r4, r0
	...
      14:	69747263 	ldmdbvs	r4!, {r0, r1, r5, r6, r9, ip, sp, lr}^
      18:	6d73612e 	ldfvse	f6, [r3, #-184]!
      1c:	5c3a6300 	ldcpl	3, cr6, [sl]
      20:	616e6977 	smcvs	59031
      24:	5c736d72 	ldclpl	13, cr6, [r3], #-456
      28:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
      2c:	63675c64 	cmnvs	r7, #25600	; 0x6400
      30:	75622d63 	strbvc	r2, [r2, #-3427]!
      34:	5c646c69 	stclpl	12, cr6, [r4], #-420
      38:	00636367 	rsbeq	r6, r3, r7, ror #6
      3c:	20554e47 	subscs	r4, r5, r7, asr #28
      40:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      44:	2e38312e 	rsfcsep	f3, f0, #0.5
      48:	01003035 	tsteq	r0, r5, lsr r0
      4c:	00008080 	andeq	r8, r0, r0, lsl #1
      50:	12000200 	andne	r0, r0, #0	; 0x0
      54:	04000000 	streq	r0, [r0]
      58:	00004901 	andeq	r4, r0, r1, lsl #18
	...
      64:	2f2e2e00 	svccs	0x002e2e00
      68:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
      6c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
      70:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
      74:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
      78:	6c2f302e 	stcvs	0, cr3, [pc], #-184
      7c:	6c676269 	sfmvs	f6, 2, [r7], #-420
      80:	2f73736f 	svccs	0x0073736f
      84:	2f6d7261 	svccs	0x006d7261
      88:	30747263 	rsbscc	r7, r4, r3, ror #4
      8c:	6300532e 	movwvs	r5, #814	; 0x32e
      90:	69775c3a 	ldmdbvs	r7!, {r1, r3, r4, r5, sl, fp, ip, lr}^
      94:	6d72616e 	ldfvse	f6, [r2, #-440]!
      98:	75625c73 	strbvc	r5, [r2, #-3187]!
      9c:	5c646c69 	stclpl	12, cr6, [r4], #-420
      a0:	2d636367 	stclcs	3, cr6, [r3, #-412]!
      a4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
      a8:	72615c64 	rsbvc	r5, r1, #25600	; 0x6400
      ac:	61652d6d 	cmnvs	r5, sp, ror #26
      b0:	6c5c6962 	mrrcvs	9, 6, r6, ip, cr2
      b4:	6c676269 	sfmvs	f6, 2, [r7], #-420
      b8:	5c73736f 	ldclpl	3, cr7, [r3], #-444
      bc:	006d7261 	rsbeq	r7, sp, r1, ror #4
      c0:	20554e47 	subscs	r4, r5, r7, asr #28
      c4:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      c8:	2e38312e 	rsfcsep	f3, f0, #0.5
      cc:	01003035 	tsteq	r0, r5, lsr r0
      d0:	000ddb80 	andeq	sp, sp, r0, lsl #23
      d4:	26000200 	strcs	r0, [r0], -r0, lsl #4
      d8:	04000000 	streq	r0, [r0]
      dc:	00053b01 	andeq	r3, r5, r1, lsl #22
      e0:	022e0100 	eoreq	r0, lr, #0	; 0x0
      e4:	04310000 	ldrteq	r0, [r1]
      e8:	31340000 	teqcc	r4, r0
      ec:	39b80800 	ldmibcc	r8!, {fp}
      f0:	00e30800 	rsceq	r0, r3, r0, lsl #16
      f4:	73020000 	movwvc	r0, #8192	; 0x2000
      f8:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
      fc:	00003017 	andeq	r3, r0, r7, lsl r0
     100:	05040300 	streq	r0, [r4, #-768]
     104:	00002e21 	andeq	r2, r0, r1, lsr #28
     108:	b8050203 	stmdalt	r5, {r0, r1, r9}
     10c:	03000005 	movweq	r0, #5	; 0x5
     110:	06cc0601 	strbeq	r0, [ip], r1, lsl #12
     114:	75020000 	strvc	r0, [r2]
     118:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
     11c:	00005027 	andeq	r5, r0, r7, lsr #32
     120:	07040300 	streq	r0, [r4, -r0, lsl #6]
     124:	00002e9b 	muleq	r0, fp, lr
     128:	36317502 	ldrtcc	r7, [r1], -r2, lsl #10
     12c:	62280200 	eorvs	r0, r8, #0	; 0x0
     130:	03000000 	movweq	r0, #0	; 0x0
     134:	081e0702 	ldmdaeq	lr, {r1, r8, r9, sl}
     138:	75020000 	strvc	r0, [r2]
     13c:	29020038 	stmdbcs	r2, {r3, r4, r5}
     140:	00000073 	andeq	r0, r0, r3, ror r0
     144:	ca080103 	bgt	200558 <__Stack_Size+0x200158>
     148:	04000006 	streq	r0, [r0], #-6
     14c:	00000050 	andeq	r0, r0, r0, asr r0
     150:	00006204 	andeq	r6, r0, r4, lsl #4
     154:	02010500 	andeq	r0, r1, #0	; 0x0
     158:	00009939 	andeq	r9, r0, r9, lsr r9
     15c:	149d0600 	ldrne	r0, [sp], #1536
     160:	07000000 	streq	r0, [r0, -r0]
     164:	00544553 	subseq	r4, r4, r3, asr r5
     168:	01050001 	tsteq	r5, r1
     16c:	00ae3b02 	adceq	r3, lr, r2, lsl #22
     170:	63060000 	movwvs	r0, #24576	; 0x6000
     174:	00000003 	andeq	r0, r0, r3
     178:	00068d06 	andeq	r8, r6, r6, lsl #26
     17c:	08000100 	stmdaeq	r0, {r8}
     180:	000000d1 	ldrdeq	r0, [r0], -r1
     184:	00993b02 	addseq	r3, r9, r2, lsl #22
     188:	01050000 	tsteq	r5, r0
     18c:	00ce3e02 	sbceq	r3, lr, r2, lsl #28
     190:	11060000 	tstne	r6, r0
     194:	00000000 	andeq	r0, r0, r0
     198:	00034806 	andeq	r4, r3, r6, lsl #16
     19c:	08000100 	stmdaeq	r0, {r8}
     1a0:	000000ee 	andeq	r0, r0, lr, ror #1
     1a4:	00b93e02 	adcseq	r3, r9, r2, lsl #28
     1a8:	04090000 	streq	r0, [r9]
     1ac:	031c0a07 	tsteq	ip, #28672	; 0x7000
     1b0:	014f014f 	cmpeq	pc, pc, asr #2
     1b4:	430b0000 	movwmi	r0, #45056	; 0xb000
     1b8:	03004c52 	movweq	r4, #3154	; 0xc52
     1bc:	007a0150 	rsbseq	r0, sl, r0, asr r1
     1c0:	23020000 	movwcs	r0, #8192	; 0x2000
     1c4:	52430b00 	subpl	r0, r3, #0	; 0x0
     1c8:	51030048 	tstpl	r3, r8, asr #32
     1cc:	00007a01 	andeq	r7, r0, r1, lsl #20
     1d0:	04230200 	strteq	r0, [r3], #-512
     1d4:	5244490b 	subpl	r4, r4, #180224	; 0x2c000
     1d8:	01520300 	cmpeq	r2, r0, lsl #6
     1dc:	0000007a 	andeq	r0, r0, sl, ror r0
     1e0:	0b082302 	bleq	208df0 <__Stack_Size+0x2089f0>
     1e4:	0052444f 	subseq	r4, r2, pc, asr #8
     1e8:	7a015303 	bvc	54dfc <__Stack_Size+0x549fc>
     1ec:	02000000 	andeq	r0, r0, #0	; 0x0
     1f0:	2f0c0c23 	svccs	0x000c0c23
     1f4:	03000000 	movweq	r0, #0	; 0x0
     1f8:	007a0154 	rsbseq	r0, sl, r4, asr r1
     1fc:	23020000 	movwcs	r0, #8192	; 0x2000
     200:	52420b10 	subpl	r0, r2, #16384	; 0x4000
     204:	55030052 	strpl	r0, [r3, #-82]
     208:	00007a01 	andeq	r7, r0, r1, lsl #20
     20c:	14230200 	strtne	r0, [r3], #-512
     210:	0008c50c 	andeq	ip, r8, ip, lsl #10
     214:	01560300 	cmpeq	r6, r0, lsl #6
     218:	0000007a 	andeq	r0, r0, sl, ror r0
     21c:	00182302 	andseq	r2, r8, r2, lsl #6
     220:	0c03500a 	stceq	0, cr5, [r3], {10}
     224:	0003b002 	andeq	fp, r3, r2
     228:	52430b00 	subpl	r0, r3, #0	; 0x0
     22c:	0d030031 	stceq	0, cr0, [r3, #-196]
     230:	00007f02 	andeq	r7, r0, r2, lsl #30
     234:	00230200 	eoreq	r0, r3, r0, lsl #4
     238:	0005720c 	andeq	r7, r5, ip, lsl #4
     23c:	020e0300 	andeq	r0, lr, #0	; 0x0
     240:	00000057 	andeq	r0, r0, r7, asr r0
     244:	0b022302 	bleq	88e54 <__Stack_Size+0x88a54>
     248:	00325243 	eorseq	r5, r2, r3, asr #4
     24c:	7f020f03 	svcvc	0x00020f03
     250:	02000000 	andeq	r0, r0, #0	; 0x0
     254:	7c0c0423 	cfstrsvc	mvf0, [ip], {35}
     258:	03000005 	movweq	r0, #5	; 0x5
     25c:	00570210 	subseq	r0, r7, r0, lsl r2
     260:	23020000 	movwcs	r0, #8192	; 0x2000
     264:	03db0c06 	bicseq	r0, fp, #1536	; 0x600
     268:	11030000 	tstne	r3, r0
     26c:	00007f02 	andeq	r7, r0, r2, lsl #30
     270:	08230200 	stmdaeq	r3!, {r9}
     274:	0005860c 	andeq	r8, r5, ip, lsl #12
     278:	02120300 	andseq	r0, r2, #0	; 0x0
     27c:	00000057 	andeq	r0, r0, r7, asr r0
     280:	0c0a2302 	stceq	3, cr2, [sl], {2}
     284:	000002b0 	strheq	r0, [r0], -r0
     288:	7f021303 	svcvc	0x00021303
     28c:	02000000 	andeq	r0, r0, #0	; 0x0
     290:	900c0c23 	andls	r0, ip, r3, lsr #24
     294:	03000005 	movweq	r0, #5	; 0x5
     298:	00570214 	subseq	r0, r7, r4, lsl r2
     29c:	23020000 	movwcs	r0, #8192	; 0x2000
     2a0:	52530b0e 	subspl	r0, r3, #14336	; 0x3800
     2a4:	02150300 	andseq	r0, r5, #0	; 0x0
     2a8:	0000007f 	andeq	r0, r0, pc, ror r0
     2ac:	0c102302 	ldceq	3, cr2, [r0], {2}
     2b0:	0000059a 	muleq	r0, sl, r5
     2b4:	57021603 	strpl	r1, [r2, -r3, lsl #12]
     2b8:	02000000 	andeq	r0, r0, #0	; 0x0
     2bc:	450b1223 	strmi	r1, [fp, #-547]
     2c0:	03005247 	movweq	r5, #583	; 0x247
     2c4:	007f0217 	rsbseq	r0, pc, r7, lsl r2
     2c8:	23020000 	movwcs	r0, #8192	; 0x2000
     2cc:	05a40c14 	streq	r0, [r4, #3092]!
     2d0:	18030000 	stmdane	r3, {}
     2d4:	00005702 	andeq	r5, r0, r2, lsl #14
     2d8:	16230200 	strtne	r0, [r3], -r0, lsl #4
     2dc:	0001fe0c 	andeq	pc, r1, ip, lsl #28
     2e0:	02190300 	andseq	r0, r9, #0	; 0x0
     2e4:	0000007f 	andeq	r0, r0, pc, ror r0
     2e8:	0c182302 	ldceq	3, cr2, [r8], {2}
     2ec:	000005ae 	andeq	r0, r0, lr, lsr #11
     2f0:	57021a03 	strpl	r1, [r2, -r3, lsl #20]
     2f4:	02000000 	andeq	r0, r0, #0	; 0x0
     2f8:	040c1a23 	streq	r1, [ip], #-2595
     2fc:	03000002 	movweq	r0, #2	; 0x2
     300:	007f021b 	rsbseq	r0, pc, fp, lsl r2
     304:	23020000 	movwcs	r0, #8192	; 0x2000
     308:	08830c1c 	stmeq	r3, {r2, r3, r4, sl, fp}
     30c:	1c030000 	stcne	0, cr0, [r3], {0}
     310:	00005702 	andeq	r5, r0, r2, lsl #14
     314:	1e230200 	cdpne	2, 2, cr0, cr3, cr0, {0}
     318:	0003370c 	andeq	r3, r3, ip, lsl #14
     31c:	021d0300 	andseq	r0, sp, #0	; 0x0
     320:	0000007f 	andeq	r0, r0, pc, ror r0
     324:	0c202302 	stceq	3, cr2, [r0], #-8
     328:	000005c2 	andeq	r0, r0, r2, asr #11
     32c:	57021e03 	strpl	r1, [r2, -r3, lsl #28]
     330:	02000000 	andeq	r0, r0, #0	; 0x0
     334:	430b2223 	movwmi	r2, #45603	; 0xb223
     338:	0300544e 	movweq	r5, #1102	; 0x44e
     33c:	007f021f 	rsbseq	r0, pc, pc, lsl r2
     340:	23020000 	movwcs	r0, #8192	; 0x2000
     344:	05cc0c24 	strbeq	r0, [ip, #3108]
     348:	20030000 	andcs	r0, r3, r0
     34c:	00005702 	andeq	r5, r0, r2, lsl #14
     350:	26230200 	strtcs	r0, [r3], -r0, lsl #4
     354:	4353500b 	cmpmi	r3, #11	; 0xb
     358:	02210300 	eoreq	r0, r1, #0	; 0x0
     35c:	0000007f 	andeq	r0, r0, pc, ror r0
     360:	0c282302 	stceq	3, cr2, [r8], #-8
     364:	00000710 	andeq	r0, r0, r0, lsl r7
     368:	57022203 	strpl	r2, [r2, -r3, lsl #4]
     36c:	02000000 	andeq	r0, r0, #0	; 0x0
     370:	410b2a23 	tstmi	fp, r3, lsr #20
     374:	03005252 	movweq	r5, #594	; 0x252
     378:	007f0223 	rsbseq	r0, pc, r3, lsr #4
     37c:	23020000 	movwcs	r0, #8192	; 0x2000
     380:	071b0c2c 	ldreq	r0, [fp, -ip, lsr #24]
     384:	24030000 	strcs	r0, [r3]
     388:	00005702 	andeq	r5, r0, r2, lsl #14
     38c:	2e230200 	cdpcs	2, 2, cr0, cr3, cr0, {0}
     390:	5243520b 	subpl	r5, r3, #-1342177280	; 0xb0000000
     394:	02250300 	eoreq	r0, r5, #0	; 0x0
     398:	0000007f 	andeq	r0, r0, pc, ror r0
     39c:	0c302302 	ldceq	3, cr2, [r0], #-8
     3a0:	00000726 	andeq	r0, r0, r6, lsr #14
     3a4:	57022603 	strpl	r2, [r2, -r3, lsl #12]
     3a8:	02000000 	andeq	r0, r0, #0	; 0x0
     3ac:	ea0c3223 	b	30cc40 <__Stack_Size+0x30c840>
     3b0:	03000001 	movweq	r0, #1	; 0x1
     3b4:	007f0227 	rsbseq	r0, pc, r7, lsr #4
     3b8:	23020000 	movwcs	r0, #8192	; 0x2000
     3bc:	07310c34 	undefined
     3c0:	28030000 	stmdacs	r3, {}
     3c4:	00005702 	andeq	r5, r0, r2, lsl #14
     3c8:	36230200 	strtcc	r0, [r3], -r0, lsl #4
     3cc:	0001ef0c 	andeq	lr, r1, ip, lsl #30
     3d0:	02290300 	eoreq	r0, r9, #0	; 0x0
     3d4:	0000007f 	andeq	r0, r0, pc, ror r0
     3d8:	0c382302 	ldceq	3, cr2, [r8], #-8
     3dc:	0000073c 	andeq	r0, r0, ip, lsr r7
     3e0:	57022a03 	strpl	r2, [r2, -r3, lsl #20]
     3e4:	02000000 	andeq	r0, r0, #0	; 0x0
     3e8:	f40c3a23 	vst1.8	{d3-d4}, [ip, :128], r3
     3ec:	03000001 	movweq	r0, #1	; 0x1
     3f0:	007f022b 	rsbseq	r0, pc, fp, lsr #4
     3f4:	23020000 	movwcs	r0, #8192	; 0x2000
     3f8:	07470c3c 	smlaldxeq	r0, r7, ip, ip
     3fc:	2c030000 	stccs	0, cr0, [r3], {0}
     400:	00005702 	andeq	r5, r0, r2, lsl #14
     404:	3e230200 	cdpcc	2, 2, cr0, cr3, cr0, {0}
     408:	0001f90c 	andeq	pc, r1, ip, lsl #18
     40c:	022d0300 	eoreq	r0, sp, #0	; 0x0
     410:	0000007f 	andeq	r0, r0, pc, ror r0
     414:	0c402302 	mcrreq	3, 0, r2, r0, cr2
     418:	00000752 	andeq	r0, r0, r2, asr r7
     41c:	57022e03 	strpl	r2, [r2, -r3, lsl #28]
     420:	02000000 	andeq	r0, r0, #0	; 0x0
     424:	c70c4223 	strgt	r4, [ip, -r3, lsr #4]
     428:	03000001 	movweq	r0, #1	; 0x1
     42c:	007f022f 	rsbseq	r0, pc, pc, lsr #4
     430:	23020000 	movwcs	r0, #8192	; 0x2000
     434:	075d0c44 	ldrbeq	r0, [sp, -r4, asr #24]
     438:	30030000 	andcc	r0, r3, r0
     43c:	00005702 	andeq	r5, r0, r2, lsl #14
     440:	46230200 	strtmi	r0, [r3], -r0, lsl #4
     444:	5243440b 	subpl	r4, r3, #184549376	; 0xb000000
     448:	02310300 	eorseq	r0, r1, #0	; 0x0
     44c:	0000007f 	andeq	r0, r0, pc, ror r0
     450:	0c482302 	mcrreq	3, 0, r2, r8, cr2
     454:	00000768 	andeq	r0, r0, r8, ror #14
     458:	57023203 	strpl	r3, [r2, -r3, lsl #4]
     45c:	02000000 	andeq	r0, r0, #0	; 0x0
     460:	080c4a23 	stmdaeq	ip, {r0, r1, r5, r9, fp, lr}
     464:	03000006 	movweq	r0, #6	; 0x6
     468:	007f0233 	rsbseq	r0, pc, r3, lsr r2
     46c:	23020000 	movwcs	r0, #8192	; 0x2000
     470:	07730c4c 	ldrbeq	r0, [r3, -ip, asr #24]!
     474:	34030000 	strcc	r0, [r3]
     478:	00005702 	andeq	r5, r0, r2, lsl #14
     47c:	4e230200 	cdpmi	2, 2, cr0, cr3, cr0, {0}
     480:	031c0a00 	tsteq	ip, #0	; 0x0
     484:	048a0239 	streq	r0, [sl], #569
     488:	530b0000 	movwpl	r0, #45056	; 0xb000
     48c:	3a030052 	bcc	c05dc <__Stack_Size+0xc01dc>
     490:	00007f02 	andeq	r7, r0, r2, lsl #30
     494:	00230200 	eoreq	r0, r3, r0, lsl #4
     498:	0005720c 	andeq	r7, r5, ip, lsl #4
     49c:	023b0300 	eorseq	r0, fp, #0	; 0x0
     4a0:	00000057 	andeq	r0, r0, r7, asr r0
     4a4:	0b022302 	bleq	890b4 <__Stack_Size+0x88cb4>
     4a8:	03005244 	movweq	r5, #580	; 0x244
     4ac:	007f023c 	rsbseq	r0, pc, ip, lsr r2
     4b0:	23020000 	movwcs	r0, #8192	; 0x2000
     4b4:	057c0c04 	ldrbeq	r0, [ip, #-3076]!
     4b8:	3d030000 	stccc	0, cr0, [r3]
     4bc:	00005702 	andeq	r5, r0, r2, lsl #14
     4c0:	06230200 	strteq	r0, [r3], -r0, lsl #4
     4c4:	5252420b 	subspl	r4, r2, #-1342177280	; 0xb0000000
     4c8:	023e0300 	eorseq	r0, lr, #0	; 0x0
     4cc:	0000007f 	andeq	r0, r0, pc, ror r0
     4d0:	0c082302 	stceq	3, cr2, [r8], {2}
     4d4:	00000586 	andeq	r0, r0, r6, lsl #11
     4d8:	57023f03 	strpl	r3, [r2, -r3, lsl #30]
     4dc:	02000000 	andeq	r0, r0, #0	; 0x0
     4e0:	430b0a23 	movwmi	r0, #47651	; 0xba23
     4e4:	03003152 	movweq	r3, #338	; 0x152
     4e8:	007f0240 	rsbseq	r0, pc, r0, asr #4
     4ec:	23020000 	movwcs	r0, #8192	; 0x2000
     4f0:	05900c0c 	ldreq	r0, [r0, #3084]
     4f4:	41030000 	tstmi	r3, r0
     4f8:	00005702 	andeq	r5, r0, r2, lsl #14
     4fc:	0e230200 	cdpeq	2, 2, cr0, cr3, cr0, {0}
     500:	3252430b 	subscc	r4, r2, #738197504	; 0x2c000000
     504:	02420300 	subeq	r0, r2, #0	; 0x0
     508:	0000007f 	andeq	r0, r0, pc, ror r0
     50c:	0c102302 	ldceq	3, cr2, [r0], {2}
     510:	0000059a 	muleq	r0, sl, r5
     514:	57024303 	strpl	r4, [r2, -r3, lsl #6]
     518:	02000000 	andeq	r0, r0, #0	; 0x0
     51c:	430b1223 	movwmi	r1, #45603	; 0xb223
     520:	03003352 	movweq	r3, #850	; 0x352
     524:	007f0244 	rsbseq	r0, pc, r4, asr #4
     528:	23020000 	movwcs	r0, #8192	; 0x2000
     52c:	05a40c14 	streq	r0, [r4, #3092]!
     530:	45030000 	strmi	r0, [r3]
     534:	00005702 	andeq	r5, r0, r2, lsl #14
     538:	16230200 	strtne	r0, [r3], -r0, lsl #4
     53c:	0001730c 	andeq	r7, r1, ip, lsl #6
     540:	02460300 	subeq	r0, r6, #0	; 0x0
     544:	0000007f 	andeq	r0, r0, pc, ror r0
     548:	0c182302 	ldceq	3, cr2, [r8], {2}
     54c:	000005ae 	andeq	r0, r0, lr, lsr #11
     550:	57024703 	strpl	r4, [r2, -r3, lsl #14]
     554:	02000000 	andeq	r0, r0, #0	; 0x0
     558:	05001a23 	streq	r1, [r0, #-2595]
     55c:	a5230401 	strge	r0, [r3, #-1025]!
     560:	06000004 	streq	r0, [r0], -r4
     564:	0000020a 	andeq	r0, r0, sl, lsl #4
     568:	01630601 	cmneq	r3, r1, lsl #12
     56c:	06020000 	streq	r0, [r2], -r0
     570:	000006d8 	ldrdeq	r0, [r0], -r8
     574:	47080003 	strmi	r0, [r8, -r3]
     578:	04000005 	streq	r0, [r0], #-5
     57c:	00048a27 	andeq	r8, r4, r7, lsr #20
     580:	04010500 	streq	r0, [r1], #-1280
     584:	0004ea2e 	andeq	lr, r4, lr, lsr #20
     588:	05640600 	strbeq	r0, [r4, #-1536]!
     58c:	06000000 	streq	r0, [r0], -r0
     590:	0000086d 	andeq	r0, r0, sp, ror #16
     594:	024b0604 	subeq	r0, fp, #4194304	; 0x400000
     598:	06280000 	strteq	r0, [r8], -r0
     59c:	00000265 	andeq	r0, r0, r5, ror #4
     5a0:	7f0600c8 	svcvc	0x000600c8
     5a4:	14000002 	strne	r0, [r0], #-2
     5a8:	00000006 	andeq	r0, r0, r6
     5ac:	0b061000 	bleq	1845b4 <__Stack_Size+0x1841b4>
     5b0:	1c000005 	stcne	0, cr0, [r0], {5}
     5b4:	0005f806 	andeq	pc, r5, r6, lsl #16
     5b8:	08001800 	stmdaeq	r0, {fp, ip}
     5bc:	0000065d 	andeq	r0, r0, sp, asr r6
     5c0:	04b03604 	ldrteq	r3, [r0], #1540
     5c4:	040d0000 	streq	r0, [sp]
     5c8:	05283f04 	streq	r3, [r8, #-3844]!
     5cc:	920e0000 	andls	r0, lr, #0	; 0x0
     5d0:	04000000 	streq	r0, [r0]
     5d4:	00005740 	andeq	r5, r0, r0, asr #14
     5d8:	00230200 	eoreq	r0, r3, r0, lsl #4
     5dc:	00060d0e 	andeq	r0, r6, lr, lsl #26
     5e0:	a5410400 	strbge	r0, [r1, #-1024]
     5e4:	02000004 	andeq	r0, r0, #4	; 0x4
     5e8:	550e0223 	strpl	r0, [lr, #-547]
     5ec:	04000000 	streq	r0, [r0]
     5f0:	0004ea42 	andeq	lr, r4, r2, asr #20
     5f4:	03230200 	teqeq	r3, #0	; 0x0
     5f8:	06b90800 	ldrteq	r0, [r9], r0, lsl #16
     5fc:	43040000 	movwmi	r0, #16384	; 0x4000
     600:	000004f5 	strdeq	r0, [r0], -r5
     604:	1b05040d 	blne	141640 <__Stack_Size+0x141240>
     608:	00000574 	andeq	r0, r0, r4, ror r5
     60c:	0004fb0e 	andeq	pc, r4, lr, lsl #22
     610:	691c0500 	ldmdbvs	ip, {r8, sl}
     614:	02000000 	andeq	r0, r0, #0	; 0x0
     618:	4b0e0023 	blmi	3806ac <__Stack_Size+0x3802ac>
     61c:	05000008 	streq	r0, [r0, #-8]
     620:	0000691d 	andeq	r6, r0, sp, lsl r9
     624:	01230200 	teqeq	r3, r0, lsl #4
     628:	0007ae0e 	andeq	sl, r7, lr, lsl #28
     62c:	691e0500 	ldmdbvs	lr, {r8, sl}
     630:	02000000 	andeq	r0, r0, #0	; 0x0
     634:	9d0e0223 	sfmls	f0, 4, [lr, #-140]
     638:	05000002 	streq	r0, [r0, #-2]
     63c:	0000ae1f 	andeq	sl, r0, pc, lsl lr
     640:	03230200 	teqeq	r3, #0	; 0x0
     644:	01d90800 	bicseq	r0, r9, r0, lsl #16
     648:	20050000 	andcs	r0, r5, r0
     64c:	00000533 	andeq	r0, r0, r3, lsr r5
     650:	1c060a0d 	stcne	10, cr0, [r6], {13}
     654:	000005ce 	andeq	r0, r0, lr, asr #11
     658:	0000210e 	andeq	r2, r0, lr, lsl #2
     65c:	571d0600 	ldrpl	r0, [sp, -r0, lsl #12]
     660:	02000000 	andeq	r0, r0, #0	; 0x0
     664:	880e0023 	stmdahi	lr, {r0, r1, r5}
     668:	06000003 	streq	r0, [r0], -r3
     66c:	0000571e 	andeq	r5, r0, lr, lsl r7
     670:	02230200 	eoreq	r0, r3, #0	; 0x0
     674:	0001210e 	andeq	r2, r1, lr, lsl #2
     678:	571f0600 	ldrpl	r0, [pc, -r0, lsl #12]
     67c:	02000000 	andeq	r0, r0, #0	; 0x0
     680:	a50e0423 	strge	r0, [lr, #-1059]
     684:	06000001 	streq	r0, [r0], -r1
     688:	00005720 	andeq	r5, r0, r0, lsr #14
     68c:	06230200 	strteq	r0, [r3], -r0, lsl #4
     690:	0002f60e 	andeq	pc, r2, lr, lsl #12
     694:	69210600 	stmdbvs	r1!, {r9, sl}
     698:	02000000 	andeq	r0, r0, #0	; 0x0
     69c:	08000823 	stmdaeq	r0, {r0, r1, r5, fp}
     6a0:	000007f0 	strdeq	r0, [r0], -r0
     6a4:	057f2206 	ldrbeq	r2, [pc, #-518]!	; 4a6 <__Stack_Size+0xa6>
     6a8:	100d0000 	andne	r0, sp, r0
     6ac:	06522606 	ldrbeq	r2, [r2], -r6, lsl #12
     6b0:	590e0000 	stmdbpl	lr, {}
     6b4:	06000005 	streq	r0, [r0], -r5
     6b8:	00005727 	andeq	r5, r0, r7, lsr #14
     6bc:	00230200 	eoreq	r0, r3, r0, lsl #4
     6c0:	0001b70e 	andeq	fp, r1, lr, lsl #14
     6c4:	57280600 	strpl	r0, [r8, -r0, lsl #12]!
     6c8:	02000000 	andeq	r0, r0, #0	; 0x0
     6cc:	7c0e0223 	sfmvc	f0, 4, [lr], {35}
     6d0:	06000006 	streq	r0, [r0], -r6
     6d4:	00005729 	andeq	r5, r0, r9, lsr #14
     6d8:	04230200 	strteq	r0, [r3], #-512
     6dc:	00018c0e 	andeq	r8, r1, lr, lsl #24
     6e0:	572a0600 	strpl	r0, [sl, -r0, lsl #12]!
     6e4:	02000000 	andeq	r0, r0, #0	; 0x0
     6e8:	710e0623 	tstvc	lr, r3, lsr #12
     6ec:	06000000 	streq	r0, [r0], -r0
     6f0:	0000572b 	andeq	r5, r0, fp, lsr #14
     6f4:	08230200 	stmdaeq	r3!, {r9}
     6f8:	00030c0e 	andeq	r0, r3, lr, lsl #24
     6fc:	572c0600 	strpl	r0, [ip, -r0, lsl #12]!
     700:	02000000 	andeq	r0, r0, #0	; 0x0
     704:	3b0e0a23 	blcc	382f98 <__Stack_Size+0x382b98>
     708:	06000001 	streq	r0, [r0], -r1
     70c:	0000572d 	andeq	r5, r0, sp, lsr #14
     710:	0c230200 	sfmeq	f0, 4, [r3]
     714:	0004c80e 	andeq	ip, r4, lr, lsl #16
     718:	572e0600 	strpl	r0, [lr, -r0, lsl #12]!
     71c:	02000000 	andeq	r0, r0, #0	; 0x0
     720:	08000e23 	stmdaeq	r0, {r0, r1, r5, r9, sl, fp}
     724:	00000043 	andeq	r0, r0, r3, asr #32
     728:	05d92f06 	ldrbeq	r2, [r9, #3846]
     72c:	100d0000 	andne	r0, sp, r0
     730:	06ba1b07 	ldrteq	r1, [sl], r7, lsl #22
     734:	960e0000 	strls	r0, [lr], -r0
     738:	07000001 	streq	r0, [r0, -r1]
     73c:	0000451c 	andeq	r4, r0, ip, lsl r5
     740:	00230200 	eoreq	r0, r3, r0, lsl #4
     744:	0001100e 	andeq	r1, r1, lr
     748:	571d0700 	ldrpl	r0, [sp, -r0, lsl #14]
     74c:	02000000 	andeq	r0, r0, #0	; 0x0
     750:	2c0e0423 	cfstrscs	mvf0, [lr], {35}
     754:	07000001 	streq	r0, [r0, -r1]
     758:	0000571e 	andeq	r5, r0, lr, lsl r7
     75c:	06230200 	strteq	r0, [r3], -r0, lsl #4
     760:	0007d70e 	andeq	sp, r7, lr, lsl #14
     764:	571f0700 	ldrpl	r0, [pc, -r0, lsl #14]
     768:	02000000 	andeq	r0, r0, #0	; 0x0
     76c:	ac0e0823 	stcge	8, cr0, [lr], {35}
     770:	07000003 	streq	r0, [r0, -r3]
     774:	00005720 	andeq	r5, r0, r0, lsr #14
     778:	0a230200 	beq	8c0f80 <__Stack_Size+0x8c0b80>
     77c:	0003e00e 	andeq	lr, r3, lr
     780:	57210700 	strpl	r0, [r1, -r0, lsl #14]!
     784:	02000000 	andeq	r0, r0, #0	; 0x0
     788:	08000c23 	stmdaeq	r0, {r0, r1, r5, sl, fp}
     78c:	00000791 	muleq	r0, r1, r7
     790:	065d2207 	ldrbeq	r2, [sp], -r7, lsl #4
     794:	010f0000 	mrseq	r0, CPSR
     798:	000007a3 	andeq	r0, r0, r3, lsr #15
     79c:	01024a01 	tsteq	r2, r1, lsl #20
     7a0:	00000069 	andeq	r0, r0, r9, rrx
     7a4:	0006e501 	andeq	lr, r6, r1, lsl #10
     7a8:	06251000 	strteq	r1, [r5], -r0
     7ac:	4b010000 	blmi	407b4 <__Stack_Size+0x403b4>
     7b0:	00006902 	andeq	r6, r0, r2, lsl #18
     7b4:	01110000 	tsteq	r1, r0
     7b8:	000002e9 	andeq	r0, r0, r9, ror #5
     7bc:	2801f501 	stmdacs	r1, {r0, r8, sl, ip, sp, lr, pc}
     7c0:	34000007 	strcc	r0, [r0], #-7
     7c4:	4a080031 	bmi	200890 <__Stack_Size+0x200490>
     7c8:	01080031 	tsteq	r8, r1, lsr r0
     7cc:	0007285d 	andeq	r2, r7, sp, asr r8
     7d0:	00631200 	rsbeq	r1, r3, r0, lsl #4
     7d4:	072ff501 	streq	pc, [pc, -r1, lsl #10]!
     7d8:	00000000 	andeq	r0, r0, r0
     7dc:	83130000 	tsthi	r3, #0	; 0x0
     7e0:	01000004 	tsteq	r0, r4
     7e4:	000069f5 	strdeq	r6, [r0], -r5
     7e8:	13510100 	cmpne	r1, #0	; 0x0
     7ec:	00000489 	andeq	r0, r0, r9, lsl #9
     7f0:	0069f501 	rsbeq	pc, r9, r1, lsl #10
     7f4:	52010000 	andpl	r0, r1, #0	; 0x0
     7f8:	05041400 	streq	r1, [r4, #-1024]
     7fc:	00746e69 	rsbseq	r6, r4, r9, ror #28
     800:	00690415 	rsbeq	r0, r9, r5, lsl r4
     804:	01110000 	tsteq	r1, r0
     808:	00000638 	andeq	r0, r0, r8, lsr r6
     80c:	2801fa01 	stmdacs	r1, {r0, r9, fp, ip, sp, lr, pc}
     810:	4c000007 	stcmi	0, cr0, [r0], {7}
     814:	62080031 	andvs	r0, r8, #49	; 0x31
     818:	01080031 	tsteq	r8, r1, lsr r0
     81c:	0007785d 	andeq	r7, r7, sp, asr r8
     820:	00631200 	rsbeq	r1, r3, r0, lsl #4
     824:	072ffa01 	streq	pc, [pc, -r1, lsl #20]!
     828:	001e0000 	andseq	r0, lr, r0
     82c:	6b130000 	blvs	4c0834 <__Stack_Size+0x4c0434>
     830:	01000003 	tsteq	r0, r3
     834:	000069fa 	strdeq	r6, [r0], -sl
     838:	13510100 	cmpne	r1, #0	; 0x0
     83c:	00000372 	andeq	r0, r0, r2, ror r3
     840:	0069fa01 	rsbeq	pc, r9, r1, lsl #20
     844:	52010000 	andpl	r0, r1, #0	; 0x0
     848:	06c51600 	strbeq	r1, [r5], r0, lsl #12
     84c:	31640000 	cmncc	r4, r0
     850:	319c0800 	orrscc	r0, ip, r0, lsl #16
     854:	5d010800 	stcpl	8, cr0, [r1]
     858:	00000793 	muleq	r0, r3, r7
     85c:	0006d817 	andeq	sp, r6, r7, lsl r8
     860:	00500100 	subseq	r0, r0, r0, lsl #2
     864:	07e40118 	undefined
     868:	69010000 	stmdbvs	r1, {}
     86c:	319c0102 	orrscc	r0, ip, r2, lsl #2
     870:	31b00800 	lslscc	r0, r0, #16
     874:	5d010800 	stcpl	8, cr0, [r1]
     878:	00340118 	eorseq	r0, r4, r8, lsl r1
     87c:	83010000 	movwhi	r0, #4096	; 0x1000
     880:	31b00102 	lslscc	r0, r2, #2
     884:	31c80800 	biccc	r0, r8, r0, lsl #16
     888:	5d010800 	stcpl	8, cr0, [r1]
     88c:	03790119 	cmneq	r9, #1073741830	; 0x40000006
     890:	88010000 	stmdahi	r1, {}
     894:	00690102 	rsbeq	r0, r9, r2, lsl #2
     898:	31c80000 	biccc	r0, r8, r0
     89c:	31e00800 	mvncc	r0, r0, lsl #16
     8a0:	5d010800 	stcpl	8, cr0, [r1]
     8a4:	0259011a 	subseq	r0, r9, #-2147483642	; 0x80000006
     8a8:	9d010000 	stcls	0, cr0, [r1]
     8ac:	00690102 	rsbeq	r0, r9, r2, lsl #2
     8b0:	31e00000 	mvncc	r0, r0
     8b4:	32100800 	andscc	r0, r0, #0	; 0x0
     8b8:	5d010800 	stcpl	8, cr0, [r1]
     8bc:	000007fe 	strdeq	r0, [r0], -lr
     8c0:	0004f51b 	andeq	pc, r4, fp, lsl r5
     8c4:	029e0100 	addseq	r0, lr, #0	; 0x0
     8c8:	00000069 	andeq	r0, r0, r9, rrx
     8cc:	1c005001 	stcne	0, cr5, [r0], {1}
     8d0:	00066e01 	andeq	r6, r6, r1, lsl #28
     8d4:	02ba0100 	adcseq	r0, sl, #0	; 0x0
     8d8:	00321001 	eorseq	r1, r2, r1
     8dc:	00321c08 	eorseq	r1, r2, r8, lsl #24
     8e0:	255d0108 	ldrbcs	r0, [sp, #-264]
     8e4:	1d000008 	stcne	0, cr0, [r0, #-32]
     8e8:	00000017 	andeq	r0, r0, r7, lsl r0
     8ec:	2502b901 	strcs	fp, [r2, #-2305]
     8f0:	01000000 	tsteq	r0, r0
     8f4:	01190050 	tsteq	r9, r0, asr r0
     8f8:	00000618 	andeq	r0, r0, r8, lsl r6
     8fc:	0102bf01 	tsteq	r2, r1, lsl #30
     900:	00000069 	andeq	r0, r0, r9, rrx
     904:	0800321c 	stmdaeq	r0, {r2, r3, r4, r9, ip, sp}
     908:	08003230 	stmdaeq	r0, {r4, r5, r9, ip, sp}
     90c:	011e5d01 	tsteq	lr, r1, lsl #26
     910:	0000023d 	andeq	r0, r0, sp, lsr r2
     914:	0102b401 	tsteq	r2, r1, lsl #8
     918:	08003230 	stmdaeq	r0, {r4, r5, r9, ip, sp}
     91c:	08003268 	stmdaeq	r0, {r3, r5, r6, r9, ip, sp}
     920:	0000003c 	andeq	r0, r0, ip, lsr r0
     924:	03fa011f 	mvnseq	r0, #-1073741817	; 0xc0000007
     928:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
     92c:	32680102 	rsbcc	r0, r8, #-2147483648	; 0x80000000
     930:	32a80800 	adccc	r0, r8, #0	; 0x0
     934:	00670800 	rsbeq	r0, r7, r0, lsl #16
     938:	087c0000 	ldmdaeq	ip!, {}^
     93c:	251b0000 	ldrcs	r0, [fp]
     940:	01000006 	tsteq	r0, r6
     944:	0069023f 	rsbeq	r0, r9, pc, lsr r2
     948:	50010000 	andpl	r0, r1, r0
     94c:	1b011f00 	blne	48554 <__Stack_Size+0x48154>
     950:	01000002 	tsteq	r0, r2
     954:	a80102ad 	stmdage	r1, {r0, r2, r3, r5, r7, r9}
     958:	c8080032 	stmdagt	r8, {r1, r4, r5}
     95c:	92080032 	andls	r0, r8, #50	; 0x32
     960:	a7000000 	strge	r0, [r0, -r0]
     964:	20000008 	andcs	r0, r0, r8
     968:	00000107 	andeq	r0, r0, r7, lsl #2
     96c:	6902ac01 	stmdbvs	r2, {r0, sl, fp, sp, pc}
     970:	bd000000 	stclt	0, cr0, [r0]
     974:	00000000 	andeq	r0, r0, r0
     978:	0273011f 	rsbseq	r0, r3, #-1073741817	; 0xc0000007
     97c:	90010000 	andls	r0, r1, r0
     980:	32c80102 	sbccc	r0, r8, #-2147483648	; 0x80000000
     984:	330c0800 	movwcc	r0, #51200	; 0xc800
     988:	00db0800 	sbcseq	r0, fp, r0, lsl #16
     98c:	08d20000 	ldmeq	r2, {}^
     990:	07200000 	streq	r0, [r0, -r0]!
     994:	01000001 	tsteq	r0, r1
     998:	0069028f 	rsbeq	r0, r9, pc, lsl #5
     99c:	00fa0000 	rscseq	r0, sl, r0
     9a0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     9a4:	00062a01 	andeq	r2, r6, r1, lsl #20
     9a8:	027e0100 	rsbseq	r0, lr, #0	; 0x0
     9ac:	00330c01 	eorseq	r0, r3, r1, lsl #24
     9b0:	00332008 	eorseq	r2, r3, r8
     9b4:	00011808 	andeq	r1, r1, r8, lsl #16
     9b8:	1c011f00 	stcne	15, cr1, [r1], {0}
     9bc:	01000003 	tsteq	r0, r3
     9c0:	2001026f 	andcs	r0, r1, pc, ror #4
     9c4:	4c080033 	stcmi	0, cr0, [r8], {51}
     9c8:	43080033 	movwmi	r0, #32819	; 0x8033
     9cc:	13000001 	movwne	r0, #1	; 0x1
     9d0:	20000009 	andcs	r0, r0, r9
     9d4:	00000897 	muleq	r0, r7, r8
     9d8:	45026e01 	strmi	r6, [r2, #-3585]
     9dc:	62000000 	andvs	r0, r0, #0	; 0x0
     9e0:	00000001 	andeq	r0, r0, r1
     9e4:	0408011e 	streq	r0, [r8], #-286
     9e8:	5b010000 	blpl	409f0 <__Stack_Size+0x405f0>
     9ec:	334c0102 	movtcc	r0, #49410	; 0xc102
     9f0:	33a00800 	movcc	r0, #0	; 0x0
     9f4:	01800800 	orreq	r0, r0, r0, lsl #16
     9f8:	011e0000 	tsteq	lr, r0
     9fc:	0000041b 	andeq	r0, r0, fp, lsl r4
     a00:	01023201 	tsteq	r2, r1, lsl #4
     a04:	080033a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, sp}
     a08:	080033b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, ip, sp}
     a0c:	000001ab 	andeq	r0, r0, fp, lsr #3
     a10:	051b011f 	ldreq	r0, [fp, #-287]
     a14:	0d010000 	stceq	0, cr0, [r1]
     a18:	33b80102 	undefined instruction 0x33b80102
     a1c:	34480800 	strbcc	r0, [r8], #-2048
     a20:	01d60800 	bicseq	r0, r6, r0, lsl #16
     a24:	09780000 	ldmdbeq	r8!, {}^
     a28:	941b0000 	ldrls	r0, [fp]
     a2c:	01000006 	tsteq	r0, r6
     a30:	05ce020e 	strbeq	r0, [lr, #526]
     a34:	91020000 	tstls	r2, r0
     a38:	02d51b66 	sbcseq	r1, r5, #104448	; 0x19800
     a3c:	0f010000 	svceq	0x00010000
     a40:	00065202 	andeq	r5, r6, r2, lsl #4
     a44:	56910200 	ldrpl	r0, [r1], r0, lsl #4
     a48:	e9011f00 	stmdb	r1, {r8, r9, sl, fp, ip}
     a4c:	01000006 	tsteq	r0, r6
     a50:	480101df 	stmdami	r1, {r0, r1, r2, r3, r4, r6, r7, r8}
     a54:	d4080034 	strle	r0, [r8], #-52
     a58:	01080034 	tsteq	r8, r4, lsr r0
     a5c:	c2000002 	andgt	r0, r0, #2	; 0x2
     a60:	20000009 	andcs	r0, r0, r9
     a64:	0000048f 	andeq	r0, r0, pc, lsl #9
     a68:	6901de01 	stmdbvs	r1, {r0, r9, sl, fp, ip, lr, pc}
     a6c:	2c000000 	stccs	0, cr0, [r0], {0}
     a70:	20000002 	andcs	r0, r0, r2
     a74:	000000a4 	andeq	r0, r0, r4, lsr #1
     a78:	4501de01 	strmi	sp, [r1, #-3585]
     a7c:	4a000000 	bmi	a84 <__Stack_Size+0x684>
     a80:	1b000002 	blne	a90 <__Stack_Size+0x690>
     a84:	00000323 	andeq	r0, r0, r3, lsr #6
     a88:	ba01e101 	blt	78e94 <__Stack_Size+0x78a94>
     a8c:	02000006 	andeq	r0, r0, #6	; 0x6
     a90:	1f006091 	svcne	0x00006091
     a94:	0003b701 	andeq	fp, r3, r1, lsl #14
     a98:	01da0100 	bicseq	r0, sl, r0, lsl #2
     a9c:	0034d401 	eorseq	sp, r4, r1, lsl #8
     aa0:	0034e408 	eorseq	lr, r4, r8, lsl #8
     aa4:	00026808 	andeq	r6, r2, r8, lsl #16
     aa8:	0009ed00 	andeq	lr, r9, r0, lsl #26
     aac:	00a42000 	adceq	r2, r4, r0
     ab0:	d9010000 	stmdble	r1, {}
     ab4:	00004501 	andeq	r4, r0, r1, lsl #10
     ab8:	00029300 	andeq	r9, r2, r0, lsl #6
     abc:	011f0000 	tsteq	pc, r0
     ac0:	0000077e 	andeq	r0, r0, lr, ror r7
     ac4:	0101bf01 	tsteq	r1, r1, lsl #30
     ac8:	080034e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip, sp}
     acc:	0800356c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, ip, sp}
     ad0:	000002b1 	strheq	r0, [r0], -r1
     ad4:	00000a17 	andeq	r0, r0, r7, lsl sl
     ad8:	0004e21b 	andeq	lr, r4, fp, lsl r2
     adc:	01c00100 	biceq	r0, r0, r0, lsl #2
     ae0:	00000528 	andeq	r0, r0, r8, lsr #10
     ae4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     ae8:	06fd011f 	usateq	r0, #29, pc, lsl #2
     aec:	93010000 	movwls	r0, #4096	; 0x1000
     af0:	356c0101 	strbcc	r0, [ip, #-257]!
     af4:	35d60800 	ldrbcc	r0, [r6, #2048]
     af8:	02dc0800 	sbcseq	r0, ip, #0	; 0x0
     afc:	0a410000 	beq	1040b04 <__Stack_Size+0x1040704>
     b00:	501b0000 	andspl	r0, fp, r0
     b04:	01000003 	tsteq	r0, r3
     b08:	05740194 	ldrbeq	r0, [r4, #-404]!
     b0c:	91020000 	tstls	r2, r0
     b10:	011f006c 	tsteq	pc, ip, rrx
     b14:	000004a9 	andeq	r0, r0, r9, lsr #9
     b18:	01015101 	tsteq	r1, r1, lsl #2
     b1c:	080035d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, ip, sp}
     b20:	0800365c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, ip, sp}
     b24:	00000307 	andeq	r0, r0, r7, lsl #6
     b28:	00000a68 	andeq	r0, r0, r8, ror #20
     b2c:	0008b410 	andeq	fp, r8, r0, lsl r4
     b30:	01520100 	cmpeq	r2, r0, lsl #2
     b34:	000000ce 	andeq	r0, r0, lr, asr #1
     b38:	2f011e00 	svccs	0x00011e00
     b3c:	01000005 	tsteq	r0, r5
     b40:	5c010100 	stfpls	f0, [r1], {0}
     b44:	04080036 	streq	r0, [r8], #-54
     b48:	32080038 	andcc	r0, r8, #56	; 0x38
     b4c:	21000003 	tstcs	r0, r3
     b50:	0000fa01 	andeq	pc, r0, r1, lsl #20
     b54:	01dd0100 	bicseq	r0, sp, r0, lsl #2
     b58:	08003804 	stmdaeq	r0, {r2, fp, ip, sp}
     b5c:	08003838 	stmdaeq	r0, {r3, r4, r5, fp, ip, sp}
     b60:	00000351 	andeq	r0, r0, r1, asr r3
     b64:	00000ad3 	ldrdeq	r0, [r0], -r3
     b68:	00646912 	rsbeq	r6, r4, r2, lsl r9
     b6c:	0069dd01 	rsbeq	sp, r9, r1, lsl #26
     b70:	037c0000 	cmneq	ip, #0	; 0x0
     b74:	cc220000 	stcgt	0, cr0, [r2]
     b78:	01000001 	tsteq	r0, r1
     b7c:	000069dd 	ldrdeq	r6, [r0], -sp
     b80:	00039a00 	andeq	r9, r3, r0, lsl #20
     b84:	07c92200 	strbeq	r2, [r9, r0, lsl #4]
     b88:	dd010000 	stcle	0, cr0, [r1]
     b8c:	00000069 	andeq	r0, r0, r9, rrx
     b90:	000003b8 	strheq	r0, [r0], -r8
     b94:	72617612 	rsbvc	r7, r1, #18874368	; 0x1200000
     b98:	69dd0100 	ldmibvs	sp, {r8}^
     b9c:	d6000000 	strle	r0, [r0], -r0
     ba0:	00000003 	andeq	r0, r0, r3
     ba4:	03cc0123 	biceq	r0, ip, #-1073741816	; 0xc0000008
     ba8:	e4010000 	str	r0, [r1]
     bac:	00383801 	eorseq	r3, r8, r1, lsl #16
     bb0:	0038a008 	eorseq	sl, r8, r8
     bb4:	0003e908 	andeq	lr, r3, r8, lsl #18
     bb8:	46012400 	strmi	r2, [r1], -r0, lsl #8
     bbc:	01000008 	tsteq	r0, r8
     bc0:	0728017b 	undefined
     bc4:	38a00000 	stmiacc	r0!, {}
     bc8:	39b80800 	ldmibcc	r8!, {fp}
     bcc:	04080800 	streq	r0, [r8], #-2048
     bd0:	0b1d0000 	bleq	740bd8 <__Stack_Size+0x7407d8>
     bd4:	c5250000 	strgt	r0, [r5]!
     bd8:	20000006 	andcs	r0, r0, r6
     bdc:	01000000 	tsteq	r0, r0
     be0:	0038269b 	mlaseq	r8, fp, r6, r2
     be4:	d8270000 	stmdale	r7!, {}
     be8:	00000006 	andeq	r0, r0, r6
     bec:	69280000 	stmdbvs	r8!, {}
     bf0:	2d000000 	stccs	0, cr0, [r0]
     bf4:	2900000b 	stmdbcs	r0, {r0, r1, r3}
     bf8:	000000d9 	ldrdeq	r0, [r0], -r9
     bfc:	942a00ff 	strtls	r0, [sl], #-255
     c00:	01000004 	tsteq	r0, r4
     c04:	000b3f3c 	andeq	r3, fp, ip, lsr pc
     c08:	03050100 	movweq	r0, #20736	; 0x5100
     c0c:	20000030 	andcs	r0, r0, r0, lsr r0
     c10:	000b1d04 	andeq	r1, fp, r4, lsl #26
     c14:	089d2a00 	ldmeq	sp, {r9, fp, sp}
     c18:	3d010000 	stccc	0, cr0, [r1]
     c1c:	00000b56 	andeq	r0, r0, r6, asr fp
     c20:	30030501 	andcc	r0, r3, r1, lsl #10
     c24:	04200001 	strteq	r0, [r0], #-1
     c28:	00000069 	andeq	r0, r0, r9, rrx
     c2c:	0008082a 	andeq	r0, r8, sl, lsr #16
     c30:	563d0100 	ldrtpl	r0, [sp], -r0, lsl #2
     c34:	0100000b 	tsteq	r0, fp
     c38:	01310305 	teqeq	r1, r5, lsl #6
     c3c:	be2a2000 	cdplt	0, 2, cr2, cr10, cr0, {0}
     c40:	01000002 	tsteq	r0, r2
     c44:	00007a3e 	andeq	r7, r0, lr, lsr sl
     c48:	03050100 	movweq	r0, #20736	; 0x5100
     c4c:	20000134 	andcs	r0, r0, r4, lsr r1
     c50:	0002902a 	andeq	r9, r2, sl, lsr #32
     c54:	7a3e0100 	bvc	f8105c <__Stack_Size+0xf80c5c>
     c58:	01000000 	tsteq	r0, r0
     c5c:	01380305 	teqeq	r8, r5, lsl #6
     c60:	e12a2000 	teq	sl, r0
     c64:	01000000 	tsteq	r0, r0
     c68:	0000453f 	andeq	r4, r0, pc, lsr r5
     c6c:	03050100 	movweq	r0, #20736	; 0x5100
     c70:	20000000 	andcs	r0, r0, r0
     c74:	00033c2a 	andeq	r3, r3, sl, lsr #24
     c78:	45400100 	strbmi	r0, [r0, #-256]
     c7c:	01000000 	tsteq	r0, r0
     c80:	00040305 	andeq	r0, r4, r5, lsl #6
     c84:	4b2a2000 	blmi	a88c8c <__Stack_Size+0xa8888c>
     c88:	01000001 	tsteq	r0, r1
     c8c:	00007f41 	andeq	r7, r0, r1, asr #30
     c90:	03050100 	movweq	r0, #20736	; 0x5100
     c94:	20000008 	andcs	r0, r0, r8
     c98:	0002262a 	andeq	r2, r2, sl, lsr #12
     c9c:	7a420100 	bvc	10810a4 <__Stack_Size+0x1080ca4>
     ca0:	01000000 	tsteq	r0, r0
     ca4:	002c0305 	eoreq	r0, ip, r5, lsl #6
     ca8:	692b2000 	stmdbvs	fp!, {sp}
     cac:	69460100 	stmdbvs	r6, {r8}^
     cb0:	01000000 	tsteq	r0, r0
     cb4:	013c0305 	teqeq	ip, r5, lsl #6
     cb8:	69282000 	stmdbvs	r8!, {sp}
     cbc:	f9000000 	undefined instruction 0xf9000000
     cc0:	2900000b 	stmdbcs	r0, {r0, r1, r3}
     cc4:	000000d9 	ldrdeq	r0, [r0], -r9
     cc8:	8d2a0005 	stchi	0, cr0, [sl, #-20]!
     ccc:	01000008 	tsteq	r0, r8
     cd0:	000be947 	andeq	lr, fp, r7, asr #18
     cd4:	03050100 	movweq	r0, #20736	; 0x5100
     cd8:	2000000a 	andcs	r0, r0, sl
     cdc:	000ef62a 	andeq	pc, lr, sl, lsr #12
     ce0:	69480100 	stmdbvs	r8, {r8}^
     ce4:	01000000 	tsteq	r0, r0
     ce8:	013d0305 	teqeq	sp, r5, lsl #6
     cec:	312a2000 	teqcc	sl, r0
     cf0:	01000008 	tsteq	r0, r8
     cf4:	000b564b 	andeq	r5, fp, fp, asr #12
     cf8:	03050100 	movweq	r0, #20736	; 0x5100
     cfc:	2000013e 	andcs	r0, r0, lr, lsr r1
     d00:	0003982a 	andeq	r9, r3, sl, lsr #16
     d04:	564c0100 	strbpl	r0, [ip], -r0, lsl #2
     d08:	0100000b 	tsteq	r0, fp
     d0c:	013f0305 	teqeq	pc, r5, lsl #6
     d10:	69282000 	stmdbvs	r8!, {sp}
     d14:	51000000 	tstpl	r0, r0
     d18:	2900000c 	stmdbcs	r0, {r2, r3}
     d1c:	000000d9 	ldrdeq	r0, [r0], -r9
     d20:	782a0020 	stmdavc	sl!, {r5}
     d24:	01000001 	tsteq	r0, r1
     d28:	000c634d 	andeq	r6, ip, sp, asr #6
     d2c:	03050100 	movweq	r0, #20736	; 0x5100
     d30:	20000140 	andcs	r0, r0, r0, asr #2
     d34:	000c4104 	andeq	r4, ip, r4, lsl #2
     d38:	00572800 	subseq	r2, r7, r0, lsl #16
     d3c:	0c780000 	ldcleq	0, cr0, [r8]
     d40:	d9290000 	stmdble	r9!, {}
     d44:	01000000 	tsteq	r0, r0
     d48:	05d62a00 	ldrbeq	r2, [r6, #2560]
     d4c:	50010000 	andpl	r0, r1, r0
     d50:	00000c68 	andeq	r0, r0, r8, ror #24
     d54:	10030501 	andne	r0, r3, r1, lsl #10
     d58:	2a200000 	bcs	800d60 <__Stack_Size+0x800960>
     d5c:	000006aa 	andeq	r0, r0, sl, lsr #13
     d60:	0c685101 	stfeqe	f5, [r8], #-4
     d64:	05010000 	streq	r0, [r1]
     d68:	00001403 	andeq	r1, r0, r3, lsl #8
     d6c:	06432a20 	strbeq	r2, [r3], -r0, lsr #20
     d70:	52010000 	andpl	r0, r1, #0	; 0x0
     d74:	00000c68 	andeq	r0, r0, r8, ror #24
     d78:	18030501 	stmdane	r3, {r0, r8, sl}
     d7c:	2a200000 	bcs	800d84 <__Stack_Size+0x800984>
     d80:	000005e7 	andeq	r0, r0, r7, ror #11
     d84:	0c685401 	cfstrdeq	mvd5, [r8], #-4
     d88:	05010000 	streq	r0, [r1]
     d8c:	00001c03 	andeq	r1, r0, r3, lsl #24
     d90:	01542a20 	cmpeq	r4, r0, lsr #20
     d94:	55010000 	strpl	r0, [r1]
     d98:	00000c68 	andeq	r0, r0, r8, ror #24
     d9c:	20030501 	andcs	r0, r3, r1, lsl #10
     da0:	2a200000 	bcs	800da8 <__Stack_Size+0x8009a8>
     da4:	00000650 	andeq	r0, r0, r0, asr r6
     da8:	0c685601 	stcleq	6, cr5, [r8], #-4
     dac:	05010000 	streq	r0, [r1]
     db0:	00002403 	andeq	r2, r0, r3, lsl #8
     db4:	005f2a20 	subseq	r2, pc, r0, lsr #20
     db8:	58010000 	stmdapl	r1, {}
     dbc:	00000057 	andeq	r0, r0, r7, asr r0
     dc0:	62030501 	andvs	r0, r3, #4194304	; 0x400000
     dc4:	2a200001 	bcs	800dd0 <__Stack_Size+0x8009d0>
     dc8:	00000068 	andeq	r0, r0, r8, rrx
     dcc:	00575801 	subseq	r5, r7, r1, lsl #16
     dd0:	05010000 	streq	r0, [r1]
     dd4:	00016403 	andeq	r6, r1, r3, lsl #8
     dd8:	02b52a20 	adcseq	r2, r5, #131072	; 0x20000
     ddc:	58010000 	stmdapl	r1, {}
     de0:	00000057 	andeq	r0, r0, r7, asr r0
     de4:	66030501 	strvs	r0, [r3], -r1, lsl #10
     de8:	2a200001 	bcs	800df4 <__Stack_Size+0x8009f4>
     dec:	00000080 	andeq	r0, r0, r0, lsl #1
     df0:	00575801 	subseq	r5, r7, r1, lsl #16
     df4:	05010000 	streq	r0, [r1]
     df8:	00016803 	andeq	r6, r1, r3, lsl #16
     dfc:	00892a20 	addeq	r2, r9, r0, lsr #20
     e00:	58010000 	stmdapl	r1, {}
     e04:	00000057 	andeq	r0, r0, r7, asr r0
     e08:	6a030501 	bvs	c2214 <__Stack_Size+0xc1e14>
     e0c:	2a200001 	bcs	800e18 <__Stack_Size+0x800a18>
     e10:	000002cc 	andeq	r0, r0, ip, asr #5
     e14:	00575801 	subseq	r5, r7, r1, lsl #16
     e18:	05010000 	streq	r0, [r1]
     e1c:	00016c03 	andeq	r6, r1, r3, lsl #24
     e20:	009b2a20 	addseq	r2, fp, r0, lsr #20
     e24:	59010000 	stmdbpl	r1, {}
     e28:	00000057 	andeq	r0, r0, r7, asr r0
     e2c:	6e030501 	cfsh32vs	mvfx0, mvfx3, #1
     e30:	2a200001 	bcs	800e3c <__Stack_Size+0x800a3c>
     e34:	000004d9 	ldrdeq	r0, [r0], -r9
     e38:	00575901 	subseq	r5, r7, r1, lsl #18
     e3c:	05010000 	streq	r0, [r1]
     e40:	00017003 	andeq	r7, r1, r3
     e44:	00ad2a20 	adceq	r2, sp, r0, lsr #20
     e48:	59010000 	stmdbpl	r1, {}
     e4c:	00000057 	andeq	r0, r0, r7, asr r0
     e50:	72030501 	andvc	r0, r3, #4194304	; 0x400000
     e54:	2a200001 	bcs	800e60 <__Stack_Size+0x800a60>
     e58:	000000b6 	strheq	r0, [r0], -r6
     e5c:	00575901 	subseq	r5, r7, r1, lsl #18
     e60:	05010000 	streq	r0, [r1]
     e64:	00017403 	andeq	r7, r1, r3, lsl #8
     e68:	00bf2a20 	adcseq	r2, pc, r0, lsr #20
     e6c:	59010000 	stmdbpl	r1, {}
     e70:	00000057 	andeq	r0, r0, r7, asr r0
     e74:	76030501 	strvc	r0, [r3], -r1, lsl #10
     e78:	2a200001 	bcs	800e84 <__Stack_Size+0x800a84>
     e7c:	000000c8 	andeq	r0, r0, r8, asr #1
     e80:	00575901 	subseq	r5, r7, r1, lsl #18
     e84:	05010000 	streq	r0, [r1]
     e88:	00017803 	andeq	r7, r1, r3, lsl #16
     e8c:	00692820 	rsbeq	r2, r9, r0, lsr #16
     e90:	0dcc0000 	stcleq	0, cr0, [ip]
     e94:	d9290000 	stmdble	r9!, {}
     e98:	0b000000 	bleq	ea0 <__Stack_Size+0xaa0>
     e9c:	04bb2a00 	ldrteq	r2, [fp], #2560
     ea0:	5b010000 	blpl	40ea8 <__Stack_Size+0x40aa8>
     ea4:	00000dbc 	strheq	r0, [r0], -ip
     ea8:	7a030501 	bvc	c22b4 <__Stack_Size+0xc1eb4>
     eac:	00200001 	eoreq	r0, r0, r1
     eb0:	0000057b 	andeq	r0, r0, fp, ror r5
     eb4:	02b20002 	adcseq	r0, r2, #2	; 0x2
     eb8:	01040000 	tsteq	r4, r0
     ebc:	0000053b 	andeq	r0, r0, fp, lsr r5
     ec0:	000d9d01 	andeq	r9, sp, r1, lsl #26
     ec4:	00043100 	andeq	r3, r4, r0, lsl #2
     ec8:	0039b800 	eorseq	fp, r9, r0, lsl #16
     ecc:	003aec08 	eorseq	lr, sl, r8, lsl #24
     ed0:	00035e08 	andeq	r5, r3, r8, lsl #28
     ed4:	ee010200 	cdp	2, 0, cr0, cr1, cr0, {0}
     ed8:	0100000a 	tsteq	r0, sl
     edc:	39b80124 	ldmibcc	r8!, {r2, r5, r8}
     ee0:	39ba0800 	ldmibcc	sl!, {fp}
     ee4:	5d010800 	stcpl	8, cr0, [r1]
     ee8:	093a0102 	ldmdbeq	sl!, {r1, r8}
     eec:	2f010000 	svccs	0x00010000
     ef0:	0039bc01 	eorseq	fp, r9, r1, lsl #24
     ef4:	0039be08 	eorseq	fp, r9, r8, lsl #28
     ef8:	025d0108 	subseq	r0, sp, #2	; 0x2
     efc:	000adb01 	andeq	sp, sl, r1, lsl #22
     f00:	013e0100 	teqeq	lr, r0, lsl #2
     f04:	080039c0 	stmdaeq	r0, {r6, r7, r8, fp, ip, sp}
     f08:	080039c2 	stmdaeq	r0, {r1, r6, r7, r8, fp, ip, sp}
     f0c:	01025d01 	tsteq	r2, r1, lsl #26
     f10:	000008ca 	andeq	r0, r0, sl, asr #17
     f14:	c4014d01 	strgt	r4, [r1], #-3329
     f18:	c6080039 	undefined
     f1c:	01080039 	tsteq	r8, r9, lsr r0
     f20:	5b01025d 	blpl	4189c <__Stack_Size+0x4149c>
     f24:	0100000b 	tsteq	r0, fp
     f28:	39c8015c 	stmibcc	r8, {r2, r3, r4, r6, r8}^
     f2c:	39ca0800 	stmibcc	sl, {fp}^
     f30:	5d010800 	stcpl	8, cr0, [r1]
     f34:	09ab0102 	stmibeq	fp!, {r1, r8}
     f38:	6b010000 	blvs	40f40 <__Stack_Size+0x40b40>
     f3c:	0039cc01 	eorseq	ip, r9, r1, lsl #24
     f40:	0039ce08 	eorseq	ip, r9, r8, lsl #28
     f44:	025d0108 	subseq	r0, sp, #2	; 0x2
     f48:	000a7601 	andeq	r7, sl, r1, lsl #12
     f4c:	01760100 	cmneq	r6, r0, lsl #2
     f50:	080039d0 	stmdaeq	r0, {r4, r6, r7, r8, fp, ip, sp}
     f54:	080039d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, fp, ip, sp}
     f58:	01025d01 	tsteq	r2, r1, lsl #26
     f5c:	00000d85 	andeq	r0, r0, r5, lsl #27
     f60:	d4018101 	strle	r8, [r1], #-257
     f64:	d6080039 	undefined
     f68:	01080039 	tsteq	r8, r9, lsr r0
     f6c:	4101025d 	tstmi	r1, sp, asr r2
     f70:	0100000d 	tsteq	r0, sp
     f74:	39d80198 	ldmibcc	r8, {r3, r4, r7, r8}^
     f78:	39da0800 	ldmibcc	sl, {fp}^
     f7c:	5d010800 	stcpl	8, cr0, [r1]
     f80:	092b0102 	stmdbeq	fp!, {r1, r8}
     f84:	a3010000 	movwge	r0, #4096	; 0x1000
     f88:	0039dc01 	eorseq	sp, r9, r1, lsl #24
     f8c:	0039de08 	eorseq	sp, r9, r8, lsl #28
     f90:	025d0108 	subseq	r0, sp, #2	; 0x2
     f94:	00095f01 	andeq	r5, r9, r1, lsl #30
     f98:	01ae0100 	undefined instruction 0x01ae0100
     f9c:	080039e0 	stmdaeq	r0, {r5, r6, r7, r8, fp, ip, sp}
     fa0:	080039e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, fp, ip, sp}
     fa4:	01025d01 	tsteq	r2, r1, lsl #26
     fa8:	00000a91 	muleq	r0, r1, sl
     fac:	e401b901 	str	fp, [r1], #-2305
     fb0:	e6080039 	undefined
     fb4:	01080039 	tsteq	r8, r9, lsr r0
     fb8:	4a01025d 	bmi	41934 <__Stack_Size+0x41534>
     fbc:	0100000b 	tsteq	r0, fp
     fc0:	39e801c4 	stmibcc	r8!, {r2, r6, r7, r8}^
     fc4:	39ea0800 	stmibcc	sl!, {fp}^
     fc8:	5d010800 	stcpl	8, cr0, [r1]
     fcc:	0d220102 	stfeqs	f0, [r2, #-8]!
     fd0:	cf010000 	svcgt	0x00010000
     fd4:	0039ec01 	eorseq	lr, r9, r1, lsl #24
     fd8:	0039ee08 	eorseq	lr, r9, r8, lsl #28
     fdc:	025d0108 	subseq	r0, sp, #2	; 0x2
     fe0:	00091a01 	andeq	r1, r9, r1, lsl #20
     fe4:	01da0100 	bicseq	r0, sl, r0, lsl #2
     fe8:	080039f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, ip, sp}
     fec:	080039f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, fp, ip, sp}
     ff0:	01025d01 	tsteq	r2, r1, lsl #26
     ff4:	00000bf2 	strdeq	r0, [r0], -r2
     ff8:	f401e501 	vst3.8	{d14,d16,d18}, [r1], r1
     ffc:	f6080039 	undefined instruction 0xf6080039
    1000:	01080039 	tsteq	r8, r9, lsr r0
    1004:	dc01025d 	sfmle	f0, 4, [r1], {93}
    1008:	01000008 	tsteq	r0, r8
    100c:	39f801f0 	ldmibcc	r8!, {r4, r5, r6, r7, r8}^
    1010:	39fa0800 	ldmibcc	sl!, {fp}^
    1014:	5d010800 	stcpl	8, cr0, [r1]
    1018:	0afb0102 	beq	ffec1428 <SCS_BASE+0x1feb3428>
    101c:	fb010000 	blx	41026 <__Stack_Size+0x40c26>
    1020:	0039fc01 	eorseq	pc, r9, r1, lsl #24
    1024:	0039fe08 	eorseq	pc, r9, r8, lsl #28
    1028:	035d0108 	cmpeq	sp, #2	; 0x2
    102c:	000d6101 	andeq	r6, sp, r1, lsl #2
    1030:	01060100 	tsteq	r6, r0, lsl #2
    1034:	003a0001 	eorseq	r0, sl, r1
    1038:	003a0208 	eorseq	r0, sl, r8, lsl #4
    103c:	035d0108 	cmpeq	sp, #2	; 0x2
    1040:	000a5d01 	andeq	r5, sl, r1, lsl #26
    1044:	01110100 	tsteq	r1, r0, lsl #2
    1048:	003a0401 	eorseq	r0, sl, r1, lsl #8
    104c:	003a0608 	eorseq	r0, sl, r8, lsl #12
    1050:	035d0108 	cmpeq	sp, #2	; 0x2
    1054:	000cbe01 	andeq	fp, ip, r1, lsl #28
    1058:	011c0100 	tsteq	ip, r0, lsl #2
    105c:	003a0801 	eorseq	r0, sl, r1, lsl #16
    1060:	003a0a08 	eorseq	r0, sl, r8, lsl #20
    1064:	035d0108 	cmpeq	sp, #2	; 0x2
    1068:	0009b801 	andeq	fp, r9, r1, lsl #16
    106c:	01270100 	teqeq	r7, r0, lsl #2
    1070:	003a0c01 	eorseq	r0, sl, r1, lsl #24
    1074:	003a0e08 	eorseq	r0, sl, r8, lsl #28
    1078:	035d0108 	cmpeq	sp, #2	; 0x2
    107c:	000a1d01 	andeq	r1, sl, r1, lsl #26
    1080:	01320100 	teqeq	r2, r0, lsl #2
    1084:	003a1001 	eorseq	r1, sl, r1
    1088:	003a1208 	eorseq	r1, sl, r8, lsl #4
    108c:	035d0108 	cmpeq	sp, #2	; 0x2
    1090:	000dde01 	andeq	sp, sp, r1, lsl #28
    1094:	013d0100 	teqeq	sp, r0, lsl #2
    1098:	003a1401 	eorseq	r1, sl, r1, lsl #8
    109c:	003a1608 	eorseq	r1, sl, r8, lsl #12
    10a0:	035d0108 	cmpeq	sp, #2	; 0x2
    10a4:	000b9601 	andeq	r9, fp, r1, lsl #12
    10a8:	01480100 	cmpeq	r8, r0, lsl #2
    10ac:	003a1801 	eorseq	r1, sl, r1, lsl #16
    10b0:	003a1a08 	eorseq	r1, sl, r8, lsl #20
    10b4:	035d0108 	cmpeq	sp, #2	; 0x2
    10b8:	000db401 	andeq	fp, sp, r1, lsl #8
    10bc:	01530100 	cmpeq	r3, r0, lsl #2
    10c0:	003a1c01 	eorseq	r1, sl, r1, lsl #24
    10c4:	003a1e08 	eorseq	r1, sl, r8, lsl #28
    10c8:	035d0108 	cmpeq	sp, #2	; 0x2
    10cc:	00094d01 	andeq	r4, r9, r1, lsl #26
    10d0:	015f0100 	cmpeq	pc, r0, lsl #2
    10d4:	003a2001 	eorseq	r2, sl, r1
    10d8:	003a2208 	eorseq	r2, sl, r8, lsl #4
    10dc:	035d0108 	cmpeq	sp, #2	; 0x2
    10e0:	000c6e01 	andeq	r6, ip, r1, lsl #28
    10e4:	016b0100 	cmneq	fp, r0, lsl #2
    10e8:	003a2401 	eorseq	r2, sl, r1, lsl #8
    10ec:	003a2608 	eorseq	r2, sl, r8, lsl #12
    10f0:	035d0108 	cmpeq	sp, #2	; 0x2
    10f4:	000c5401 	andeq	r5, ip, r1, lsl #8
    10f8:	01770100 	cmneq	r7, r0, lsl #2
    10fc:	003a2801 	eorseq	r2, sl, r1, lsl #16
    1100:	003a2a08 	eorseq	r2, sl, r8, lsl #20
    1104:	035d0108 	cmpeq	sp, #2	; 0x2
    1108:	00098901 	andeq	r8, r9, r1, lsl #18
    110c:	01820100 	orreq	r0, r2, r0, lsl #2
    1110:	003a2c01 	eorseq	r2, sl, r1, lsl #24
    1114:	003a2e08 	eorseq	r2, sl, r8, lsl #28
    1118:	035d0108 	cmpeq	sp, #2	; 0x2
    111c:	000bcf01 	andeq	ip, fp, r1, lsl #30
    1120:	018d0100 	orreq	r0, sp, r0, lsl #2
    1124:	003a3001 	eorseq	r3, sl, r1
    1128:	003a3208 	eorseq	r3, sl, r8, lsl #4
    112c:	035d0108 	cmpeq	sp, #2	; 0x2
    1130:	000d7201 	andeq	r7, sp, r1, lsl #4
    1134:	01980100 	orrseq	r0, r8, r0, lsl #2
    1138:	003a3401 	eorseq	r3, sl, r1, lsl #8
    113c:	003a3608 	eorseq	r3, sl, r8, lsl #12
    1140:	035d0108 	cmpeq	sp, #2	; 0x2
    1144:	00090601 	andeq	r0, r9, r1, lsl #12
    1148:	01a30100 	undefined instruction 0x01a30100
    114c:	003a3801 	eorseq	r3, sl, r1, lsl #16
    1150:	003a3a08 	eorseq	r3, sl, r8, lsl #20
    1154:	035d0108 	cmpeq	sp, #2	; 0x2
    1158:	0009d101 	andeq	sp, r9, r1, lsl #2
    115c:	01af0100 	undefined instruction 0x01af0100
    1160:	003a3c01 	eorseq	r3, sl, r1, lsl #24
    1164:	003a3e08 	eorseq	r3, sl, r8, lsl #28
    1168:	035d0108 	cmpeq	sp, #2	; 0x2
    116c:	000d0a01 	andeq	r0, sp, r1, lsl #20
    1170:	01bb0100 	undefined instruction 0x01bb0100
    1174:	003a4001 	eorseq	r4, sl, r1
    1178:	003a4208 	eorseq	r4, sl, r8, lsl #4
    117c:	035d0108 	cmpeq	sp, #2	; 0x2
    1180:	0009f701 	andeq	pc, r9, r1, lsl #14
    1184:	01c60100 	biceq	r0, r6, r0, lsl #2
    1188:	003a4401 	eorseq	r4, sl, r1, lsl #8
    118c:	003a4608 	eorseq	r4, sl, r8, lsl #12
    1190:	035d0108 	cmpeq	sp, #2	; 0x2
    1194:	000bbf01 	andeq	fp, fp, r1, lsl #30
    1198:	01dd0100 	bicseq	r0, sp, r0, lsl #2
    119c:	003a4801 	eorseq	r4, sl, r1, lsl #16
    11a0:	003a4a08 	eorseq	r4, sl, r8, lsl #20
    11a4:	035d0108 	cmpeq	sp, #2	; 0x2
    11a8:	000cfa01 	andeq	pc, ip, r1, lsl #20
    11ac:	01e90100 	mvneq	r0, r0, lsl #2
    11b0:	003a4c01 	eorseq	r4, sl, r1, lsl #24
    11b4:	003a4e08 	eorseq	r4, sl, r8, lsl #28
    11b8:	035d0108 	cmpeq	sp, #2	; 0x2
    11bc:	000b6f01 	andeq	r6, fp, r1, lsl #30
    11c0:	01f50100 	mvnseq	r0, r0, lsl #2
    11c4:	003a5001 	eorseq	r5, sl, r1
    11c8:	003a5208 	eorseq	r5, sl, r8, lsl #4
    11cc:	035d0108 	cmpeq	sp, #2	; 0x2
    11d0:	000c8701 	andeq	r8, ip, r1, lsl #14
    11d4:	02000100 	andeq	r0, r0, #0	; 0x0
    11d8:	003a5401 	eorseq	r5, sl, r1, lsl #8
    11dc:	003a5608 	eorseq	r5, sl, r8, lsl #12
    11e0:	035d0108 	cmpeq	sp, #2	; 0x2
    11e4:	000c1c01 	andeq	r1, ip, r1, lsl #24
    11e8:	020b0100 	andeq	r0, fp, #0	; 0x0
    11ec:	003a5801 	eorseq	r5, sl, r1, lsl #16
    11f0:	003a5a08 	eorseq	r5, sl, r8, lsl #20
    11f4:	035d0108 	cmpeq	sp, #2	; 0x2
    11f8:	000c2f01 	andeq	r2, ip, r1, lsl #30
    11fc:	02160100 	andseq	r0, r6, #0	; 0x0
    1200:	003a5c01 	eorseq	r5, sl, r1, lsl #24
    1204:	003a5e08 	eorseq	r5, sl, r8, lsl #28
    1208:	035d0108 	cmpeq	sp, #2	; 0x2
    120c:	000c9a01 	andeq	r9, ip, r1, lsl #20
    1210:	02210100 	eoreq	r0, r1, #0	; 0x0
    1214:	003a6001 	eorseq	r6, sl, r1
    1218:	003a6208 	eorseq	r6, sl, r8, lsl #4
    121c:	035d0108 	cmpeq	sp, #2	; 0x2
    1220:	000d5101 	andeq	r5, sp, r1, lsl #2
    1224:	022c0100 	eoreq	r0, ip, #0	; 0x0
    1228:	003a6401 	eorseq	r6, sl, r1, lsl #8
    122c:	003a6608 	eorseq	r6, sl, r8, lsl #12
    1230:	035d0108 	cmpeq	sp, #2	; 0x2
    1234:	000ce801 	andeq	lr, ip, r1, lsl #16
    1238:	02510100 	subseq	r0, r1, #0	; 0x0
    123c:	003a6801 	eorseq	r6, sl, r1, lsl #16
    1240:	003a6a08 	eorseq	r6, sl, r8, lsl #20
    1244:	035d0108 	cmpeq	sp, #2	; 0x2
    1248:	000a3601 	andeq	r3, sl, r1, lsl #12
    124c:	02690100 	rsbeq	r0, r9, #0	; 0x0
    1250:	003a6c01 	eorseq	r6, sl, r1, lsl #24
    1254:	003a6e08 	eorseq	r6, sl, r8, lsl #28
    1258:	035d0108 	cmpeq	sp, #2	; 0x2
    125c:	000b8201 	andeq	r8, fp, r1, lsl #4
    1260:	02750100 	rsbseq	r0, r5, #0	; 0x0
    1264:	003a7001 	eorseq	r7, sl, r1
    1268:	003a7208 	eorseq	r7, sl, r8, lsl #4
    126c:	035d0108 	cmpeq	sp, #2	; 0x2
    1270:	000b2501 	andeq	r2, fp, r1, lsl #10
    1274:	02800100 	addeq	r0, r0, #0	; 0x0
    1278:	003a7401 	eorseq	r7, sl, r1, lsl #8
    127c:	003a7608 	eorseq	r7, sl, r8, lsl #12
    1280:	035d0108 	cmpeq	sp, #2	; 0x2
    1284:	000caa01 	andeq	sl, ip, r1, lsl #20
    1288:	028b0100 	addeq	r0, fp, #0	; 0x0
    128c:	003a7801 	eorseq	r7, sl, r1, lsl #16
    1290:	003a7a08 	eorseq	r7, sl, r8, lsl #20
    1294:	035d0108 	cmpeq	sp, #2	; 0x2
    1298:	0009e401 	andeq	lr, r9, r1, lsl #8
    129c:	02970100 	addseq	r0, r7, #0	; 0x0
    12a0:	003a7c01 	eorseq	r7, sl, r1, lsl #24
    12a4:	003a7e08 	eorseq	r7, sl, r8, lsl #28
    12a8:	035d0108 	cmpeq	sp, #2	; 0x2
    12ac:	00097101 	andeq	r7, r9, r1, lsl #2
    12b0:	02a30100 	adceq	r0, r3, #0	; 0x0
    12b4:	003a8001 	eorseq	r8, sl, r1
    12b8:	003a8208 	eorseq	r8, sl, r8, lsl #4
    12bc:	035d0108 	cmpeq	sp, #2	; 0x2
    12c0:	000a0a01 	andeq	r0, sl, r1, lsl #20
    12c4:	02ae0100 	adceq	r0, lr, #0	; 0x0
    12c8:	003a8401 	eorseq	r8, sl, r1, lsl #8
    12cc:	003a8608 	eorseq	r8, sl, r8, lsl #12
    12d0:	035d0108 	cmpeq	sp, #2	; 0x2
    12d4:	000a8101 	andeq	r8, sl, r1, lsl #2
    12d8:	02b90100 	adcseq	r0, r9, #0	; 0x0
    12dc:	003a8801 	eorseq	r8, sl, r1, lsl #16
    12e0:	003a8a08 	eorseq	r8, sl, r8, lsl #20
    12e4:	035d0108 	cmpeq	sp, #2	; 0x2
    12e8:	000be201 	andeq	lr, fp, r1, lsl #4
    12ec:	02c40100 	sbceq	r0, r4, #0	; 0x0
    12f0:	003a8c01 	eorseq	r8, sl, r1, lsl #24
    12f4:	003a8e08 	eorseq	r8, sl, r8, lsl #28
    12f8:	035d0108 	cmpeq	sp, #2	; 0x2
    12fc:	000b3a01 	andeq	r3, fp, r1, lsl #20
    1300:	02cf0100 	sbceq	r0, pc, #0	; 0x0
    1304:	003a9001 	eorseq	r9, sl, r1
    1308:	003a9208 	eorseq	r9, sl, r8, lsl #4
    130c:	035d0108 	cmpeq	sp, #2	; 0x2
    1310:	000aa001 	andeq	sl, sl, r1
    1314:	02da0100 	sbcseq	r0, sl, #0	; 0x0
    1318:	003a9401 	eorseq	r9, sl, r1, lsl #8
    131c:	003a9608 	eorseq	r9, sl, r8, lsl #12
    1320:	035d0108 	cmpeq	sp, #2	; 0x2
    1324:	000baf01 	andeq	sl, fp, r1, lsl #30
    1328:	02e60100 	rsceq	r0, r6, #0	; 0x0
    132c:	003a9801 	eorseq	r9, sl, r1, lsl #16
    1330:	003a9a08 	eorseq	r9, sl, r8, lsl #20
    1334:	035d0108 	cmpeq	sp, #2	; 0x2
    1338:	000cd701 	andeq	sp, ip, r1, lsl #14
    133c:	02f10100 	rscseq	r0, r1, #0	; 0x0
    1340:	003a9c01 	eorseq	r9, sl, r1, lsl #24
    1344:	003a9e08 	eorseq	r9, sl, r8, lsl #28
    1348:	035d0108 	cmpeq	sp, #2	; 0x2
    134c:	000dcd01 	andeq	ip, sp, r1, lsl #26
    1350:	02fc0100 	rscseq	r0, ip, #0	; 0x0
    1354:	003aa001 	eorseq	sl, sl, r1
    1358:	003aa208 	eorseq	sl, sl, r8, lsl #4
    135c:	035d0108 	cmpeq	sp, #2	; 0x2
    1360:	000d8d01 	andeq	r8, sp, r1, lsl #26
    1364:	03090100 	movweq	r0, #37120	; 0x9100
    1368:	003aa401 	eorseq	sl, sl, r1, lsl #8
    136c:	003aa608 	eorseq	sl, sl, r8, lsl #12
    1370:	035d0108 	cmpeq	sp, #2	; 0x2
    1374:	000d3101 	andeq	r3, sp, r1, lsl #2
    1378:	03140100 	tsteq	r4, #0	; 0x0
    137c:	003aa801 	eorseq	sl, sl, r1, lsl #16
    1380:	003aaa08 	eorseq	sl, sl, r8, lsl #20
    1384:	035d0108 	cmpeq	sp, #2	; 0x2
    1388:	000c0301 	andeq	r0, ip, r1, lsl #6
    138c:	031f0100 	tsteq	pc, #0	; 0x0
    1390:	003aac01 	eorseq	sl, sl, r1, lsl #24
    1394:	003aae08 	eorseq	sl, sl, r8, lsl #28
    1398:	035d0108 	cmpeq	sp, #2	; 0x2
    139c:	0008ed01 	andeq	lr, r8, r1, lsl #26
    13a0:	032a0100 	teqeq	sl, #0	; 0x0
    13a4:	003ab001 	eorseq	fp, sl, r1
    13a8:	003ab208 	eorseq	fp, sl, r8, lsl #4
    13ac:	035d0108 	cmpeq	sp, #2	; 0x2
    13b0:	000b0c01 	andeq	r0, fp, r1, lsl #24
    13b4:	03350100 	teqeq	r5, #0	; 0x0
    13b8:	003ab401 	eorseq	fp, sl, r1, lsl #8
    13bc:	003ab608 	eorseq	fp, sl, r8, lsl #12
    13c0:	035d0108 	cmpeq	sp, #2	; 0x2
    13c4:	000ab001 	andeq	fp, sl, r1
    13c8:	03410100 	movteq	r0, #4352	; 0x1100
    13cc:	003ab801 	eorseq	fp, sl, r1, lsl #16
    13d0:	003aba08 	eorseq	fp, sl, r8, lsl #20
    13d4:	045d0108 	ldrbeq	r0, [sp], #-264
    13d8:	000a4b01 	andeq	r4, sl, r1, lsl #22
    13dc:	025c0100 	subseq	r0, ip, #0	; 0x0
    13e0:	003abc01 	eorseq	fp, sl, r1, lsl #24
    13e4:	003ac808 	eorseq	ip, sl, r8, lsl #16
    13e8:	00042708 	andeq	r2, r4, r8, lsl #14
    13ec:	42010400 	andmi	r0, r1, #0	; 0x0
    13f0:	0100000c 	tsteq	r0, ip
    13f4:	c8010245 	stmdagt	r1, {r0, r2, r6, r9}
    13f8:	d408003a 	strle	r0, [r8], #-58
    13fc:	5208003a 	andpl	r0, r8, #58	; 0x3a
    1400:	04000004 	streq	r0, [r0], #-4
    1404:	000acb01 	andeq	ip, sl, r1, lsl #22
    1408:	01d10100 	bicseq	r0, r1, r0, lsl #2
    140c:	003ad401 	eorseq	sp, sl, r1, lsl #8
    1410:	003ae008 	eorseq	lr, sl, r8
    1414:	00047d08 	andeq	r7, r4, r8, lsl #26
    1418:	9c010500 	cfstr32ls	mvfx0, [r1], {0}
    141c:	01000009 	tsteq	r0, r9
    1420:	3ae0018c 	bcc	ff801a58 <SCS_BASE+0x1f7f3a58>
    1424:	3aec0800 	bcc	ffb0342c <SCS_BASE+0x1faf542c>
    1428:	04a80800 	strteq	r0, [r8], #2048
    142c:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    1430:	02000001 	andeq	r0, r0, #1	; 0x1
    1434:	00031a00 	andeq	r1, r3, r0, lsl #20
    1438:	3b010400 	blcc	42440 <__Stack_Size+0x42040>
    143c:	01000005 	tsteq	r0, r5
    1440:	00000e52 	andeq	r0, r0, r2, asr lr
    1444:	00000431 	andeq	r0, r0, r1, lsr r4
    1448:	08003aec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, fp, ip, sp}
    144c:	08003b78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, fp, ip, sp}
    1450:	000004ba 	strheq	r0, [r0], -sl
    1454:	21050402 	tstcs	r5, r2, lsl #8
    1458:	0200002e 	andeq	r0, r0, #46	; 0x2e
    145c:	05b80502 	ldreq	r0, [r8, #1282]!
    1460:	01020000 	tsteq	r2, r0
    1464:	0006cc06 	andeq	ip, r6, r6, lsl #24
    1468:	07040200 	streq	r0, [r4, -r0, lsl #4]
    146c:	00002e9b 	muleq	r0, fp, lr
    1470:	1e070202 	cdpne	2, 0, cr0, cr7, cr2, {0}
    1474:	02000008 	andeq	r0, r0, #8	; 0x8
    1478:	06ca0801 	strbeq	r0, [sl], r1, lsl #16
    147c:	04030000 	streq	r0, [r3]
    1480:	f7010407 	undefined instruction 0xf7010407
    1484:	0100000d 	tsteq	r0, sp
    1488:	006b014b 	rsbeq	r0, fp, fp, asr #2
    148c:	3aec0000 	bcc	ffb01494 <SCS_BASE+0x1faf3494>
    1490:	3af80800 	bcc	ffe03498 <SCS_BASE+0x1fdf5498>
    1494:	04d30800 	ldrbeq	r0, [r3], #2048
    1498:	04050000 	streq	r0, [r5]
    149c:	746e6905 	strbtvc	r6, [lr], #-2309
    14a0:	25010600 	strcs	r0, [r1, #-1536]
    14a4:	0100000e 	tsteq	r0, lr
    14a8:	3af80142 	bcc	ffe019b8 <SCS_BASE+0x1fdf39b8>
    14ac:	3b0c0800 	blcc	3034b4 <__Stack_Size+0x3030b4>
    14b0:	04fe0800 	ldrbteq	r0, [lr], #2048
    14b4:	009b0000 	addseq	r0, fp, r0
    14b8:	87070000 	strhi	r0, [r7, -r0]
    14bc:	0100000e 	tsteq	r0, lr
    14c0:	00006b41 	andeq	r6, r0, r1, asr #22
    14c4:	00052900 	andeq	r2, r5, r0, lsl #18
    14c8:	01080000 	tsteq	r8, r0
    14cc:	00000e47 	andeq	r0, r0, r7, asr #28
    14d0:	6b012f01 	blvs	4d0dc <__Stack_Size+0x4ccdc>
    14d4:	0c000000 	stceq	0, cr0, [r0], {0}
    14d8:	3208003b 	andcc	r0, r8, #59	; 0x3b
    14dc:	4708003b 	smladxmi	r8, fp, r0, r0
    14e0:	e2000005 	and	r0, r0, #5	; 0x5
    14e4:	07000000 	streq	r0, [r0, -r0]
    14e8:	00000e10 	andeq	r0, r0, r0, lsl lr
    14ec:	00e22e01 	rsceq	r2, r2, r1, lsl #28
    14f0:	05660000 	strbeq	r0, [r6]!
    14f4:	7d070000 	stcvc	0, cr0, [r7]
    14f8:	0100000e 	tsteq	r0, lr
    14fc:	00006b2e 	andeq	r6, r0, lr, lsr #22
    1500:	00058400 	andeq	r8, r5, r0, lsl #8
    1504:	00690900 	rsbeq	r0, r9, r0, lsl #18
    1508:	00483501 	subeq	r3, r8, r1, lsl #10
    150c:	54010000 	strpl	r0, [r1]
    1510:	48040a00 	stmdami	r4, {r9, fp}
    1514:	08000000 	stmdaeq	r0, {}
    1518:	000e7201 	andeq	r7, lr, r1, lsl #4
    151c:	01210100 	teqeq	r1, r0, lsl #2
    1520:	0000006b 	andeq	r0, r0, fp, rrx
    1524:	08003b34 	stmdaeq	r0, {r2, r4, r5, r8, r9, fp, ip, sp}
    1528:	08003b50 	stmdaeq	r0, {r4, r6, r8, r9, fp, ip, sp}
    152c:	000005a2 	andeq	r0, r0, r2, lsr #11
    1530:	0000012f 	andeq	r0, r0, pc, lsr #2
    1534:	000e1007 	andeq	r1, lr, r7
    1538:	e2200100 	eor	r0, r0, #0	; 0x0
    153c:	c1000000 	tstgt	r0, r0
    1540:	07000005 	streq	r0, [r0, -r5]
    1544:	00000e7d 	andeq	r0, r0, sp, ror lr
    1548:	006b2001 	rsbeq	r2, fp, r1
    154c:	05df0000 	ldrbeq	r0, [pc, #0]	; 1554 <__Stack_Size+0x1154>
    1550:	69090000 	stmdbvs	r9, {}
    1554:	48270100 	stmdami	r7!, {r8}
    1558:	01000000 	tsteq	r0, r0
    155c:	010b0054 	qaddeq	r0, r4, fp
    1560:	00000e64 	andeq	r0, r0, r4, ror #28
    1564:	50011a01 	andpl	r1, r1, r1, lsl #20
    1568:	5c08003b 	stcpl	0, cr0, [r8], {59}
    156c:	fd08003b 	stc2	0, cr0, [r8, #-236]
    1570:	0b000005 	bleq	158c <__Stack_Size+0x118c>
    1574:	000e3901 	andeq	r3, lr, r1, lsl #18
    1578:	01120100 	tsteq	r2, r0, lsl #2
    157c:	08003b5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, fp, ip, sp}
    1580:	08003b68 	stmdaeq	r0, {r3, r5, r6, r8, r9, fp, ip, sp}
    1584:	00000628 	andeq	r0, r0, r8, lsr #12
    1588:	0e18010c 	mufeqe	f0, f0, #4.0
    158c:	07010000 	streq	r0, [r1, -r0]
    1590:	00006b01 	andeq	r6, r0, r1, lsl #22
    1594:	003b6800 	eorseq	r6, fp, r0, lsl #16
    1598:	003b7808 	eorseq	r7, fp, r8, lsl #16
    159c:	00065308 	andeq	r5, r6, r8, lsl #6
    15a0:	0e070700 	cdpeq	7, 0, cr0, cr7, cr0, {0}
    15a4:	06010000 	streq	r0, [r1], -r0
    15a8:	0000006b 	andeq	r0, r0, fp, rrx
    15ac:	0000067e 	andeq	r0, r0, lr, ror r6
    15b0:	0000a407 	andeq	sl, r0, r7, lsl #8
    15b4:	6b060100 	blvs	1819bc <__Stack_Size+0x1815bc>
    15b8:	91000000 	tstls	r0, r0
    15bc:	00000006 	andeq	r0, r0, r6
    15c0:	00058900 	andeq	r8, r5, r0, lsl #18
    15c4:	e7000200 	str	r0, [r0, -r0, lsl #4]
    15c8:	04000003 	streq	r0, [r0], #-3
    15cc:	00053b01 	andeq	r3, r5, r1, lsl #22
    15d0:	0fa00100 	svceq	0x00a00100
    15d4:	04310000 	ldrteq	r0, [r1]
    15d8:	3b780000 	blcc	1e015e0 <__Stack_Size+0x1e011e0>
    15dc:	3f840800 	svccc	0x00840800
    15e0:	052d0800 	streq	r0, [sp, #-2048]!
    15e4:	01020000 	tsteq	r2, r0
    15e8:	00000f53 	andeq	r0, r0, r3, asr pc
    15ec:	01011c01 	tsteq	r1, r1, lsl #24
    15f0:	00000051 	andeq	r0, r0, r1, asr r0
    15f4:	00005101 	andeq	r5, r0, r1, lsl #2
    15f8:	0eef0300 	cdpeq	3, 14, cr0, cr15, cr0, {0}
    15fc:	1b010000 	blne	41604 <__Stack_Size+0x41204>
    1600:	00005101 	andeq	r5, r0, r1, lsl #2
    1604:	06250400 	strteq	r0, [r5], -r0, lsl #8
    1608:	1d010000 	stcne	0, cr0, [r1]
    160c:	00005801 	andeq	r5, r0, r1, lsl #16
    1610:	04050000 	streq	r0, [r5]
    1614:	746e6905 	strbtvc	r6, [lr], #-2309
    1618:	07020600 	streq	r0, [r2, -r0, lsl #12]
    161c:	0000081e 	andeq	r0, r0, lr, lsl r8
    1620:	0f190102 	svceq	0x00190102
    1624:	24010000 	strcs	r0, [r1]
    1628:	00510101 	subseq	r0, r1, r1, lsl #2
    162c:	8b010000 	blhi	41634 <__Stack_Size+0x41234>
    1630:	03000000 	movweq	r0, #0	; 0x0
    1634:	00000eef 	andeq	r0, r0, pc, ror #29
    1638:	51012301 	tstpl	r1, r1, lsl #6
    163c:	04000000 	streq	r0, [r0]
    1640:	00000625 	andeq	r0, r0, r5, lsr #12
    1644:	58012501 	stmdapl	r1, {r0, r8, sl, sp}
    1648:	00000000 	andeq	r0, r0, r0
    164c:	10360102 	eorsne	r0, r6, r2, lsl #2
    1650:	12010000 	andne	r0, r1, #0	; 0x0
    1654:	00510101 	subseq	r0, r1, r1, lsl #2
    1658:	c3010000 	movwgt	r0, #4096	; 0x1000
    165c:	03000000 	movweq	r0, #0	; 0x0
    1660:	00000f5b 	andeq	r0, r0, fp, asr pc
    1664:	51011101 	tstpl	r1, r1, lsl #2
    1668:	03000000 	movweq	r0, #0	; 0x0
    166c:	00000f21 	andeq	r0, r0, r1, lsr #30
    1670:	51011101 	tstpl	r1, r1, lsl #2
    1674:	04000000 	streq	r0, [r0]
    1678:	00000eef 	andeq	r0, r0, pc, ror #29
    167c:	58011301 	stmdapl	r1, {r0, r8, r9, ip}
    1680:	00000000 	andeq	r0, r0, r0
    1684:	100c0107 	andne	r0, ip, r7, lsl #2
    1688:	e7010000 	str	r0, [r1, -r0]
    168c:	00005101 	andeq	r5, r0, r1, lsl #2
    1690:	003b7800 	eorseq	r7, fp, r0, lsl #16
    1694:	003b8408 	eorseq	r8, fp, r8, lsl #8
    1698:	085d0108 	ldmdaeq	sp, {r3, r8}^
    169c:	000fda01 	andeq	sp, pc, r1, lsl #20
    16a0:	01ec0100 	mvneq	r0, r0, lsl #2
    16a4:	08003b84 	stmdaeq	r0, {r2, r7, r8, r9, fp, ip, sp}
    16a8:	08003b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, ip, sp}
    16ac:	00fe5d01 	rscseq	r5, lr, r1, lsl #26
    16b0:	69090000 	stmdbvs	r9, {}
    16b4:	eb010064 	bl	4184c <__Stack_Size+0x4144c>
    16b8:	00000051 	andeq	r0, r0, r1, asr r0
    16bc:	08005001 	stmdaeq	r0, {r0, ip, lr}
    16c0:	000ea301 	andeq	sl, lr, r1, lsl #6
    16c4:	01f10100 	mvnseq	r0, r0, lsl #2
    16c8:	08003b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, ip, sp}
    16cc:	08003b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, ip, sp}
    16d0:	01235d01 	teqeq	r3, r1, lsl #26
    16d4:	b40a0000 	strlt	r0, [sl]
    16d8:	0100000e 	tsteq	r0, lr
    16dc:	000051f0 	strdeq	r5, [r0], -r0
    16e0:	00500100 	subseq	r0, r0, r0, lsl #2
    16e4:	0f380108 	svceq	0x00380108
    16e8:	f6010000 	undefined instruction 0xf6010000
    16ec:	003b9c01 	eorseq	r9, fp, r1, lsl #24
    16f0:	003ba808 	eorseq	sl, fp, r8, lsl #16
    16f4:	555d0108 	ldrbpl	r0, [sp, #-264]
    16f8:	0a000001 	beq	1704 <__Stack_Size+0x1304>
    16fc:	00001079 	andeq	r1, r0, r9, ror r0
    1700:	0051f501 	subseq	pc, r1, r1, lsl #10
    1704:	50010000 	andpl	r0, r1, r0
    1708:	0031930a 	eorseq	r9, r1, sl, lsl #6
    170c:	51f50100 	mvnspl	r0, r0, lsl #2
    1710:	01000000 	tsteq	r0, r0
    1714:	01080051 	qaddeq	r0, r1, r8
    1718:	00000fc2 	andeq	r0, r0, r2, asr #31
    171c:	a801fb01 	stmdage	r1, {r0, r8, r9, fp, ip, sp, lr, pc}
    1720:	b408003b 	strlt	r0, [r8], #-59
    1724:	0108003b 	tsteq	r8, fp, lsr r0
    1728:	00017a5d 	andeq	r7, r1, sp, asr sl
    172c:	0f120a00 	svceq	0x00120a00
    1730:	fa010000 	blx	41738 <__Stack_Size+0x41338>
    1734:	00000051 	andeq	r0, r0, r1, asr r0
    1738:	0b005001 	bleq	15744 <__Stack_Size+0x15344>
    173c:	000f7a01 	andeq	r7, pc, r1, lsl #20
    1740:	01000100 	tsteq	r0, r0, lsl #2
    1744:	00005101 	andeq	r5, r0, r1, lsl #2
    1748:	003bb400 	eorseq	fp, fp, r0, lsl #8
    174c:	003bc808 	eorseq	ip, fp, r8, lsl #16
    1750:	a65d0108 	ldrbge	r0, [sp], -r8, lsl #2
    1754:	0c000001 	stceq	0, cr0, [r0], {1}
    1758:	0000106c 	andeq	r1, r0, ip, rrx
    175c:	0051ff01 	subseq	pc, r1, r1, lsl #30
    1760:	06a40000 	strteq	r0, [r4], r0
    1764:	0d000000 	stceq	0, cr0, [r0]
    1768:	000f0101 	andeq	r0, pc, r1, lsl #2
    176c:	01080100 	tsteq	r8, r0, lsl #2
    1770:	00005101 	andeq	r5, r0, r1, lsl #2
    1774:	003bc800 	eorseq	ip, fp, r0, lsl #16
    1778:	003bd408 	eorseq	sp, fp, r8, lsl #8
    177c:	0b5d0108 	bleq	1741ba4 <__Stack_Size+0x17417a4>
    1780:	00104301 	andseq	r4, r0, r1, lsl #6
    1784:	010d0100 	tsteq	sp, r0, lsl #2
    1788:	00005101 	andeq	r5, r0, r1, lsl #2
    178c:	003bd400 	eorseq	sp, fp, r0, lsl #8
    1790:	003be008 	eorseq	lr, fp, r8
    1794:	eb5d0108 	bl	1741bbc <__Stack_Size+0x17417bc>
    1798:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    179c:	00001079 	andeq	r1, r0, r9, ror r0
    17a0:	51010c01 	tstpl	r1, r1, lsl #24
    17a4:	b7000000 	strlt	r0, [r0, -r0]
    17a8:	00000006 	andeq	r0, r0, r6
    17ac:	00008b0f 	andeq	r8, r0, pc, lsl #22
    17b0:	003be000 	eorseq	lr, fp, r0
    17b4:	003be808 	eorseq	lr, fp, r8, lsl #16
    17b8:	145d0108 	ldrbne	r0, [sp], #-264
    17bc:	10000002 	andne	r0, r0, r2
    17c0:	0000009e 	muleq	r0, lr, r0
    17c4:	000006ca 	andeq	r0, r0, sl, asr #13
    17c8:	0000aa11 	andeq	sl, r0, r1, lsl sl
    17cc:	12510100 	subsne	r0, r1, #0	; 0x0
    17d0:	000000b6 	strheq	r0, [r0], -r6
    17d4:	00250f00 	eoreq	r0, r5, r0, lsl #30
    17d8:	3be80000 	blcc	ffa017e0 <SCS_BASE+0x1f9f37e0>
    17dc:	3bec0800 	blcc	ffb037e4 <SCS_BASE+0x1faf57e4>
    17e0:	5d010800 	stcpl	8, cr0, [r1]
    17e4:	00000236 	andeq	r0, r0, r6, lsr r2
    17e8:	00003810 	andeq	r3, r0, r0, lsl r8
    17ec:	0006dd00 	andeq	sp, r6, r0, lsl #26
    17f0:	00441200 	subeq	r1, r4, r0, lsl #4
    17f4:	0f000000 	svceq	0x00000000
    17f8:	0000005f 	andeq	r0, r0, pc, asr r0
    17fc:	08003bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp, ip, sp}
    1800:	08003bf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, fp, ip, sp}
    1804:	025c5d01 	subseq	r5, ip, #64	; 0x40
    1808:	72100000 	andsvc	r0, r0, #0	; 0x0
    180c:	f0000000 	undefined instruction 0xf0000000
    1810:	13000006 	movwne	r0, #6	; 0x6
    1814:	0000007e 	andeq	r0, r0, lr, ror r0
    1818:	00000703 	andeq	r0, r0, r3, lsl #14
    181c:	63011400 	movwvs	r1, #5120	; 0x1400
    1820:	0100000f 	tsteq	r0, pc
    1824:	3bf4016c 	blcc	ffd01ddc <SCS_BASE+0x1fcf3ddc>
    1828:	3d5c0800 	ldclcc	8, cr0, [ip]
    182c:	07160800 	ldreq	r0, [r6, -r0, lsl #16]
    1830:	02aa0000 	adceq	r0, sl, #0	; 0x0
    1834:	69150000 	ldmdbvs	r5, {}
    1838:	aa6d0100 	bge	1b41c40 <__Stack_Size+0x1b41840>
    183c:	41000002 	tstmi	r0, r2
    1840:	15000007 	strne	r0, [r0, #-7]
    1844:	6d01006a 	stcvs	0, cr0, [r1, #-424]
    1848:	000002aa 	andeq	r0, r0, sl, lsr #5
    184c:	0000078b 	andeq	r0, r0, fp, lsl #15
    1850:	00107316 	andseq	r7, r0, r6, lsl r3
    1854:	aa6d0100 	bge	1b41c5c <__Stack_Size+0x1b4185c>
    1858:	17000002 	strne	r0, [r0, -r2]
    185c:	00000f71 	andeq	r0, r0, r1, ror pc
    1860:	02aa6e01 	adceq	r6, sl, #16	; 0x10
    1864:	07bf0000 	ldreq	r0, [pc, r0]!
    1868:	06000000 	streq	r0, [r0], -r0
    186c:	06ca0801 	strbeq	r0, [sl], r1, lsl #16
    1870:	01140000 	tsteq	r4, r0
    1874:	00000ec0 	andeq	r0, r0, r0, asr #29
    1878:	5c012901 	stcpl	9, cr2, [r1], {1}
    187c:	2008003d 	andcs	r0, r8, sp, lsr r0
    1880:	dd08003e 	stcle	0, cr0, [r8, #-248]
    1884:	ff000007 	undefined instruction 0xff000007
    1888:	15000002 	strne	r0, [r0, #-2]
    188c:	2a010069 	bcs	41a38 <__Stack_Size+0x41638>
    1890:	000002aa 	andeq	r0, r0, sl, lsr #5
    1894:	00000808 	andeq	r0, r0, r8, lsl #16
    1898:	000fb818 	andeq	fp, pc, r8, lsl r8
    189c:	aa2b0100 	bge	ac1ca4 <__Stack_Size+0xac18a4>
    18a0:	01000002 	tsteq	r0, r2
    18a4:	0fb41654 	svceq	0x00b41654
    18a8:	2b010000 	blcs	418b0 <__Stack_Size+0x414b0>
    18ac:	000002aa 	andeq	r0, r0, sl, lsr #5
    18b0:	000f7117 	andeq	r7, pc, r7, lsl r1
    18b4:	aa2c0100 	bge	b01cbc <__Stack_Size+0xb018bc>
    18b8:	26000002 	strcs	r0, [r0], -r2
    18bc:	00000008 	andeq	r0, r0, r8
    18c0:	10260119 	eorne	r0, r6, r9, lsl r1
    18c4:	d6010000 	strle	r0, [r1], -r0
    18c8:	003e2001 	eorseq	r2, lr, r1
    18cc:	003e4008 	eorseq	r4, lr, r8
    18d0:	00083908 	andeq	r3, r8, r8, lsl #18
    18d4:	91011a00 	tstls	r1, r0, lsl #20
    18d8:	0100000f 	tsteq	r0, pc
    18dc:	40010166 	andmi	r0, r1, r6, ror #2
    18e0:	7808003e 	stmdavc	r8, {r1, r2, r3, r4, r5}
    18e4:	5808003e 	stmdapl	r8, {r1, r2, r3, r4, r5}
    18e8:	83000008 	movwhi	r0, #8	; 0x8
    18ec:	1b000003 	blne	1900 <__Stack_Size+0x1500>
    18f0:	01006469 	tsteq	r0, r9, ror #8
    18f4:	00510165 	subseq	r0, r1, r5, ror #2
    18f8:	08830000 	stmeq	r3, {}
    18fc:	130e0000 	movwne	r0, #57344	; 0xe000
    1900:	01000017 	tsteq	r0, r7, lsl r0
    1904:	00510165 	subseq	r0, r1, r5, ror #2
    1908:	08a10000 	stmiaeq	r1!, {}
    190c:	930e0000 	movwls	r0, #57344	; 0xe000
    1910:	01000031 	tsteq	r0, r1, lsr r0
    1914:	00510165 	subseq	r0, r1, r5, ror #2
    1918:	08bf0000 	ldmeq	pc!, {}
    191c:	251c0000 	ldrcs	r0, [ip]
    1920:	52000000 	andpl	r0, r0, #0	; 0x0
    1924:	5608003e 	undefined
    1928:	0108003e 	tsteq	r8, lr, lsr r0
    192c:	271d016c 	ldrcs	r0, [sp, -ip, ror #2]
    1930:	1e000002 	cdpne	0, 0, cr0, cr0, cr2, {0}
    1934:	08003e52 	stmdaeq	r0, {r1, r4, r6, r9, sl, fp, ip, sp}
    1938:	08003e56 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, fp, ip, sp}
    193c:	00004412 	andeq	r4, r0, r2, lsl r4
    1940:	00000000 	andeq	r0, r0, r0
    1944:	0ee6011f 	mcreq	1, 7, r0, cr6, cr15, {0}
    1948:	54010000 	strpl	r0, [r1]
    194c:	00510101 	subseq	r0, r1, r1, lsl #2
    1950:	3e780000 	cdpcc	0, 7, cr0, cr8, cr0, {0}
    1954:	3eb40800 	cdpcc	8, 11, cr0, cr4, cr0, {0}
    1958:	08e80800 	stmiaeq	r8!, {fp}^
    195c:	03ef0000 	mvneq	r0, #0	; 0x0
    1960:	691b0000 	ldmdbvs	fp, {}
    1964:	53010064 	movwpl	r0, #4196	; 0x1064
    1968:	00005101 	andeq	r5, r0, r1, lsl #2
    196c:	00091300 	andeq	r1, r9, r0, lsl #6
    1970:	17130e00 	ldrne	r0, [r3, -r0, lsl #28]
    1974:	53010000 	movwpl	r0, #4096	; 0x1000
    1978:	00005101 	andeq	r5, r0, r1, lsl #2
    197c:	00093100 	andeq	r3, r9, r0, lsl #2
    1980:	008b1c00 	addeq	r1, fp, r0, lsl #24
    1984:	3e960000 	cdpcc	0, 9, cr0, cr6, cr0, {0}
    1988:	3ea20800 	cdpcc	8, 10, cr0, cr2, cr0, {0}
    198c:	62010800 	andvs	r0, r1, #0	; 0x0
    1990:	02071d01 	andeq	r1, r7, #64	; 0x40
    1994:	fe1d0000 	cdp2	0, 1, cr0, cr13, cr0, {0}
    1998:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    199c:	08003e96 	stmdaeq	r0, {r1, r2, r4, r7, r9, sl, fp, ip, sp}
    19a0:	08003ea2 	stmdaeq	r0, {r1, r5, r7, r9, sl, fp, ip, sp}
    19a4:	0000b613 	andeq	fp, r0, r3, lsl r6
    19a8:	00094f00 	andeq	r4, r9, r0, lsl #30
    19ac:	00000000 	andeq	r0, r0, r0
    19b0:	0fee011a 	svceq	0x00ee011a
    19b4:	47010000 	strmi	r0, [r1, -r0]
    19b8:	3eb40101 	frdccs	f0, f4, f1
    19bc:	3ee40800 	cdpcc	8, 14, cr0, cr4, cr0, {0}
    19c0:	09620800 	stmdbeq	r2!, {fp}^
    19c4:	04390000 	ldrteq	r0, [r9]
    19c8:	691b0000 	ldmdbvs	fp, {}
    19cc:	46010064 	strmi	r0, [r1], -r4, rrx
    19d0:	00005101 	andeq	r5, r0, r1, lsl #2
    19d4:	00098d00 	andeq	r8, r9, r0, lsl #26
    19d8:	17130e00 	ldrne	r0, [r3, -r0, lsl #28]
    19dc:	46010000 	strmi	r0, [r1], -r0
    19e0:	00005101 	andeq	r5, r0, r1, lsl #2
    19e4:	0009ab00 	andeq	sl, r9, r0, lsl #22
    19e8:	31930e00 	orrscc	r0, r3, r0, lsl #28
    19ec:	46010000 	strmi	r0, [r1], -r0
    19f0:	00005101 	andeq	r5, r0, r1, lsl #2
    19f4:	0009c900 	andeq	ip, r9, r0, lsl #18
    19f8:	011f0000 	tsteq	pc, r0
    19fc:	00000f2a 	andeq	r0, r0, sl, lsr #30
    1a00:	01013801 	tsteq	r1, r1, lsl #16
    1a04:	00000051 	andeq	r0, r0, r1, asr r0
    1a08:	08003ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, ip, sp}
    1a0c:	08003f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, ip, sp}
    1a10:	000009f2 	strdeq	r0, [r0], -r2
    1a14:	00000477 	andeq	r0, r0, r7, ror r4
    1a18:	0064691b 	rsbeq	r6, r4, fp, lsl r9
    1a1c:	51013701 	tstpl	r1, r1, lsl #14
    1a20:	1d000000 	stcne	0, cr0, [r0]
    1a24:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    1a28:	00001713 	andeq	r1, r0, r3, lsl r7
    1a2c:	51013701 	tstpl	r1, r1, lsl #14
    1a30:	3b000000 	blcc	1a38 <__Stack_Size+0x1638>
    1a34:	0000000a 	andeq	r0, r0, sl
    1a38:	0ece011a 	mcreq	1, 6, r0, cr14, cr10, {0}
    1a3c:	2d010000 	stccs	0, cr0, [r1]
    1a40:	3f1c0101 	svccc	0x001c0101
    1a44:	3f440800 	svccc	0x00440800
    1a48:	0a590800 	beq	1643a50 <__Stack_Size+0x1643650>
    1a4c:	04a10000 	strteq	r0, [r1]
    1a50:	691b0000 	ldmdbvs	fp, {}
    1a54:	2c010064 	stccs	0, cr0, [r1], {100}
    1a58:	00005101 	andeq	r5, r0, r1, lsl #2
    1a5c:	000a8400 	andeq	r8, sl, r0, lsl #8
    1a60:	01190000 	tsteq	r9, r0
    1a64:	0000109b 	muleq	r0, fp, r0
    1a68:	44012401 	strmi	r2, [r1], #-1025
    1a6c:	5008003f 	andpl	r0, r8, pc, lsr r0
    1a70:	a208003f 	andge	r0, r8, #63	; 0x3f
    1a74:	2000000a 	andcs	r0, r0, sl
    1a78:	000ed701 	andeq	sp, lr, r1, lsl #14
    1a7c:	01140100 	tsteq	r4, r0, lsl #2
    1a80:	00000051 	andeq	r0, r0, r1, asr r0
    1a84:	08003f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, ip, sp}
    1a88:	08003f84 	stmdaeq	r0, {r2, r7, r8, r9, sl, fp, ip, sp}
    1a8c:	00000acd 	andeq	r0, r0, sp, asr #21
    1a90:	000004fd 	strdeq	r0, [r0], -sp
    1a94:	000e070c 	andeq	r0, lr, ip, lsl #14
    1a98:	51130100 	tstpl	r3, r0, lsl #2
    1a9c:	f8000000 	undefined instruction 0xf8000000
    1aa0:	0c00000a 	stceq	0, cr0, [r0], {10}
    1aa4:	00001093 	muleq	r0, r3, r0
    1aa8:	00511301 	subseq	r1, r1, r1, lsl #6
    1aac:	0b0b0000 	bleq	2c1ab4 <__Stack_Size+0x2c16b4>
    1ab0:	a4160000 	ldrge	r0, [r6]
    1ab4:	01000000 	tsteq	r0, r0
    1ab8:	00005115 	andeq	r5, r0, r5, lsl r1
    1abc:	aa210000 	bge	841ac4 <__Stack_Size+0x8416c4>
    1ac0:	0d000002 	stceq	0, cr0, [r0, #-8]
    1ac4:	22000005 	andcs	r0, r0, #5	; 0x5
    1ac8:	0000050d 	andeq	r0, r0, sp, lsl #10
    1acc:	0423009f 	strteq	r0, [r3], #-159
    1ad0:	107f2407 	rsbsne	r2, pc, r7, lsl #8
    1ad4:	0b010000 	bleq	41adc <__Stack_Size+0x416dc>
    1ad8:	000004fd 	strdeq	r0, [r0], -sp
    1adc:	88030501 	stmdahi	r3, {r0, r8, sl}
    1ae0:	21200001 	teqcs	r0, r1
    1ae4:	000002aa 	andeq	r0, r0, sl, lsr #5
    1ae8:	00000532 	andeq	r0, r0, r2, lsr r5
    1aec:	00050d22 	andeq	r0, r5, r2, lsr #26
    1af0:	24004500 	strcs	r4, [r0], #-1280
    1af4:	00000ffd 	strdeq	r0, [r0], -sp
    1af8:	05220c01 	streq	r0, [r2, #-3073]!
    1afc:	05010000 	streq	r0, [r1]
    1b00:	00022803 	andeq	r2, r2, r3, lsl #16
    1b04:	0e922420 	cdpeq	4, 9, cr2, cr2, cr0, {1}
    1b08:	0d010000 	stceq	0, cr0, [r1]
    1b0c:	000002aa 	andeq	r0, r0, sl, lsr #5
    1b10:	6e030501 	cfsh32vs	mvfx0, mvfx3, #1
    1b14:	24200002 	strtcs	r0, [r0], #-2
    1b18:	0000105e 	andeq	r1, r0, lr, asr r0
    1b1c:	02aa0e01 	adceq	r0, sl, #16	; 0x10
    1b20:	05010000 	streq	r0, [r1]
    1b24:	00026f03 	andeq	r6, r2, r3, lsl #30
    1b28:	0ef42420 	cdpeq	4, 15, cr2, cr4, cr0, {1}
    1b2c:	0f010000 	svceq	0x00010000
    1b30:	00000051 	andeq	r0, r0, r1, asr r0
    1b34:	28030501 	stmdacs	r3, {r0, r8, sl}
    1b38:	24200000 	strtcs	r0, [r0]
    1b3c:	0000101b 	andeq	r1, r0, fp, lsl r0
    1b40:	00511001 	subseq	r1, r1, r1
    1b44:	05010000 	streq	r0, [r1]
    1b48:	00027003 	andeq	r7, r2, r3
    1b4c:	07360020 	ldreq	r0, [r6, -r0, lsr #32]!
    1b50:	00020000 	andeq	r0, r2, r0
    1b54:	00000614 	andeq	r0, r0, r4, lsl r6
    1b58:	053b0104 	ldreq	r0, [fp, #-260]!
    1b5c:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    1b60:	31000012 	tstcc	r0, r2, lsl r0
    1b64:	84000004 	strhi	r0, [r0], #-4
    1b68:	ac08003f 	stcge	0, cr0, [r8], {63}
    1b6c:	73080044 	movwvc	r0, #32836	; 0x8044
    1b70:	02000006 	andeq	r0, r0, #6	; 0x6
    1b74:	2e210504 	cfsh64cs	mvdx0, mvdx1, #4
    1b78:	02020000 	andeq	r0, r2, #0	; 0x0
    1b7c:	0005b805 	andeq	fp, r5, r5, lsl #16
    1b80:	06010200 	streq	r0, [r1], -r0, lsl #4
    1b84:	000006cc 	andeq	r0, r0, ip, asr #13
    1b88:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    1b8c:	45270200 	strmi	r0, [r7, #-512]!
    1b90:	02000000 	andeq	r0, r0, #0	; 0x0
    1b94:	2e9b0704 	cdpcs	7, 9, cr0, cr11, cr4, {0}
    1b98:	75030000 	strvc	r0, [r3]
    1b9c:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    1ba0:	00005728 	andeq	r5, r0, r8, lsr #14
    1ba4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1ba8:	0000081e 	andeq	r0, r0, lr, lsl r8
    1bac:	00387503 	eorseq	r7, r8, r3, lsl #10
    1bb0:	00682902 	rsbeq	r2, r8, r2, lsl #18
    1bb4:	01020000 	tsteq	r2, r0
    1bb8:	0006ca08 	andeq	ip, r6, r8, lsl #20
    1bbc:	00450400 	subeq	r0, r5, r0, lsl #8
    1bc0:	57040000 	strpl	r0, [r4, -r0]
    1bc4:	05000000 	streq	r0, [r0]
    1bc8:	8e390201 	cdphi	2, 3, cr0, cr9, cr1, {0}
    1bcc:	06000000 	streq	r0, [r0], -r0
    1bd0:	0000149d 	muleq	r0, sp, r4
    1bd4:	45530700 	ldrbmi	r0, [r3, #-1792]
    1bd8:	00010054 	andeq	r0, r1, r4, asr r0
    1bdc:	001df008 	andseq	pc, sp, r8
    1be0:	79390200 	ldmdbvc	r9!, {r9}
    1be4:	05000000 	streq	r0, [r0]
    1be8:	ae3b0201 	cdpge	2, 3, cr0, cr11, cr1, {0}
    1bec:	06000000 	streq	r0, [r0], -r0
    1bf0:	00000363 	andeq	r0, r0, r3, ror #6
    1bf4:	068d0600 	streq	r0, [sp], r0, lsl #12
    1bf8:	00010000 	andeq	r0, r1, r0
    1bfc:	0000d108 	andeq	sp, r0, r8, lsl #2
    1c00:	993b0200 	ldmdbls	fp!, {r9}
    1c04:	09000000 	stmdbeq	r0, {}
    1c08:	240a0704 	strcs	r0, [sl], #-1796
    1c0c:	4a010d03 	bmi	45020 <__Stack_Size+0x44c20>
    1c10:	0b000001 	bleq	1c1c <__Stack_Size+0x181c>
    1c14:	00524341 	subseq	r4, r2, r1, asr #6
    1c18:	6f010e03 	svcvs	0x00010e03
    1c1c:	02000000 	andeq	r0, r0, #0	; 0x0
    1c20:	bf0c0023 	svclt	0x000c0023
    1c24:	03000011 	movweq	r0, #17	; 0x11
    1c28:	006f010f 	rsbeq	r0, pc, pc, lsl #2
    1c2c:	23020000 	movwcs	r0, #8192	; 0x2000
    1c30:	11bc0c04 	undefined instruction 0x11bc0c04
    1c34:	10030000 	andne	r0, r3, r0
    1c38:	00006f01 	andeq	r6, r0, r1, lsl #30
    1c3c:	08230200 	stmdaeq	r3!, {r9}
    1c40:	0052530b 	subseq	r5, r2, fp, lsl #6
    1c44:	6f011103 	svcvs	0x00011103
    1c48:	02000000 	andeq	r0, r0, #0	; 0x0
    1c4c:	430b0c23 	movwmi	r0, #48163	; 0xbc23
    1c50:	12030052 	andne	r0, r3, #82	; 0x52
    1c54:	00006f01 	andeq	r6, r0, r1, lsl #30
    1c58:	10230200 	eorne	r0, r3, r0, lsl #4
    1c5c:	0052410b 	subseq	r4, r2, fp, lsl #2
    1c60:	6f011303 	svcvs	0x00011303
    1c64:	02000000 	andeq	r0, r0, #0	; 0x0
    1c68:	050c1423 	streq	r1, [ip, #-1059]
    1c6c:	03000014 	movweq	r0, #20	; 0x14
    1c70:	006f0114 	rsbeq	r0, pc, r4, lsl r1
    1c74:	23020000 	movwcs	r0, #8192	; 0x2000
    1c78:	424f0b18 	submi	r0, pc, #24576	; 0x6000
    1c7c:	15030052 	strne	r0, [r3, #-82]
    1c80:	00006f01 	andeq	r6, r0, r1, lsl #30
    1c84:	1c230200 	sfmne	f0, 4, [r3]
    1c88:	0011490c 	andseq	r4, r1, ip, lsl #18
    1c8c:	01160300 	tsteq	r6, r0, lsl #6
    1c90:	0000006f 	andeq	r0, r0, pc, rrx
    1c94:	00202302 	eoreq	r2, r0, r2, lsl #6
    1c98:	1a03100a 	bne	c5cc8 <__Stack_Size+0xc58c8>
    1c9c:	0001cc01 	andeq	ip, r1, r1, lsl #24
    1ca0:	44520b00 	ldrbmi	r0, [r2], #-2816
    1ca4:	1b030050 	blne	c1dec <__Stack_Size+0xc19ec>
    1ca8:	00007401 	andeq	r7, r0, r1, lsl #8
    1cac:	00230200 	eoreq	r0, r3, r0, lsl #4
    1cb0:	0013cd0c 	andseq	ip, r3, ip, lsl #26
    1cb4:	011c0300 	tsteq	ip, r0, lsl #6
    1cb8:	00000074 	andeq	r0, r0, r4, ror r0
    1cbc:	0c022302 	stceq	3, cr2, [r2], {2}
    1cc0:	000013d2 	ldrdeq	r1, [r0], -r2
    1cc4:	74011d03 	strvc	r1, [r1], #-3331
    1cc8:	02000000 	andeq	r0, r0, #0	; 0x0
    1ccc:	d80c0423 	stmdale	ip, {r0, r1, r5, sl}
    1cd0:	03000013 	movweq	r0, #19	; 0x13
    1cd4:	0074011e 	rsbseq	r0, r4, lr, lsl r1
    1cd8:	23020000 	movwcs	r0, #8192	; 0x2000
    1cdc:	11850c06 	orrne	r0, r5, r6, lsl #24
    1ce0:	1f030000 	svcne	0x00030000
    1ce4:	00007401 	andeq	r7, r0, r1, lsl #8
    1ce8:	08230200 	stmdaeq	r3!, {r9}
    1cec:	00118a0c 	andseq	r8, r1, ip, lsl #20
    1cf0:	01200300 	teqeq	r0, r0, lsl #6
    1cf4:	00000074 	andeq	r0, r0, r4, ror r0
    1cf8:	0c0a2302 	stceq	3, cr2, [sl], {2}
    1cfc:	0000118f 	andeq	r1, r0, pc, lsl #3
    1d00:	74012103 	strvc	r2, [r1], #-259
    1d04:	02000000 	andeq	r0, r0, #0	; 0x0
    1d08:	940c0c23 	strls	r0, [ip], #-3107
    1d0c:	03000011 	movweq	r0, #17	; 0x11
    1d10:	00740122 	rsbseq	r0, r4, r2, lsr #2
    1d14:	23020000 	movwcs	r0, #8192	; 0x2000
    1d18:	0105000e 	tsteq	r5, lr
    1d1c:	01f31d04 	mvnseq	r1, r4, lsl #26
    1d20:	ad060000 	stcge	0, cr0, [r6]
    1d24:	01000012 	tsteq	r0, r2, lsl r0
    1d28:	00121a06 	andseq	r1, r2, r6, lsl #20
    1d2c:	f7060200 	undefined instruction 0xf7060200
    1d30:	03000010 	movweq	r0, #16	; 0x10
    1d34:	00129e06 	andseq	r9, r2, r6, lsl #28
    1d38:	c2060400 	andgt	r0, r6, #0	; 0x0
    1d3c:	05000012 	streq	r0, [r0, #-18]
    1d40:	116f0800 	cmnne	pc, r0, lsl #16
    1d44:	23040000 	movwcs	r0, #16384	; 0x4000
    1d48:	000001cc 	andeq	r0, r0, ip, asr #3
    1d4c:	1322010d 	teqne	r2, #1073741827	; 0x40000003
    1d50:	40010000 	andmi	r0, r1, r0
    1d54:	01f30103 	mvnseq	r0, r3, lsl #2
    1d58:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    1d5c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1d60:	000011f7 	strdeq	r1, [r0], -r7
    1d64:	f3034101 	vrhadd.u8	d4, d3, d1
    1d68:	00000001 	andeq	r0, r0, r1
    1d6c:	0011430f 	andseq	r4, r1, pc, lsl #6
    1d70:	03860100 	orreq	r0, r6, #0	; 0x0
    1d74:	02370101 	eorseq	r0, r7, #1073741824	; 0x40000000
    1d78:	69100000 	ldmdbvs	r0, {}
    1d7c:	03870100 	orreq	r0, r7, #0	; 0x0
    1d80:	0000006f 	andeq	r0, r0, pc, rrx
    1d84:	4e011100 	adfmis	f1, f1, f0
    1d88:	01000013 	tsteq	r0, r3, lsl r0
    1d8c:	3f840157 	svccc	0x00840157
    1d90:	3f9c0800 	svccc	0x009c0800
    1d94:	5d010800 	stcpl	8, cr0, [r1]
    1d98:	0000025e 	andeq	r0, r0, lr, asr r2
    1d9c:	00111712 	andseq	r1, r1, r2, lsl r7
    1da0:	3a560100 	bcc	15821a8 <__Stack_Size+0x1581da8>
    1da4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1da8:	0000000b 	andeq	r0, r0, fp
    1dac:	135f0111 	cmpne	pc, #1073741828	; 0x40000004
    1db0:	6b010000 	blvs	41db8 <__Stack_Size+0x419b8>
    1db4:	003f9c01 	eorseq	r9, pc, r1, lsl #24
    1db8:	003fb408 	eorseq	fp, pc, r8, lsl #8
    1dbc:	855d0108 	ldrbhi	r0, [sp, #-264]
    1dc0:	12000002 	andne	r0, r0, #2	; 0x2
    1dc4:	0000130c 	andeq	r1, r0, ip, lsl #6
    1dc8:	003a6a01 	eorseq	r6, sl, r1, lsl #20
    1dcc:	0b310000 	bleq	c41dd4 <__Stack_Size+0xc419d4>
    1dd0:	11000000 	tstne	r0, r0
    1dd4:	00126201 	andseq	r6, r2, r1, lsl #4
    1dd8:	017f0100 	cmneq	pc, r0, lsl #2
    1ddc:	08003fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, ip, sp}
    1de0:	08003fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, ip, sp}
    1de4:	02ac5d01 	adceq	r5, ip, #64	; 0x40
    1de8:	29120000 	ldmdbcs	r2, {}
    1dec:	01000014 	tsteq	r0, r4, lsl r0
    1df0:	00003a7e 	andeq	r3, r0, lr, ror sl
    1df4:	000b4400 	andeq	r4, fp, r0, lsl #8
    1df8:	01130000 	tsteq	r3, r0
    1dfc:	0000114e 	andeq	r1, r0, lr, asr #2
    1e00:	cc019101 	stfgtd	f1, [r1], {1}
    1e04:	e408003f 	str	r0, [r8], #-63
    1e08:	0108003f 	tsteq	r8, pc, lsr r0
    1e0c:	2901135d 	stmdbcs	r1, {r0, r2, r3, r4, r6, r8, r9, ip}
    1e10:	01000012 	tsteq	r0, r2, lsl r0
    1e14:	3fe4019f 	svccc	0x00e4019f
    1e18:	3ff40800 	svccc	0x00f40800
    1e1c:	5d010800 	stcpl	8, cr0, [r1]
    1e20:	13940114 	orrsne	r0, r4, #5	; 0x5
    1e24:	97010000 	strls	r0, [r1, -r0]
    1e28:	003a0102 	eorseq	r0, sl, r2, lsl #2
    1e2c:	3ff40000 	svccc	0x00f40000
    1e30:	40000800 	andmi	r0, r0, r0, lsl #16
    1e34:	5d010800 	stcpl	8, cr0, [r1]
    1e38:	11990114 	orrsne	r0, r9, r4, lsl r1
    1e3c:	a4010000 	strge	r0, [r1]
    1e40:	003a0102 	eorseq	r0, sl, r2, lsl #2
    1e44:	40000000 	andmi	r0, r0, r0
    1e48:	400c0800 	andmi	r0, ip, r0, lsl #16
    1e4c:	5d010800 	stcpl	8, cr0, [r1]
    1e50:	12d80115 	sbcsne	r0, r8, #1073741829	; 0x40000005
    1e54:	b2010000 	andlt	r0, r1, #0	; 0x0
    1e58:	008e0102 	addeq	r0, lr, r2, lsl #2
    1e5c:	400c0000 	andmi	r0, ip, r0
    1e60:	401c0800 	andsmi	r0, ip, r0, lsl #16
    1e64:	5d010800 	stcpl	8, cr0, [r1]
    1e68:	0000032b 	andeq	r0, r0, fp, lsr #6
    1e6c:	0010e90e 	andseq	lr, r0, lr, lsl #18
    1e70:	02b30100 	adcseq	r0, r3, #0	; 0x0
    1e74:	0000008e 	andeq	r0, r0, lr, lsl #1
    1e78:	25011500 	strcs	r1, [r1, #-1280]
    1e7c:	01000011 	tsteq	r0, r1, lsl r0
    1e80:	8e0102c8 	cdphi	2, 0, cr0, cr1, cr8, {6}
    1e84:	1c000000 	stcne	0, cr0, [r0], {0}
    1e88:	2c080040 	stccs	0, cr0, [r8], {64}
    1e8c:	01080040 	tsteq	r8, r0, asr #32
    1e90:	0003545d 	andeq	r5, r3, sp, asr r4
    1e94:	12030e00 	andne	r0, r3, #0	; 0x0
    1e98:	c9010000 	stmdbgt	r1, {}
    1e9c:	00008e02 	andeq	r8, r0, r2, lsl #28
    1ea0:	01160000 	tsteq	r6, r0
    1ea4:	000010a9 	andeq	r1, r0, r9, lsr #1
    1ea8:	0102e301 	tsteq	r2, r1, lsl #6
    1eac:	0800402c 	stmdaeq	r0, {r2, r3, r5, lr}
    1eb0:	08004048 	stmdaeq	r0, {r3, r6, lr}
    1eb4:	03895d01 	orreq	r5, r9, #64	; 0x40
    1eb8:	ea170000 	b	5c1ec0 <__Stack_Size+0x5c1ac0>
    1ebc:	01000013 	tsteq	r0, r3, lsl r0
    1ec0:	004c02e2 	subeq	r0, ip, r2, ror #5
    1ec4:	50010000 	andpl	r0, r1, r0
    1ec8:	00117c17 	andseq	r7, r1, r7, lsl ip
    1ecc:	02e20100 	rsceq	r0, r2, #0	; 0x0
    1ed0:	000000ae 	andeq	r0, r0, lr, lsr #1
    1ed4:	15005101 	strne	r5, [r0, #-257]
    1ed8:	00127a01 	andseq	r7, r2, r1, lsl #20
    1edc:	03020100 	movweq	r0, #8448	; 0x2100
    1ee0:	00008e01 	andeq	r8, r0, r1, lsl #28
    1ee4:	00404800 	subeq	r4, r0, r0, lsl #16
    1ee8:	00406808 	subeq	r6, r0, r8, lsl #16
    1eec:	c65d0108 	ldrbgt	r0, [sp], -r8, lsl #2
    1ef0:	18000003 	stmdane	r0, {r0, r1}
    1ef4:	000013c2 	andeq	r1, r0, r2, asr #7
    1ef8:	4c030101 	stfmis	f0, [r3], {1}
    1efc:	57000000 	strpl	r0, [r0, -r0]
    1f00:	1900000b 	stmdbne	r0, {r0, r1, r3}
    1f04:	00001203 	andeq	r1, r0, r3, lsl #4
    1f08:	8e030301 	cdphi	3, 0, cr0, cr3, cr1, {0}
    1f0c:	75000000 	strvc	r0, [r0]
    1f10:	0000000b 	andeq	r0, r0, fp
    1f14:	128e0116 	addne	r0, lr, #-2147483643	; 0x80000005
    1f18:	2f010000 	svccs	0x00010000
    1f1c:	40680103 	rsbmi	r0, r8, r3, lsl #2
    1f20:	40740800 	rsbsmi	r0, r4, r0, lsl #16
    1f24:	5d010800 	stcpl	8, cr0, [r1]
    1f28:	000003ed 	andeq	r0, r0, sp, ror #7
    1f2c:	0013c217 	andseq	ip, r3, r7, lsl r2
    1f30:	032e0100 	teqeq	lr, #0	; 0x0
    1f34:	0000004c 	andeq	r0, r0, ip, asr #32
    1f38:	1a005001 	bne	15f44 <__Stack_Size+0x15b44>
    1f3c:	000001fe 	strdeq	r0, [r0], -lr
    1f40:	08004074 	stmdaeq	r0, {r2, r4, r5, r6, lr}
    1f44:	080040a0 	stmdaeq	r0, {r5, r7, lr}
    1f48:	040a5d01 	streq	r5, [sl], #-3329
    1f4c:	111b0000 	tstne	fp, r0
    1f50:	93000002 	movwls	r0, #2	; 0x2
    1f54:	0000000b 	andeq	r0, r0, fp
    1f58:	140e011c 	strne	r0, [lr], #-284
    1f5c:	67010000 	strvs	r0, [r1, -r0]
    1f60:	01f30103 	mvnseq	r0, r3, lsl #2
    1f64:	40a00000 	adcmi	r0, r0, r0
    1f68:	41340800 	teqmi	r4, r0, lsl #16
    1f6c:	0bbc0800 	bleq	fef03f74 <SCS_BASE+0x1eef5f74>
    1f70:	049d0000 	ldreq	r0, [sp]
    1f74:	d0180000 	andsle	r0, r8, r0
    1f78:	01000012 	tsteq	r0, r2, lsl r0
    1f7c:	003a0366 	eorseq	r0, sl, r6, ror #6
    1f80:	0be70000 	bleq	ff9c1f88 <SCS_BASE+0x1f9b3f88>
    1f84:	fc190000 	ldc2	0, cr0, [r9], {0}
    1f88:	01000011 	tsteq	r0, r1, lsl r0
    1f8c:	01f30368 	mvnseq	r0, r8, ror #6
    1f90:	0c050000 	stceq	0, cr0, [r5], {0}
    1f94:	fe1d0000 	cdp2	0, 1, cr0, cr13, cr0, {0}
    1f98:	50000001 	andpl	r0, r0, r1
    1f9c:	01000000 	tsteq	r0, r0
    1fa0:	0464036b 	strbteq	r0, [r4], #-875
    1fa4:	701e0000 	andsvc	r0, lr, r0
    1fa8:	1f000000 	svcne	0x00000000
    1fac:	00000211 	andeq	r0, r0, r1, lsl r2
    1fb0:	1e1d0000 	wxorne	wr0, wr13, wr0
    1fb4:	90000002 	andls	r0, r0, r2
    1fb8:	01000000 	tsteq	r0, r0
    1fbc:	04840370 	streq	r0, [r4], #880
    1fc0:	a81e0000 	ldmdage	lr, {}
    1fc4:	1b000000 	blne	1fcc <__Stack_Size+0x1bcc>
    1fc8:	0000022c 	andeq	r0, r0, ip, lsr #4
    1fcc:	00000c2e 	andeq	r0, r0, lr, lsr #24
    1fd0:	fe200000 	cdp2	0, 2, cr0, cr0, cr0, {0}
    1fd4:	c0000001 	andgt	r0, r0, r1
    1fd8:	01000000 	tsteq	r0, r0
    1fdc:	d81e0371 	ldmdale	lr, {r0, r4, r5, r6, r8, r9}
    1fe0:	1f000000 	svcne	0x00000000
    1fe4:	00000211 	andeq	r0, r0, r1, lsl r2
    1fe8:	1c000000 	stcne	0, cr0, [r0], {0}
    1fec:	0011c401 	andseq	ip, r1, r1, lsl #8
    1ff0:	026b0100 	rsbeq	r0, fp, #0	; 0x0
    1ff4:	0001f301 	andeq	pc, r1, r1, lsl #6
    1ff8:	00413400 	subeq	r3, r1, r0, lsl #8
    1ffc:	00419008 	subeq	r9, r1, r8
    2000:	000c7e08 	andeq	r7, ip, r8, lsl #28
    2004:	0004fc00 	andeq	pc, r4, r0, lsl #24
    2008:	10b81800 	adcsne	r1, r8, r0, lsl #16
    200c:	6a010000 	bvs	42014 <__Stack_Size+0x41c14>
    2010:	00004c02 	andeq	r4, r0, r2, lsl #24
    2014:	000ca900 	andeq	sl, ip, r0, lsl #18
    2018:	10ca1800 	sbcne	r1, sl, r0, lsl #16
    201c:	6a010000 	bvs	42024 <__Stack_Size+0x41c24>
    2020:	00004c02 	andeq	r4, r0, r2, lsl #24
    2024:	000cc700 	andeq	ip, ip, r0, lsl #14
    2028:	12f91800 	rscsne	r1, r9, #0	; 0x0
    202c:	6a010000 	bvs	42034 <__Stack_Size+0x41c34>
    2030:	00004c02 	andeq	r4, r0, r2, lsl #24
    2034:	000ce500 	andeq	lr, ip, r0, lsl #10
    2038:	11fc1900 	mvnsne	r1, r0, lsl #18
    203c:	6c010000 	stcvs	0, cr0, [r1], {0}
    2040:	0001f302 	andeq	pc, r1, r2, lsl #6
    2044:	000d0300 	andeq	r0, sp, r0, lsl #6
    2048:	011c0000 	tsteq	ip, r0
    204c:	000011df 	ldrdeq	r1, [r0], -pc
    2050:	01021a01 	tsteq	r2, r1, lsl #20
    2054:	000001f3 	strdeq	r0, [r0], -r3
    2058:	08004190 	stmdaeq	r0, {r4, r7, r8, lr}
    205c:	0800422c 	stmdaeq	r0, {r2, r3, r5, r9, lr}
    2060:	00000d21 	andeq	r0, r0, r1, lsr #26
    2064:	0000053b 	andeq	r0, r0, fp, lsr r5
    2068:	00117c18 	andseq	r7, r1, r8, lsl ip
    206c:	02190100 	andseq	r0, r9, #0	; 0x0
    2070:	000000ae 	andeq	r0, r0, lr, lsr #1
    2074:	00000d4c 	andeq	r0, r0, ip, asr #26
    2078:	0011fc19 	andseq	pc, r1, r9, lsl ip
    207c:	021b0100 	andseq	r0, fp, #0	; 0x0
    2080:	000001f3 	strdeq	r0, [r0], -r3
    2084:	00000d6a 	andeq	r0, r0, sl, ror #26
    2088:	32011c00 	andcc	r1, r1, #0	; 0x0
    208c:	01000013 	tsteq	r0, r3, lsl r0
    2090:	f30101cb 	vrhadd.u8	q0, <illegal reg q8.5>, <illegal reg q5.5>
    2094:	2c000001 	stccs	0, cr0, [r0], {1}
    2098:	ec080042 	stc	0, cr0, [r8], {66}
    209c:	93080042 	movwls	r0, #32834	; 0x8042
    20a0:	ba00000d 	blt	20dc <__Stack_Size+0x1cdc>
    20a4:	18000005 	stmdane	r0, {r0, r2}
    20a8:	000013de 	ldrdeq	r1, [r0], -lr
    20ac:	3a01ca01 	bcc	748b8 <__Stack_Size+0x744b8>
    20b0:	b2000000 	andlt	r0, r0, #0	; 0x0
    20b4:	1900000d 	stmdbne	r0, {r0, r2, r3}
    20b8:	00001302 	andeq	r1, r0, r2, lsl #6
    20bc:	4c01cc01 	stcmi	12, cr12, [r1], {1}
    20c0:	d0000000 	andle	r0, r0, r0
    20c4:	1900000d 	stmdbne	r0, {r0, r2, r3}
    20c8:	000012b8 	strheq	r1, [r0], -r8
    20cc:	4c01cc01 	stcmi	12, cr12, [r1], {1}
    20d0:	0f000000 	svceq	0x00000000
    20d4:	1900000e 	stmdbne	r0, {r1, r2, r3}
    20d8:	000010c0 	andeq	r1, r0, r0, asr #1
    20dc:	4c01cc01 	stcmi	12, cr12, [r1], {1}
    20e0:	2d000000 	stccs	0, cr0, [r0]
    20e4:	1900000e 	stmdbne	r0, {r1, r2, r3}
    20e8:	00001234 	andeq	r1, r0, r4, lsr r2
    20ec:	4c01cc01 	stcmi	12, cr12, [r1], {1}
    20f0:	4b000000 	blmi	20f8 <__Stack_Size+0x1cf8>
    20f4:	1900000e 	stmdbne	r0, {r1, r2, r3}
    20f8:	000011fc 	strdeq	r1, [r0], -ip
    20fc:	f301ce01 	vcge.f32	d12, d1, d1
    2100:	69000001 	stmdbvs	r0, {r0}
    2104:	0000000e 	andeq	r0, r0, lr
    2108:	1378011c 	cmnne	r8, #7	; 0x7
    210c:	9a010000 	bls	42114 <__Stack_Size+0x41d14>
    2110:	01f30101 	mvnseq	r0, r1, lsl #2
    2114:	42ec0000 	rscmi	r0, ip, #0	; 0x0
    2118:	43300800 	teqmi	r0, #0	; 0x0
    211c:	0ea80800 	cdpeq	8, 10, cr0, cr8, cr0, {0}
    2120:	06090000 	streq	r0, [r9], -r0
    2124:	47180000 	ldrmi	r0, [r8, -r0]
    2128:	0100002c 	tsteq	r0, ip, lsr #32
    212c:	003a0199 	mlaseq	sl, r9, r1, r0
    2130:	0ec70000 	cdpeq	0, 12, cr0, cr7, cr0, {0}
    2134:	07180000 	ldreq	r0, [r8, -r0]
    2138:	01000013 	tsteq	r0, r3, lsl r0
    213c:	005e0199 	ldrbeq	r0, [lr], #-25
    2140:	0ee50000 	cdpeq	0, 14, cr0, cr5, cr0, {0}
    2144:	fc190000 	ldc2	0, cr0, [r9], {0}
    2148:	01000011 	tsteq	r0, r1, lsl r0
    214c:	01f3019b 	ldrbeq	r0, [r3, #27]!
    2150:	0f030000 	svceq	0x00030000
    2154:	1c000000 	stcne	0, cr0, [r0], {0}
    2158:	0013ac01 	andseq	sl, r3, r1, lsl #24
    215c:	01720100 	cmneq	r2, r0, lsl #2
    2160:	0001f301 	andeq	pc, r1, r1, lsl #6
    2164:	00433000 	subeq	r3, r3, r0
    2168:	00436808 	subeq	r6, r3, r8, lsl #16
    216c:	000f2108 	andeq	r2, pc, r8, lsl #2
    2170:	00065800 	andeq	r5, r6, r0, lsl #16
    2174:	2c471800 	mcrrcs	8, 0, r1, r7, cr0
    2178:	71010000 	tstvc	r1, r0
    217c:	00003a01 	andeq	r3, r0, r1, lsl #20
    2180:	000f4000 	andeq	r4, pc, r0
    2184:	13071800 	movwne	r1, #30720	; 0x7800
    2188:	71010000 	tstvc	r1, r0
    218c:	00004c01 	andeq	r4, r0, r1, lsl #24
    2190:	000f5e00 	andeq	r5, pc, r0, lsl #28
    2194:	11fc1900 	mvnsne	r1, r0, lsl #18
    2198:	73010000 	movwvc	r0, #4096	; 0x1000
    219c:	0001f301 	andeq	pc, r1, r1, lsl #6
    21a0:	000f7c00 	andeq	r7, pc, r0, lsl #24
    21a4:	011c0000 	tsteq	ip, r0
    21a8:	000013f3 	strdeq	r1, [r0], -r3
    21ac:	01013701 	tsteq	r1, r1, lsl #14
    21b0:	000001f3 	strdeq	r0, [r0], -r3
    21b4:	08004368 	stmdaeq	r0, {r3, r5, r6, r8, r9, lr}
    21b8:	080043b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, lr}
    21bc:	00000f9a 	muleq	r0, sl, pc
    21c0:	000006a7 	andeq	r0, r0, r7, lsr #13
    21c4:	002c4718 	eoreq	r4, ip, r8, lsl r7
    21c8:	01360100 	teqeq	r6, r0, lsl #2
    21cc:	0000003a 	andeq	r0, r0, sl, lsr r0
    21d0:	00000fb9 	strheq	r0, [r0], -r9
    21d4:	00130718 	andseq	r0, r3, r8, lsl r7
    21d8:	01360100 	teqeq	r6, r0, lsl #2
    21dc:	0000003a 	andeq	r0, r0, sl, lsr r0
    21e0:	00000fd7 	ldrdeq	r0, [r0], -r7
    21e4:	0011fc19 	andseq	pc, r1, r9, lsl ip
    21e8:	01380100 	teqeq	r8, r0, lsl #2
    21ec:	000001f3 	strdeq	r0, [r0], -r3
    21f0:	00000ff5 	strdeq	r0, [r0], -r5
    21f4:	d2012100 	andle	r2, r1, #0	; 0x0
    21f8:	01000010 	tsteq	r0, r0, lsl r0
    21fc:	01f301f8 	ldrsheq	r0, [r3, #24]!
    2200:	43b00000 	movsmi	r0, #0	; 0x0
    2204:	44280800 	strtmi	r0, [r8], #-2048
    2208:	101e0800 	andsne	r0, lr, r0, lsl #16
    220c:	06d40000 	ldrbeq	r0, [r4], r0
    2210:	fc220000 	stc2	0, cr0, [r2]
    2214:	01000011 	tsteq	r0, r1, lsl r0
    2218:	0001f3f9 	strdeq	pc, [r1], -r9
    221c:	00103d00 	andseq	r3, r0, r0, lsl #26
    2220:	01210000 	teqeq	r1, r0
    2224:	0000115b 	andeq	r1, r0, fp, asr r1
    2228:	f301d501 	vrshl.u8	d13, d1, d1
    222c:	28000001 	stmdacs	r0, {r0}
    2230:	64080044 	strvs	r0, [r8], #-68
    2234:	66080044 	strvs	r0, [r8], -r4, asr #32
    2238:	01000010 	tsteq	r0, r0, lsl r0
    223c:	22000007 	andcs	r0, r0, #7	; 0x7
    2240:	000011fc 	strdeq	r1, [r0], -ip
    2244:	01f3d601 	mvnseq	sp, r1, lsl #12
    2248:	10850000 	addne	r0, r5, r0
    224c:	23000000 	movwcs	r0, #0	; 0x0
    2250:	00110701 	andseq	r0, r1, r1, lsl #14
    2254:	01ae0100 	undefined instruction 0x01ae0100
    2258:	000001f3 	strdeq	r0, [r0], -r3
    225c:	08004464 	stmdaeq	r0, {r2, r5, r6, sl, lr}
    2260:	080044ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, lr}
    2264:	000010a3 	andeq	r1, r0, r3, lsr #1
    2268:	00120d12 	andseq	r0, r2, r2, lsl sp
    226c:	3aad0100 	bcc	feb42674 <SCS_BASE+0x1eb34674>
    2270:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    2274:	22000010 	andcs	r0, r0, #16	; 0x10
    2278:	000011fc 	strdeq	r1, [r0], -ip
    227c:	01f3af01 	mvnseq	sl, r1, lsl #30
    2280:	10ec0000 	rscne	r0, ip, r0
    2284:	00000000 	andeq	r0, r0, r0
    2288:	00000644 	andeq	r0, r0, r4, asr #12
    228c:	08300002 	ldmdaeq	r0!, {r1}
    2290:	01040000 	tsteq	r4, r0
    2294:	0000053b 	andeq	r0, r0, fp, lsr r5
    2298:	0014cf01 	andseq	ip, r4, r1, lsl #30
    229c:	00043100 	andeq	r3, r4, r0, lsl #2
    22a0:	0044ac00 	subeq	sl, r4, r0, lsl #24
    22a4:	00473408 	subeq	r3, r7, r8, lsl #8
    22a8:	00089608 	andeq	r9, r8, r8, lsl #12
    22ac:	05040200 	streq	r0, [r4, #-512]
    22b0:	00002e21 	andeq	r2, r0, r1, lsr #28
    22b4:	b8050202 	stmdalt	r5, {r1, r9}
    22b8:	02000005 	andeq	r0, r0, #5	; 0x5
    22bc:	06cc0601 	strbeq	r0, [ip], r1, lsl #12
    22c0:	75030000 	strvc	r0, [r3]
    22c4:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    22c8:	00004527 	andeq	r4, r0, r7, lsr #10
    22cc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    22d0:	00002e9b 	muleq	r0, fp, lr
    22d4:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    22d8:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
    22dc:	02000000 	andeq	r0, r0, #0	; 0x0
    22e0:	081e0702 	ldmdaeq	lr, {r1, r8, r9, sl}
    22e4:	75030000 	strvc	r0, [r3]
    22e8:	29020038 	stmdbcs	r2, {r3, r4, r5}
    22ec:	00000068 	andeq	r0, r0, r8, rrx
    22f0:	ca080102 	bgt	202700 <__Stack_Size+0x202300>
    22f4:	04000006 	streq	r0, [r0], #-6
    22f8:	00000045 	andeq	r0, r0, r5, asr #32
    22fc:	3b020105 	blcc	82718 <__Stack_Size+0x82318>
    2300:	00000089 	andeq	r0, r0, r9, lsl #1
    2304:	00036306 	andeq	r6, r3, r6, lsl #6
    2308:	8d060000 	stchi	0, cr0, [r6]
    230c:	01000006 	tsteq	r0, r6
    2310:	00d10700 	sbcseq	r0, r1, r0, lsl #14
    2314:	3b020000 	blcc	8231c <__Stack_Size+0x81f1c>
    2318:	00000074 	andeq	r0, r0, r4, ror r0
    231c:	09070408 	stmdbeq	r7, {r3, sl}
    2320:	014f031c 	cmpeq	pc, ip, lsl r3
    2324:	0000010a 	andeq	r0, r0, sl, lsl #2
    2328:	4c52430a 	mrrcmi	3, 0, r4, r2, cr10
    232c:	01500300 	cmpeq	r0, r0, lsl #6
    2330:	0000006f 	andeq	r0, r0, pc, rrx
    2334:	0a002302 	beq	af44 <__Stack_Size+0xab44>
    2338:	00485243 	subeq	r5, r8, r3, asr #4
    233c:	6f015103 	svcvs	0x00015103
    2340:	02000000 	andeq	r0, r0, #0	; 0x0
    2344:	490a0423 	stmdbmi	sl, {r0, r1, r5, sl}
    2348:	03005244 	movweq	r5, #580	; 0x244
    234c:	006f0152 	rsbeq	r0, pc, r2, asr r1
    2350:	23020000 	movwcs	r0, #8192	; 0x2000
    2354:	444f0a08 	strbmi	r0, [pc], #2568	; 235c <__Stack_Size+0x1f5c>
    2358:	53030052 	movwpl	r0, #12370	; 0x3052
    235c:	00006f01 	andeq	r6, r0, r1, lsl #30
    2360:	0c230200 	sfmeq	f0, 4, [r3]
    2364:	00002f0b 	andeq	r2, r0, fp, lsl #30
    2368:	01540300 	cmpeq	r4, r0, lsl #6
    236c:	0000006f 	andeq	r0, r0, pc, rrx
    2370:	0a102302 	beq	40af80 <__Stack_Size+0x40ab80>
    2374:	00525242 	subseq	r5, r2, r2, asr #4
    2378:	6f015503 	svcvs	0x00015503
    237c:	02000000 	andeq	r0, r0, #0	; 0x0
    2380:	c50b1423 	strgt	r1, [fp, #-1059]
    2384:	03000008 	movweq	r0, #8	; 0x8
    2388:	006f0156 	rsbeq	r0, pc, r6, asr r1
    238c:	23020000 	movwcs	r0, #8192	; 0x2000
    2390:	3e0c0018 	mcrcc	0, 0, r0, cr12, cr8, {0}
    2394:	03000014 	movweq	r0, #20	; 0x14
    2398:	00970157 	addseq	r0, r7, r7, asr r1
    239c:	18090000 	stmdane	r9, {}
    23a0:	4d015a03 	fstsmi	s10, [r1, #-12]
    23a4:	0b000001 	bleq	23b0 <__Stack_Size+0x1fb0>
    23a8:	0000161d 	andeq	r1, r0, sp, lsl r6
    23ac:	6f015b03 	svcvs	0x00015b03
    23b0:	02000000 	andeq	r0, r0, #0	; 0x0
    23b4:	020b0023 	andeq	r0, fp, #35	; 0x23
    23b8:	03000016 	movweq	r0, #22	; 0x16
    23bc:	006f015c 	rsbeq	r0, pc, ip, asr r1
    23c0:	23020000 	movwcs	r0, #8192	; 0x2000
    23c4:	14c80b04 	strbne	r0, [r8], #2820
    23c8:	5d030000 	stcpl	0, cr0, [r3]
    23cc:	00015d01 	andeq	r5, r1, r1, lsl #26
    23d0:	08230200 	stmdaeq	r3!, {r9}
    23d4:	00450d00 	subeq	r0, r5, r0, lsl #26
    23d8:	015d0000 	cmpeq	sp, r0
    23dc:	940e0000 	strls	r0, [lr]
    23e0:	03000000 	movweq	r0, #0	; 0x0
    23e4:	014d0400 	cmpeq	sp, r0, lsl #8
    23e8:	01050000 	tsteq	r5, r0
    23ec:	017d2304 	cmneq	sp, r4, lsl #6
    23f0:	0a060000 	beq	1823f8 <__Stack_Size+0x181ff8>
    23f4:	01000002 	tsteq	r0, r2
    23f8:	00016306 	andeq	r6, r1, r6, lsl #6
    23fc:	d8060200 	stmdale	r6, {r9}
    2400:	03000006 	movweq	r0, #6	; 0x6
    2404:	05470700 	strbeq	r0, [r7, #-1792]
    2408:	27040000 	strcs	r0, [r4, -r0]
    240c:	00000162 	andeq	r0, r0, r2, ror #2
    2410:	2e040105 	adfcss	f0, f4, f5
    2414:	000001c2 	andeq	r0, r0, r2, asr #3
    2418:	00056406 	andeq	r6, r5, r6, lsl #8
    241c:	6d060000 	stcvs	0, cr0, [r6]
    2420:	04000008 	streq	r0, [r0], #-8
    2424:	00024b06 	andeq	r4, r2, r6, lsl #22
    2428:	65062800 	strvs	r2, [r6, #-2048]
    242c:	c8000002 	stmdagt	r0, {r1}
    2430:	027f0600 	rsbseq	r0, pc, #0	; 0x0
    2434:	06140000 	ldreq	r0, [r4], -r0
    2438:	00000000 	andeq	r0, r0, r0
    243c:	050b0610 	streq	r0, [fp, #-1552]
    2440:	061c0000 	ldreq	r0, [ip], -r0
    2444:	000005f8 	strdeq	r0, [r0], -r8
    2448:	5d070018 	stcpl	0, cr0, [r7, #-96]
    244c:	04000006 	streq	r0, [r0], #-6
    2450:	00018836 	andeq	r8, r1, r6, lsr r8
    2454:	04040f00 	streq	r0, [r4], #-3840
    2458:	0002003f 	andeq	r0, r2, pc, lsr r0
    245c:	00921000 	addseq	r1, r2, r0
    2460:	40040000 	andmi	r0, r4, r0
    2464:	0000004c 	andeq	r0, r0, ip, asr #32
    2468:	10002302 	andne	r2, r0, r2, lsl #6
    246c:	0000060d 	andeq	r0, r0, sp, lsl #12
    2470:	017d4104 	cmneq	sp, r4, lsl #2
    2474:	23020000 	movwcs	r0, #8192	; 0x2000
    2478:	00551002 	subseq	r1, r5, r2
    247c:	42040000 	andmi	r0, r4, #0	; 0x0
    2480:	000001c2 	andeq	r0, r0, r2, asr #3
    2484:	00032302 	andeq	r2, r3, r2, lsl #6
    2488:	0006b907 	andeq	fp, r6, r7, lsl #18
    248c:	cd430400 	cfstrdgt	mvd0, [r3]
    2490:	05000001 	streq	r0, [r0, #-1]
    2494:	20470401 	subcs	r0, r7, r1, lsl #8
    2498:	06000002 	streq	r0, [r0], -r2
    249c:	00001499 	muleq	r0, r9, r4
    24a0:	14520600 	ldrbne	r0, [r2], #-1536
    24a4:	00010000 	andeq	r0, r1, r0
    24a8:	0015f807 	andseq	pc, r5, r7, lsl #16
    24ac:	0b490400 	bleq	12434b4 <__Stack_Size+0x12430b4>
    24b0:	11000002 	tstne	r0, r2
    24b4:	0014be01 	andseq	fp, r4, r1, lsl #28
    24b8:	017d0100 	cmneq	sp, r0, lsl #2
    24bc:	080044ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, lr}
    24c0:	08004552 	stmdaeq	r0, {r1, r4, r6, r8, sl, lr}
    24c4:	0000110a 	andeq	r1, r0, sl, lsl #2
    24c8:	000002af 	andeq	r0, r0, pc, lsr #5
    24cc:	00160712 	andseq	r0, r6, r2, lsl r7
    24d0:	af7c0100 	svcge	0x007c0100
    24d4:	01000002 	tsteq	r0, r2
    24d8:	160d1350 	undefined
    24dc:	7c010000 	stcvc	0, cr0, [r1], {0}
    24e0:	000002b5 	strheq	r0, [r0], -r5
    24e4:	00001135 	andeq	r1, r0, r5, lsr r1
    24e8:	00156c14 	andseq	r6, r5, r4, lsl ip
    24ec:	3a7e0100 	bcc	1f828f4 <__Stack_Size+0x1f824f4>
    24f0:	01000000 	tsteq	r0, r0
    24f4:	15c91457 	strbne	r1, [r9, #1111]
    24f8:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    24fc:	0000003a 	andeq	r0, r0, sl, lsr r0
    2500:	4b145c01 	blmi	51950c <__Stack_Size+0x51910c>
    2504:	01000014 	tsteq	r0, r4, lsl r0
    2508:	00003a7e 	andeq	r3, r0, lr, ror sl
    250c:	15510100 	ldrbne	r0, [r1, #-256]
    2510:	00736f70 	rsbseq	r6, r3, r0, ror pc
    2514:	003a7e01 	eorseq	r7, sl, r1, lsl #28
    2518:	115e0000 	cmpne	lr, r0
    251c:	4e140000 	wxormi	wr0, wr4, wr0
    2520:	01000015 	tsteq	r0, r5, lsl r0
    2524:	00003a7f 	andeq	r3, r0, pc, ror sl
    2528:	16540100 	ldrbne	r0, [r4], -r0, lsl #2
    252c:	000014f2 	strdeq	r1, [r0], -r2
    2530:	003a7f01 	eorseq	r7, sl, r1, lsl #30
    2534:	17000000 	strne	r0, [r0, -r0]
    2538:	00010a04 	andeq	r0, r1, r4, lsl #20
    253c:	00041700 	andeq	r1, r4, r0, lsl #14
    2540:	18000002 	stmdane	r0, {r1}
    2544:	00148201 	andseq	r8, r4, r1, lsl #4
    2548:	01e60100 	mvneq	r0, r0, lsl #2
    254c:	08004554 	stmdaeq	r0, {r2, r4, r6, r8, sl, lr}
    2550:	08004564 	stmdaeq	r0, {r2, r5, r6, r8, sl, lr}
    2554:	02e05d01 	rsceq	r5, r0, #64	; 0x40
    2558:	0d120000 	ldceq	0, cr0, [r2]
    255c:	01000016 	tsteq	r0, r6, lsl r0
    2560:	0002b5e5 	andeq	fp, r2, r5, ror #11
    2564:	00500100 	subseq	r0, r0, r0, lsl #2
    2568:	15380119 	ldrne	r0, [r8, #-281]!
    256c:	f7010000 	undefined instruction 0xf7010000
    2570:	00005e01 	andeq	r5, r0, r1, lsl #28
    2574:	00456400 	subeq	r6, r5, r0, lsl #8
    2578:	00457008 	subeq	r7, r5, r8
    257c:	235d0108 	cmpcs	sp, #2	; 0x2
    2580:	13000003 	movwne	r0, #3	; 0x3
    2584:	00001607 	andeq	r1, r0, r7, lsl #12
    2588:	02aff601 	adceq	pc, pc, #1048576	; 0x100000
    258c:	11920000 	orrsne	r0, r2, r0
    2590:	92120000 	andsls	r0, r2, #0	; 0x0
    2594:	01000000 	tsteq	r0, r0
    2598:	00004cf6 	strdeq	r4, [r0], -r6
    259c:	16510100 	ldrbne	r0, [r1], -r0, lsl #2
    25a0:	00001203 	andeq	r1, r0, r3, lsl #4
    25a4:	005ef801 	subseq	pc, lr, r1, lsl #16
    25a8:	1a000000 	bne	25b0 <__Stack_Size+0x21b0>
    25ac:	00159b01 	andseq	r9, r5, r1, lsl #22
    25b0:	01110100 	tsteq	r1, r0, lsl #2
    25b4:	00004c01 	andeq	r4, r0, r1, lsl #24
    25b8:	00457000 	subeq	r7, r5, r0
    25bc:	00457608 	subeq	r7, r5, r8, lsl #12
    25c0:	505d0108 	subspl	r0, sp, r8, lsl #2
    25c4:	1b000003 	blne	25d8 <__Stack_Size+0x21d8>
    25c8:	00001607 	andeq	r1, r0, r7, lsl #12
    25cc:	af011001 	svcge	0x00011001
    25d0:	a5000002 	strge	r0, [r0, #-2]
    25d4:	00000011 	andeq	r0, r0, r1, lsl r0
    25d8:	1622011a 	undefined
    25dc:	22010000 	andcs	r0, r1, #0	; 0x0
    25e0:	005e0101 	subseq	r0, lr, r1, lsl #2
    25e4:	45780000 	ldrbmi	r0, [r8]!
    25e8:	45840800 	strmi	r0, [r4, #2048]
    25ec:	5d010800 	stcpl	8, cr0, [r1]
    25f0:	00000397 	muleq	r0, r7, r3
    25f4:	0016071b 	andseq	r0, r6, fp, lsl r7
    25f8:	01210100 	teqeq	r1, r0, lsl #2
    25fc:	000002af 	andeq	r0, r0, pc, lsr #5
    2600:	000011b8 	strheq	r1, [r0], -r8
    2604:	0000921c 	andeq	r9, r0, ip, lsl r2
    2608:	01210100 	teqeq	r1, r0, lsl #2
    260c:	0000004c 	andeq	r0, r0, ip, asr #32
    2610:	031d5101 	tsteq	sp, #1073741824	; 0x40000000
    2614:	01000012 	tsteq	r0, r2, lsl r0
    2618:	005e0123 	subseq	r0, lr, r3, lsr #2
    261c:	1a000000 	bne	2624 <__Stack_Size+0x2224>
    2620:	00145a01 	andseq	r5, r4, r1, lsl #20
    2624:	013c0100 	teqeq	ip, r0, lsl #2
    2628:	00004c01 	andeq	r4, r0, r1, lsl #24
    262c:	00458400 	subeq	r8, r5, r0, lsl #8
    2630:	00458a08 	subeq	r8, r5, r8, lsl #20
    2634:	c45d0108 	ldrbgt	r0, [sp], #-264
    2638:	1b000003 	blne	264c <__Stack_Size+0x224c>
    263c:	00001607 	andeq	r1, r0, r7, lsl #12
    2640:	af013b01 	svcge	0x00013b01
    2644:	cb000002 	blgt	2654 <__Stack_Size+0x2254>
    2648:	00000011 	andeq	r0, r0, r1, lsl r0
    264c:	14b1011e 	ldrtne	r0, [r1], #286
    2650:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    2654:	458c0101 	strmi	r0, [ip, #257]
    2658:	45900800 	ldrmi	r0, [r0, #2048]
    265c:	5d010800 	stcpl	8, cr0, [r1]
    2660:	000003f9 	strdeq	r0, [r0], -r9
    2664:	0016071c 	andseq	r0, r6, ip, lsl r7
    2668:	014d0100 	cmpeq	sp, r0, lsl #2
    266c:	000002af 	andeq	r0, r0, pc, lsr #5
    2670:	921c5001 	andsls	r5, ip, #1	; 0x1
    2674:	01000000 	tsteq	r0, r0
    2678:	004c014d 	subeq	r0, ip, sp, asr #2
    267c:	51010000 	tstpl	r1, r0
    2680:	55011e00 	strpl	r1, [r1, #-3584]
    2684:	01000015 	tsteq	r0, r5, lsl r0
    2688:	90010161 	andls	r0, r1, r1, ror #2
    268c:	94080045 	strls	r0, [r8], #-69
    2690:	01080045 	tsteq	r8, r5, asr #32
    2694:	00042e5d 	andeq	r2, r4, sp, asr lr
    2698:	16071c00 	strne	r1, [r7], -r0, lsl #24
    269c:	60010000 	andvs	r0, r1, r0
    26a0:	0002af01 	andeq	sl, r2, r1, lsl #30
    26a4:	1c500100 	ldfnee	f0, [r0], {0}
    26a8:	00000092 	muleq	r0, r2, r0
    26ac:	4c016001 	stcmi	0, cr6, [r1], {1}
    26b0:	01000000 	tsteq	r0, r0
    26b4:	011e0051 	tsteq	lr, r1, asr r0
    26b8:	000014a3 	andeq	r1, r0, r3, lsr #9
    26bc:	01017701 	tsteq	r1, r1, lsl #14
    26c0:	08004594 	stmdaeq	r0, {r2, r4, r7, r8, sl, lr}
    26c4:	0800459e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, sl, lr}
    26c8:	04715d01 	ldrbteq	r5, [r1], #-3329
    26cc:	071c0000 	ldreq	r0, [ip, -r0]
    26d0:	01000016 	tsteq	r0, r6, lsl r0
    26d4:	02af0176 	adceq	r0, pc, #-2147483619	; 0x8000001d
    26d8:	50010000 	andpl	r0, r1, r0
    26dc:	0000921c 	andeq	r9, r0, ip, lsl r2
    26e0:	01760100 	cmneq	r6, r0, lsl #2
    26e4:	0000004c 	andeq	r0, r0, ip, asr #32
    26e8:	921c5101 	andsls	r5, ip, #1073741824	; 0x40000000
    26ec:	01000014 	tsteq	r0, r4, lsl r0
    26f0:	02200176 	eoreq	r0, r0, #-2147483619	; 0x8000001d
    26f4:	52010000 	andpl	r0, r1, #0	; 0x0
    26f8:	d4011e00 	strle	r1, [r1], #-3584
    26fc:	01000015 	tsteq	r0, r5, lsl r0
    2700:	a0010191 	mulge	r1, r1, r1
    2704:	a4080045 	strge	r0, [r8], #-69
    2708:	01080045 	tsteq	r8, r5, asr #32
    270c:	0004a65d 	andeq	sl, r4, sp, asr r6
    2710:	16071c00 	strne	r1, [r7], -r0, lsl #24
    2714:	90010000 	andls	r0, r1, r0
    2718:	0002af01 	andeq	sl, r2, r1, lsl #30
    271c:	1c500100 	ldfnee	f0, [r0], {0}
    2720:	00001564 	andeq	r1, r0, r4, ror #10
    2724:	4c019001 	stcmi	0, cr9, [r1], {1}
    2728:	01000000 	tsteq	r0, r0
    272c:	011e0051 	tsteq	lr, r1, asr r0
    2730:	000015b6 	strheq	r1, [r0], -r6
    2734:	0101a301 	tsteq	r1, r1, lsl #6
    2738:	080045a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, lr}
    273c:	080045b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, lr}
    2740:	04e95d01 	strbteq	r5, [r9], #3329
    2744:	071c0000 	ldreq	r0, [ip, -r0]
    2748:	01000016 	tsteq	r0, r6, lsl r0
    274c:	02af01a2 	adceq	r0, pc, #-2147483608	; 0x80000028
    2750:	50010000 	andpl	r0, r1, r0
    2754:	0000921c 	andeq	r9, r0, ip, lsl r2
    2758:	01a20100 	undefined instruction 0x01a20100
    275c:	0000004c 	andeq	r0, r0, ip, asr #32
    2760:	741f5101 	ldrvc	r5, [pc], #257	; 2768 <__Stack_Size+0x2368>
    2764:	0100706d 	tsteq	r0, sp, rrx
    2768:	003a01a4 	eorseq	r0, sl, r4, lsr #3
    276c:	53010000 	movwpl	r0, #4096	; 0x1000
    2770:	16011e00 	strne	r1, [r1], -r0, lsl #28
    2774:	01000015 	tsteq	r0, r5, lsl r0
    2778:	b40101c4 	strlt	r0, [r1], #-452
    277c:	d4080045 	strle	r0, [r8], #-69
    2780:	01080045 	tsteq	r8, r5, asr #32
    2784:	0005305d 	andeq	r3, r5, sp, asr r0
    2788:	14fa1c00 	ldrbtne	r1, [sl], #3072
    278c:	c3010000 	movwgt	r0, #4096	; 0x1000
    2790:	00005e01 	andeq	r5, r0, r1, lsl #28
    2794:	1b500100 	blne	1402b9c <__Stack_Size+0x140279c>
    2798:	0000158c 	andeq	r1, r0, ip, lsl #11
    279c:	5e01c301 	cdppl	3, 0, cr12, cr1, cr1, {0}
    27a0:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    27a4:	20000011 	andcs	r0, r0, r1, lsl r0
    27a8:	0000154e 	andeq	r1, r0, lr, asr #10
    27ac:	3a01c501 	bcc	73bb8 <__Stack_Size+0x737b8>
    27b0:	f1000000 	cps	#0
    27b4:	00000011 	andeq	r0, r0, r1, lsl r0
    27b8:	146e011e 	strbtne	r0, [lr], #-286
    27bc:	dd010000 	stcle	0, cr0, [r1]
    27c0:	45d40101 	ldrbmi	r0, [r4, #257]
    27c4:	45e00800 	strbmi	r0, [r0, #2048]!
    27c8:	5d010800 	stcpl	8, cr0, [r1]
    27cc:	00000557 	andeq	r0, r0, r7, asr r5
    27d0:	00117c1c 	andseq	r7, r1, ip, lsl ip
    27d4:	01dc0100 	bicseq	r0, ip, r0, lsl #2
    27d8:	00000089 	andeq	r0, r0, r9, lsl #1
    27dc:	21005001 	tstcs	r0, r1
    27e0:	00157801 	andseq	r7, r5, r1, lsl #16
    27e4:	02080100 	andeq	r0, r8, #0	; 0x0
    27e8:	0045e001 	subeq	lr, r5, r1
    27ec:	00464008 	subeq	r4, r6, r8
    27f0:	00123008 	andseq	r3, r2, r8
    27f4:	0005c600 	andeq	ip, r5, r0, lsl #12
    27f8:	152d1c00 	strne	r1, [sp, #-3072]!
    27fc:	07010000 	streq	r0, [r1, -r0]
    2800:	00003a02 	andeq	r3, r0, r2, lsl #20
    2804:	1b500100 	blne	1402c0c <__Stack_Size+0x140280c>
    2808:	0000117c 	andeq	r1, r0, ip, ror r1
    280c:	89020701 	stmdbhi	r2, {r0, r8, r9, sl}
    2810:	4f000000 	svcmi	0x00000000
    2814:	1f000012 	svcne	0x00000012
    2818:	00706d74 	rsbseq	r6, r0, r4, ror sp
    281c:	3a020901 	bcc	84c28 <__Stack_Size+0x84828>
    2820:	01000000 	tsteq	r0, r0
    2824:	15df1d54 	ldrbne	r1, [pc, #3412]	; 3580 <__Stack_Size+0x3180>
    2828:	09010000 	stmdbeq	r1, {}
    282c:	00003a02 	andeq	r3, r0, r2, lsl #20
    2830:	154e2000 	strbne	r2, [lr]
    2834:	09010000 	stmdbeq	r1, {}
    2838:	00003a02 	andeq	r3, r0, r2, lsl #20
    283c:	00126d00 	andseq	r6, r2, r0, lsl #26
    2840:	15ae1d00 	strne	r1, [lr, #3328]!
    2844:	09010000 	stmdbeq	r1, {}
    2848:	00003a02 	andeq	r3, r0, r2, lsl #20
    284c:	01210000 	teqeq	r1, r0
    2850:	000015e4 	andeq	r1, r0, r4, ror #11
    2854:	01023a01 	tsteq	r2, r1, lsl #20
    2858:	08004640 	stmdaeq	r0, {r6, r9, sl, lr}
    285c:	08004674 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, lr}
    2860:	000012ac 	andeq	r1, r0, ip, lsr #5
    2864:	0000060d 	andeq	r0, r0, sp, lsl #12
    2868:	0014fa1b 	andseq	pc, r4, fp, lsl sl
    286c:	02390100 	eorseq	r0, r9, #0	; 0x0
    2870:	0000005e 	andeq	r0, r0, lr, asr r0
    2874:	000012cb 	andeq	r1, r0, fp, asr #5
    2878:	00158c1b 	andseq	r8, r5, fp, lsl ip
    287c:	02390100 	eorseq	r0, r9, #0	; 0x0
    2880:	0000005e 	andeq	r0, r0, lr, asr r0
    2884:	000012de 	ldrdeq	r1, [r0], -lr
    2888:	706d7422 	rsbvc	r7, sp, r2, lsr #8
    288c:	023b0100 	eorseq	r0, fp, #0	; 0x0
    2890:	0000003a 	andeq	r0, r0, sl, lsr r0
    2894:	39012300 	stmdbcc	r1, {r8, r9, sp}
    2898:	01000016 	tsteq	r0, r6, lsl r0
    289c:	4674016c 	ldrbtmi	r0, [r4], -ip, ror #2
    28a0:	468c0800 	strmi	r0, [ip], r0, lsl #16
    28a4:	12f10800 	rscsne	r0, r1, #0	; 0x0
    28a8:	01240000 	teqeq	r4, r0
    28ac:	0000150a 	andeq	r1, r0, sl, lsl #10
    28b0:	8c013401 	cfstrshi	mvf3, [r1], {1}
    28b4:	34080046 	strcc	r0, [r8], #-70
    28b8:	1c080047 	stcne	0, cr0, [r8], {71}
    28bc:	13000013 	movwne	r0, #19	; 0x13
    28c0:	00001607 	andeq	r1, r0, r7, lsl #12
    28c4:	02af3301 	adceq	r3, pc, #67108864	; 0x4000000
    28c8:	13470000 	movtne	r0, #28672	; 0x7000
    28cc:	00000000 	andeq	r0, r0, r0
    28d0:	000008e3 	andeq	r0, r0, r3, ror #17
    28d4:	0a550002 	beq	15428e4 <__Stack_Size+0x15424e4>
    28d8:	01040000 	tsteq	r4, r0
    28dc:	0000053b 	andeq	r0, r0, fp, lsr r5
    28e0:	00173c01 	andseq	r3, r7, r1, lsl #24
    28e4:	00043100 	andeq	r3, r4, r0, lsl #2
    28e8:	00473400 	subeq	r3, r7, r0, lsl #8
    28ec:	004ab808 	subeq	fp, sl, r8, lsl #16
    28f0:	000a0e08 	andeq	r0, sl, r8, lsl #28
    28f4:	05040200 	streq	r0, [r4, #-512]
    28f8:	00002e21 	andeq	r2, r0, r1, lsr #28
    28fc:	b8050202 	stmdalt	r5, {r1, r9}
    2900:	02000005 	andeq	r0, r0, #5	; 0x5
    2904:	06cc0601 	strbeq	r0, [ip], r1, lsl #12
    2908:	75030000 	strvc	r0, [r3]
    290c:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    2910:	00004527 	andeq	r4, r0, r7, lsr #10
    2914:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2918:	00002e9b 	muleq	r0, fp, lr
    291c:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    2920:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
    2924:	02000000 	andeq	r0, r0, #0	; 0x0
    2928:	081e0702 	ldmdaeq	lr, {r1, r8, r9, sl}
    292c:	75030000 	strvc	r0, [r3]
    2930:	29020038 	stmdbcs	r2, {r3, r4, r5}
    2934:	00000068 	andeq	r0, r0, r8, rrx
    2938:	ca080102 	bgt	202d48 <__Stack_Size+0x202948>
    293c:	04000006 	streq	r0, [r0], #-6
    2940:	00000045 	andeq	r0, r0, r5, asr #32
    2944:	00006f05 	andeq	r6, r0, r5, lsl #30
    2948:	02010600 	andeq	r0, r1, #0	; 0x0
    294c:	00008e39 	andeq	r8, r0, r9, lsr lr
    2950:	149d0700 	ldrne	r0, [sp], #1792
    2954:	08000000 	stmdaeq	r0, {}
    2958:	00544553 	subseq	r4, r4, r3, asr r5
    295c:	ea090001 	b	242968 <__Stack_Size+0x242568>
    2960:	0200001b 	andeq	r0, r0, #27	; 0x1b
    2964:	00007939 	andeq	r7, r0, r9, lsr r9
    2968:	02010600 	andeq	r0, r1, #0	; 0x0
    296c:	0000ae3b 	andeq	sl, r0, fp, lsr lr
    2970:	03630700 	cmneq	r3, #0	; 0x0
    2974:	07000000 	streq	r0, [r0, -r0]
    2978:	0000068d 	andeq	r0, r0, sp, lsl #13
    297c:	d1090001 	tstle	r9, r1
    2980:	02000000 	andeq	r0, r0, #0	; 0x0
    2984:	0000993b 	andeq	r9, r0, fp, lsr r9
    2988:	07040a00 	streq	r0, [r4, -r0, lsl #20]
    298c:	03033c0b 	movweq	r3, #15371	; 0x3c0b
    2990:	01750182 	cmneq	r5, r2, lsl #3
    2994:	3b0c0000 	blcc	30299c <__Stack_Size+0x30259c>
    2998:	03000019 	movweq	r0, #25	; 0x19
    299c:	01850183 	orreq	r0, r5, r3, lsl #3
    29a0:	23020000 	movwcs	r0, #8192	; 0x2000
    29a4:	05720c00 	ldrbeq	r0, [r2, #-3072]!
    29a8:	84030000 	strhi	r0, [r3]
    29ac:	00018a01 	andeq	r8, r1, r1, lsl #20
    29b0:	08230200 	stmdaeq	r3!, {r9}
    29b4:	0018ff0c 	andseq	pc, r8, ip, lsl #30
    29b8:	01850300 	orreq	r0, r5, r0, lsl #6
    29bc:	0000019a 	muleq	r0, sl, r1
    29c0:	01802303 	orreq	r2, r0, r3, lsl #6
    29c4:	0017c40c 	andseq	ip, r7, ip, lsl #8
    29c8:	01860300 	orreq	r0, r6, r0, lsl #6
    29cc:	0000018a 	andeq	r0, r0, sl, lsl #3
    29d0:	01882303 	orreq	r2, r8, r3, lsl #6
    29d4:	0019150c 	andseq	r1, r9, ip, lsl #10
    29d8:	01870300 	orreq	r0, r7, r0, lsl #6
    29dc:	0000019f 	muleq	r0, pc, r1
    29e0:	02802303 	addeq	r2, r0, #201326592	; 0xc000000
    29e4:	0005860c 	andeq	r8, r5, ip, lsl #12
    29e8:	01880300 	orreq	r0, r8, r0, lsl #6
    29ec:	0000018a 	andeq	r0, r0, sl, lsl #3
    29f0:	02882303 	addeq	r2, r8, #201326592	; 0xc000000
    29f4:	0018840c 	andseq	r8, r8, ip, lsl #8
    29f8:	01890300 	orreq	r0, r9, r0, lsl #6
    29fc:	000001a4 	andeq	r0, r0, r4, lsr #3
    2a00:	03802303 	orreq	r2, r0, #201326592	; 0xc000000
    2a04:	0005900c 	andeq	r9, r5, ip
    2a08:	018a0300 	orreq	r0, sl, r0, lsl #6
    2a0c:	0000018a 	andeq	r0, r0, sl, lsl #3
    2a10:	03882303 	orreq	r2, r8, #201326592	; 0xc000000
    2a14:	0016490c 	andseq	r4, r6, ip, lsl #18
    2a18:	018b0300 	orreq	r0, fp, r0, lsl #6
    2a1c:	000001a9 	andeq	r0, r0, r9, lsr #3
    2a20:	04802303 	streq	r2, [r0], #771
    2a24:	00059a0c 	andeq	r9, r5, ip, lsl #20
    2a28:	018c0300 	orreq	r0, ip, r0, lsl #6
    2a2c:	000001ae 	andeq	r0, r0, lr, lsr #3
    2a30:	04882303 	streq	r2, [r8], #771
    2a34:	5250490d 	subspl	r4, r0, #212992	; 0x34000
    2a38:	018d0300 	orreq	r0, sp, r0, lsl #6
    2a3c:	000001ce 	andeq	r0, r0, lr, asr #3
    2a40:	06802303 	streq	r2, [r0], r3, lsl #6
    2a44:	00450e00 	subeq	r0, r5, r0, lsl #28
    2a48:	01850000 	orreq	r0, r5, r0
    2a4c:	b90f0000 	stmdblt	pc, {}
    2a50:	01000000 	tsteq	r0, r0
    2a54:	01750400 	cmneq	r5, r0, lsl #8
    2a58:	3a0e0000 	bcc	382a60 <__Stack_Size+0x382660>
    2a5c:	9a000000 	bls	2a64 <__Stack_Size+0x2664>
    2a60:	0f000001 	svceq	0x00000001
    2a64:	000000b9 	strheq	r0, [r0], -r9
    2a68:	7504001d 	strvc	r0, [r4, #-29]
    2a6c:	04000001 	streq	r0, [r0], #-1
    2a70:	00000175 	andeq	r0, r0, r5, ror r1
    2a74:	00017504 	andeq	r7, r1, r4, lsl #10
    2a78:	01750400 	cmneq	r5, r0, lsl #8
    2a7c:	3a0e0000 	bcc	382a84 <__Stack_Size+0x382684>
    2a80:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    2a84:	0f000001 	svceq	0x00000001
    2a88:	000000b9 	strheq	r0, [r0], -r9
    2a8c:	450e003d 	strmi	r0, [lr, #-61]
    2a90:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    2a94:	0f000001 	svceq	0x00000001
    2a98:	000000b9 	strheq	r0, [r0], -r9
    2a9c:	be04000e 	cdplt	0, 0, cr0, cr4, cr14, {0}
    2aa0:	10000001 	andne	r0, r0, r1
    2aa4:	01910340 	orrseq	r0, r1, r0, asr #6
    2aa8:	000002af 	andeq	r0, r0, pc, lsr #5
    2aac:	0017670c 	andseq	r6, r7, ip, lsl #14
    2ab0:	01920300 	orrseq	r0, r2, r0, lsl #6
    2ab4:	00000074 	andeq	r0, r0, r4, ror r0
    2ab8:	0c002302 	stceq	3, cr2, [r0], {2}
    2abc:	000017bf 	strheq	r1, [r0], -pc
    2ac0:	6f019303 	svcvs	0x00019303
    2ac4:	02000000 	andeq	r0, r0, #0	; 0x0
    2ac8:	100c0423 	andne	r0, ip, r3, lsr #8
    2acc:	03000019 	movweq	r0, #25	; 0x19
    2ad0:	006f0194 	mlseq	pc, r4, r1, r0
    2ad4:	23020000 	movwcs	r0, #8192	; 0x2000
    2ad8:	186a0c08 	stmdane	sl!, {r3, sl, fp}^
    2adc:	95030000 	strls	r0, [r3]
    2ae0:	00006f01 	andeq	r6, r0, r1, lsl #30
    2ae4:	0c230200 	sfmeq	f0, 4, [r3]
    2ae8:	5243530d 	subpl	r5, r3, #872415232	; 0x34000000
    2aec:	01960300 	orrseq	r0, r6, r0, lsl #6
    2af0:	0000006f 	andeq	r0, r0, pc, rrx
    2af4:	0d102302 	ldceq	3, cr2, [r0, #-8]
    2af8:	00524343 	subseq	r4, r2, r3, asr #6
    2afc:	6f019703 	svcvs	0x00019703
    2b00:	02000000 	andeq	r0, r0, #0	; 0x0
    2b04:	930c1423 	movwls	r1, #50211	; 0xc423
    2b08:	03000018 	movweq	r0, #24	; 0x18
    2b0c:	02bf0198 	adcseq	r0, pc, #38	; 0x26
    2b10:	23020000 	movwcs	r0, #8192	; 0x2000
    2b14:	18980c18 	ldmne	r8, {r3, r4, sl, fp}
    2b18:	99030000 	stmdbls	r3, {}
    2b1c:	00006f01 	andeq	r6, r0, r1, lsl #30
    2b20:	24230200 	strtcs	r0, [r3], #-512
    2b24:	0018450c 	andseq	r4, r8, ip, lsl #10
    2b28:	019a0300 	orrseq	r0, sl, r0, lsl #6
    2b2c:	0000006f 	andeq	r0, r0, pc, rrx
    2b30:	0c282302 	stceq	3, cr2, [r8], #-8
    2b34:	0000191f 	andeq	r1, r0, pc, lsl r9
    2b38:	6f019b03 	svcvs	0x00019b03
    2b3c:	02000000 	andeq	r0, r0, #0	; 0x0
    2b40:	1a0c2c23 	bne	30dbd4 <__Stack_Size+0x30d7d4>
    2b44:	03000019 	movweq	r0, #25	; 0x19
    2b48:	006f019c 	mlseq	pc, ip, r1, r0
    2b4c:	23020000 	movwcs	r0, #8192	; 0x2000
    2b50:	18ae0c30 	stmiane	lr!, {r4, r5, sl, fp}
    2b54:	9d030000 	stcls	0, cr0, [r3]
    2b58:	00006f01 	andeq	r6, r0, r1, lsl #30
    2b5c:	34230200 	strtcc	r0, [r3], #-512
    2b60:	00181c0c 	andseq	r1, r8, ip, lsl #24
    2b64:	019e0300 	orrseq	r0, lr, r0, lsl #6
    2b68:	0000006f 	andeq	r0, r0, pc, rrx
    2b6c:	0c382302 	ldceq	3, cr2, [r8], #-8
    2b70:	00001936 	andeq	r1, r0, r6, lsr r9
    2b74:	6f019f03 	svcvs	0x00019f03
    2b78:	02000000 	andeq	r0, r0, #0	; 0x0
    2b7c:	0e003c23 	cdpeq	12, 0, cr3, cr0, cr3, {1}
    2b80:	00000045 	andeq	r0, r0, r5, asr #32
    2b84:	000002bf 	strheq	r0, [r0], -pc
    2b88:	0000b90f 	andeq	fp, r0, pc, lsl #18
    2b8c:	04000200 	streq	r0, [r0], #-512
    2b90:	000002af 	andeq	r0, r0, pc, lsr #5
    2b94:	1b040411 	blne	103be0 <__Stack_Size+0x1037e0>
    2b98:	00000305 	andeq	r0, r0, r5, lsl #6
    2b9c:	0004fb12 	andeq	pc, r4, r2, lsl fp
    2ba0:	5e1c0400 	cfmulspl	mvf0, mvf12, mvf0
    2ba4:	02000000 	andeq	r0, r0, #0	; 0x0
    2ba8:	4b120023 	blmi	482c3c <__Stack_Size+0x48283c>
    2bac:	04000008 	streq	r0, [r0], #-8
    2bb0:	00005e1d 	andeq	r5, r0, sp, lsl lr
    2bb4:	01230200 	teqeq	r3, r0, lsl #4
    2bb8:	0007ae12 	andeq	sl, r7, r2, lsl lr
    2bbc:	5e1e0400 	cfmulspl	mvf0, mvf14, mvf0
    2bc0:	02000000 	andeq	r0, r0, #0	; 0x0
    2bc4:	9d120223 	lfmls	f0, 4, [r2, #-140]
    2bc8:	04000002 	streq	r0, [r0], #-2
    2bcc:	0000ae1f 	andeq	sl, r0, pc, lsl lr
    2bd0:	03230200 	teqeq	r3, #0	; 0x0
    2bd4:	01d90900 	bicseq	r0, r9, r0, lsl #18
    2bd8:	20040000 	andcs	r0, r4, r0
    2bdc:	000002c4 	andeq	r0, r0, r4, asr #5
    2be0:	1a6c0113 	bne	1b03034 <__Stack_Size+0x1b02c34>
    2be4:	25010000 	strcs	r0, [r1]
    2be8:	00473401 	subeq	r3, r7, r1, lsl #8
    2bec:	00476808 	subeq	r6, r7, r8, lsl #16
    2bf0:	355d0108 	ldrbcc	r0, [sp, #-264]
    2bf4:	14000003 	strne	r0, [r0], #-3
    2bf8:	00001079 	andeq	r1, r0, r9, ror r0
    2bfc:	003a2601 	eorseq	r2, sl, r1, lsl #12
    2c00:	52010000 	andpl	r0, r1, #0	; 0x0
    2c04:	f9011300 	undefined instruction 0xf9011300
    2c08:	01000019 	tsteq	r0, r9, lsl r0
    2c0c:	4768013c 	undefined
    2c10:	47980800 	ldrmi	r0, [r8, r0, lsl #16]
    2c14:	5d010800 	stcpl	8, cr0, [r1]
    2c18:	00000358 	andeq	r0, r0, r8, asr r3
    2c1c:	00107915 	andseq	r7, r0, r5, lsl r9
    2c20:	3a3d0100 	bcc	f43028 <__Stack_Size+0xf42c28>
    2c24:	00000000 	andeq	r0, r0, r0
    2c28:	1a780113 	bne	1e0307c <__Stack_Size+0x1e02c7c>
    2c2c:	62010000 	andvs	r0, r1, #0	; 0x0
    2c30:	00479801 	subeq	r9, r7, r1, lsl #16
    2c34:	0047ac08 	subeq	sl, r7, r8, lsl #24
    2c38:	7f5d0108 	svcvc	0x005d0108
    2c3c:	16000003 	strne	r0, [r0], -r3
    2c40:	0000176d 	andeq	r1, r0, sp, ror #14
    2c44:	003a6101 	eorseq	r6, sl, r1, lsl #2
    2c48:	13660000 	cmnne	r6, #0	; 0x0
    2c4c:	17000000 	strne	r0, [r0, -r0]
    2c50:	00188901 	andseq	r8, r8, r1, lsl #18
    2c54:	01750100 	cmneq	r5, r0, lsl #2
    2c58:	080047ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, lr}
    2c5c:	08004828 	stmdaeq	r0, {r3, r5, fp, lr}
    2c60:	00001379 	andeq	r1, r0, r9, ror r3
    2c64:	000003eb 	andeq	r0, r0, fp, ror #7
    2c68:	00166d16 	andseq	r6, r6, r6, lsl sp
    2c6c:	eb740100 	bl	1d03074 <__Stack_Size+0x1d02c74>
    2c70:	98000003 	stmdals	r0, {r0, r1}
    2c74:	18000013 	stmdane	r0, {r0, r1, r4}
    2c78:	00001904 	andeq	r1, r0, r4, lsl #18
    2c7c:	003a7601 	eorseq	r7, sl, r1, lsl #12
    2c80:	13b60000 	undefined instruction 0x13b60000
    2c84:	4e180000 	wxormi	wr0, wr8, wr0
    2c88:	01000015 	tsteq	r0, r5, lsl r0
    2c8c:	00003a76 	andeq	r3, r0, r6, ror sl
    2c90:	0013df00 	andseq	sp, r3, r0, lsl #30
    2c94:	15ae1800 	strne	r1, [lr, #2048]!
    2c98:	76010000 	strvc	r0, [r1], -r0
    2c9c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2ca0:	000013fd 	strdeq	r1, [r0], -sp
    2ca4:	0016f515 	andseq	pc, r6, r5, lsl r5
    2ca8:	3a770100 	bcc	1dc30b0 <__Stack_Size+0x1dc2cb0>
    2cac:	15000000 	strne	r0, [r0]
    2cb0:	000018b4 	strheq	r1, [r0], -r4
    2cb4:	003a7701 	eorseq	r7, sl, r1, lsl #14
    2cb8:	19000000 	stmdbne	r0, {}
    2cbc:	00030504 	andeq	r0, r3, r4, lsl #10
    2cc0:	ef011300 	svc	0x00011300
    2cc4:	01000018 	tsteq	r0, r8, lsl r0
    2cc8:	482801a9 	stmdami	r8!, {r0, r3, r5, r7, r8}
    2ccc:	48340800 	ldmdami	r4!, {fp}
    2cd0:	5d010800 	stcpl	8, cr0, [r1]
    2cd4:	00000416 	andeq	r0, r0, r6, lsl r4
    2cd8:	00166d1a 	andseq	r6, r6, sl, lsl sp
    2cdc:	eba80100 	bl	fea030e4 <SCS_BASE+0x1e9f50e4>
    2ce0:	01000003 	tsteq	r0, r3
    2ce4:	011b0050 	tsteq	fp, r0, asr r0
    2ce8:	0000167d 	andeq	r1, r0, sp, ror r6
    2cec:	01010601 	tsteq	r1, r1, lsl #12
    2cf0:	0000004c 	andeq	r0, r0, ip, asr #32
    2cf4:	08004834 	stmdaeq	r0, {r2, r4, r5, fp, lr}
    2cf8:	0800484c 	stmdaeq	r0, {r2, r3, r6, fp, lr}
    2cfc:	011c5d01 	tsteq	ip, r1, lsl #26
    2d00:	000019d6 	ldrdeq	r1, [r0], -r6
    2d04:	01011301 	tsteq	r1, r1, lsl #6
    2d08:	0000008e 	andeq	r0, r0, lr, lsl #1
    2d0c:	0800484c 	stmdaeq	r0, {r2, r3, r6, fp, lr}
    2d10:	08004870 	stmdaeq	r0, {r4, r5, r6, fp, lr}
    2d14:	04755d01 	ldrbteq	r5, [r5], #-3329
    2d18:	fb1d0000 	blx	742d22 <__Stack_Size+0x742922>
    2d1c:	01000004 	tsteq	r0, r4
    2d20:	005e0112 	subseq	r0, lr, r2, lsl r1
    2d24:	14100000 	ldrne	r0, [r0]
    2d28:	911e0000 	tstls	lr, r0
    2d2c:	0100001a 	tsteq	r0, sl, lsl r0
    2d30:	008e0114 	addeq	r0, lr, r4, lsl r1
    2d34:	741f0000 	ldrvc	r0, [pc], #0	; 2d3c <__Stack_Size+0x293c>
    2d38:	0100706d 	tsteq	r0, sp, rrx
    2d3c:	003a0115 	eorseq	r0, sl, r5, lsl r1
    2d40:	52010000 	andpl	r0, r1, #0	; 0x0
    2d44:	21012000 	tstcs	r1, r0
    2d48:	01000018 	tsteq	r0, r8, lsl r0
    2d4c:	7001012f 	andvc	r0, r1, pc, lsr #2
    2d50:	7c080048 	stcvc	0, cr0, [r8], {72}
    2d54:	01080048 	tsteq	r8, r8, asr #32
    2d58:	00049c5d 	andeq	r9, r4, sp, asr ip
    2d5c:	04fb2100 	ldrbteq	r2, [fp], #256
    2d60:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    2d64:	00005e01 	andeq	r5, r0, r1, lsl #28
    2d68:	00500100 	subseq	r0, r0, r0, lsl #2
    2d6c:	164e0120 	strbne	r0, [lr], -r0, lsr #2
    2d70:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    2d74:	487c0101 	ldmdami	ip!, {r0, r8}^
    2d78:	48940800 	ldmmi	r4, {fp}
    2d7c:	5d010800 	stcpl	8, cr0, [r1]
    2d80:	000004c5 	andeq	r0, r0, r5, asr #9
    2d84:	0004fb1d 	andeq	pc, r4, sp, lsl fp
    2d88:	013d0100 	teqeq	sp, r0, lsl #2
    2d8c:	0000005e 	andeq	r0, r0, lr, asr r0
    2d90:	00001423 	andeq	r1, r0, r3, lsr #8
    2d94:	94011b00 	strls	r1, [r1], #-2816
    2d98:	01000017 	tsteq	r0, r7, lsl r0
    2d9c:	4c01014e 	stfmis	f0, [r1], {78}
    2da0:	94000000 	strls	r0, [r0]
    2da4:	a4080048 	strge	r0, [r8], #-72
    2da8:	01080048 	tsteq	r8, r8, asr #32
    2dac:	4a011c5d 	bmi	49f28 <__Stack_Size+0x49b28>
    2db0:	0100001a 	tsteq	r0, sl, lsl r0
    2db4:	8e01015b 	mcrhi	1, 0, r0, cr1, cr11, {2}
    2db8:	a4000000 	strge	r0, [r0]
    2dbc:	c8080048 	stmdagt	r8, {r3, r6}
    2dc0:	01080048 	tsteq	r8, r8, asr #32
    2dc4:	0005245d 	andeq	r2, r5, sp, asr r4
    2dc8:	04fb1d00 	ldrbteq	r1, [fp], #3328
    2dcc:	5a010000 	bpl	42dd4 <__Stack_Size+0x429d4>
    2dd0:	00005e01 	andeq	r5, r0, r1, lsl #28
    2dd4:	00143600 	andseq	r3, r4, r0, lsl #12
    2dd8:	1a211e00 	bne	84a5e0 <__Stack_Size+0x84a1e0>
    2ddc:	5c010000 	stcpl	0, cr0, [r1], {0}
    2de0:	00008e01 	andeq	r8, r0, r1, lsl #28
    2de4:	6d741f00 	ldclvs	15, cr1, [r4]
    2de8:	5d010070 	stcpl	0, cr0, [r1, #-448]
    2dec:	00003a01 	andeq	r3, r0, r1, lsl #20
    2df0:	00520100 	subseq	r0, r2, r0, lsl #2
    2df4:	175f011b 	smmlane	pc, fp, r1, r0
    2df8:	78010000 	stmdavc	r1, {}
    2dfc:	003a0101 	eorseq	r0, sl, r1, lsl #2
    2e00:	48c80000 	stmiami	r8, {}^
    2e04:	48d40800 	ldmmi	r4, {fp}^
    2e08:	5d010800 	stcpl	8, cr0, [r1]
    2e0c:	18700120 	ldmdane	r0!, {r5, r8}^
    2e10:	8a010000 	bhi	42e18 <__Stack_Size+0x42a18>
    2e14:	48d40101 	ldmmi	r4, {r0, r8}^
    2e18:	48e80800 	stmiami	r8!, {fp}^
    2e1c:	5d010800 	stcpl	8, cr0, [r1]
    2e20:	00000573 	andeq	r0, r0, r3, ror r5
    2e24:	001a1421 	andseq	r1, sl, r1, lsr #8
    2e28:	01890100 	orreq	r0, r9, r0, lsl #2
    2e2c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2e30:	e81d5001 	ldmda	sp, {r0, ip, lr}
    2e34:	01000018 	tsteq	r0, r8, lsl r0
    2e38:	003a0189 	eorseq	r0, sl, r9, lsl #3
    2e3c:	14490000 	strbne	r0, [r9]
    2e40:	22000000 	andcs	r0, r0, #0	; 0x0
    2e44:	0016dc01 	andseq	sp, r6, r1, lsl #24
    2e48:	019a0100 	orrseq	r0, sl, r0, lsl #2
    2e4c:	0048e801 	subeq	lr, r8, r1, lsl #16
    2e50:	0048f808 	subeq	pc, r8, r8, lsl #16
    2e54:	225d0108 	subscs	r0, sp, #2	; 0x2
    2e58:	0017cd01 	andseq	ip, r7, r1, lsl #26
    2e5c:	01a60100 	undefined instruction 0x01a60100
    2e60:	0048f801 	subeq	pc, r8, r1, lsl #16
    2e64:	00490808 	subeq	r0, r9, r8, lsl #16
    2e68:	205d0108 	subscs	r0, sp, r8, lsl #2
    2e6c:	0018d401 	andseq	sp, r8, r1, lsl #8
    2e70:	01b90100 	undefined instruction 0x01b90100
    2e74:	00490801 	subeq	r0, r9, r1, lsl #16
    2e78:	00492408 	subeq	r2, r9, r8, lsl #8
    2e7c:	d05d0108 	subsle	r0, sp, r8, lsl #2
    2e80:	21000005 	tstcs	r0, r5
    2e84:	00001a3d 	andeq	r1, r0, sp, lsr sl
    2e88:	5e01b801 	cdppl	8, 0, cr11, cr1, cr1, {0}
    2e8c:	01000000 	tsteq	r0, r0
    2e90:	117c2150 	cmnne	ip, r0, asr r1
    2e94:	b8010000 	stmdalt	r1, {}
    2e98:	0000ae01 	andeq	sl, r0, r1, lsl #28
    2e9c:	00510100 	subseq	r0, r1, r0, lsl #2
    2ea0:	18bb0120 	ldmne	fp!, {r5, r8}
    2ea4:	d7010000 	strle	r0, [r1, -r0]
    2ea8:	49240101 	stmdbmi	r4!, {r0, r8}
    2eac:	494c0800 	stmdbmi	ip, {fp}^
    2eb0:	5d010800 	stcpl	8, cr0, [r1]
    2eb4:	00000615 	andeq	r0, r0, r5, lsl r6
    2eb8:	0017b11d 	andseq	fp, r7, sp, lsl r1
    2ebc:	01d60100 	bicseq	r0, r6, r0, lsl #2
    2ec0:	0000003a 	andeq	r0, r0, sl, lsr r0
    2ec4:	0000145c 	andeq	r1, r0, ip, asr r4
    2ec8:	00117c21 	andseq	r7, r1, r1, lsr #24
    2ecc:	01d60100 	bicseq	r0, r6, r0, lsl #2
    2ed0:	000000ae 	andeq	r0, r0, lr, lsr #1
    2ed4:	4e235101 	sufmis	f5, f3, f1
    2ed8:	01000015 	tsteq	r0, r5, lsl r0
    2edc:	003a01d8 	ldrsbteq	r0, [sl], -r8
    2ee0:	50010000 	andpl	r0, r1, r0
    2ee4:	1b012400 	blne	4beec <__Stack_Size+0x4baec>
    2ee8:	01000017 	tsteq	r0, r7, lsl r0
    2eec:	4c010200 	sfmmi	f0, 4, [r1], {0}
    2ef0:	a4080049 	strge	r0, [r8], #-73
    2ef4:	6f080049 	svcvs	0x00080049
    2ef8:	98000014 	stmdals	r0, {r2, r4}
    2efc:	1d000006 	stcne	0, cr0, [r0, #-24]
    2f00:	000017b1 	strheq	r1, [r0], -r1
    2f04:	3a01fe01 	bcc	82710 <__Stack_Size+0x82310>
    2f08:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    2f0c:	1d000014 	stcne	0, cr0, [r0, #-80]
    2f10:	000019b6 	strheq	r1, [r0], -r6
    2f14:	5e01fe01 	cdppl	14, 0, cr15, cr1, cr1, {0}
    2f18:	a1000000 	tstge	r0, r0
    2f1c:	1d000014 	stcne	0, cr0, [r0, #-80]
    2f20:	000016b3 	strheq	r1, [r0], -r3
    2f24:	5e01ff01 	cdppl	15, 0, cr15, cr1, cr1, {0}
    2f28:	b4000000 	strlt	r0, [r0]
    2f2c:	25000014 	strcs	r0, [r0, #-20]
    2f30:	000015df 	ldrdeq	r1, [r0], -pc
    2f34:	3a020101 	bcc	83340 <__Stack_Size+0x82f40>
    2f38:	c7000000 	strgt	r0, [r0, -r0]
    2f3c:	1e000014 	mcrne	0, 0, r0, cr0, cr4, {0}
    2f40:	0000195c 	andeq	r1, r0, ip, asr r9
    2f44:	3a020101 	bcc	83350 <__Stack_Size+0x82f50>
    2f48:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2f4c:	00001a31 	andeq	r1, r0, r1, lsr sl
    2f50:	3a020101 	bcc	8335c <__Stack_Size+0x82f5c>
    2f54:	25000000 	strcs	r0, [r0]
    2f58:	00001904 	andeq	r1, r0, r4, lsl #18
    2f5c:	3a020201 	bcc	83768 <__Stack_Size+0x83368>
    2f60:	da000000 	ble	2f68 <__Stack_Size+0x2b68>
    2f64:	00000014 	andeq	r0, r0, r4, lsl r0
    2f68:	1961011c 	stmdbne	r1!, {r2, r3, r4, r8}^
    2f6c:	29010000 	stmdbcs	r1, {}
    2f70:	008e0102 	addeq	r0, lr, r2, lsl #2
    2f74:	49a40000 	stmibmi	r4!, {}
    2f78:	49c40800 	stmibmi	r4, {fp}^
    2f7c:	5d010800 	stcpl	8, cr0, [r1]
    2f80:	000006ed 	andeq	r0, r0, sp, ror #13
    2f84:	0017b11d 	andseq	fp, r7, sp, lsl r1
    2f88:	02280100 	eoreq	r0, r8, #0	; 0x0
    2f8c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2f90:	00001503 	andeq	r1, r0, r3, lsl #10
    2f94:	0012031e 	andseq	r0, r2, lr, lsl r3
    2f98:	022a0100 	eoreq	r0, sl, #0	; 0x0
    2f9c:	0000008e 	andeq	r0, r0, lr, lsl #1
    2fa0:	706d7426 	rsbvc	r7, sp, r6, lsr #8
    2fa4:	022b0100 	eoreq	r0, fp, #0	; 0x0
    2fa8:	0000003a 	andeq	r0, r0, sl, lsr r0
    2fac:	00183e25 	andseq	r3, r8, r5, lsr #28
    2fb0:	022b0100 	eoreq	r0, fp, #0	; 0x0
    2fb4:	0000003a 	andeq	r0, r0, sl, lsr r0
    2fb8:	00001516 	andeq	r1, r0, r6, lsl r5
    2fbc:	4a012000 	bmi	4afc4 <__Stack_Size+0x4abc4>
    2fc0:	01000018 	tsteq	r0, r8, lsl r0
    2fc4:	c401024f 	strgt	r0, [r1], #-591
    2fc8:	dc080049 	stcle	0, cr0, [r8], {73}
    2fcc:	01080049 	tsteq	r8, r9, asr #32
    2fd0:	0007225d 	andeq	r2, r7, sp, asr r2
    2fd4:	17b11d00 	ldrne	r1, [r1, r0, lsl #26]!
    2fd8:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    2fdc:	00003a02 	andeq	r3, r0, r2, lsl #20
    2fe0:	00153400 	andseq	r3, r5, r0, lsl #8
    2fe4:	6d742600 	ldclvs	6, cr2, [r4]
    2fe8:	50010070 	andpl	r0, r1, r0, ror r0
    2fec:	00003a02 	andeq	r3, r0, r2, lsl #20
    2ff0:	01200000 	teqeq	r0, r0
    2ff4:	00001987 	andeq	r1, r0, r7, lsl #19
    2ff8:	01026701 	tsteq	r2, r1, lsl #14
    2ffc:	080049dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, lr}
    3000:	080049f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, lr}
    3004:	07575d01 	ldrbeq	r5, [r7, -r1, lsl #26]
    3008:	b11d0000 	tstlt	sp, r0
    300c:	01000017 	tsteq	r0, r7, lsl r0
    3010:	003a0266 	eorseq	r0, sl, r6, ror #4
    3014:	15470000 	strbne	r0, [r7]
    3018:	74260000 	strtvc	r0, [r6]
    301c:	0100706d 	tsteq	r0, sp, rrx
    3020:	003a0268 	eorseq	r0, sl, r8, ror #4
    3024:	1c000000 	stcne	0, cr0, [r0], {0}
    3028:	0017e401 	andseq	lr, r7, r1, lsl #8
    302c:	02850100 	addeq	r0, r5, #0	; 0x0
    3030:	00008e01 	andeq	r8, r0, r1, lsl #28
    3034:	0049f400 	subeq	pc, r9, r0, lsl #8
    3038:	004a1408 	subeq	r1, sl, r8, lsl #8
    303c:	aa5d0108 	bge	1743464 <__Stack_Size+0x1743064>
    3040:	1d000007 	stcne	0, cr0, [r0, #-28]
    3044:	000017b1 	strheq	r1, [r0], -r1
    3048:	3a028401 	bcc	a4054 <__Stack_Size+0xa3c54>
    304c:	5a000000 	bpl	3054 <__Stack_Size+0x2c54>
    3050:	1e000015 	mcrne	0, 0, r0, cr0, cr5, {0}
    3054:	00001203 	andeq	r1, r0, r3, lsl #4
    3058:	8e028601 	cfmadd32hi	mvax0, mvfx8, mvfx2, mvfx1
    305c:	26000000 	strcs	r0, [r0], -r0
    3060:	00706d74 	rsbseq	r6, r0, r4, ror sp
    3064:	3a028801 	bcc	a5070 <__Stack_Size+0xa4c70>
    3068:	23000000 	movwcs	r0, #0	; 0x0
    306c:	0000183e 	andeq	r1, r0, lr, lsr r8
    3070:	3a028801 	bcc	a507c <__Stack_Size+0xa4c7c>
    3074:	01000000 	tsteq	r0, r0
    3078:	011c0053 	tsteq	ip, r3, asr r0
    307c:	00001940 	andeq	r1, r0, r0, asr #18
    3080:	0102ad01 	tsteq	r2, r1, lsl #26
    3084:	0000003a 	andeq	r0, r0, sl, lsr r0
    3088:	08004a14 	stmdaeq	r0, {r2, r4, r9, fp, lr}
    308c:	08004a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, lr}
    3090:	08075d01 	stmdaeq	r7, {r0, r8, sl, fp, ip, lr}
    3094:	b11d0000 	tstlt	sp, r0
    3098:	01000017 	tsteq	r0, r7, lsl r0
    309c:	003a02ac 	eorseq	r0, sl, ip, lsr #5
    30a0:	156d0000 	strbne	r0, [sp]!
    30a4:	a9250000 	stmdbge	r5!, {}
    30a8:	01000019 	tsteq	r0, r9, lsl r0
    30ac:	003a02ae 	eorseq	r0, sl, lr, lsr #5
    30b0:	15960000 	ldrne	r0, [r6]
    30b4:	4e250000 	cdpmi	0, 2, cr0, cr5, cr0, {0}
    30b8:	01000015 	tsteq	r0, r5, lsl r0
    30bc:	003a02af 	eorseq	r0, sl, pc, lsr #5
    30c0:	15bf0000 	ldrne	r0, [pc, #0]!	; 30c8 <__Stack_Size+0x2cc8>
    30c4:	3e250000 	cdpcc	0, 2, cr0, cr5, cr0, {0}
    30c8:	01000018 	tsteq	r0, r8, lsl r0
    30cc:	003a02af 	eorseq	r0, sl, pc, lsr #5
    30d0:	15e80000 	strbne	r0, [r8]!
    30d4:	1c000000 	stcne	0, cr0, [r0], {0}
    30d8:	00169e01 	andseq	r9, r6, r1, lsl #28
    30dc:	02db0100 	sbcseq	r0, fp, #0	; 0x0
    30e0:	00003a01 	andeq	r3, r0, r1, lsl #20
    30e4:	004a5800 	subeq	r5, sl, r0, lsl #16
    30e8:	004a6c08 	subeq	r6, sl, r8, lsl #24
    30ec:	505d0108 	subspl	r0, sp, r8, lsl #2
    30f0:	1d000008 	stcne	0, cr0, [r0, #-32]
    30f4:	000017b1 	strheq	r1, [r0], -r1
    30f8:	3a02da01 	bcc	b9904 <__Stack_Size+0xb9504>
    30fc:	06000000 	streq	r0, [r0], -r0
    3100:	25000016 	strcs	r0, [r0, #-22]
    3104:	0000170e 	andeq	r1, r0, lr, lsl #14
    3108:	3a02dc01 	bcc	ba114 <__Stack_Size+0xb9d14>
    310c:	19000000 	stmdbne	r0, {}
    3110:	26000016 	undefined
    3114:	00706d74 	rsbseq	r6, r0, r4, ror sp
    3118:	3a02dd01 	bcc	ba524 <__Stack_Size+0xba124>
    311c:	00000000 	andeq	r0, r0, r0
    3120:	189e0127 	ldmne	lr, {r0, r1, r2, r5, r8}
    3124:	fa010000 	blx	4312c <__Stack_Size+0x42d2c>
    3128:	00003a01 	andeq	r3, r0, r1, lsl #20
    312c:	004a6c00 	subeq	r6, sl, r0, lsl #24
    3130:	004a7808 	subeq	r7, sl, r8, lsl #16
    3134:	00162c08 	andseq	r2, r6, r8, lsl #24
    3138:	09011700 	stmdbeq	r1, {r8, r9, sl, ip}
    313c:	01000018 	tsteq	r0, r8, lsl r0
    3140:	4a7801eb 	bmi	1e038f4 <__Stack_Size+0x1e034f4>
    3144:	4a860800 	bmi	fe18514c <SCS_BASE+0x1e17714c>
    3148:	16570800 	ldrbne	r0, [r7], -r0, lsl #16
    314c:	08920000 	ldmeq	r2, {}
    3150:	08160000 	ldmdaeq	r6, {}
    3154:	0100001a 	tsteq	r0, sl, lsl r0
    3158:	00003aea 	andeq	r3, r0, sl, ror #21
    315c:	00168200 	andseq	r8, r6, r0, lsl #4
    3160:	01280000 	teqeq	r8, r0
    3164:	00001780 	andeq	r1, r0, r0, lsl #15
    3168:	8801dd01 	stmdahi	r1, {r0, r8, sl, fp, ip, lr, pc}
    316c:	9408004a 	strls	r0, [r8], #-74
    3170:	9508004a 	strls	r0, [r8, #-74]
    3174:	28000016 	stmdacs	r0, {r1, r2, r4}
    3178:	00192401 	andseq	r2, r9, r1, lsl #8
    317c:	01d10100 	bicseq	r0, r1, r0, lsl #2
    3180:	08004a94 	stmdaeq	r0, {r2, r4, r7, r9, fp, lr}
    3184:	08004aa0 	stmdaeq	r0, {r5, r7, r9, fp, lr}
    3188:	000016c0 	andeq	r1, r0, r0, asr #13
    318c:	16fc0128 	ldrbtne	r0, [ip], r8, lsr #2
    3190:	c5010000 	strgt	r0, [r1]
    3194:	004aa001 	subeq	sl, sl, r1
    3198:	004aac08 	subeq	sl, sl, r8, lsl #24
    319c:	0016eb08 	andseq	lr, r6, r8, lsl #22
    31a0:	cc012800 	stcgt	8, cr2, [r1], {0}
    31a4:	01000016 	tsteq	r0, r6, lsl r0
    31a8:	4aac01b9 	bmi	feb03894 <SCS_BASE+0x1eaf5894>
    31ac:	4ab80800 	bmi	fee051b4 <SCS_BASE+0x1edf71b4>
    31b0:	17160800 	ldrne	r0, [r6, -r0, lsl #16]
    31b4:	43000000 	movwmi	r0, #0	; 0x0
    31b8:	02000002 	andeq	r0, r0, #2	; 0x2
    31bc:	000cae00 	andeq	sl, ip, r0, lsl #28
    31c0:	3b010400 	blcc	441c8 <__Stack_Size+0x43dc8>
    31c4:	01000005 	tsteq	r0, r5
    31c8:	00001aff 	strdeq	r1, [r0], -pc
    31cc:	00000431 	andeq	r0, r0, r1, lsr r4
    31d0:	08004ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp, lr}
    31d4:	08004b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp, lr}
    31d8:	00000bb8 	strheq	r0, [r0], -r8
    31dc:	21050402 	tstcs	r5, r2, lsl #8
    31e0:	0200002e 	andeq	r0, r0, #46	; 0x2e
    31e4:	05b80502 	ldreq	r0, [r8, #1282]!
    31e8:	01020000 	tsteq	r2, r0
    31ec:	0006cc06 	andeq	ip, r6, r6, lsl #24
    31f0:	33750300 	cmncc	r5, #0	; 0x0
    31f4:	27020032 	smladxcs	r2, r2, r0, r0
    31f8:	00000045 	andeq	r0, r0, r5, asr #32
    31fc:	9b070402 	blls	1c420c <__Stack_Size+0x1c3e0c>
    3200:	0200002e 	andeq	r0, r0, #46	; 0x2e
    3204:	081e0702 	ldmdaeq	lr, {r1, r8, r9, sl}
    3208:	75030000 	strvc	r0, [r3]
    320c:	29020038 	stmdbcs	r2, {r3, r4, r5}
    3210:	0000005d 	andeq	r0, r0, sp, asr r0
    3214:	ca080102 	bgt	203624 <__Stack_Size+0x203224>
    3218:	04000006 	streq	r0, [r0], #-6
    321c:	00000045 	andeq	r0, r0, r5, asr #32
    3220:	39020105 	stmdbcc	r2, {r0, r2, r8}
    3224:	0000007e 	andeq	r0, r0, lr, ror r0
    3228:	00149d06 	andseq	r9, r4, r6, lsl #26
    322c:	53070000 	movwpl	r0, #28672	; 0x7000
    3230:	01005445 	tsteq	r0, r5, asr #8
    3234:	1df00800 	ldclne	8, cr0, [r0]
    3238:	39020000 	stmdbcc	r2, {}
    323c:	00000069 	andeq	r0, r0, r9, rrx
    3240:	3b020105 	blcc	8365c <__Stack_Size+0x8325c>
    3244:	0000009e 	muleq	r0, lr, r0
    3248:	00036306 	andeq	r6, r3, r6, lsl #6
    324c:	8d060000 	stchi	0, cr0, [r6]
    3250:	01000006 	tsteq	r0, r6
    3254:	00d10800 	sbcseq	r0, r1, r0, lsl #16
    3258:	3b020000 	blcc	83260 <__Stack_Size+0x82e60>
    325c:	00000089 	andeq	r0, r0, r9, lsl #1
    3260:	0a070409 	beq	1c428c <__Stack_Size+0x1c3e8c>
    3264:	01a40308 	undefined instruction 0x01a40308
    3268:	000000d3 	ldrdeq	r0, [r0], -r3
    326c:	0052430b 	subseq	r4, r2, fp, lsl #6
    3270:	6401a503 	strvs	sl, [r1], #-1283
    3274:	02000000 	andeq	r0, r0, #0	; 0x0
    3278:	430b0023 	movwmi	r0, #45091	; 0xb023
    327c:	03005253 	movweq	r5, #595	; 0x253
    3280:	006401a6 	rsbeq	r0, r4, r6, lsr #3
    3284:	23020000 	movwcs	r0, #8192	; 0x2000
    3288:	010c0004 	tsteq	ip, r4
    328c:	00001b66 	andeq	r1, r0, r6, ror #22
    3290:	b8015201 	stmdalt	r1, {r0, r9, ip, lr}
    3294:	c408004a 	strgt	r0, [r8], #-74
    3298:	0108004a 	tsteq	r8, sl, asr #32
    329c:	0000f85d 	andeq	pc, r0, sp, asr r8
    32a0:	117c0d00 	cmnne	ip, r0, lsl #26
    32a4:	51010000 	tstpl	r1, r0
    32a8:	0000009e 	muleq	r0, lr, r0
    32ac:	0c005001 	stceq	0, cr5, [r0], {1}
    32b0:	001af401 	andseq	pc, sl, r1, lsl #8
    32b4:	01620100 	cmneq	r2, r0, lsl #2
    32b8:	08004ac4 	stmdaeq	r0, {r2, r6, r7, r9, fp, lr}
    32bc:	08004ad0 	stmdaeq	r0, {r4, r6, r7, r9, fp, lr}
    32c0:	011d5d01 	tsteq	sp, r1, lsl #26
    32c4:	7c0d0000 	stcvc	0, cr0, [sp], {0}
    32c8:	01000011 	tsteq	r0, r1, lsl r0
    32cc:	00009e61 	andeq	r9, r0, r1, ror #28
    32d0:	00500100 	subseq	r0, r0, r0, lsl #2
    32d4:	1b21010c 	blne	84370c <__Stack_Size+0x84330c>
    32d8:	7b010000 	blvc	432e0 <__Stack_Size+0x42ee0>
    32dc:	004ad001 	subeq	sp, sl, r1
    32e0:	004ae408 	subeq	lr, sl, r8, lsl #8
    32e4:	535d0108 	cmppl	sp, #2	; 0x2
    32e8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    32ec:	00001ade 	ldrdeq	r1, [r0], -lr
    32f0:	003a7a01 	eorseq	r7, sl, r1, lsl #20
    32f4:	17410000 	strbne	r0, [r1, -r0]
    32f8:	4e0f0000 	cdpmi	0, 0, cr0, cr15, cr0, {0}
    32fc:	01000015 	tsteq	r0, r5, lsl r0
    3300:	00003a7c 	andeq	r3, r0, ip, ror sl
    3304:	00175400 	andseq	r5, r7, r0, lsl #8
    3308:	010c0000 	tsteq	ip, r0
    330c:	00001b7a 	andeq	r1, r0, sl, ror fp
    3310:	e4019601 	str	r9, [r1], #-1537
    3314:	f008004a 	undefined instruction 0xf008004a
    3318:	0108004a 	tsteq	r8, sl, asr #32
    331c:	0001785d 	andeq	r7, r1, sp, asr r8
    3320:	117c0d00 	cmnne	ip, r0, lsl #26
    3324:	95010000 	strls	r0, [r1]
    3328:	0000009e 	muleq	r0, lr, r0
    332c:	10005001 	andne	r5, r0, r1
    3330:	001b3401 	andseq	r3, fp, r1, lsl #8
    3334:	01f30100 	mvnseq	r0, r0, lsl #2
    3338:	0000007e 	andeq	r0, r0, lr, ror r0
    333c:	08004af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, lr}
    3340:	08004b04 	stmdaeq	r0, {r2, r8, r9, fp, lr}
    3344:	01ae5d01 	undefined instruction 0x01ae5d01
    3348:	eb0e0000 	bl	383350 <__Stack_Size+0x382f50>
    334c:	0100001a 	tsteq	r0, sl, lsl r0
    3350:	00003af2 	strdeq	r3, [r0], -r2
    3354:	00177200 	andseq	r7, r7, r0, lsl #4
    3358:	12031100 	andne	r1, r3, #0	; 0x0
    335c:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    3360:	0000007e 	andeq	r0, r0, lr, ror r0
    3364:	b7011200 	strlt	r1, [r1, -r0, lsl #4]
    3368:	0100001a 	tsteq	r0, sl, lsl r0
    336c:	04010111 	streq	r0, [r1], #-273
    3370:	1408004b 	strne	r0, [r8], #-75
    3374:	0108004b 	tsteq	r8, fp, asr #32
    3378:	0001d55d 	andeq	sp, r1, sp, asr r5
    337c:	1aeb1300 	bne	ffac7f84 <SCS_BASE+0x1fab9f84>
    3380:	10010000 	andne	r0, r1, r0
    3384:	00003a01 	andeq	r3, r0, r1, lsl #20
    3388:	00500100 	subseq	r0, r0, r0, lsl #2
    338c:	1aa20114 	bne	fe8837e4 <SCS_BASE+0x1e8757e4>
    3390:	d9010000 	stmdble	r1, {}
    3394:	004b1401 	subeq	r1, fp, r1, lsl #8
    3398:	004b4808 	subeq	r4, fp, r8, lsl #16
    339c:	00178508 	andseq	r8, r7, r8, lsl #10
    33a0:	46011500 	strmi	r1, [r1], -r0, lsl #10
    33a4:	0100001b 	tsteq	r0, fp, lsl r0
    33a8:	4b4801ae 	blmi	1203a68 <__Stack_Size+0x1203668>
    33ac:	4b800800 	blmi	fe0053b4 <SCS_BASE+0x1dff73b4>
    33b0:	17b00800 	ldrne	r0, [r0, r0, lsl #16]!
    33b4:	02310000 	eorseq	r0, r1, #0	; 0x0
    33b8:	d00e0000 	andle	r0, lr, r0
    33bc:	0100001a 	tsteq	r0, sl, lsl r0
    33c0:	00003aad 	andeq	r3, r0, sp, lsr #21
    33c4:	0017db00 	andseq	sp, r7, r0, lsl #22
    33c8:	1b580e00 	blne	1606bd0 <__Stack_Size+0x16067d0>
    33cc:	ad010000 	stcge	0, cr0, [r1]
    33d0:	00000053 	andeq	r0, r0, r3, asr r0
    33d4:	000017ee 	andeq	r1, r0, lr, ror #15
    33d8:	00154e0f 	andseq	r4, r5, pc, lsl #28
    33dc:	3aaf0100 	bcc	febc37e4 <SCS_BASE+0x1ebb57e4>
    33e0:	0c000000 	stceq	0, cr0, [r0], {0}
    33e4:	00000018 	andeq	r0, r0, r8, lsl r0
    33e8:	1ac50114 	bne	ff143840 <SCS_BASE+0x1f135840>
    33ec:	44010000 	strmi	r0, [r1]
    33f0:	004b8001 	subeq	r8, fp, r1
    33f4:	004b9808 	subeq	r9, fp, r8, lsl #16
    33f8:	00183508 	andseq	r3, r8, r8, lsl #10
    33fc:	08b90000 	ldmeq	r9!, {}
    3400:	00020000 	andeq	r0, r2, r0
    3404:	00000dee 	andeq	r0, r0, lr, ror #27
    3408:	053b0104 	ldreq	r0, [fp, #-260]!
    340c:	f8010000 	undefined instruction 0xf8010000
    3410:	3100001e 	tstcc	r0, lr, lsl r0
    3414:	98000004 	stmdals	r0, {r2}
    3418:	3c08004b 	stccc	0, cr0, [r8], {75}
    341c:	8e08004f 	cdphi	0, 0, cr0, cr8, cr15, {2}
    3420:	0200000c 	andeq	r0, r0, #12	; 0xc
    3424:	2e210504 	cfsh64cs	mvdx0, mvdx1, #4
    3428:	02020000 	andeq	r0, r2, #0	; 0x0
    342c:	0005b805 	andeq	fp, r5, r5, lsl #16
    3430:	06010200 	streq	r0, [r1], -r0, lsl #4
    3434:	000006cc 	andeq	r0, r0, ip, asr #13
    3438:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    343c:	45270200 	strmi	r0, [r7, #-512]!
    3440:	02000000 	andeq	r0, r0, #0	; 0x0
    3444:	2e9b0704 	cdpcs	7, 9, cr0, cr11, cr4, {0}
    3448:	02020000 	andeq	r0, r2, #0	; 0x0
    344c:	00081e07 	andeq	r1, r8, r7, lsl #28
    3450:	38750300 	ldmdacc	r5!, {r8, r9}^
    3454:	5d290200 	sfmpl	f0, 4, [r9]
    3458:	02000000 	andeq	r0, r0, #0	; 0x0
    345c:	06ca0801 	strbeq	r0, [sl], r1, lsl #16
    3460:	45040000 	strmi	r0, [r4]
    3464:	05000000 	streq	r0, [r0]
    3468:	7e390201 	cdpvc	2, 3, cr0, cr9, cr1, {0}
    346c:	06000000 	streq	r0, [r0], -r0
    3470:	0000149d 	muleq	r0, sp, r4
    3474:	45530700 	ldrbmi	r0, [r3, #-1792]
    3478:	00010054 	andeq	r0, r1, r4, asr r0
    347c:	001df008 	andseq	pc, sp, r8
    3480:	69390200 	ldmdbvs	r9!, {r9}
    3484:	08000000 	stmdaeq	r0, {}
    3488:	00001bea 	andeq	r1, r0, sl, ror #23
    348c:	00693902 	rsbeq	r3, r9, r2, lsl #18
    3490:	01050000 	tsteq	r5, r0
    3494:	00a93b02 	adceq	r3, r9, r2, lsl #22
    3498:	63060000 	movwvs	r0, #24576	; 0x6000
    349c:	00000003 	andeq	r0, r0, r3
    34a0:	00068d06 	andeq	r8, r6, r6, lsl #26
    34a4:	08000100 	stmdaeq	r0, {r8}
    34a8:	000000d1 	ldrdeq	r0, [r0], -r1
    34ac:	00943b02 	addseq	r3, r4, r2, lsl #22
    34b0:	01050000 	tsteq	r5, r0
    34b4:	00c93e02 	sbceq	r3, r9, r2, lsl #28
    34b8:	11060000 	tstne	r6, r0
    34bc:	00000000 	andeq	r0, r0, r0
    34c0:	00034806 	andeq	r4, r3, r6, lsl #16
    34c4:	08000100 	stmdaeq	r0, {r8}
    34c8:	000000ee 	andeq	r0, r0, lr, ror #1
    34cc:	00b43e02 	adcseq	r3, r4, r2, lsl #28
    34d0:	04090000 	streq	r0, [r9]
    34d4:	03280a07 	teqeq	r8, #28672	; 0x7000
    34d8:	017601ab 	cmneq	r6, fp, lsr #3
    34dc:	430b0000 	movwmi	r0, #45056	; 0xb000
    34e0:	ac030052 	stcge	0, cr0, [r3], {82}
    34e4:	00006401 	andeq	r6, r0, r1, lsl #8
    34e8:	00230200 	eoreq	r0, r3, r0, lsl #4
    34ec:	001c4f0c 	andseq	r4, ip, ip, lsl #30
    34f0:	01ad0300 	undefined instruction 0x01ad0300
    34f4:	00000064 	andeq	r0, r0, r4, rrx
    34f8:	0b042302 	bleq	10c108 <__Stack_Size+0x10bd08>
    34fc:	00524943 	subseq	r4, r2, r3, asr #18
    3500:	6401ae03 	strvs	sl, [r1], #-3587
    3504:	02000000 	andeq	r0, r0, #0	; 0x0
    3508:	0e0c0823 	cdpeq	8, 0, cr0, cr12, cr3, {1}
    350c:	0300001d 	movweq	r0, #29	; 0x1d
    3510:	006401af 	rsbeq	r0, r4, pc, lsr #3
    3514:	23020000 	movwcs	r0, #8192	; 0x2000
    3518:	1b8b0c0c 	blne	fe2c6550 <SCS_BASE+0x1e2b8550>
    351c:	b0030000 	andlt	r0, r3, r0
    3520:	00006401 	andeq	r6, r0, r1, lsl #8
    3524:	10230200 	eorne	r0, r3, r0, lsl #4
    3528:	001d300c 	andseq	r3, sp, ip
    352c:	01b10300 	undefined instruction 0x01b10300
    3530:	00000064 	andeq	r0, r0, r4, rrx
    3534:	0c142302 	ldceq	3, cr2, [r4], {2}
    3538:	00001d68 	andeq	r1, r0, r8, ror #26
    353c:	6401b203 	strvs	fp, [r1], #-515
    3540:	02000000 	andeq	r0, r0, #0	; 0x0
    3544:	630c1823 	movwvs	r1, #51235	; 0xc823
    3548:	0300001c 	movweq	r0, #28	; 0x1c
    354c:	006401b3 	strhteq	r0, [r4], #-19
    3550:	23020000 	movwcs	r0, #8192	; 0x2000
    3554:	1bf30c1c 	blne	ffcc65cc <SCS_BASE+0x1fcb85cc>
    3558:	b4030000 	strlt	r0, [r3]
    355c:	00006401 	andeq	r6, r0, r1, lsl #8
    3560:	20230200 	eorcs	r0, r3, r0, lsl #4
    3564:	5253430b 	subspl	r4, r3, #738197504	; 0x2c000000
    3568:	01b50300 	undefined instruction 0x01b50300
    356c:	00000064 	andeq	r0, r0, r4, rrx
    3570:	00242302 	eoreq	r2, r4, r2, lsl #6
    3574:	1a04140d 	bne	1085b0 <__Stack_Size+0x1081b0>
    3578:	000001c5 	andeq	r0, r0, r5, asr #3
    357c:	001e4e0e 	andseq	r4, lr, lr, lsl #28
    3580:	3a1b0400 	bcc	6c4588 <__Stack_Size+0x6c4188>
    3584:	02000000 	andeq	r0, r0, #0	; 0x0
    3588:	540e0023 	strpl	r0, [lr], #-35
    358c:	0400001c 	streq	r0, [r0], #-28
    3590:	00003a1c 	andeq	r3, r0, ip, lsl sl
    3594:	04230200 	strteq	r0, [r3], #-512
    3598:	001eb70e 	andseq	fp, lr, lr, lsl #14
    359c:	3a1d0400 	bcc	7445a4 <__Stack_Size+0x7441a4>
    35a0:	02000000 	andeq	r0, r0, #0	; 0x0
    35a4:	6a0e0823 	bvs	385638 <__Stack_Size+0x385238>
    35a8:	0400001e 	streq	r0, [r0], #-30
    35ac:	00003a1e 	andeq	r3, r0, lr, lsl sl
    35b0:	0c230200 	sfmeq	f0, 4, [r3]
    35b4:	001db00e 	andseq	fp, sp, lr
    35b8:	3a1f0400 	bcc	7c45c0 <__Stack_Size+0x7c41c0>
    35bc:	02000000 	andeq	r0, r0, #0	; 0x0
    35c0:	08001023 	stmdaeq	r0, {r0, r1, r5, ip}
    35c4:	00001c1c 	andeq	r1, r0, ip, lsl ip
    35c8:	01762004 	cmneq	r6, r4
    35cc:	010f0000 	mrseq	r0, CPSR
    35d0:	00001de9 	andeq	r1, r0, r9, ror #27
    35d4:	0103de01 	tsteq	r3, r1, lsl #28
    35d8:	0000007e 	andeq	r0, r0, lr, ror r0
    35dc:	00021401 	andeq	r1, r2, r1, lsl #8
    35e0:	1dc11000 	stclne	0, cr1, [r1]
    35e4:	dd010000 	stcle	0, cr0, [r1]
    35e8:	00005303 	andeq	r5, r0, r3, lsl #6
    35ec:	6d741100 	ldfvse	f1, [r4]
    35f0:	df010070 	svcle	0x00010070
    35f4:	00003a03 	andeq	r3, r0, r3, lsl #20
    35f8:	1d471200 	sfmne	f1, 2, [r7]
    35fc:	e0010000 	and	r0, r1, r0
    3600:	00003a03 	andeq	r3, r0, r3, lsl #20
    3604:	12031200 	andne	r1, r3, #0	; 0x0
    3608:	e1010000 	tst	r1, r0
    360c:	00007e03 	andeq	r7, r0, r3, lsl #28
    3610:	01130000 	tsteq	r3, r0
    3614:	00001c7f 	andeq	r1, r0, pc, ror ip
    3618:	98017d01 	stmdals	r1, {r0, r8, sl, fp, ip, sp, lr}
    361c:	d808004b 	stmdale	r8, {r0, r1, r3, r6}
    3620:	0108004b 	tsteq	r8, fp, asr #32
    3624:	4001145d 	andmi	r1, r1, sp, asr r4
    3628:	0100001e 	tsteq	r0, lr, lsl r0
    362c:	4bd801a0 	blmi	ff603cb4 <SCS_BASE+0x1f5f5cb4>
    3630:	4c0c0800 	stcmi	8, cr0, [ip], {0}
    3634:	5d010800 	stcpl	8, cr0, [r1]
    3638:	0000024c 	andeq	r0, r0, ip, asr #4
    363c:	001e9e15 	andseq	r9, lr, r5, lsl lr
    3640:	3a9f0100 	bcc	fe7c3a48 <SCS_BASE+0x1e7b5a48>
    3644:	01000000 	tsteq	r0, r0
    3648:	01160050 	tsteq	r6, r0, asr r0
    364c:	00001c8a 	andeq	r1, r0, sl, lsl #25
    3650:	c901c701 	stmdbgt	r1, {r0, r8, r9, sl, lr, pc}
    3654:	0c000000 	stceq	0, cr0, [r0], {0}
    3658:	3c08004c 	stccc	0, cr0, [r8], {76}
    365c:	5408004c 	strpl	r0, [r8], #-76
    3660:	f1000018 	cps	#24
    3664:	17000002 	strne	r0, [r0, -r2]
    3668:	00001d70 	andeq	r1, r0, r0, ror sp
    366c:	0064c801 	rsbeq	ip, r4, r1, lsl #16
    3670:	18730000 	ldmdane	r3!, {}^
    3674:	fc180000 	ldc2	0, cr0, [r8], {0}
    3678:	01000011 	tsteq	r0, r1, lsl r0
    367c:	0000c9c9 	andeq	ip, r0, r9, asr #19
    3680:	1e361800 	cdpne	8, 3, cr1, cr6, cr0, {0}
    3684:	ca010000 	bgt	4368c <__Stack_Size+0x4328c>
    3688:	0000007e 	andeq	r0, r0, lr, ror r0
    368c:	0001d019 	andeq	sp, r1, r9, lsl r0
    3690:	004c1000 	subeq	r1, ip, r0
    3694:	0000f808 	andeq	pc, r0, r8, lsl #16
    3698:	becf0100 	pollte	f0, f7, f0
    369c:	1a000002 	bne	36ac <__Stack_Size+0x32ac>
    36a0:	000001e3 	andeq	r0, r0, r3, ror #3
    36a4:	0001101b 	andeq	r1, r1, fp, lsl r0
    36a8:	01ef1c00 	mvneq	r1, r0, lsl #24
    36ac:	fb1d0000 	blx	7436b6 <__Stack_Size+0x7432b6>
    36b0:	01000001 	tsteq	r0, r1
    36b4:	02071c52 	andeq	r1, r7, #20992	; 0x5200
    36b8:	00000000 	andeq	r0, r0, r0
    36bc:	0001d01e 	andeq	sp, r1, lr, lsl r0
    36c0:	004c2a00 	subeq	r2, ip, r0, lsl #20
    36c4:	004c3408 	subeq	r3, ip, r8, lsl #8
    36c8:	1ad40108 	bne	ff503af0 <SCS_BASE+0x1f4f5af0>
    36cc:	000001e3 	andeq	r0, r0, r3, ror #3
    36d0:	004c2a1f 	subeq	r2, ip, pc, lsl sl
    36d4:	004c3408 	subeq	r3, ip, r8, lsl #8
    36d8:	01ef1c08 	mvneq	r1, r8, lsl #24
    36dc:	fb200000 	blx	8036e6 <__Stack_Size+0x8032e6>
    36e0:	9e000001 	cdpls	0, 0, cr0, cr0, cr1, {0}
    36e4:	1c000018 	stcne	0, cr0, [r0], {24}
    36e8:	00000207 	andeq	r0, r0, r7, lsl #4
    36ec:	14000000 	strne	r0, [r0]
    36f0:	001d9201 	andseq	r9, sp, r1, lsl #4
    36f4:	01ea0100 	mvneq	r0, r0, lsl #2
    36f8:	08004c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, lr}
    36fc:	08004c50 	stmdaeq	r0, {r4, r6, sl, fp, lr}
    3700:	03235d01 	teqeq	r3, #64	; 0x40
    3704:	9c150000 	ldcls	0, cr0, [r5], {0}
    3708:	0100001d 	tsteq	r0, sp, lsl r0
    370c:	000053e9 	andeq	r5, r0, r9, ror #7
    3710:	21500100 	cmpcs	r0, r0, lsl #2
    3714:	0000154e 	andeq	r1, r0, lr, asr #10
    3718:	003aeb01 	eorseq	lr, sl, r1, lsl #22
    371c:	53010000 	movwpl	r0, #4096	; 0x1000
    3720:	52012200 	andpl	r2, r1, #0	; 0x0
    3724:	0100001f 	tsteq	r0, pc, lsl r0
    3728:	50010107 	andpl	r0, r1, r7, lsl #2
    372c:	5c08004c 	stcpl	0, cr0, [r8], {76}
    3730:	0108004c 	tsteq	r8, ip, asr #32
    3734:	00034a5d 	andeq	r4, r3, sp, asr sl
    3738:	117c2300 	cmnne	ip, r0, lsl #6
    373c:	06010000 	streq	r0, [r1], -r0
    3740:	0000a901 	andeq	sl, r0, r1, lsl #18
    3744:	00500100 	subseq	r0, r0, r0, lsl #2
    3748:	1cc80122 	stfnee	f0, [r8], {34}
    374c:	20010000 	andcs	r0, r1, r0
    3750:	4c5c0101 	ldfmie	f0, [ip], {1}
    3754:	4c700800 	ldclmi	8, cr0, [r0]
    3758:	5d010800 	stcpl	8, cr0, [r1]
    375c:	00000391 	muleq	r0, r1, r3
    3760:	001dca24 	andseq	ip, sp, r4, lsr #20
    3764:	011f0100 	tsteq	pc, r0, lsl #2
    3768:	0000003a 	andeq	r0, r0, sl, lsr r0
    376c:	000018b1 	strheq	r1, [r0], -r1
    3770:	001c2e23 	andseq	r2, ip, r3, lsr #28
    3774:	011f0100 	tsteq	pc, r0, lsl #2
    3778:	0000003a 	andeq	r0, r0, sl, lsr r0
    377c:	4e255101 	sufmis	f5, f5, f1
    3780:	01000015 	tsteq	r0, r5, lsl r0
    3784:	003a0121 	eorseq	r0, sl, r1, lsr #2
    3788:	18c40000 	stmiane	r4, {}^
    378c:	22000000 	andcs	r0, r0, #0	; 0x0
    3790:	001c1101 	andseq	r1, ip, r1, lsl #2
    3794:	013d0100 	teqeq	sp, r0, lsl #2
    3798:	004c7001 	subeq	r7, ip, r1
    379c:	004c7c08 	subeq	r7, ip, r8, lsl #24
    37a0:	b85d0108 	ldmdalt	sp, {r3, r8}^
    37a4:	23000003 	movwcs	r0, #3	; 0x3
    37a8:	0000117c 	andeq	r1, r0, ip, ror r1
    37ac:	a9013c01 	stmdbge	r1, {r0, sl, fp, ip, sp}
    37b0:	01000000 	tsteq	r0, r0
    37b4:	01220050 	qsubeq	r0, r0, r2
    37b8:	00001dd8 	ldrdeq	r1, [r0], -r8
    37bc:	01015001 	tsteq	r1, r1
    37c0:	08004c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, lr}
    37c4:	08004c90 	stmdaeq	r0, {r4, r7, sl, fp, lr}
    37c8:	03f15d01 	mvnseq	r5, #64	; 0x40
    37cc:	a6240000 	strtge	r0, [r4], -r0
    37d0:	0100001e 	tsteq	r0, lr, lsl r0
    37d4:	003a014f 	eorseq	r0, sl, pc, asr #2
    37d8:	18e20000 	stmiane	r2!, {}^
    37dc:	4e250000 	cdpmi	0, 2, cr0, cr5, cr0, {0}
    37e0:	01000015 	tsteq	r0, r5, lsl r0
    37e4:	003a0151 	eorseq	r0, sl, r1, asr r1
    37e8:	18f50000 	ldmne	r5!, {}^
    37ec:	26000000 	strcs	r0, [r0], -r0
    37f0:	001cfa01 	andseq	pc, ip, r1, lsl #20
    37f4:	016e0100 	cmneq	lr, r0, lsl #2
    37f8:	00005301 	andeq	r5, r0, r1, lsl #6
    37fc:	004c9000 	subeq	r9, ip, r0
    3800:	004ca008 	subeq	sl, ip, r8
    3804:	225d0108 	subscs	r0, sp, #2	; 0x2
    3808:	001f4301 	andseq	r4, pc, r1, lsl #6
    380c:	01850100 	orreq	r0, r5, r0, lsl #2
    3810:	004ca001 	subeq	sl, ip, r1
    3814:	004cb408 	subeq	fp, ip, r8, lsl #8
    3818:	425d0108 	subsmi	r0, sp, #2	; 0x2
    381c:	24000004 	strcs	r0, [r0], #-4
    3820:	00001e2b 	andeq	r1, r0, fp, lsr #28
    3824:	3a018401 	bcc	64830 <__Stack_Size+0x64430>
    3828:	13000000 	movwne	r0, #0	; 0x0
    382c:	25000019 	strcs	r0, [r0, #-25]
    3830:	0000154e 	andeq	r1, r0, lr, asr #10
    3834:	3a018601 	bcc	65040 <__Stack_Size+0x64c40>
    3838:	26000000 	strcs	r0, [r0], -r0
    383c:	00000019 	andeq	r0, r0, r9, lsl r0
    3840:	1d370122 	ldfnes	f0, [r7, #-136]!
    3844:	a6010000 	strge	r0, [r1], -r0
    3848:	4cb40101 	ldfmis	f0, [r4], #4
    384c:	4cc80800 	stclmi	8, cr0, [r8], {0}
    3850:	5d010800 	stcpl	8, cr0, [r1]
    3854:	0000047b 	andeq	r0, r0, fp, ror r4
    3858:	001b9424 	andseq	r9, fp, r4, lsr #8
    385c:	01a50100 	undefined instruction 0x01a50100
    3860:	0000003a 	andeq	r0, r0, sl, lsr r0
    3864:	00001944 	andeq	r1, r0, r4, asr #18
    3868:	00154e25 	andseq	r4, r5, r5, lsr #28
    386c:	01a70100 	undefined instruction 0x01a70100
    3870:	0000003a 	andeq	r0, r0, sl, lsr r0
    3874:	00001957 	andeq	r1, r0, r7, asr r9
    3878:	7a012200 	bvc	4c080 <__Stack_Size+0x4bc80>
    387c:	0100001f 	tsteq	r0, pc, lsl r0
    3880:	c80101c7 	stmdagt	r1, {r0, r1, r2, r6, r7, r8}
    3884:	dc08004c 	stcle	0, cr0, [r8], {76}
    3888:	0108004c 	tsteq	r8, ip, asr #32
    388c:	0004b05d 	andeq	fp, r4, sp, asr r0
    3890:	1b942300 	blne	fe50c498 <SCS_BASE+0x1e4fe498>
    3894:	c6010000 	strgt	r0, [r1], -r0
    3898:	00003a01 	andeq	r3, r0, r1, lsl #20
    389c:	27500100 	ldrbcs	r0, [r0, -r0, lsl #2]
    38a0:	0000154e 	andeq	r1, r0, lr, asr #10
    38a4:	3a01c801 	bcc	758b0 <__Stack_Size+0x754b0>
    38a8:	01000000 	tsteq	r0, r0
    38ac:	01220053 	qsubeq	r0, r3, r2
    38b0:	00001e7a 	andeq	r1, r0, sl, ror lr
    38b4:	0101ea01 	tsteq	r1, r1, lsl #20
    38b8:	08004cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp, lr}
    38bc:	08004cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, lr}
    38c0:	04e55d01 	strbteq	r5, [r5], #3329
    38c4:	65230000 	strvs	r0, [r3]!
    38c8:	0100001f 	tsteq	r0, pc, lsl r0
    38cc:	005301e9 	subseq	r0, r3, r9, ror #3
    38d0:	50010000 	andpl	r0, r1, r0
    38d4:	00117c23 	andseq	r7, r1, r3, lsr #24
    38d8:	01e90100 	mvneq	r0, r0, lsl #2
    38dc:	000000a9 	andeq	r0, r0, r9, lsr #1
    38e0:	22005101 	andcs	r5, r0, #1073741824	; 0x40000000
    38e4:	001cde01 	andseq	sp, ip, r1, lsl #28
    38e8:	02090100 	andeq	r0, r9, #0	; 0x0
    38ec:	004cf801 	subeq	pc, ip, r1, lsl #16
    38f0:	004d0408 	subeq	r0, sp, r8, lsl #8
    38f4:	0c5d0108 	ldfeqe	f0, [sp], {8}
    38f8:	23000005 	movwcs	r0, #5	; 0x5
    38fc:	00001e0c 	andeq	r1, r0, ip, lsl #28
    3900:	3a020801 	bcc	8590c <__Stack_Size+0x8550c>
    3904:	01000000 	tsteq	r0, r0
    3908:	01220050 	qsubeq	r0, r0, r2
    390c:	00001b9d 	muleq	r0, sp, fp
    3910:	01021e01 	tsteq	r2, r1, lsl #28
    3914:	08004d04 	stmdaeq	r0, {r2, r8, sl, fp, lr}
    3918:	08004d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, lr}
    391c:	05455d01 	strbeq	r5, [r5, #-3329]
    3920:	07240000 	streq	r0, [r4, -r0]!
    3924:	0100001c 	tsteq	r0, ip, lsl r0
    3928:	003a021d 	eorseq	r0, sl, sp, lsl r2
    392c:	19750000 	ldmdbne	r5!, {}^
    3930:	4e250000 	cdpmi	0, 2, cr0, cr5, cr0, {0}
    3934:	01000015 	tsteq	r0, r5, lsl r0
    3938:	003a021f 	eorseq	r0, sl, pc, lsl r2
    393c:	19880000 	stmibne	r8, {}
    3940:	22000000 	andcs	r0, r0, #0	; 0x0
    3944:	001ec701 	andseq	ip, lr, r1, lsl #14
    3948:	023d0100 	eorseq	r0, sp, #0	; 0x0
    394c:	004d1801 	subeq	r1, sp, r1, lsl #16
    3950:	004d3808 	subeq	r3, sp, r8, lsl #16
    3954:	6c5d0108 	ldfvse	f0, [sp], {8}
    3958:	23000005 	movwcs	r0, #5	; 0x5
    395c:	00001bdb 	ldrdeq	r1, [r0], -fp
    3960:	53023c01 	movwpl	r3, #11265	; 0x2c01
    3964:	01000000 	tsteq	r0, r0
    3968:	01220050 	qsubeq	r0, r0, r2
    396c:	00001cef 	andeq	r1, r0, pc, ror #25
    3970:	01026401 	tsteq	r2, r1, lsl #8
    3974:	08004d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, lr}
    3978:	08004d44 	stmdaeq	r0, {r2, r6, r8, sl, fp, lr}
    397c:	05935d01 	ldreq	r5, [r3, #3329]
    3980:	7c230000 	stcvc	0, cr0, [r3]
    3984:	01000011 	tsteq	r0, r1, lsl r0
    3988:	00a90263 	adceq	r0, r9, r3, ror #4
    398c:	50010000 	andpl	r0, r1, r0
    3990:	fb012200 	blx	4c19a <__Stack_Size+0x4bd9a>
    3994:	0100001d 	tsteq	r0, sp, lsl r0
    3998:	4401027a 	strmi	r0, [r1], #-634
    399c:	5408004d 	strpl	r0, [r8], #-77
    39a0:	0108004d 	tsteq	r8, sp, asr #32
    39a4:	0005bc5d 	andeq	fp, r5, sp, asr ip
    39a8:	1ca02400 	cfstrsne	mvf2, [r0]
    39ac:	79010000 	stmdbvc	r1, {}
    39b0:	00003a02 	andeq	r3, r0, r2, lsl #20
    39b4:	0019a600 	andseq	sl, r9, r0, lsl #12
    39b8:	01220000 	teqeq	r2, r0
    39bc:	00001f1a 	andeq	r1, r0, sl, lsl pc
    39c0:	01028d01 	tsteq	r2, r1, lsl #26
    39c4:	08004d54 	stmdaeq	r0, {r2, r4, r6, r8, sl, fp, lr}
    39c8:	08004d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, lr}
    39cc:	05e35d01 	strbeq	r5, [r3, #3329]!
    39d0:	7c230000 	stcvc	0, cr0, [r3]
    39d4:	01000011 	tsteq	r0, r1, lsl r0
    39d8:	00a9028c 	adceq	r0, r9, ip, lsl #5
    39dc:	50010000 	andpl	r0, r1, r0
    39e0:	e6012200 	str	r2, [r1], -r0, lsl #4
    39e4:	0100001e 	tsteq	r0, lr, lsl r0
    39e8:	6001029d 	mulvs	r1, sp, r2
    39ec:	1808004d 	stmdane	r8, {r0, r2, r3, r6}
    39f0:	0108004e 	tsteq	r8, lr, asr #32
    39f4:	0006445d 	andeq	r4, r6, sp, asr r4
    39f8:	1e5f2400 	cdpne	4, 5, cr2, cr15, cr0, {0}
    39fc:	9c010000 	stcls	0, cr0, [r1], {0}
    3a00:	00064402 	andeq	r4, r6, r2, lsl #8
    3a04:	0019b900 	andseq	fp, r9, r0, lsl #18
    3a08:	6d742800 	ldclvs	8, cr2, [r4]
    3a0c:	9e010070 	mcrls	0, 0, r0, cr1, cr0, {3}
    3a10:	00003a02 	andeq	r3, r0, r2, lsl #20
    3a14:	0019d700 	andseq	sp, r9, r0, lsl #14
    3a18:	1cd62500 	cfldr64ne	mvdx2, [r6], {0}
    3a1c:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    3a20:	00003a02 	andeq	r3, r0, r2, lsl #20
    3a24:	001a0b00 	andseq	r0, sl, r0, lsl #22
    3a28:	1d261200 	sfmne	f1, 4, [r6]
    3a2c:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    3a30:	00003a02 	andeq	r3, r0, r2, lsl #20
    3a34:	1c6b1200 	sfmne	f1, 2, [fp]
    3a38:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    3a3c:	00003a02 	andeq	r3, r0, r2, lsl #20
    3a40:	04290000 	strteq	r0, [r9]
    3a44:	000001c5 	andeq	r0, r0, r5, asr #3
    3a48:	1c390122 	ldfnes	f0, [r9], #-136
    3a4c:	01010000 	tsteq	r1, r0
    3a50:	4e180103 	mufmie	f0, f0, f3
    3a54:	4e340800 	cdpmi	8, 3, cr0, cr4, cr0, {0}
    3a58:	5d010800 	stcpl	8, cr0, [r1]
    3a5c:	0000067f 	andeq	r0, r0, pc, ror r6
    3a60:	001f6c23 	andseq	r6, pc, r3, lsr #24
    3a64:	03000100 	movweq	r0, #256	; 0x100
    3a68:	0000003a 	andeq	r0, r0, sl, lsr r0
    3a6c:	7c235001 	stcvc	0, cr5, [r3], #-4
    3a70:	01000011 	tsteq	r0, r1, lsl r0
    3a74:	00a90300 	adceq	r0, r9, r0, lsl #6
    3a78:	51010000 	tstpl	r1, r0
    3a7c:	87012200 	strhi	r2, [r1, -r0, lsl #4]
    3a80:	0100001e 	tsteq	r0, lr, lsl r0
    3a84:	34010322 	strcc	r0, [r1], #-802
    3a88:	5008004e 	andpl	r0, r8, lr, asr #32
    3a8c:	0108004e 	tsteq	r8, lr, asr #32
    3a90:	0006b45d 	andeq	fp, r6, sp, asr r4
    3a94:	1bf82300 	blne	ffe0c69c <SCS_BASE+0x1fdfe69c>
    3a98:	21010000 	tstcs	r1, r0
    3a9c:	00003a03 	andeq	r3, r0, r3, lsl #20
    3aa0:	23500100 	cmpcs	r0, #0	; 0x0
    3aa4:	0000117c 	andeq	r1, r0, ip, ror r1
    3aa8:	a9032101 	stmdbge	r3, {r0, r8, sp}
    3aac:	01000000 	tsteq	r0, r0
    3ab0:	01220051 	qsubeq	r0, r1, r2
    3ab4:	00001d51 	andeq	r1, r0, r1, asr sp
    3ab8:	01034401 	tsteq	r3, r1, lsl #8
    3abc:	08004e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, lr}
    3ac0:	08004e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, lr}
    3ac4:	06e95d01 	strbteq	r5, [r9], r1, lsl #26
    3ac8:	17230000 	strne	r0, [r3, -r0]!
    3acc:	0100001d 	tsteq	r0, sp, lsl r0
    3ad0:	003a0343 	eorseq	r0, sl, r3, asr #6
    3ad4:	50010000 	andpl	r0, r1, r0
    3ad8:	00117c23 	andseq	r7, r1, r3, lsr #24
    3adc:	03430100 	movteq	r0, #12544	; 0x3100
    3ae0:	000000a9 	andeq	r0, r0, r9, lsr #1
    3ae4:	22005101 	andcs	r5, r0, #1073741824	; 0x40000000
    3ae8:	001bc401 	andseq	ip, fp, r1, lsl #8
    3aec:	03640100 	cmneq	r4, #0	; 0x0
    3af0:	004e6c01 	subeq	r6, lr, r1, lsl #24
    3af4:	004e8808 	subeq	r8, lr, r8, lsl #16
    3af8:	1e5d0108 	rdfnee	f0, f5, #0.0
    3afc:	23000007 	movwcs	r0, #7	; 0x7
    3b00:	00001bf8 	strdeq	r1, [r0], -r8
    3b04:	3a036301 	bcc	dc710 <__Stack_Size+0xdc310>
    3b08:	01000000 	tsteq	r0, r0
    3b0c:	117c2350 	cmnne	ip, r0, asr r3
    3b10:	63010000 	movwvs	r0, #4096	; 0x1000
    3b14:	0000a903 	andeq	sl, r0, r3, lsl #18
    3b18:	00510100 	subseq	r0, r1, r0, lsl #2
    3b1c:	1cb10122 	ldfnes	f0, [r1], #136
    3b20:	85010000 	strhi	r0, [r1]
    3b24:	4e880103 	rmfmie	f0, f0, f3
    3b28:	4ea40800 	cdpmi	8, 10, cr0, cr4, cr0, {0}
    3b2c:	5d010800 	stcpl	8, cr0, [r1]
    3b30:	00000753 	andeq	r0, r0, r3, asr r7
    3b34:	001d1723 	andseq	r1, sp, r3, lsr #14
    3b38:	03840100 	orreq	r0, r4, #0	; 0x0
    3b3c:	0000003a 	andeq	r0, r0, sl, lsr r0
    3b40:	7c235001 	stcvc	0, cr5, [r3], #-4
    3b44:	01000011 	tsteq	r0, r1, lsl r0
    3b48:	00a90384 	adceq	r0, r9, r4, lsl #7
    3b4c:	51010000 	tstpl	r1, r0
    3b50:	7f012200 	svcvc	0x00012200
    3b54:	0100001d 	tsteq	r0, sp, lsl r0
    3b58:	a401039d 	strge	r0, [r1], #-925
    3b5c:	b008004e 	andlt	r0, r8, lr, asr #32
    3b60:	0108004e 	tsteq	r8, lr, asr #32
    3b64:	00077a5d 	andeq	r7, r7, sp, asr sl
    3b68:	117c2300 	cmnne	ip, r0, lsl #6
    3b6c:	9c010000 	stcls	0, cr0, [r1], {0}
    3b70:	0000a903 	andeq	sl, r0, r3, lsl #18
    3b74:	00500100 	subseq	r0, r0, r0, lsl #2
    3b78:	1f280122 	svcne	0x00280122
    3b7c:	ad010000 	stcge	0, cr0, [r1]
    3b80:	4eb00103 	frdmis	f0, f0, f3
    3b84:	4ebc0800 	cdpmi	8, 11, cr0, cr12, cr0, {0}
    3b88:	5d010800 	stcpl	8, cr0, [r1]
    3b8c:	000007a1 	andeq	r0, r0, r1, lsr #15
    3b90:	00117c23 	andseq	r7, r1, r3, lsr #24
    3b94:	03ac0100 	undefined instruction 0x03ac0100
    3b98:	000000a9 	andeq	r0, r0, r9, lsr #1
    3b9c:	22005001 	andcs	r5, r0, #1	; 0x1
    3ba0:	001c7101 	andseq	r7, ip, r1, lsl #2
    3ba4:	03c20100 	biceq	r0, r2, #0	; 0x0
    3ba8:	004ebc01 	subeq	fp, lr, r1, lsl #24
    3bac:	004ec808 	subeq	ip, lr, r8, lsl #16
    3bb0:	c85d0108 	ldmdagt	sp, {r3, r8}^
    3bb4:	23000007 	movwcs	r0, #7	; 0x7
    3bb8:	00001f5d 	andeq	r1, r0, sp, asr pc
    3bbc:	5303c101 	movwpl	ip, #12545	; 0x3101
    3bc0:	01000000 	tsteq	r0, r0
    3bc4:	d02a0050 	eorle	r0, sl, r0, asr r0
    3bc8:	c8000001 	stmdagt	r0, {r0}
    3bcc:	0c08004e 	stceq	0, cr0, [r8], {78}
    3bd0:	0108004f 	tsteq	r8, pc, asr #32
    3bd4:	0007fc5d 	andeq	pc, r7, sp, asr ip
    3bd8:	01e32b00 	mvneq	r2, r0, lsl #22
    3bdc:	1a290000 	bne	a43be4 <__Stack_Size+0xa437e4>
    3be0:	ef200000 	svc	0x00200000
    3be4:	3c000001 	stccc	0, cr0, [r0], {1}
    3be8:	2000001a 	andcs	r0, r0, sl, lsl r0
    3bec:	000001fb 	strdeq	r0, [r0], -fp
    3bf0:	00001a65 	andeq	r1, r0, r5, ror #20
    3bf4:	0002071c 	andeq	r0, r2, ip, lsl r7
    3bf8:	012c0000 	teqeq	ip, r0
    3bfc:	00001e1d 	andeq	r1, r0, sp, lsl lr
    3c00:	01041101 	tsteq	r4, r1, lsl #2
    3c04:	08004f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, lr}
    3c08:	08004f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, lr}
    3c0c:	012d5d01 	teqeq	sp, r1, lsl #26
    3c10:	00001be3 	andeq	r1, r0, r3, ror #23
    3c14:	01042501 	tsteq	r4, r1, lsl #10
    3c18:	00000089 	andeq	r0, r0, r9, lsl #1
    3c1c:	08004f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, lr}
    3c20:	08004f30 	stmdaeq	r0, {r4, r5, r8, r9, sl, fp, lr}
    3c24:	08495d01 	stmdaeq	r9, {r0, r8, sl, fp, ip, lr}^
    3c28:	65240000 	strvs	r0, [r4]!
    3c2c:	0100001f 	tsteq	r0, pc, lsl r0
    3c30:	00530424 	subseq	r0, r3, r4, lsr #8
    3c34:	1a8e0000 	bne	fe383c3c <SCS_BASE+0x1e375c3c>
    3c38:	03120000 	tsteq	r2, #0	; 0x0
    3c3c:	01000012 	tsteq	r0, r2, lsl r0
    3c40:	00890426 	addeq	r0, r9, r6, lsr #8
    3c44:	22000000 	andcs	r0, r0, #0	; 0x0
    3c48:	001bae01 	andseq	sl, fp, r1, lsl #28
    3c4c:	04480100 	strbeq	r0, [r8], #-256
    3c50:	004f3001 	subeq	r3, pc, r1
    3c54:	004f3c08 	subeq	r3, pc, r8, lsl #24
    3c58:	705d0108 	subsvc	r0, sp, r8, lsl #2
    3c5c:	23000008 	movwcs	r0, #8	; 0x8
    3c60:	00001f65 	andeq	r1, r0, r5, ror #30
    3c64:	53044701 	movwpl	r4, #18177	; 0x4701
    3c68:	01000000 	tsteq	r0, r0
    3c6c:	5d2e0050 	stcpl	0, cr0, [lr, #-320]!
    3c70:	80000000 	andhi	r0, r0, r0
    3c74:	2f000008 	svccs	0x00000008
    3c78:	000000d4 	ldrdeq	r0, [r0], -r4
    3c7c:	d521000f 	strle	r0, [r1, #-15]!
    3c80:	0100001e 	tsteq	r0, lr, lsl r0
    3c84:	0008916f 	andeq	r9, r8, pc, ror #2
    3c88:	e8030500 	stmda	r3, {r8, sl}
    3c8c:	30080061 	andcc	r0, r8, r1, rrx
    3c90:	00000870 	andeq	r0, r0, r0, ror r8
    3c94:	00005d2e 	andeq	r5, r0, lr, lsr #26
    3c98:	0008a600 	andeq	sl, r8, r0, lsl #12
    3c9c:	00d42f00 	sbcseq	r2, r4, r0, lsl #30
    3ca0:	00030000 	andeq	r0, r3, r0
    3ca4:	001f8a21 	andseq	r8, pc, r1, lsr #20
    3ca8:	b7700100 	ldrblt	r0, [r0, -r0, lsl #2]!
    3cac:	05000008 	streq	r0, [r0, #-8]
    3cb0:	0061f803 	rsbeq	pc, r1, r3, lsl #16
    3cb4:	08963008 	ldmeq	r6, {r3, ip, sp}
    3cb8:	eb000000 	bl	3cc0 <__Stack_Size+0x38c0>
    3cbc:	02000001 	andeq	r0, r0, #1	; 0x1
    3cc0:	00108900 	andseq	r8, r0, r0, lsl #18
    3cc4:	3b010400 	blcc	44ccc <__Stack_Size+0x448cc>
    3cc8:	01000005 	tsteq	r0, r5
    3ccc:	00001fe6 	andeq	r1, r0, r6, ror #31
    3cd0:	00000431 	andeq	r0, r0, r1, lsr r4
    3cd4:	08004f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, lr}
    3cd8:	08004fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, lr}
    3cdc:	00000e46 	andeq	r0, r0, r6, asr #28
    3ce0:	21050402 	tstcs	r5, r2, lsl #8
    3ce4:	0200002e 	andeq	r0, r0, #46	; 0x2e
    3ce8:	05b80502 	ldreq	r0, [r8, #1282]!
    3cec:	01020000 	tsteq	r2, r0
    3cf0:	0006cc06 	andeq	ip, r6, r6, lsl #24
    3cf4:	33750300 	cmncc	r5, #0	; 0x0
    3cf8:	27020032 	smladxcs	r2, r2, r0, r0
    3cfc:	00000045 	andeq	r0, r0, r5, asr #32
    3d00:	9b070402 	blls	1c4d10 <__Stack_Size+0x1c4910>
    3d04:	0200002e 	andeq	r0, r0, #46	; 0x2e
    3d08:	081e0702 	ldmdaeq	lr, {r1, r8, r9, sl}
    3d0c:	75030000 	strvc	r0, [r3]
    3d10:	29020038 	stmdbcs	r2, {r3, r4, r5}
    3d14:	0000005d 	andeq	r0, r0, sp, asr r0
    3d18:	ca080102 	bgt	204128 <__Stack_Size+0x203d28>
    3d1c:	04000006 	streq	r0, [r0], #-6
    3d20:	00000045 	andeq	r0, r0, r5, asr #32
    3d24:	00006405 	andeq	r6, r0, r5, lsl #8
    3d28:	02010600 	andeq	r0, r1, #0	; 0x0
    3d2c:	00008339 	andeq	r8, r0, r9, lsr r3
    3d30:	149d0700 	ldrne	r0, [sp], #1792
    3d34:	08000000 	stmdaeq	r0, {}
    3d38:	00544553 	subseq	r4, r4, r3, asr r5
    3d3c:	f0090001 	undefined instruction 0xf0090001
    3d40:	0200001d 	andeq	r0, r0, #29	; 0x1d
    3d44:	00006e39 	andeq	r6, r0, r9, lsr lr
    3d48:	02010600 	andeq	r0, r1, #0	; 0x0
    3d4c:	0000a33b 	andeq	sl, r0, fp, lsr r3
    3d50:	03630700 	cmneq	r3, #0	; 0x0
    3d54:	07000000 	streq	r0, [r0, -r0]
    3d58:	0000068d 	andeq	r0, r0, sp, lsl #13
    3d5c:	d1090001 	tstle	r9, r1
    3d60:	02000000 	andeq	r0, r0, #0	; 0x0
    3d64:	00008e3b 	andeq	r8, r0, fp, lsr lr
    3d68:	07040a00 	streq	r0, [r4, -r0, lsl #20]
    3d6c:	0303100b 	movweq	r1, #12299	; 0x300b
    3d70:	0000f702 	andeq	pc, r0, r2, lsl #14
    3d74:	200c0c00 	andcs	r0, ip, r0, lsl #24
    3d78:	04030000 	streq	r0, [r3]
    3d7c:	00006402 	andeq	r6, r0, r2, lsl #8
    3d80:	00230200 	eoreq	r0, r3, r0, lsl #4
    3d84:	00204c0c 	eoreq	r4, r0, ip, lsl #24
    3d88:	02050300 	andeq	r0, r5, #0	; 0x0
    3d8c:	00000064 	andeq	r0, r0, r4, rrx
    3d90:	0d042302 	stceq	3, cr2, [r4, #-8]
    3d94:	004c4156 	subeq	r4, ip, r6, asr r1
    3d98:	64020603 	strvs	r0, [r2], #-1539
    3d9c:	02000000 	andeq	r0, r0, #0	; 0x0
    3da0:	e00c0823 	and	r0, ip, r3, lsr #16
    3da4:	0300001f 	movweq	r0, #31	; 0x1f
    3da8:	00690207 	rsbeq	r0, r9, r7, lsl #4
    3dac:	23020000 	movwcs	r0, #8192	; 0x2000
    3db0:	010e000c 	tsteq	lr, ip
    3db4:	00002034 	andeq	r2, r0, r4, lsr r0
    3db8:	3c012c01 	stccc	12, cr2, [r1], {1}
    3dbc:	5808004f 	stmdapl	r8, {r0, r1, r2, r3, r6}
    3dc0:	0108004f 	tsteq	r8, pc, asr #32
    3dc4:	00011c5d 	andeq	r1, r1, sp, asr ip
    3dc8:	20510f00 	subscs	r0, r1, r0, lsl #30
    3dcc:	2b010000 	blcs	43dd4 <__Stack_Size+0x439d4>
    3dd0:	0000003a 	andeq	r0, r0, sl, lsr r0
    3dd4:	0e005001 	cdpeq	0, 0, cr5, cr0, cr1, {0}
    3dd8:	001fab01 	andseq	sl, pc, r1, lsl #22
    3ddc:	01430100 	cmpeq	r3, r0, lsl #2
    3de0:	08004f58 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, fp, lr}
    3de4:	08004f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, lr}
    3de8:	01415d01 	cmpeq	r1, r1, lsl #26
    3dec:	b60f0000 	strlt	r0, [pc], -r0
    3df0:	0100001f 	tsteq	r0, pc, lsl r0
    3df4:	00003a42 	andeq	r3, r0, r2, asr #20
    3df8:	00500100 	subseq	r0, r0, r0, lsl #2
    3dfc:	2011010e 	andscs	r0, r1, lr, lsl #2
    3e00:	56010000 	strpl	r0, [r1], -r0
    3e04:	004f6401 	subeq	r6, pc, r1, lsl #8
    3e08:	004f9008 	subeq	r9, pc, r8
    3e0c:	665d0108 	ldrbvs	r0, [sp], -r8, lsl #2
    3e10:	0f000001 	svceq	0x00000001
    3e14:	00002024 	andeq	r2, r0, r4, lsr #32
    3e18:	003a5501 	eorseq	r5, sl, r1, lsl #10
    3e1c:	50010000 	andpl	r0, r1, r0
    3e20:	63010e00 	movwvs	r0, #7680	; 0x1e00
    3e24:	01000020 	tsteq	r0, r0, lsr #32
    3e28:	4f900171 	svcmi	0x00900171
    3e2c:	4fac0800 	svcmi	0x00ac0800
    3e30:	5d010800 	stcpl	8, cr0, [r1]
    3e34:	0000018b 	andeq	r0, r0, fp, lsl #3
    3e38:	00117c0f 	andseq	r7, r1, pc, lsl #24
    3e3c:	a3700100 	cmnge	r0, #0	; 0x0
    3e40:	01000000 	tsteq	r0, r0
    3e44:	01100050 	tsteq	r0, r0, asr r0
    3e48:	00001f98 	muleq	r0, r8, pc
    3e4c:	3a018701 	bcc	65a58 <__Stack_Size+0x65658>
    3e50:	ac000000 	stcge	0, cr0, [r0], {0}
    3e54:	b808004f 	stmdalt	r8, {r0, r1, r2, r3, r6}
    3e58:	0108004f 	tsteq	r8, pc, asr #32
    3e5c:	bd01115d 	stflts	f1, [r1, #-372]
    3e60:	0100001f 	tsteq	r0, pc, lsl r0
    3e64:	00830197 	umulleq	r0, r3, r7, r1
    3e68:	4fb80000 	svcmi	0x00b80000
    3e6c:	4fe00800 	svcmi	0x00e00800
    3e70:	5d010800 	stcpl	8, cr0, [r1]
    3e74:	001fd312 	andseq	sp, pc, r2, lsl r3
    3e78:	53960100 	orrspl	r0, r6, #0	; 0x0
    3e7c:	a1000000 	tstge	r0, r0
    3e80:	1300001a 	movwne	r0, #26	; 0x1a
    3e84:	00001d47 	andeq	r1, r0, r7, asr #26
    3e88:	003a9801 	eorseq	r9, sl, r1, lsl #16
    3e8c:	1abf0000 	bne	fefc3e94 <SCS_BASE+0x1efb5e94>
    3e90:	74140000 	ldrvc	r0, [r4]
    3e94:	0100706d 	tsteq	r0, sp, rrx
    3e98:	00003a98 	muleq	r0, r8, sl
    3e9c:	12031500 	andne	r1, r3, #0	; 0x0
    3ea0:	99010000 	stmdbls	r1, {}
    3ea4:	00000083 	andeq	r0, r0, r3, lsl #1
    3ea8:	21450000 	cmpcs	r5, r0
    3eac:	00020000 	andeq	r0, r2, r0
    3eb0:	000011af 	andeq	r1, r0, pc, lsr #3
    3eb4:	053b0104 	ldreq	r0, [fp, #-260]!
    3eb8:	db010000 	blle	43ec0 <__Stack_Size+0x43ac0>
    3ebc:	31000023 	tstcc	r0, r3, lsr #32
    3ec0:	e0000004 	and	r0, r0, r4
    3ec4:	6808004f 	stmdavs	r8, {r0, r1, r2, r3, r6}
    3ec8:	0308005d 	movweq	r0, #32861	; 0x805d
    3ecc:	0200000f 	andeq	r0, r0, #15	; 0xf
    3ed0:	2e210504 	cfsh64cs	mvdx0, mvdx1, #4
    3ed4:	02020000 	andeq	r0, r2, #0	; 0x0
    3ed8:	0005b805 	andeq	fp, r5, r5, lsl #16
    3edc:	06010200 	streq	r0, [r1], -r0, lsl #4
    3ee0:	000006cc 	andeq	r0, r0, ip, asr #13
    3ee4:	9b070402 	blls	1c4ef4 <__Stack_Size+0x1c4af4>
    3ee8:	0300002e 	movweq	r0, #46	; 0x2e
    3eec:	00363175 	eorseq	r3, r6, r5, ror r1
    3ef0:	004c2802 	subeq	r2, ip, r2, lsl #16
    3ef4:	02020000 	andeq	r0, r2, #0	; 0x0
    3ef8:	00081e07 	andeq	r1, r8, r7, lsl #28
    3efc:	38750300 	ldmdacc	r5!, {r8, r9}^
    3f00:	5d290200 	sfmpl	f0, 4, [r9]
    3f04:	02000000 	andeq	r0, r0, #0	; 0x0
    3f08:	06ca0801 	strbeq	r0, [sl], r1, lsl #16
    3f0c:	4c040000 	stcmi	0, cr0, [r4], {0}
    3f10:	05000000 	streq	r0, [r0]
    3f14:	7e390201 	cdpvc	2, 3, cr0, cr9, cr1, {0}
    3f18:	06000000 	streq	r0, [r0], -r0
    3f1c:	0000149d 	muleq	r0, sp, r4
    3f20:	45530700 	ldrbmi	r0, [r3, #-1792]
    3f24:	00010054 	andeq	r0, r1, r4, asr r0
    3f28:	001df008 	andseq	pc, sp, r8
    3f2c:	69390200 	ldmdbvs	r9!, {r9}
    3f30:	08000000 	stmdaeq	r0, {}
    3f34:	00001bea 	andeq	r1, r0, sl, ror #23
    3f38:	00693902 	rsbeq	r3, r9, r2, lsl #18
    3f3c:	01050000 	tsteq	r5, r0
    3f40:	00a93b02 	adceq	r3, r9, r2, lsl #22
    3f44:	63060000 	movwvs	r0, #24576	; 0x6000
    3f48:	00000003 	andeq	r0, r0, r3
    3f4c:	00068d06 	andeq	r8, r6, r6, lsl #26
    3f50:	08000100 	stmdaeq	r0, {r8}
    3f54:	000000d1 	ldrdeq	r0, [r0], -r1
    3f58:	00943b02 	addseq	r3, r4, r2, lsl #22
    3f5c:	04090000 	streq	r0, [r9]
    3f60:	03500a07 	cmpeq	r0, #28672	; 0x7000
    3f64:	0318020c 	tsteq	r8, #-1073741824	; 0xc0000000
    3f68:	430b0000 	movwmi	r0, #45056	; 0xb000
    3f6c:	03003152 	movweq	r3, #338	; 0x152
    3f70:	0064020d 	rsbeq	r0, r4, sp, lsl #4
    3f74:	23020000 	movwcs	r0, #8192	; 0x2000
    3f78:	05720c00 	ldrbeq	r0, [r2, #-3072]!
    3f7c:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
    3f80:	00004102 	andeq	r4, r0, r2, lsl #2
    3f84:	02230200 	eoreq	r0, r3, #0	; 0x0
    3f88:	3252430b 	subscc	r4, r2, #738197504	; 0x2c000000
    3f8c:	020f0300 	andeq	r0, pc, #0	; 0x0
    3f90:	00000064 	andeq	r0, r0, r4, rrx
    3f94:	0c042302 	stceq	3, cr2, [r4], {2}
    3f98:	0000057c 	andeq	r0, r0, ip, ror r5
    3f9c:	41021003 	tstmi	r2, r3
    3fa0:	02000000 	andeq	r0, r0, #0	; 0x0
    3fa4:	db0c0623 	blle	305838 <__Stack_Size+0x305438>
    3fa8:	03000003 	movweq	r0, #3	; 0x3
    3fac:	00640211 	rsbeq	r0, r4, r1, lsl r2
    3fb0:	23020000 	movwcs	r0, #8192	; 0x2000
    3fb4:	05860c08 	streq	r0, [r6, #3080]
    3fb8:	12030000 	andne	r0, r3, #0	; 0x0
    3fbc:	00004102 	andeq	r4, r0, r2, lsl #2
    3fc0:	0a230200 	beq	8c47c8 <__Stack_Size+0x8c43c8>
    3fc4:	0002b00c 	andeq	fp, r2, ip
    3fc8:	02130300 	andseq	r0, r3, #0	; 0x0
    3fcc:	00000064 	andeq	r0, r0, r4, rrx
    3fd0:	0c0c2302 	stceq	3, cr2, [ip], {2}
    3fd4:	00000590 	muleq	r0, r0, r5
    3fd8:	41021403 	tstmi	r2, r3, lsl #8
    3fdc:	02000000 	andeq	r0, r0, #0	; 0x0
    3fe0:	530b0e23 	movwpl	r0, #48675	; 0xbe23
    3fe4:	15030052 	strne	r0, [r3, #-82]
    3fe8:	00006402 	andeq	r6, r0, r2, lsl #8
    3fec:	10230200 	eorne	r0, r3, r0, lsl #4
    3ff0:	00059a0c 	andeq	r9, r5, ip, lsl #20
    3ff4:	02160300 	andseq	r0, r6, #0	; 0x0
    3ff8:	00000041 	andeq	r0, r0, r1, asr #32
    3ffc:	0b122302 	bleq	48cc0c <__Stack_Size+0x48c80c>
    4000:	00524745 	subseq	r4, r2, r5, asr #14
    4004:	64021703 	strvs	r1, [r2], #-1795
    4008:	02000000 	andeq	r0, r0, #0	; 0x0
    400c:	a40c1423 	strge	r1, [ip], #-1059
    4010:	03000005 	movweq	r0, #5	; 0x5
    4014:	00410218 	subeq	r0, r1, r8, lsl r2
    4018:	23020000 	movwcs	r0, #8192	; 0x2000
    401c:	01fe0c16 	mvnseq	r0, r6, lsl ip
    4020:	19030000 	stmdbne	r3, {}
    4024:	00006402 	andeq	r6, r0, r2, lsl #8
    4028:	18230200 	stmdane	r3!, {r9}
    402c:	0005ae0c 	andeq	sl, r5, ip, lsl #28
    4030:	021a0300 	andseq	r0, sl, #0	; 0x0
    4034:	00000041 	andeq	r0, r0, r1, asr #32
    4038:	0c1a2302 	ldceq	3, cr2, [sl], {2}
    403c:	00000204 	andeq	r0, r0, r4, lsl #4
    4040:	64021b03 	strvs	r1, [r2], #-2819
    4044:	02000000 	andeq	r0, r0, #0	; 0x0
    4048:	830c1c23 	movwhi	r1, #52259	; 0xcc23
    404c:	03000008 	movweq	r0, #8	; 0x8
    4050:	0041021c 	subeq	r0, r1, ip, lsl r2
    4054:	23020000 	movwcs	r0, #8192	; 0x2000
    4058:	03370c1e 	teqeq	r7, #7680	; 0x1e00
    405c:	1d030000 	stcne	0, cr0, [r3]
    4060:	00006402 	andeq	r6, r0, r2, lsl #8
    4064:	20230200 	eorcs	r0, r3, r0, lsl #4
    4068:	0005c20c 	andeq	ip, r5, ip, lsl #4
    406c:	021e0300 	andseq	r0, lr, #0	; 0x0
    4070:	00000041 	andeq	r0, r0, r1, asr #32
    4074:	0b222302 	bleq	88cc84 <__Stack_Size+0x88c884>
    4078:	00544e43 	subseq	r4, r4, r3, asr #28
    407c:	64021f03 	strvs	r1, [r2], #-3843
    4080:	02000000 	andeq	r0, r0, #0	; 0x0
    4084:	cc0c2423 	cfstrsgt	mvf2, [ip], {35}
    4088:	03000005 	movweq	r0, #5	; 0x5
    408c:	00410220 	subeq	r0, r1, r0, lsr #4
    4090:	23020000 	movwcs	r0, #8192	; 0x2000
    4094:	53500b26 	cmppl	r0, #38912	; 0x9800
    4098:	21030043 	tstcs	r3, r3, asr #32
    409c:	00006402 	andeq	r6, r0, r2, lsl #8
    40a0:	28230200 	stmdacs	r3!, {r9}
    40a4:	0007100c 	andeq	r1, r7, ip
    40a8:	02220300 	eoreq	r0, r2, #0	; 0x0
    40ac:	00000041 	andeq	r0, r0, r1, asr #32
    40b0:	0b2a2302 	bleq	a8ccc0 <__Stack_Size+0xa8c8c0>
    40b4:	00525241 	subseq	r5, r2, r1, asr #4
    40b8:	64022303 	strvs	r2, [r2], #-771
    40bc:	02000000 	andeq	r0, r0, #0	; 0x0
    40c0:	1b0c2c23 	blne	30f154 <__Stack_Size+0x30ed54>
    40c4:	03000007 	movweq	r0, #7	; 0x7
    40c8:	00410224 	subeq	r0, r1, r4, lsr #4
    40cc:	23020000 	movwcs	r0, #8192	; 0x2000
    40d0:	43520b2e 	cmpmi	r2, #47104	; 0xb800
    40d4:	25030052 	strcs	r0, [r3, #-82]
    40d8:	00006402 	andeq	r6, r0, r2, lsl #8
    40dc:	30230200 	eorcc	r0, r3, r0, lsl #4
    40e0:	0007260c 	andeq	r2, r7, ip, lsl #12
    40e4:	02260300 	eoreq	r0, r6, #0	; 0x0
    40e8:	00000041 	andeq	r0, r0, r1, asr #32
    40ec:	0c322302 	ldceq	3, cr2, [r2], #-8
    40f0:	000001ea 	andeq	r0, r0, sl, ror #3
    40f4:	64022703 	strvs	r2, [r2], #-1795
    40f8:	02000000 	andeq	r0, r0, #0	; 0x0
    40fc:	310c3423 	tstcc	ip, r3, lsr #8
    4100:	03000007 	movweq	r0, #7	; 0x7
    4104:	00410228 	subeq	r0, r1, r8, lsr #4
    4108:	23020000 	movwcs	r0, #8192	; 0x2000
    410c:	01ef0c36 	mvneq	r0, r6, lsr ip
    4110:	29030000 	stmdbcs	r3, {}
    4114:	00006402 	andeq	r6, r0, r2, lsl #8
    4118:	38230200 	stmdacc	r3!, {r9}
    411c:	00073c0c 	andeq	r3, r7, ip, lsl #24
    4120:	022a0300 	eoreq	r0, sl, #0	; 0x0
    4124:	00000041 	andeq	r0, r0, r1, asr #32
    4128:	0c3a2302 	ldceq	3, cr2, [sl], #-8
    412c:	000001f4 	strdeq	r0, [r0], -r4
    4130:	64022b03 	strvs	r2, [r2], #-2819
    4134:	02000000 	andeq	r0, r0, #0	; 0x0
    4138:	470c3c23 	strmi	r3, [ip, -r3, lsr #24]
    413c:	03000007 	movweq	r0, #7	; 0x7
    4140:	0041022c 	subeq	r0, r1, ip, lsr #4
    4144:	23020000 	movwcs	r0, #8192	; 0x2000
    4148:	01f90c3e 	mvnseq	r0, lr, lsr ip
    414c:	2d030000 	stccs	0, cr0, [r3]
    4150:	00006402 	andeq	r6, r0, r2, lsl #8
    4154:	40230200 	eormi	r0, r3, r0, lsl #4
    4158:	0007520c 	andeq	r5, r7, ip, lsl #4
    415c:	022e0300 	eoreq	r0, lr, #0	; 0x0
    4160:	00000041 	andeq	r0, r0, r1, asr #32
    4164:	0c422302 	mcrreq	3, 0, r2, r2, cr2
    4168:	000001c7 	andeq	r0, r0, r7, asr #3
    416c:	64022f03 	strvs	r2, [r2], #-3843
    4170:	02000000 	andeq	r0, r0, #0	; 0x0
    4174:	5d0c4423 	cfstrspl	mvf4, [ip, #-140]
    4178:	03000007 	movweq	r0, #7	; 0x7
    417c:	00410230 	subeq	r0, r1, r0, lsr r2
    4180:	23020000 	movwcs	r0, #8192	; 0x2000
    4184:	43440b46 	movtmi	r0, #19270	; 0x4b46
    4188:	31030052 	qaddcc	r0, r2, r3
    418c:	00006402 	andeq	r6, r0, r2, lsl #8
    4190:	48230200 	stmdami	r3!, {r9}
    4194:	0007680c 	andeq	r6, r7, ip, lsl #16
    4198:	02320300 	eorseq	r0, r2, #0	; 0x0
    419c:	00000041 	andeq	r0, r0, r1, asr #32
    41a0:	0c4a2302 	mcrreq	3, 0, r2, sl, cr2
    41a4:	00000608 	andeq	r0, r0, r8, lsl #12
    41a8:	64023303 	strvs	r3, [r2], #-771
    41ac:	02000000 	andeq	r0, r0, #0	; 0x0
    41b0:	730c4c23 	movwvc	r4, #52259	; 0xcc23
    41b4:	03000007 	movweq	r0, #7	; 0x7
    41b8:	00410234 	subeq	r0, r1, r4, lsr r2
    41bc:	23020000 	movwcs	r0, #8192	; 0x2000
    41c0:	ea0d004e 	b	344300 <__Stack_Size+0x343f00>
    41c4:	03000022 	movweq	r0, #34	; 0x22
    41c8:	00b70235 	adcseq	r0, r7, r5, lsr r2
    41cc:	0a0e0000 	beq	3841d4 <__Stack_Size+0x383dd4>
    41d0:	03731c04 	cmneq	r3, #1024	; 0x400
    41d4:	210f0000 	mrscs	r0, CPSR
    41d8:	04000000 	streq	r0, [r0]
    41dc:	0000411d 	andeq	r4, r0, sp, lsl r1
    41e0:	00230200 	eoreq	r0, r3, r0, lsl #4
    41e4:	0003880f 	andeq	r8, r3, pc, lsl #16
    41e8:	411e0400 	tstmi	lr, r0, lsl #8
    41ec:	02000000 	andeq	r0, r0, #0	; 0x0
    41f0:	210f0223 	tstcs	pc, r3, lsr #4
    41f4:	04000001 	streq	r0, [r0], #-1
    41f8:	0000411f 	andeq	r4, r0, pc, lsl r1
    41fc:	04230200 	strteq	r0, [r3], #-512
    4200:	0001a50f 	andeq	sl, r1, pc, lsl #10
    4204:	41200400 	teqmi	r0, r0, lsl #8
    4208:	02000000 	andeq	r0, r0, #0	; 0x0
    420c:	f60f0623 	undefined instruction 0xf60f0623
    4210:	04000002 	streq	r0, [r0], #-2
    4214:	00005321 	andeq	r5, r0, r1, lsr #6
    4218:	08230200 	stmdaeq	r3!, {r9}
    421c:	07f00800 	ldrbeq	r0, [r0, r0, lsl #16]!
    4220:	22040000 	andcs	r0, r4, #0	; 0x0
    4224:	00000324 	andeq	r0, r0, r4, lsr #6
    4228:	2604100e 	strcs	r1, [r4], -lr
    422c:	000003f7 	strdeq	r0, [r0], -r7
    4230:	0005590f 	andeq	r5, r5, pc, lsl #18
    4234:	41270400 	teqmi	r7, r0, lsl #8
    4238:	02000000 	andeq	r0, r0, #0	; 0x0
    423c:	b70f0023 	strlt	r0, [pc, -r3, lsr #32]
    4240:	04000001 	streq	r0, [r0], #-1
    4244:	00004128 	andeq	r4, r0, r8, lsr #2
    4248:	02230200 	eoreq	r0, r3, #0	; 0x0
    424c:	00067c0f 	andeq	r7, r6, pc, lsl #24
    4250:	41290400 	teqmi	r9, r0, lsl #8
    4254:	02000000 	andeq	r0, r0, #0	; 0x0
    4258:	8c0f0423 	cfstrshi	mvf0, [pc], {35}
    425c:	04000001 	streq	r0, [r0], #-1
    4260:	0000412a 	andeq	r4, r0, sl, lsr #2
    4264:	06230200 	strteq	r0, [r3], -r0, lsl #4
    4268:	0000710f 	andeq	r7, r0, pc, lsl #2
    426c:	412b0400 	teqmi	fp, r0, lsl #8
    4270:	02000000 	andeq	r0, r0, #0	; 0x0
    4274:	0c0f0823 	stceq	8, cr0, [pc], {35}
    4278:	04000003 	streq	r0, [r0], #-3
    427c:	0000412c 	andeq	r4, r0, ip, lsr #2
    4280:	0a230200 	beq	8c4a88 <__Stack_Size+0x8c4688>
    4284:	00013b0f 	andeq	r3, r1, pc, lsl #22
    4288:	412d0400 	teqmi	sp, r0, lsl #8
    428c:	02000000 	andeq	r0, r0, #0	; 0x0
    4290:	c80f0c23 	stmdagt	pc, {r0, r1, r5, sl, fp}
    4294:	04000004 	streq	r0, [r0], #-4
    4298:	0000412e 	andeq	r4, r0, lr, lsr #2
    429c:	0e230200 	cdpeq	2, 2, cr0, cr3, cr0, {0}
    42a0:	00430800 	subeq	r0, r3, r0, lsl #16
    42a4:	2f040000 	svccs	0x00040000
    42a8:	0000037e 	andeq	r0, r0, lr, ror r3
    42ac:	33040a0e 	movwcc	r0, #18958	; 0x4a0e
    42b0:	00000451 	andeq	r0, r0, r1, asr r4
    42b4:	0027030f 	eoreq	r0, r7, pc, lsl #6
    42b8:	41340400 	teqmi	r4, r0, lsl #8
    42bc:	02000000 	andeq	r0, r0, #0	; 0x0
    42c0:	f30f0023 	vhadd.u8	d0, d15, d19
    42c4:	04000027 	streq	r0, [r0], #-39
    42c8:	00004135 	andeq	r4, r0, r5, lsr r1
    42cc:	02230200 	eoreq	r0, r3, #0	; 0x0
    42d0:	00278e0f 	eoreq	r8, r7, pc, lsl #28
    42d4:	41360400 	teqmi	r6, r0, lsl #8
    42d8:	02000000 	andeq	r0, r0, #0	; 0x0
    42dc:	d30f0423 	movwle	r0, #62499	; 0xf423
    42e0:	04000024 	streq	r0, [r0], #-36
    42e4:	00004137 	andeq	r4, r0, r7, lsr r1
    42e8:	06230200 	strteq	r0, [r3], -r0, lsl #4
    42ec:	0029d00f 	eoreq	sp, r9, pc
    42f0:	41380400 	teqmi	r8, r0, lsl #8
    42f4:	02000000 	andeq	r0, r0, #0	; 0x0
    42f8:	08000823 	stmdaeq	r0, {r0, r1, r5, fp}
    42fc:	0000215c 	andeq	r2, r0, ip, asr r1
    4300:	04023904 	streq	r3, [r2], #-2308
    4304:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
    4308:	04c73d04 	strbeq	r3, [r7], #3332
    430c:	e50f0000 	str	r0, [pc, #0]	; 4314 <__Stack_Size+0x3f14>
    4310:	04000027 	streq	r0, [r0], #-39
    4314:	0000413e 	andeq	r4, r0, lr, lsr r1
    4318:	00230200 	eoreq	r0, r3, r0, lsl #4
    431c:	0022d50f 	eoreq	sp, r2, pc, lsl #10
    4320:	413f0400 	teqmi	pc, r0, lsl #8
    4324:	02000000 	andeq	r0, r0, #0	; 0x0
    4328:	980f0223 	stmdals	pc, {r0, r1, r5, r9}
    432c:	04000024 	streq	r0, [r0], #-36
    4330:	00004140 	andeq	r4, r0, r0, asr #2
    4334:	04230200 	strteq	r0, [r3], #-512
    4338:	0028ea0f 	eoreq	lr, r8, pc, lsl #20
    433c:	41410400 	cmpmi	r1, r0, lsl #8
    4340:	02000000 	andeq	r0, r0, #0	; 0x0
    4344:	820f0623 	andhi	r0, pc, #36700160	; 0x2300000
    4348:	04000025 	streq	r0, [r0], #-37
    434c:	00004142 	andeq	r4, r0, r2, asr #2
    4350:	08230200 	stmdaeq	r3!, {r9}
    4354:	00243f0f 	eoreq	r3, r4, pc, lsl #30
    4358:	41430400 	cmpmi	r3, r0, lsl #8
    435c:	02000000 	andeq	r0, r0, #0	; 0x0
    4360:	760f0a23 	strvc	r0, [pc], -r3, lsr #20
    4364:	04000028 	streq	r0, [r0], #-40
    4368:	00004144 	andeq	r4, r0, r4, asr #2
    436c:	0c230200 	sfmeq	f0, 4, [r3]
    4370:	252a0800 	strcs	r0, [sl, #-2048]!
    4374:	45040000 	strmi	r0, [r4]
    4378:	0000045c 	andeq	r0, r0, ip, asr r4
    437c:	26b20110 	ssatcs	r0, #19, r0, lsl #2
    4380:	b3010000 	movwlt	r0, #4096	; 0x1000
    4384:	1e010104 	adfnes	f0, f1, f4
    4388:	11000005 	tstne	r0, r5
    438c:	0000228d 	andeq	r2, r0, sp, lsl #5
    4390:	1e04b101 	mvfnes	f3, f1
    4394:	11000005 	tstne	r0, r5
    4398:	00002191 	muleq	r0, r1, r1
    439c:	4104b101 	tstmi	r4, r1, lsl #2
    43a0:	11000000 	tstne	r0, r0
    43a4:	00002969 	andeq	r2, r0, r9, ror #18
    43a8:	4104b101 	tstmi	r4, r1, lsl #2
    43ac:	11000000 	tstne	r0, r0
    43b0:	0000251d 	andeq	r2, r0, sp, lsl r5
    43b4:	4104b201 	tstmi	r4, r1, lsl #4
    43b8:	12000000 	andne	r0, r0, #0	; 0x0
    43bc:	00002273 	andeq	r2, r0, r3, ror r2
    43c0:	4104b401 	tstmi	r4, r1, lsl #8
    43c4:	00000000 	andeq	r0, r0, r0
    43c8:	03180413 	tsteq	r8, #318767104	; 0x13000000
    43cc:	01100000 	tsteq	r0, r0
    43d0:	000029f7 	strdeq	r2, [r0], -r7
    43d4:	01051901 	tsteq	r5, r1, lsl #18
    43d8:	00055801 	andeq	r5, r5, r1, lsl #16
    43dc:	228d1100 	addcs	r1, sp, #0	; 0x0
    43e0:	18010000 	stmdane	r1, {}
    43e4:	00051e05 	andeq	r1, r5, r5, lsl #28
    43e8:	216e1100 	cmncs	lr, r0, lsl #2
    43ec:	18010000 	stmdane	r1, {}
    43f0:	00004105 	andeq	r4, r0, r5, lsl #2
    43f4:	22731200 	rsbscs	r1, r3, #0	; 0x0
    43f8:	1a010000 	bne	44400 <__Stack_Size+0x44000>
    43fc:	00004105 	andeq	r4, r0, r5, lsl #2
    4400:	3e140000 	wxorcc	wr0, wr4, wr0
    4404:	01000021 	tsteq	r0, r1, lsr #32
    4408:	01010c1d 	tsteq	r1, sp, lsl ip
    440c:	000005bb 	strheq	r0, [r0], -fp
    4410:	00228d11 	eoreq	r8, r2, r1, lsl sp
    4414:	0c1b0100 	ldfeqs	f0, [fp], {0}
    4418:	0000051e 	andeq	r0, r0, lr, lsl r5
    441c:	0027f311 	eoreq	pc, r7, r1, lsl r3
    4420:	0c1b0100 	ldfeqs	f0, [fp], {0}
    4424:	00000041 	andeq	r0, r0, r1, asr #32
    4428:	00278e11 	eoreq	r8, r7, r1, lsl lr
    442c:	0c1b0100 	ldfeqs	f0, [fp], {0}
    4430:	00000041 	andeq	r0, r0, r1, asr #32
    4434:	0029d011 	eoreq	sp, r9, r1, lsl r0
    4438:	0c1c0100 	ldfeqs	f0, [ip], {0}
    443c:	00000041 	andeq	r0, r0, r1, asr #32
    4440:	0026f112 	eoreq	pc, r6, r2, lsl r1
    4444:	0c1e0100 	ldfeqs	f0, [lr], {0}
    4448:	00000041 	andeq	r0, r0, r1, asr #32
    444c:	00241012 	eoreq	r1, r4, r2, lsl r0
    4450:	0c1e0100 	ldfeqs	f0, [lr], {0}
    4454:	00000041 	andeq	r0, r0, r1, asr #32
    4458:	706d7415 	rsbvc	r7, sp, r5, lsl r4
    445c:	0c1e0100 	ldfeqs	f0, [lr], {0}
    4460:	00000041 	andeq	r0, r0, r1, asr #32
    4464:	231a1400 	tstcs	sl, #0	; 0x0
    4468:	ef010000 	svc	0x00010000
    446c:	1201010b 	andne	r0, r1, #-1073741822	; 0xc0000002
    4470:	11000006 	tstne	r0, r6
    4474:	0000228d 	andeq	r2, r0, sp, lsl #5
    4478:	1e0bed01 	cdpne	13, 0, cr14, cr11, cr1, {0}
    447c:	11000005 	tstne	r0, r5
    4480:	000027f3 	strdeq	r2, [r0], -r3
    4484:	410bed01 	tstmi	fp, r1, lsl #26
    4488:	11000000 	tstne	r0, r0
    448c:	0000278e 	andeq	r2, r0, lr, lsl #15
    4490:	410bed01 	tstmi	fp, r1, lsl #26
    4494:	11000000 	tstne	r0, r0
    4498:	000029d0 	ldrdeq	r2, [r0], -r0
    449c:	410bee01 	tstmi	fp, r1, lsl #28
    44a0:	12000000 	andne	r0, r0, #0	; 0x0
    44a4:	000026f1 	strdeq	r2, [r0], -r1
    44a8:	410bf001 	tstpmi	fp, r1
    44ac:	12000000 	andne	r0, r0, #0	; 0x0
    44b0:	00002410 	andeq	r2, r0, r0, lsl r4
    44b4:	410bf001 	tstpmi	fp, r1
    44b8:	00000000 	andeq	r0, r0, r0
    44bc:	275e0110 	smmlacs	lr, r0, r1, r0
    44c0:	6b010000 	blvs	444c8 <__Stack_Size+0x440c8>
    44c4:	3a01010a 	bcc	448f4 <__Stack_Size+0x444f4>
    44c8:	11000006 	tstne	r0, r6
    44cc:	0000228d 	andeq	r2, r0, sp, lsl #5
    44d0:	1e0a6a01 	fmacsne	s12, s20, s2
    44d4:	11000005 	tstne	r0, r5
    44d8:	000026d7 	ldrdeq	r2, [r0], -r7
    44dc:	410a6a01 	tstmi	sl, r1, lsl #20
    44e0:	00000000 	andeq	r0, r0, r0
    44e4:	25650110 	strbcs	r0, [r5, #-272]!
    44e8:	87010000 	strhi	r0, [r1, -r0]
    44ec:	6201010a 	andvs	r0, r1, #-2147483646	; 0x80000002
    44f0:	11000006 	tstne	r0, r6
    44f4:	0000228d 	andeq	r2, r0, sp, lsl #5
    44f8:	1e0a8601 	cfmadd32ne	mvax0, mvfx8, mvfx10, mvfx1
    44fc:	11000005 	tstne	r0, r5
    4500:	000026d7 	ldrdeq	r2, [r0], -r7
    4504:	410a8601 	tstmi	sl, r1, lsl #12
    4508:	00000000 	andeq	r0, r0, r0
    450c:	0025f014 	eoreq	pc, r5, r4, lsl r0
    4510:	0c4d0100 	stfeqe	f0, [sp], {0}
    4514:	06c50101 	strbeq	r0, [r5], r1, lsl #2
    4518:	8d110000 	ldchi	0, cr0, [r1]
    451c:	01000022 	tsteq	r0, r2, lsr #32
    4520:	051e0c4b 	ldreq	r0, [lr, #-3147]
    4524:	f3110000 	vhadd.u16	d0, d1, d0
    4528:	01000027 	tsteq	r0, r7, lsr #32
    452c:	00410c4b 	subeq	r0, r1, fp, asr #24
    4530:	8e110000 	wxorhi	wr0, wr1, wr0
    4534:	01000027 	tsteq	r0, r7, lsr #32
    4538:	00410c4b 	subeq	r0, r1, fp, asr #24
    453c:	d0110000 	andsle	r0, r1, r0
    4540:	01000029 	tsteq	r0, r9, lsr #32
    4544:	00410c4c 	subeq	r0, r1, ip, asr #24
    4548:	fa120000 	blx	484550 <__Stack_Size+0x484150>
    454c:	01000026 	tsteq	r0, r6, lsr #32
    4550:	00410c4e 	subeq	r0, r1, lr, asr #24
    4554:	10120000 	andsne	r0, r2, r0
    4558:	01000024 	tsteq	r0, r4, lsr #32
    455c:	00410c4e 	subeq	r0, r1, lr, asr #24
    4560:	74150000 	ldrvc	r0, [r5]
    4564:	0100706d 	tsteq	r0, sp, rrx
    4568:	00410c4e 	subeq	r0, r1, lr, asr #24
    456c:	10000000 	andne	r0, r0, r0
    4570:	00277a01 	eoreq	r7, r7, r1, lsl #20
    4574:	0aa30100 	beq	fe8c497c <SCS_BASE+0x1e8b697c>
    4578:	06ed0101 	strbteq	r0, [sp], r1, lsl #2
    457c:	8d110000 	ldchi	0, cr0, [r1]
    4580:	01000022 	tsteq	r0, r2, lsr #32
    4584:	051e0aa2 	ldreq	r0, [lr, #-2722]
    4588:	d7110000 	ldrle	r0, [r1, -r0]
    458c:	01000026 	tsteq	r0, r6, lsr #32
    4590:	00410aa2 	subeq	r0, r1, r2, lsr #21
    4594:	14000000 	strne	r0, [r0]
    4598:	000028df 	ldrdeq	r2, [r0], -pc
    459c:	010c7c01 	tsteq	ip, r1, lsl #24
    45a0:	00075001 	andeq	r5, r7, r1
    45a4:	228d1100 	addcs	r1, sp, #0	; 0x0
    45a8:	7a010000 	bvc	445b0 <__Stack_Size+0x441b0>
    45ac:	00051e0c 	andeq	r1, r5, ip, lsl #28
    45b0:	27f31100 	ldrbcs	r1, [r3, r0, lsl #2]!
    45b4:	7a010000 	bvc	445bc <__Stack_Size+0x441bc>
    45b8:	0000410c 	andeq	r4, r0, ip, lsl #2
    45bc:	278e1100 	strcs	r1, [lr, r0, lsl #2]
    45c0:	7a010000 	bvc	445c8 <__Stack_Size+0x441c8>
    45c4:	0000410c 	andeq	r4, r0, ip, lsl #2
    45c8:	29d01100 	ldmibcs	r0, {r8, ip}^
    45cc:	7b010000 	blvc	445d4 <__Stack_Size+0x441d4>
    45d0:	0000410c 	andeq	r4, r0, ip, lsl #2
    45d4:	26fa1200 	ldrbtcs	r1, [sl], r0, lsl #4
    45d8:	7d010000 	stcvc	0, cr0, [r1]
    45dc:	0000410c 	andeq	r4, r0, ip, lsl #2
    45e0:	24101200 	ldrcs	r1, [r0], #-512
    45e4:	7d010000 	stcvc	0, cr0, [r1]
    45e8:	0000410c 	andeq	r4, r0, ip, lsl #2
    45ec:	6d741500 	cfldr64vs	mvdx1, [r4]
    45f0:	7d010070 	stcvc	0, cr0, [r1, #-448]
    45f4:	0000410c 	andeq	r4, r0, ip, lsl #2
    45f8:	01100000 	tsteq	r0, r0
    45fc:	000022b3 	strheq	r2, [r0], -r3
    4600:	010abf01 	tsteq	sl, r1, lsl #30
    4604:	00077801 	andeq	r7, r7, r1, lsl #16
    4608:	228d1100 	addcs	r1, sp, #0	; 0x0
    460c:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    4610:	00051e0a 	andeq	r1, r5, sl, lsl #28
    4614:	26d71100 	ldrbcs	r1, [r7], r0, lsl #2
    4618:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    461c:	0000410a 	andeq	r4, r0, sl, lsl #2
    4620:	01160000 	tsteq	r6, r0
    4624:	000025a5 	andeq	r2, r0, r5, lsr #11
    4628:	e001c701 	and	ip, r1, r1, lsl #14
    462c:	3408004f 	strcc	r0, [r8], #-79
    4630:	dd080050 	stcle	0, cr0, [r8, #-320]
    4634:	b000001a 	andlt	r0, r0, sl, lsl r0
    4638:	17000007 	strne	r0, [r0, -r7]
    463c:	0000228d 	andeq	r2, r0, sp, lsl #5
    4640:	051ec601 	ldreq	ip, [lr, #-1537]
    4644:	1afc0000 	bne	fff0464c <SCS_BASE+0x1fef664c>
    4648:	69170000 	ldmdbvs	r7, {}
    464c:	01000024 	tsteq	r0, r4, lsr #32
    4650:	0007b0c6 	andeq	fp, r7, r6, asr #1
    4654:	001b1b00 	andseq	r1, fp, r0, lsl #22
    4658:	04130000 	ldreq	r0, [r3]
    465c:	00000373 	andeq	r0, r0, r3, ror r3
    4660:	22320116 	eorscs	r0, r2, #-2147483643	; 0x80000005
    4664:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    4668:	00503401 	subseq	r3, r0, r1, lsl #8
    466c:	0050e408 	subseq	lr, r0, r8, lsl #8
    4670:	001b3908 	andseq	r3, fp, r8, lsl #18
    4674:	00081b00 	andeq	r1, r8, r0, lsl #22
    4678:	228d1700 	addcs	r1, sp, #0	; 0x0
    467c:	ed010000 	stc	0, cr0, [r1]
    4680:	0000051e 	andeq	r0, r0, lr, lsl r5
    4684:	00001b64 	andeq	r1, r0, r4, ror #22
    4688:	00267b17 	eoreq	r7, r6, r7, lsl fp
    468c:	1bed0100 	blne	ffb44a94 <SCS_BASE+0x1fb36a94>
    4690:	83000008 	movwhi	r0, #8	; 0x8
    4694:	1800001b 	stmdane	r0, {r0, r1, r3, r4}
    4698:	000027b6 	strheq	r2, [r0], -r6
    469c:	0041ef01 	subeq	lr, r1, r1, lsl #30
    46a0:	1ba10000 	blne	fe8446a8 <SCS_BASE+0x1e8366a8>
    46a4:	10180000 	andsne	r0, r8, r0
    46a8:	01000024 	tsteq	r0, r4, lsr #32
    46ac:	000041ef 	andeq	r4, r0, pc, ror #3
    46b0:	001bbf00 	andseq	fp, fp, r0, lsl #30
    46b4:	299b1800 	ldmibcs	fp, {fp, ip}
    46b8:	ef010000 	svc	0x00010000
    46bc:	00000041 	andeq	r0, r0, r1, asr #32
    46c0:	00001c14 	andeq	r1, r0, r4, lsl ip
    46c4:	f7041300 	undefined instruction 0xf7041300
    46c8:	19000003 	stmdbne	r0, {r0, r1}
    46cc:	0022f601 	eoreq	pc, r2, r1, lsl #12
    46d0:	01490100 	cmpeq	r9, r0, lsl #2
    46d4:	0050e401 	subseq	lr, r0, r1, lsl #8
    46d8:	00519c08 	subseq	r9, r1, r8, lsl #24
    46dc:	001c4808 	andseq	r4, ip, r8, lsl #16
    46e0:	00088c00 	andeq	r8, r8, r0, lsl #24
    46e4:	228d1a00 	addcs	r1, sp, #0	; 0x0
    46e8:	48010000 	stmdami	r1, {}
    46ec:	00051e01 	andeq	r1, r5, r1, lsl #28
    46f0:	001c7300 	andseq	r7, ip, r0, lsl #6
    46f4:	267b1a00 	ldrbtcs	r1, [fp], -r0, lsl #20
    46f8:	48010000 	stmdami	r1, {}
    46fc:	00081b01 	andeq	r1, r8, r1, lsl #22
    4700:	001c9200 	andseq	r9, ip, r0, lsl #4
    4704:	27b61b00 	ldrcs	r1, [r6, r0, lsl #22]!
    4708:	4a010000 	bmi	44710 <__Stack_Size+0x44310>
    470c:	00004101 	andeq	r4, r0, r1, lsl #2
    4710:	001cb000 	andseq	fp, ip, r0
    4714:	24101b00 	ldrcs	r1, [r0], #-2816
    4718:	4a010000 	bmi	44720 <__Stack_Size+0x44320>
    471c:	00004101 	andeq	r4, r0, r1, lsl #2
    4720:	001cd900 	andseq	sp, ip, r0, lsl #18
    4724:	299b1b00 	ldmibcs	fp, {r8, r9, fp, ip}
    4728:	4a010000 	bmi	44730 <__Stack_Size+0x44330>
    472c:	00004101 	andeq	r4, r0, r1, lsl #2
    4730:	001d2300 	andseq	r2, sp, r0, lsl #6
    4734:	01190000 	tsteq	r9, r0
    4738:	000028f7 	strdeq	r2, [r0], -r7
    473c:	0101a501 	tsteq	r1, r1, lsl #10
    4740:	0800519c 	stmdaeq	r0, {r2, r3, r4, r7, r8, ip, lr}
    4744:	08005250 	stmdaeq	r0, {r4, r6, r9, ip, lr}
    4748:	00001d57 	andeq	r1, r0, r7, asr sp
    474c:	000008f7 	strdeq	r0, [r0], -r7
    4750:	00228d1a 	eoreq	r8, r2, sl, lsl sp
    4754:	01a40100 	undefined instruction 0x01a40100
    4758:	0000051e 	andeq	r0, r0, lr, lsl r5
    475c:	00001d82 	andeq	r1, r0, r2, lsl #27
    4760:	00267b1a 	eoreq	r7, r6, sl, lsl fp
    4764:	01a40100 	undefined instruction 0x01a40100
    4768:	0000081b 	andeq	r0, r0, fp, lsl r8
    476c:	00001da1 	andeq	r1, r0, r1, lsr #27
    4770:	0027b61b 	eoreq	fp, r7, fp, lsl r6
    4774:	01a60100 	undefined instruction 0x01a60100
    4778:	00000041 	andeq	r0, r0, r1, asr #32
    477c:	00001dbf 	strheq	r1, [r0], -pc
    4780:	0024101b 	eoreq	r1, r4, fp, lsl r0
    4784:	01a60100 	undefined instruction 0x01a60100
    4788:	00000041 	andeq	r0, r0, r1, asr #32
    478c:	00001ddd 	ldrdeq	r1, [r0], -sp
    4790:	00299b1b 	eoreq	r9, r9, fp, lsl fp
    4794:	01a60100 	undefined instruction 0x01a60100
    4798:	00000041 	andeq	r0, r0, r1, asr #32
    479c:	00001e27 	andeq	r1, r0, r7, lsr #28
    47a0:	4c011900 	stcmi	9, cr1, [r1], {0}
    47a4:	01000026 	tsteq	r0, r6, lsr #32
    47a8:	50010201 	andpl	r0, r1, r1, lsl #4
    47ac:	e4080052 	str	r0, [r8], #-82
    47b0:	5b080052 	blpl	204900 <__Stack_Size+0x204500>
    47b4:	6200001e 	andvs	r0, r0, #30	; 0x1e
    47b8:	1a000009 	bne	47e4 <__Stack_Size+0x43e4>
    47bc:	0000228d 	andeq	r2, r0, sp, lsl #5
    47c0:	1e020001 	cdpne	0, 0, cr0, cr2, cr1, {0}
    47c4:	86000005 	strhi	r0, [r0], -r5
    47c8:	1a00001e 	bne	4848 <__Stack_Size+0x4448>
    47cc:	0000267b 	andeq	r2, r0, fp, ror r6
    47d0:	1b020001 	blne	847dc <__Stack_Size+0x843dc>
    47d4:	a5000008 	strge	r0, [r0, #-8]
    47d8:	1b00001e 	blne	4858 <__Stack_Size+0x4458>
    47dc:	000027b6 	strheq	r2, [r0], -r6
    47e0:	41020201 	tstmi	r2, r1, lsl #4
    47e4:	c3000000 	movwgt	r0, #0	; 0x0
    47e8:	1b00001e 	blne	4868 <__Stack_Size+0x4468>
    47ec:	00002410 	andeq	r2, r0, r0, lsl r4
    47f0:	41020201 	tstmi	r2, r1, lsl #4
    47f4:	ec000000 	stc	0, cr0, [r0], {0}
    47f8:	1b00001e 	blne	4878 <__Stack_Size+0x4478>
    47fc:	0000299b 	muleq	r0, fp, r9
    4800:	41020201 	tstmi	r2, r1, lsl #4
    4804:	21000000 	tstcs	r0, r0
    4808:	0000001f 	andeq	r0, r0, pc, lsl r0
    480c:	29c50119 	stmibcs	r5, {r0, r3, r4, r8}^
    4810:	4a010000 	bmi	44818 <__Stack_Size+0x44418>
    4814:	52e40102 	rscpl	r0, r4, #-2147483648	; 0x80000000
    4818:	54500800 	ldrbpl	r0, [r0], #-2048
    481c:	1f4a0800 	svcne	0x004a0800
    4820:	0b280000 	bleq	a04828 <__Stack_Size+0xa04428>
    4824:	8d1a0000 	ldchi	0, cr0, [sl]
    4828:	01000022 	tsteq	r0, r2, lsr #32
    482c:	051e0249 	ldreq	r0, [lr, #-585]
    4830:	1f690000 	svcne	0x00690000
    4834:	df1a0000 	svcle	0x001a0000
    4838:	01000025 	tsteq	r0, r5, lsr #32
    483c:	0b280249 	bleq	a05168 <__Stack_Size+0xa04d68>
    4840:	1f870000 	svcne	0x00870000
    4844:	bb1c0000 	bllt	70484c <__Stack_Size+0x70444c>
    4848:	28000005 	stmdacs	r0, {r0, r2}
    484c:	01000001 	tsteq	r0, r1
    4850:	09d90256 	ldmibeq	r9, {r1, r2, r4, r6, r9}^
    4854:	ed1d0000 	ldc	0, cr0, [sp]
    4858:	1d000005 	stcne	0, cr0, [r0, #-20]
    485c:	000005e1 	andeq	r0, r0, r1, ror #11
    4860:	0005d51d 	andeq	sp, r5, sp, lsl r5
    4864:	05c91d00 	strbeq	r1, [r9, #3328]
    4868:	481e0000 	ldmdami	lr, {}
    486c:	1f000001 	svcne	0x00000001
    4870:	000005f9 	strdeq	r0, [r0], -r9
    4874:	00001fa5 	andeq	r1, r0, r5, lsr #31
    4878:	0006051f 	andeq	r0, r6, pc, lsl r5
    487c:	001fb800 	andseq	fp, pc, r0, lsl #16
    4880:	20000000 	andcs	r0, r0, r0
    4884:	00000612 	andeq	r0, r0, r2, lsl r6
    4888:	0800532a 	stmdaeq	r0, {r1, r3, r5, r8, r9, ip, lr}
    488c:	00000168 	andeq	r0, r0, r8, ror #2
    4890:	f8025b01 	undefined instruction 0xf8025b01
    4894:	1d000009 	stcne	0, cr0, [r0, #-36]
    4898:	0000062d 	andeq	r0, r0, sp, lsr #12
    489c:	0006211d 	andeq	r2, r6, sp, lsl r1
    48a0:	581c0000 	ldmdapl	ip, {}
    48a4:	80000005 	andhi	r0, r0, r5
    48a8:	01000001 	tsteq	r0, r1
    48ac:	0a3a0260 	beq	e85234 <__Stack_Size+0xe84e34>
    48b0:	8a1d0000 	bhi	7448b8 <__Stack_Size+0x7444b8>
    48b4:	1d000005 	stcne	0, cr0, [r0, #-20]
    48b8:	0000057e 	andeq	r0, r0, lr, ror r5
    48bc:	0005721d 	andeq	r7, r5, sp, lsl r2
    48c0:	05661d00 	strbeq	r1, [r6, #-3328]!
    48c4:	a01e0000 	andsge	r0, lr, r0
    48c8:	1f000001 	svcne	0x00000001
    48cc:	00000596 	muleq	r0, r6, r5
    48d0:	00001fcb 	andeq	r1, r0, fp, asr #31
    48d4:	0005a21f 	andeq	sl, r5, pc, lsl r2
    48d8:	001ff400 	andseq	pc, pc, r0, lsl #8
    48dc:	05ae2100 	streq	r2, [lr, #256]!
    48e0:	00000000 	andeq	r0, r0, r0
    48e4:	00063a20 	andeq	r3, r6, r0, lsr #20
    48e8:	00538600 	subseq	r8, r3, r0, lsl #12
    48ec:	0001c008 	andeq	ip, r1, r8
    48f0:	02650100 	rsbeq	r0, r5, #0	; 0x0
    48f4:	00000a59 	andeq	r0, r0, r9, asr sl
    48f8:	0006551d 	andeq	r5, r6, sp, lsl r5
    48fc:	06491d00 	strbeq	r1, [r9], -r0, lsl #26
    4900:	22000000 	andcs	r0, r0, #0	; 0x0
    4904:	00000662 	andeq	r0, r0, r2, ror #12
    4908:	080053ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, ip, lr}
    490c:	080053e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, ip, lr}
    4910:	a3026a01 	movwge	r6, #10753	; 0x2a01
    4914:	1d00000a 	stcne	0, cr0, [r0, #-40]
    4918:	00000694 	muleq	r0, r4, r6
    491c:	0006881d 	andeq	r8, r6, sp, lsl r8
    4920:	067c1d00 	ldrbteq	r1, [ip], -r0, lsl #26
    4924:	701d0000 	andsvc	r0, sp, r0
    4928:	23000006 	movwcs	r0, #6	; 0x6
    492c:	080053ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, ip, lr}
    4930:	080053e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, ip, lr}
    4934:	0006a01f 	andeq	sl, r6, pc, lsl r0
    4938:	00200700 	eoreq	r0, r0, r0, lsl #14
    493c:	06ac1f00 	strteq	r1, [ip], r0, lsl #30
    4940:	201a0000 	andscs	r0, sl, r0
    4944:	b8210000 	stmdalt	r1!, {}
    4948:	00000006 	andeq	r0, r0, r6
    494c:	06c52000 	strbeq	r2, [r5], r0
    4950:	53e40000 	mvnpl	r0, #0	; 0x0
    4954:	01d80800 	bicseq	r0, r8, r0, lsl #16
    4958:	6f010000 	svcvs	0x00010000
    495c:	000ac202 	andeq	ip, sl, r2, lsl #4
    4960:	06e01d00 	strbteq	r1, [r0], r0, lsl #26
    4964:	d41d0000 	ldrle	r0, [sp]
    4968:	00000006 	andeq	r0, r0, r6
    496c:	0006ed22 	andeq	lr, r6, r2, lsr #26
    4970:	0053fa00 	subseq	pc, r3, r0, lsl #20
    4974:	00543408 	subseq	r3, r4, r8, lsl #8
    4978:	02740108 	rsbseq	r0, r4, #2	; 0x2
    497c:	00000b0c 	andeq	r0, r0, ip, lsl #22
    4980:	00071f1d 	andeq	r1, r7, sp, lsl pc
    4984:	07131d00 	ldreq	r1, [r3, -r0, lsl #26]
    4988:	071d0000 	ldreq	r0, [sp, -r0]
    498c:	1d000007 	stcne	0, cr0, [r0, #-28]
    4990:	000006fb 	strdeq	r0, [r0], -fp
    4994:	0053fa23 	subseq	pc, r3, r3, lsr #20
    4998:	00543408 	subseq	r3, r4, r8, lsl #8
    499c:	072b1f08 	streq	r1, [fp, -r8, lsl #30]!
    49a0:	202d0000 	eorcs	r0, sp, r0
    49a4:	371f0000 	ldrcc	r0, [pc, -r0]
    49a8:	40000007 	andmi	r0, r0, r7
    49ac:	21000020 	tstcs	r0, r0, lsr #32
    49b0:	00000743 	andeq	r0, r0, r3, asr #14
    49b4:	50240000 	eorpl	r0, r4, r0
    49b8:	34000007 	strcc	r0, [r0], #-7
    49bc:	f0080054 	undefined instruction 0xf0080054
    49c0:	01000001 	tsteq	r0, r1
    49c4:	6b1d0279 	blvs	7453b0 <__Stack_Size+0x744fb0>
    49c8:	1d000007 	stcne	0, cr0, [r0, #-28]
    49cc:	0000075f 	andeq	r0, r0, pc, asr r7
    49d0:	04130000 	ldreq	r0, [r3]
    49d4:	00000451 	andeq	r0, r0, r1, asr r4
    49d8:	297c0119 	ldmdbcs	ip!, {r0, r3, r4, r8}^
    49dc:	8b010000 	blhi	449e4 <__Stack_Size+0x445e4>
    49e0:	54500102 	ldrbpl	r0, [r0], #-258
    49e4:	55aa0800 	strpl	r0, [sl, #2048]!
    49e8:	20530800 	subscs	r0, r3, r0, lsl #16
    49ec:	0d170000 	ldceq	0, cr0, [r7]
    49f0:	8d250000 	stchi	0, cr0, [r5]
    49f4:	01000022 	tsteq	r0, r2, lsr #32
    49f8:	051e028a 	ldreq	r0, [lr, #-650]
    49fc:	50010000 	andpl	r0, r1, r0
    4a00:	0025df1a 	eoreq	sp, r5, sl, lsl pc
    4a04:	028a0100 	addeq	r0, sl, #0	; 0x0
    4a08:	00000b28 	andeq	r0, r0, r8, lsr #22
    4a0c:	00002072 	andeq	r2, r0, r2, ror r0
    4a10:	00281526 	eoreq	r1, r8, r6, lsr #10
    4a14:	028c0100 	addeq	r0, ip, #0	; 0x0
    4a18:	00000041 	andeq	r0, r0, r1, asr #32
    4a1c:	32265701 	eorcc	r5, r6, #262144	; 0x40000
    4a20:	01000027 	tsteq	r0, r7, lsr #32
    4a24:	0041028d 	subeq	r0, r1, sp, lsl #5
    4a28:	56010000 	strpl	r0, [r1], -r0
    4a2c:	0005bb22 	andeq	fp, r5, r2, lsr #22
    4a30:	00547400 	subseq	r7, r4, r0, lsl #8
    4a34:	0054a608 	subseq	sl, r4, r8, lsl #12
    4a38:	02a90108 	adceq	r0, r9, #2	; 0x2
    4a3c:	00000bc7 	andeq	r0, r0, r7, asr #23
    4a40:	0005ed1d 	andeq	lr, r5, sp, lsl sp
    4a44:	05e11d00 	strbeq	r1, [r1, #3328]!
    4a48:	d51d0000 	ldrle	r0, [sp]
    4a4c:	1d000005 	stcne	0, cr0, [r0, #-20]
    4a50:	000005c9 	andeq	r0, r0, r9, asr #11
    4a54:	00547423 	subseq	r7, r4, r3, lsr #8
    4a58:	0054a608 	subseq	sl, r4, r8, lsl #12
    4a5c:	05f91f08 	ldrbeq	r1, [r9, #3848]!
    4a60:	20900000 	addscs	r0, r0, r0
    4a64:	051f0000 	ldreq	r0, [pc, #0]	; 4a6c <__Stack_Size+0x466c>
    4a68:	a3000006 	movwge	r0, #6	; 0x6
    4a6c:	00000020 	andeq	r0, r0, r0, lsr #32
    4a70:	06122000 	ldreq	r2, [r2], -r0
    4a74:	54a60000 	strtpl	r0, [r6]
    4a78:	02080800 	andeq	r0, r8, #0	; 0x0
    4a7c:	ad010000 	stcge	0, cr0, [r1]
    4a80:	000be602 	andeq	lr, fp, r2, lsl #12
    4a84:	062d1d00 	strteq	r1, [sp], -r0, lsl #26
    4a88:	211d0000 	tstcs	sp, r0
    4a8c:	00000006 	andeq	r0, r0, r6
    4a90:	00055822 	andeq	r5, r5, r2, lsr #16
    4a94:	0054be00 	subseq	fp, r4, r0, lsl #28
    4a98:	0054f408 	subseq	pc, r4, r8, lsl #8
    4a9c:	02b00108 	adcseq	r0, r0, #2	; 0x2
    4aa0:	00000c30 	andeq	r0, r0, r0, lsr ip
    4aa4:	00058a1d 	andeq	r8, r5, sp, lsl sl
    4aa8:	057e1d00 	ldrbeq	r1, [lr, #-3328]!
    4aac:	721d0000 	andsvc	r0, sp, #0	; 0x0
    4ab0:	1d000005 	stcne	0, cr0, [r0, #-20]
    4ab4:	00000566 	andeq	r0, r0, r6, ror #10
    4ab8:	0054be23 	subseq	fp, r4, r3, lsr #28
    4abc:	0054f408 	subseq	pc, r4, r8, lsl #8
    4ac0:	05961f08 	ldreq	r1, [r6, #3848]
    4ac4:	20b60000 	adcscs	r0, r6, r0
    4ac8:	a21f0000 	andsge	r0, pc, #0	; 0x0
    4acc:	d4000005 	strle	r0, [r0], #-5
    4ad0:	21000020 	tstcs	r0, r0, lsr #32
    4ad4:	000005ae 	andeq	r0, r0, lr, lsr #11
    4ad8:	3a220000 	bcc	884ae0 <__Stack_Size+0x8846e0>
    4adc:	f4000006 	vst4.8	{d0-d3}, [r0], r6
    4ae0:	0c080054 	stceq	0, cr0, [r8], {84}
    4ae4:	01080055 	qaddeq	r0, r5, r8
    4ae8:	0c4f02b3 	sfmeq	f0, 2, [pc], {179}
    4aec:	551d0000 	ldrpl	r0, [sp]
    4af0:	1d000006 	stcne	0, cr0, [r0, #-24]
    4af4:	00000649 	andeq	r0, r0, r9, asr #12
    4af8:	05582200 	ldrbeq	r2, [r8, #-512]
    4afc:	550c0000 	strpl	r0, [ip]
    4b00:	55460800 	strbpl	r0, [r6, #-2048]
    4b04:	b8010800 	stmdalt	r1, {fp}
    4b08:	000c9902 	andeq	r9, ip, r2, lsl #18
    4b0c:	058a1d00 	streq	r1, [sl, #3328]
    4b10:	7e1d0000 	wxorvc	wr0, wr13, wr0
    4b14:	1d000005 	stcne	0, cr0, [r0, #-20]
    4b18:	00000572 	andeq	r0, r0, r2, ror r5
    4b1c:	0005661d 	andeq	r6, r5, sp, lsl r6
    4b20:	550c2300 	strpl	r2, [ip, #-768]
    4b24:	55460800 	strbpl	r0, [r6, #-2048]
    4b28:	961f0800 	ldrls	r0, [pc], -r0, lsl #16
    4b2c:	f2000005 	vhadd.s8	d0, d0, d5
    4b30:	1f000020 	svcne	0x00000020
    4b34:	000005a2 	andeq	r0, r0, r2, lsr #11
    4b38:	0000211b 	andeq	r2, r0, fp, lsl r1
    4b3c:	0005ae21 	andeq	sl, r5, r1, lsr #28
    4b40:	20000000 	andcs	r0, r0, r0
    4b44:	0000063a 	andeq	r0, r0, sl, lsr r6
    4b48:	08005546 	stmdaeq	r0, {r1, r2, r6, r8, sl, ip, lr}
    4b4c:	00000220 	andeq	r0, r0, r0, lsr #4
    4b50:	b802bc01 	stmdalt	r2, {r0, sl, fp, ip, sp, pc}
    4b54:	1d00000c 	stcne	0, cr0, [r0, #-48]
    4b58:	00000655 	andeq	r0, r0, r5, asr r6
    4b5c:	0006491d 	andeq	r4, r6, sp, lsl r9
    4b60:	bb220000 	bllt	884b68 <__Stack_Size+0x884768>
    4b64:	62000005 	andvs	r0, r0, #5	; 0x5
    4b68:	94080055 	strls	r0, [r8], #-85
    4b6c:	01080055 	qaddeq	r0, r5, r8
    4b70:	0cfb02bf 	lfmeq	f0, 2, [fp], #764
    4b74:	ed1d0000 	ldc	0, cr0, [sp]
    4b78:	1d000005 	stcne	0, cr0, [r0, #-20]
    4b7c:	000005e1 	andeq	r0, r0, r1, ror #11
    4b80:	0005d51d 	andeq	sp, r5, sp, lsl r5
    4b84:	05c91d00 	strbeq	r1, [r9, #3328]
    4b88:	62230000 	eorvs	r0, r3, #0	; 0x0
    4b8c:	94080055 	strls	r0, [r8], #-85
    4b90:	1f080055 	svcne	0x00080055
    4b94:	000005f9 	strdeq	r0, [r0], -r9
    4b98:	0000212e 	andeq	r2, r0, lr, lsr #2
    4b9c:	00060527 	andeq	r0, r6, r7, lsr #10
    4ba0:	00520100 	subseq	r0, r2, r0, lsl #2
    4ba4:	06122800 	ldreq	r2, [r2], -r0, lsl #16
    4ba8:	55940000 	ldrpl	r0, [r4]
    4bac:	55a80800 	strpl	r0, [r8, #2048]!
    4bb0:	c2010800 	andgt	r0, r1, #0	; 0x0
    4bb4:	062d1d02 	strteq	r1, [sp], -r2, lsl #26
    4bb8:	211d0000 	tstcs	sp, r0
    4bbc:	00000006 	andeq	r0, r0, r6
    4bc0:	28012900 	stmdacs	r1, {r8, fp, sp}
    4bc4:	01000028 	tsteq	r0, r8, lsr #32
    4bc8:	ac0102d2 	sfmge	f0, 4, [r1], {210}
    4bcc:	ce080055 	mcrgt	0, 0, r0, cr8, cr5, {2}
    4bd0:	01080055 	qaddeq	r0, r5, r8
    4bd4:	000d4c5d 	andeq	r4, sp, sp, asr ip
    4bd8:	228d2500 	addcs	r2, sp, #0	; 0x0
    4bdc:	d1010000 	tstle	r1, r0
    4be0:	00051e02 	andeq	r1, r5, r2, lsl #28
    4be4:	25500100 	ldrbcs	r0, [r0, #-256]
    4be8:	000023fd 	strdeq	r2, [r0], -sp
    4bec:	4c02d101 	stfmid	f5, [r2], {1}
    4bf0:	0100000d 	tsteq	r0, sp
    4bf4:	04130051 	ldreq	r0, [r3], #-81
    4bf8:	000004c7 	andeq	r0, r0, r7, asr #9
    4bfc:	28a70129 	stmiacs	r7!, {r0, r3, r5, r8}
    4c00:	ef010000 	svc	0x00010000
    4c04:	55d00102 	ldrbpl	r0, [r0, #258]
    4c08:	55e60800 	strbpl	r0, [r6, #2048]!
    4c0c:	5d010800 	stcpl	8, cr0, [r1]
    4c10:	00000d79 	andeq	r0, r0, r9, ror sp
    4c14:	00246925 	eoreq	r6, r4, r5, lsr #18
    4c18:	02ee0100 	rsceq	r0, lr, #0	; 0x0
    4c1c:	000007b0 	strheq	r0, [r0], -r0
    4c20:	29005001 	stmdbcs	r0, {r0, ip, lr}
    4c24:	0021e301 	eoreq	lr, r1, r1, lsl #6
    4c28:	03010100 	movweq	r0, #4352	; 0x1100
    4c2c:	0055e801 	subseq	lr, r5, r1, lsl #16
    4c30:	0055fe08 	subseq	pc, r5, r8, lsl #28
    4c34:	a05d0108 	subsge	r0, sp, r8, lsl #2
    4c38:	2500000d 	strcs	r0, [r0, #-13]
    4c3c:	0000267b 	andeq	r2, r0, fp, ror r6
    4c40:	1b030001 	blne	c4c4c <__Stack_Size+0xc484c>
    4c44:	01000008 	tsteq	r0, r8
    4c48:	01290050 	qsubeq	r0, r0, r9
    4c4c:	0000209c 	muleq	r0, ip, r0
    4c50:	01031601 	tsteq	r3, r1, lsl #12
    4c54:	08005600 	stmdaeq	r0, {r9, sl, ip, lr}
    4c58:	08005618 	stmdaeq	r0, {r3, r4, r9, sl, ip, lr}
    4c5c:	0dc75d01 	stcleq	13, cr5, [r7, #4]
    4c60:	df250000 	svcle	0x00250000
    4c64:	01000025 	tsteq	r0, r5, lsr #32
    4c68:	0b280315 	bleq	a058c4 <__Stack_Size+0xa054c4>
    4c6c:	50010000 	andpl	r0, r1, r0
    4c70:	30012900 	andcc	r2, r1, r0, lsl #18
    4c74:	01000029 	tsteq	r0, r9, lsr #32
    4c78:	18010328 	stmdane	r1, {r3, r5, r8, r9}
    4c7c:	2c080056 	stccs	0, cr0, [r8], {86}
    4c80:	01080056 	qaddeq	r0, r6, r8
    4c84:	000dee5d 	andeq	lr, sp, sp, asr lr
    4c88:	23fd2500 	mvnscs	r2, #0	; 0x0
    4c8c:	27010000 	strcs	r0, [r1, -r0]
    4c90:	000d4c03 	andeq	r4, sp, r3, lsl #24
    4c94:	00500100 	subseq	r0, r0, r0, lsl #2
    4c98:	29bd0129 	ldmibcs	sp!, {r0, r3, r5, r8}
    4c9c:	3d010000 	stccc	0, cr0, [r1]
    4ca0:	562c0103 	strtpl	r0, [ip], -r3, lsl #2
    4ca4:	56460800 	strbpl	r0, [r6], -r0, lsl #16
    4ca8:	5d010800 	stcpl	8, cr0, [r1]
    4cac:	00000e23 	andeq	r0, r0, r3, lsr #28
    4cb0:	00228d25 	eoreq	r8, r2, r5, lsr #26
    4cb4:	033c0100 	teqeq	ip, #0	; 0x0
    4cb8:	0000051e 	andeq	r0, r0, lr, lsl r5
    4cbc:	7c255001 	stcvc	0, cr5, [r5], #-4
    4cc0:	01000011 	tsteq	r0, r1, lsl r0
    4cc4:	00a9033c 	adceq	r0, r9, ip, lsr r3
    4cc8:	51010000 	tstpl	r1, r0
    4ccc:	02012900 	andeq	r2, r1, #0	; 0x0
    4cd0:	01000028 	tsteq	r0, r8, lsr #32
    4cd4:	48010358 	stmdami	r1, {r3, r4, r6, r8, r9}
    4cd8:	64080056 	strvs	r0, [r8], #-86
    4cdc:	01080056 	qaddeq	r0, r6, r8
    4ce0:	000e585d 	andeq	r5, lr, sp, asr r8
    4ce4:	228d2500 	addcs	r2, sp, #0	; 0x0
    4ce8:	57010000 	strpl	r0, [r1, -r0]
    4cec:	00051e03 	andeq	r1, r5, r3, lsl #28
    4cf0:	25500100 	ldrbcs	r0, [r0, #-256]
    4cf4:	0000117c 	andeq	r1, r0, ip, ror r1
    4cf8:	a9035701 	stmdbge	r3, {r0, r8, r9, sl, ip, lr}
    4cfc:	01000000 	tsteq	r0, r0
    4d00:	01290051 	qsubeq	r0, r1, r9
    4d04:	000028be 	strheq	r2, [r0], -lr
    4d08:	01037e01 	tsteq	r3, r1, lsl #28
    4d0c:	08005664 	stmdaeq	r0, {r2, r5, r6, r9, sl, ip, lr}
    4d10:	0800567c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip, lr}
    4d14:	0e9b5d01 	cdpeq	13, 9, cr5, cr11, cr1, {0}
    4d18:	8d250000 	stchi	0, cr0, [r5]
    4d1c:	01000022 	tsteq	r0, r2, lsr #32
    4d20:	051e037d 	ldreq	r0, [lr, #-893]
    4d24:	50010000 	andpl	r0, r1, r0
    4d28:	0029a225 	eoreq	sl, r9, r5, lsr #4
    4d2c:	037d0100 	cmneq	sp, #0	; 0x0
    4d30:	00000041 	andeq	r0, r0, r1, asr #32
    4d34:	7c255101 	stfvcs	f5, [r5], #-4
    4d38:	01000011 	tsteq	r0, r1, lsl r0
    4d3c:	00a9037d 	adceq	r0, r9, sp, ror r3
    4d40:	52010000 	andpl	r0, r1, #0	; 0x0
    4d44:	53012900 	movwpl	r2, #6400	; 0x1900
    4d48:	01000025 	tsteq	r0, r5, lsr #32
    4d4c:	7c0103a1 	stcvc	3, cr0, [r1], {161}
    4d50:	80080056 	andhi	r0, r8, r6, asr r0
    4d54:	01080056 	qaddeq	r0, r6, r8
    4d58:	000ed05d 	andeq	sp, lr, sp, asr r0
    4d5c:	228d2500 	addcs	r2, sp, #0	; 0x0
    4d60:	a0010000 	andge	r0, r1, r0
    4d64:	00051e03 	andeq	r1, r5, r3, lsl #28
    4d68:	25500100 	ldrbcs	r0, [r0, #-256]
    4d6c:	000026e1 	andeq	r2, r0, r1, ror #13
    4d70:	4103a001 	tstmi	r3, r1
    4d74:	01000000 	tsteq	r0, r0
    4d78:	01290051 	qsubeq	r0, r1, r9
    4d7c:	000023b8 	strheq	r2, [r0], -r8
    4d80:	0103c001 	tsteq	r3, r1
    4d84:	08005680 	stmdaeq	r0, {r7, r9, sl, ip, lr}
    4d88:	08005688 	stmdaeq	r0, {r3, r7, r9, sl, ip, lr}
    4d8c:	0f155d01 	svceq	0x00155d01
    4d90:	8d250000 	stchi	0, cr0, [r5]
    4d94:	01000022 	tsteq	r0, r2, lsr #32
    4d98:	051e03bf 	ldreq	r0, [lr, #-959]
    4d9c:	50010000 	andpl	r0, r1, r0
    4da0:	00218525 	eoreq	r8, r1, r5, lsr #10
    4da4:	03bf0100 	undefined instruction 0x03bf0100
    4da8:	00000041 	andeq	r0, r0, r1, asr #32
    4dac:	551a5101 	ldrpl	r5, [sl, #-257]
    4db0:	01000023 	tsteq	r0, r3, lsr #32
    4db4:	004103bf 	strheq	r0, [r1], #-63
    4db8:	21410000 	cmpcs	r1, r0
    4dbc:	29000000 	stmdbcs	r0, {}
    4dc0:	00289c01 	eoreq	r9, r8, r1, lsl #24
    4dc4:	03dd0100 	bicseq	r0, sp, #0	; 0x0
    4dc8:	00568801 	subseq	r8, r6, r1, lsl #16
    4dcc:	0056a008 	subseq	sl, r6, r8
    4dd0:	585d0108 	ldmdapl	sp, {r3, r8}^
    4dd4:	2500000f 	strcs	r0, [r0, #-15]
    4dd8:	0000228d 	andeq	r2, r0, sp, lsl #5
    4ddc:	1e03dc01 	cdpne	12, 0, cr13, cr3, cr1, {0}
    4de0:	01000005 	tsteq	r0, r5
    4de4:	24b52550 	ldrtcs	r2, [r5], #1360
    4de8:	dc010000 	stcle	0, cr0, [r1], {0}
    4dec:	00004103 	andeq	r4, r0, r3, lsl #2
    4df0:	25510100 	ldrbcs	r0, [r1, #-256]
    4df4:	0000117c 	andeq	r1, r0, ip, ror r1
    4df8:	a903dc01 	stmdbge	r3, {r0, sl, fp, ip, lr, pc}
    4dfc:	01000000 	tsteq	r0, r0
    4e00:	01290052 	qsubeq	r0, r2, r9
    4e04:	00002746 	andeq	r2, r0, r6, asr #14
    4e08:	0103f901 	tstpeq	r3, r1, lsl #18
    4e0c:	080056a0 	stmdaeq	r0, {r5, r7, r9, sl, ip, lr}
    4e10:	080056ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sl, ip, lr}
    4e14:	0f7f5d01 	svceq	0x007f5d01
    4e18:	8d250000 	stchi	0, cr0, [r5]
    4e1c:	01000022 	tsteq	r0, r2, lsr #32
    4e20:	051e03f8 	ldreq	r0, [lr, #-1016]
    4e24:	50010000 	andpl	r0, r1, r0
    4e28:	86012900 	strhi	r2, [r1], -r0, lsl #18
    4e2c:	01000023 	tsteq	r0, r3, lsr #32
    4e30:	b001040f 	andlt	r0, r1, pc, lsl #8
    4e34:	ca080056 	bgt	204f94 <__Stack_Size+0x204b94>
    4e38:	01080056 	qaddeq	r0, r6, r8
    4e3c:	000fe45d 	andeq	lr, pc, sp, asr r4
    4e40:	228d2500 	addcs	r2, sp, #0	; 0x0
    4e44:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    4e48:	00051e04 	andeq	r1, r5, r4, lsl #28
    4e4c:	1a500100 	bne	1405254 <__Stack_Size+0x1404e54>
    4e50:	0000216e 	andeq	r2, r0, lr, ror #2
    4e54:	41040e01 	tstmi	r4, r1, lsl #28
    4e58:	54000000 	strpl	r0, [r0]
    4e5c:	28000021 	stmdacs	r0, {r0, r5}
    4e60:	00000524 	andeq	r0, r0, r4, lsr #10
    4e64:	080056b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, ip, lr}
    4e68:	080056be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, ip, lr}
    4e6c:	1d041501 	cfstr32ne	mvfx1, [r4, #-4]
    4e70:	0000053f 	andeq	r0, r0, pc, lsr r5
    4e74:	0005331d 	andeq	r3, r5, sp, lsl r3
    4e78:	56b02300 	ldrtpl	r2, [r0], r0, lsl #6
    4e7c:	56be0800 	ldrtpl	r0, [lr], r0, lsl #16
    4e80:	4b1f0800 	blmi	7c6e88 <__Stack_Size+0x7c6a88>
    4e84:	67000005 	strvs	r0, [r0, -r5]
    4e88:	00000021 	andeq	r0, r0, r1, lsr #32
    4e8c:	01190000 	tsteq	r9, r0
    4e90:	00002847 	andeq	r2, r0, r7, asr #16
    4e94:	01042f01 	tsteq	r4, r1, lsl #30
    4e98:	080056cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip, lr}
    4e9c:	0800575e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}
    4ea0:	00002185 	andeq	r2, r0, r5, lsl #3
    4ea4:	000010f8 	strdeq	r1, [r0], -r8
    4ea8:	00228d25 	eoreq	r8, r2, r5, lsr #26
    4eac:	042d0100 	strteq	r0, [sp], #-256
    4eb0:	0000051e 	andeq	r0, r0, lr, lsl r5
    4eb4:	8c1a5001 	ldchi	0, cr5, [sl], {1}
    4eb8:	01000025 	tsteq	r0, r5, lsr #32
    4ebc:	0041042d 	subeq	r0, r1, sp, lsr #8
    4ec0:	21a40000 	undefined instruction 0x21a40000
    4ec4:	f31a0000 	vhadd.u16	d0, d10, d0
    4ec8:	01000027 	tsteq	r0, r7, lsr #32
    4ecc:	0041042e 	subeq	r0, r1, lr, lsr #8
    4ed0:	21c20000 	biccs	r0, r2, r0
    4ed4:	d41a0000 	ldrle	r0, [sl]
    4ed8:	01000029 	tsteq	r0, r9, lsr #32
    4edc:	0041042e 	subeq	r0, r1, lr, lsr #8
    4ee0:	21e00000 	mvncs	r0, r0
    4ee4:	58220000 	stmdapl	r2!, {}
    4ee8:	d8000005 	stmdale	r0, {r0, r2}
    4eec:	0e080056 	mcreq	0, 0, r0, cr8, cr6, {2}
    4ef0:	01080057 	qaddeq	r0, r7, r8
    4ef4:	10860439 	addne	r0, r6, r9, lsr r4
    4ef8:	8a1d0000 	bhi	744f00 <__Stack_Size+0x744b00>
    4efc:	1d000005 	stcne	0, cr0, [r0, #-20]
    4f00:	0000057e 	andeq	r0, r0, lr, ror r5
    4f04:	0005721d 	andeq	r7, r5, sp, lsl r2
    4f08:	05661d00 	strbeq	r1, [r6, #-3328]!
    4f0c:	d8230000 	stmdale	r3!, {}
    4f10:	0e080056 	mcreq	0, 0, r0, cr8, cr6, {2}
    4f14:	1f080057 	svcne	0x00080057
    4f18:	00000596 	muleq	r0, r6, r5
    4f1c:	000021fe 	strdeq	r2, [r0], -lr
    4f20:	0005a21f 	andeq	sl, r5, pc, lsl r2
    4f24:	00222700 	eoreq	r2, r2, r0, lsl #14
    4f28:	05ae2100 	streq	r2, [lr, #256]!
    4f2c:	00000000 	andeq	r0, r0, r0
    4f30:	0005bb22 	andeq	fp, r5, r2, lsr #22
    4f34:	00570e00 	subseq	r0, r7, r0, lsl #28
    4f38:	00574208 	subseq	r4, r7, r8, lsl #4
    4f3c:	043d0108 	ldrteq	r0, [sp], #-264
    4f40:	000010c9 	andeq	r1, r0, r9, asr #1
    4f44:	0005ed1d 	andeq	lr, r5, sp, lsl sp
    4f48:	05e11d00 	strbeq	r1, [r1, #3328]!
    4f4c:	d51d0000 	ldrle	r0, [sp]
    4f50:	1d000005 	stcne	0, cr0, [r0, #-20]
    4f54:	000005c9 	andeq	r0, r0, r9, asr #11
    4f58:	00570e23 	subseq	r0, r7, r3, lsr #28
    4f5c:	00574208 	subseq	r4, r7, r8, lsl #4
    4f60:	05f91f08 	ldrbeq	r1, [r9, #3848]!
    4f64:	22450000 	subcs	r0, r5, #0	; 0x0
    4f68:	05270000 	streq	r0, [r7]!
    4f6c:	01000006 	tsteq	r0, r6
    4f70:	28000052 	stmdacs	r0, {r1, r4, r6}
    4f74:	00000524 	andeq	r0, r0, r4, lsr #10
    4f78:	08005742 	stmdaeq	r0, {r1, r6, r8, r9, sl, ip, lr}
    4f7c:	08005752 	stmdaeq	r0, {r1, r4, r6, r8, r9, sl, ip, lr}
    4f80:	1d044101 	stfnes	f4, [r4, #-4]
    4f84:	0000053f 	andeq	r0, r0, pc, lsr r5
    4f88:	0005331d 	andeq	r3, r5, sp, lsl r3
    4f8c:	57422300 	strbpl	r2, [r2, -r0, lsl #6]
    4f90:	57520800 	ldrbpl	r0, [r2, -r0, lsl #16]
    4f94:	4b1f0800 	blmi	7c6f9c <__Stack_Size+0x7c6b9c>
    4f98:	58000005 	stmdapl	r0, {r0, r2}
    4f9c:	00000022 	andeq	r0, r0, r2, lsr #32
    4fa0:	01290000 	teqeq	r9, r0
    4fa4:	0000279e 	muleq	r0, lr, r7
    4fa8:	01045d01 	tsteq	r4, r1, lsl #26
    4fac:	08005760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip, lr}
    4fb0:	08005788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip, lr}
    4fb4:	11935d01 	orrsne	r5, r3, r1, lsl #26
    4fb8:	8d250000 	stchi	0, cr0, [r5]
    4fbc:	01000022 	tsteq	r0, r2, lsr #32
    4fc0:	051e045b 	ldreq	r0, [lr, #-1115]
    4fc4:	50010000 	andpl	r0, r1, r0
    4fc8:	0021911a 	eoreq	r9, r1, sl, lsl r1
    4fcc:	045b0100 	ldrbeq	r0, [fp], #-256
    4fd0:	00000041 	andeq	r0, r0, r1, asr #32
    4fd4:	0000226b 	andeq	r2, r0, fp, ror #4
    4fd8:	0029691a 	eoreq	r6, r9, sl, lsl r9
    4fdc:	045b0100 	ldrbeq	r0, [fp], #-256
    4fe0:	00000041 	andeq	r0, r0, r1, asr #32
    4fe4:	0000227e 	andeq	r2, r0, lr, ror r2
    4fe8:	00251d1a 	eoreq	r1, r5, sl, lsl sp
    4fec:	045c0100 	ldrbeq	r0, [ip], #-256
    4ff0:	00000041 	andeq	r0, r0, r1, asr #32
    4ff4:	00002291 	muleq	r0, r1, r2
    4ff8:	00227326 	eoreq	r7, r2, r6, lsr #6
    4ffc:	045e0100 	ldrbeq	r0, [lr], #-256
    5000:	00000041 	andeq	r0, r0, r1, asr #32
    5004:	d2285301 	eorle	r5, r8, #67108864	; 0x4000000
    5008:	60000004 	andvs	r0, r0, r4
    500c:	76080057 	undefined
    5010:	01080057 	qaddeq	r0, r7, r8
    5014:	051d0467 	ldreq	r0, [sp, #-1127]
    5018:	1d000005 	stcne	0, cr0, [r0, #-20]
    501c:	000004f9 	strdeq	r0, [r0], -r9
    5020:	0004ed1d 	andeq	lr, r4, sp, lsl sp
    5024:	04e11d00 	strbteq	r1, [r1], #3328
    5028:	60230000 	eorvs	r0, r3, r0
    502c:	76080057 	undefined
    5030:	27080057 	smlsdcs	r8, r7, r0, r0
    5034:	00000511 	andeq	r0, r0, r1, lsl r5
    5038:	00005201 	andeq	r5, r0, r1, lsl #4
    503c:	02012900 	andeq	r2, r1, #0	; 0x0
    5040:	01000023 	tsteq	r0, r3, lsr #32
    5044:	8801048f 	stmdahi	r1, {r0, r1, r2, r3, r7, sl}
    5048:	aa080057 	bge	2051ac <__Stack_Size+0x204dac>
    504c:	01080057 	qaddeq	r0, r7, r8
    5050:	0012205d 	andseq	r2, r2, sp, asr r0
    5054:	228d2500 	addcs	r2, sp, #0	; 0x0
    5058:	8d010000 	stchi	0, cr0, [r1]
    505c:	00051e04 	andeq	r1, r5, r4, lsl #28
    5060:	1a500100 	bne	1405468 <__Stack_Size+0x1405068>
    5064:	00002191 	muleq	r0, r1, r1
    5068:	41048d01 	tstmi	r4, r1, lsl #26
    506c:	a4000000 	strge	r0, [r0]
    5070:	1a000022 	bne	5100 <__Stack_Size+0x4d00>
    5074:	00002969 	andeq	r2, r0, r9, ror #18
    5078:	41048e01 	tstmi	r4, r1, lsl #28
    507c:	b7000000 	strlt	r0, [r0, -r0]
    5080:	1a000022 	bne	5110 <__Stack_Size+0x4d10>
    5084:	0000251d 	andeq	r2, r0, sp, lsl r5
    5088:	41048e01 	tstmi	r4, r1, lsl #28
    508c:	ca000000 	bgt	5094 <__Stack_Size+0x4c94>
    5090:	28000022 	stmdacs	r0, {r1, r5}
    5094:	000004d2 	ldrdeq	r0, [r0], -r2
    5098:	08005788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip, lr}
    509c:	0800579e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sl, ip, lr}
    50a0:	1d049701 	stcne	7, cr9, [r4, #-4]
    50a4:	00000505 	andeq	r0, r0, r5, lsl #10
    50a8:	0004f91d 	andeq	pc, r4, sp, lsl r9
    50ac:	04ed1d00 	strbteq	r1, [sp], #3328
    50b0:	e11d0000 	tst	sp, r0
    50b4:	23000004 	movwcs	r0, #4	; 0x4
    50b8:	08005788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip, lr}
    50bc:	0800579e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sl, ip, lr}
    50c0:	00051127 	andeq	r1, r5, r7, lsr #2
    50c4:	00520100 	subseq	r0, r2, r0, lsl #2
    50c8:	d22a0000 	eorle	r0, sl, #0	; 0x0
    50cc:	ac000004 	stcge	0, cr0, [r0], {4}
    50d0:	c4080057 	strgt	r0, [r8], #-87
    50d4:	01080057 	qaddeq	r0, r7, r8
    50d8:	00125b5d 	andseq	r5, r2, sp, asr fp
    50dc:	04e12b00 	strbteq	r2, [r1], #2816
    50e0:	50010000 	andpl	r0, r1, r0
    50e4:	0004ed2c 	andeq	lr, r4, ip, lsr #26
    50e8:	0022dd00 	eoreq	sp, r2, r0, lsl #26
    50ec:	04f92c00 	ldrbteq	r2, [r9], #3072
    50f0:	22f00000 	rscscs	r0, r0, #0	; 0x0
    50f4:	052b0000 	streq	r0, [fp]!
    50f8:	01000005 	tsteq	r0, r5
    50fc:	05112753 	ldreq	r2, [r1, #-1875]
    5100:	52010000 	andpl	r0, r1, #0	; 0x0
    5104:	0e012900 	cdpeq	9, 0, cr2, cr1, cr0, {0}
    5108:	0100002a 	tsteq	r0, sl, lsr #32
    510c:	c40104d7 	strgt	r0, [r1], #-1239
    5110:	ca080057 	bgt	205274 <__Stack_Size+0x204e74>
    5114:	01080057 	qaddeq	r0, r7, r8
    5118:	00129e5d 	andseq	r9, r2, sp, asr lr
    511c:	228d2500 	addcs	r2, sp, #0	; 0x0
    5120:	d6010000 	strle	r0, [r1], -r0
    5124:	00051e04 	andeq	r1, r5, r4, lsl #28
    5128:	25500100 	ldrbcs	r0, [r0, #-256]
    512c:	00002768 	andeq	r2, r0, r8, ror #14
    5130:	4104d601 	tstmi	r4, r1, lsl #12
    5134:	01000000 	tsteq	r0, r0
    5138:	24ef2551 	strbtcs	r2, [pc], #1361	; 5140 <__Stack_Size+0x4d40>
    513c:	d6010000 	strle	r0, [r1], -r0
    5140:	00004104 	andeq	r4, r0, r4, lsl #2
    5144:	00520100 	subseq	r0, r2, r0, lsl #2
    5148:	26160129 	ldrcs	r0, [r6], -r9, lsr #2
    514c:	f3010000 	vhadd.u8	d0, d1, d0
    5150:	57cc0104 	strbpl	r0, [ip, r4, lsl #2]
    5154:	57dc0800 	ldrbpl	r0, [ip, r0, lsl #16]
    5158:	5d010800 	stcpl	8, cr0, [r1]
    515c:	000012e5 	andeq	r1, r0, r5, ror #5
    5160:	00228d25 	eoreq	r8, r2, r5, lsr #26
    5164:	04f20100 	ldrbteq	r0, [r2], #256
    5168:	0000051e 	andeq	r0, r0, lr, lsl r5
    516c:	881a5001 	ldmdahi	sl, {r0, ip, lr}
    5170:	01000003 	tsteq	r0, r3
    5174:	004104f2 	strdeq	r0, [r1], #-66
    5178:	23030000 	movwcs	r0, #12288	; 0x3000
    517c:	e31b0000 	tst	fp, #0	; 0x0
    5180:	01000022 	tsteq	r0, r2, lsr #32
    5184:	004104f4 	strdeq	r0, [r1], #-68
    5188:	23160000 	tstcs	r6, #0	; 0x0
    518c:	2a000000 	bcs	5194 <__Stack_Size+0x4d94>
    5190:	00000524 	andeq	r0, r0, r4, lsr #10
    5194:	080057dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, ip, lr}
    5198:	080057ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip, lr}
    519c:	13125d01 	tstne	r2, #64	; 0x40
    51a0:	332b0000 	teqcc	fp, #0	; 0x0
    51a4:	01000005 	tsteq	r0, r5
    51a8:	053f2c50 	ldreq	r2, [pc, #-3152]!	; 4560 <__Stack_Size+0x4160>
    51ac:	23340000 	teqcs	r4, #0	; 0x0
    51b0:	4b1f0000 	blmi	7c51b8 <__Stack_Size+0x7c4db8>
    51b4:	47000005 	strmi	r0, [r0, -r5]
    51b8:	00000023 	andeq	r0, r0, r3, lsr #32
    51bc:	25fb0119 	ldrbcs	r0, [fp, #281]!
    51c0:	47010000 	strmi	r0, [r1, -r0]
    51c4:	57ec0105 	strbpl	r0, [ip, r5, lsl #2]!
    51c8:	58320800 	ldmdapl	r2!, {fp}
    51cc:	23650800 	cmncs	r5, #0	; 0x0
    51d0:	13950000 	orrsne	r0, r5, #0	; 0x0
    51d4:	8d250000 	stchi	0, cr0, [r5]
    51d8:	01000022 	tsteq	r0, r2, lsr #32
    51dc:	051e0545 	ldreq	r0, [lr, #-1349]
    51e0:	50010000 	andpl	r0, r1, r0
    51e4:	0024c31a 	eoreq	ip, r4, sl, lsl r3
    51e8:	05450100 	strbeq	r0, [r5, #-256]
    51ec:	00000041 	andeq	r0, r0, r1, asr #32
    51f0:	00002384 	andeq	r2, r0, r4, lsl #7
    51f4:	0022531a 	eoreq	r5, r2, sl, lsl r3
    51f8:	05460100 	strbeq	r0, [r6, #-256]
    51fc:	00000041 	andeq	r0, r0, r1, asr #32
    5200:	00002397 	muleq	r0, r7, r3
    5204:	0022a325 	eoreq	sl, r2, r5, lsr #6
    5208:	05460100 	strbeq	r0, [r6, #-256]
    520c:	00000041 	andeq	r0, r0, r1, asr #32
    5210:	731b5301 	tstvc	fp, #67108864	; 0x4000000
    5214:	01000022 	tsteq	r0, r2, lsr #32
    5218:	00410548 	subeq	r0, r1, r8, asr #10
    521c:	23aa0000 	undefined instruction 0x23aa0000
    5220:	f1260000 	undefined instruction 0xf1260000
    5224:	01000026 	tsteq	r0, r6, lsr #32
    5228:	00410549 	subeq	r0, r1, r9, asr #10
    522c:	54010000 	strpl	r0, [r1]
    5230:	00241026 	eoreq	r1, r4, r6, lsr #32
    5234:	054a0100 	strbeq	r0, [sl, #-256]
    5238:	00000041 	andeq	r0, r0, r1, asr #32
    523c:	29005201 	stmdbcs	r0, {r0, r9, ip, lr}
    5240:	0028cb01 	eoreq	ip, r8, r1, lsl #22
    5244:	05800100 	streq	r0, [r0, #256]
    5248:	00583401 	subseq	r3, r8, r1, lsl #8
    524c:	00584408 	subseq	r4, r8, r8, lsl #8
    5250:	dc5d0108 	ldflee	f0, [sp], {8}
    5254:	25000013 	strcs	r0, [r0, #-19]
    5258:	0000228d 	andeq	r2, r0, sp, lsl #5
    525c:	1e057f01 	cdpne	15, 0, cr7, cr5, cr1, {0}
    5260:	01000005 	tsteq	r0, r5
    5264:	22921a50 	addscs	r1, r2, #327680	; 0x50000
    5268:	7f010000 	svcvc	0x00010000
    526c:	00004105 	andeq	r4, r0, r5, lsl #2
    5270:	0023c800 	eoreq	ip, r3, r0, lsl #16
    5274:	26f11b00 	ldrbtcs	r1, [r1], r0, lsl #22
    5278:	81010000 	tsthi	r1, r0
    527c:	00004105 	andeq	r4, r0, r5, lsl #2
    5280:	0023db00 	eoreq	sp, r3, r0, lsl #22
    5284:	01290000 	teqeq	r9, r0
    5288:	000021cf 	andeq	r2, r0, pc, asr #3
    528c:	0105a201 	tsteq	r5, r1, lsl #4
    5290:	08005844 	stmdaeq	r0, {r2, r6, fp, ip, lr}
    5294:	08005858 	stmdaeq	r0, {r3, r4, r6, fp, ip, lr}
    5298:	14215d01 	strtne	r5, [r1], #-3329
    529c:	8d250000 	stchi	0, cr0, [r5]
    52a0:	01000022 	tsteq	r0, r2, lsr #32
    52a4:	051e05a1 	ldreq	r0, [lr, #-1441]
    52a8:	50010000 	andpl	r0, r1, r0
    52ac:	00229225 	eoreq	r9, r2, r5, lsr #4
    52b0:	05a10100 	streq	r0, [r1, #256]!
    52b4:	00000041 	andeq	r0, r0, r1, asr #32
    52b8:	f11b5101 	undefined instruction 0xf11b5101
    52bc:	01000026 	tsteq	r0, r6, lsr #32
    52c0:	004105a3 	subeq	r0, r1, r3, lsr #11
    52c4:	23f90000 	mvnscs	r0, #0	; 0x0
    52c8:	29000000 	stmdbcs	r0, {}
    52cc:	0029a901 	eoreq	sl, r9, r1, lsl #18
    52d0:	05c40100 	strbeq	r0, [r4, #256]
    52d4:	00585801 	subseq	r5, r8, r1, lsl #16
    52d8:	00586808 	subseq	r6, r8, r8, lsl #16
    52dc:	685d0108 	ldmdavs	sp, {r3, r8}^
    52e0:	25000014 	strcs	r0, [r0, #-20]
    52e4:	0000228d 	andeq	r2, r0, sp, lsl #5
    52e8:	1e05c301 	cdpne	3, 0, cr12, cr5, cr1, {0}
    52ec:	01000005 	tsteq	r0, r5
    52f0:	22921a50 	addscs	r1, r2, #327680	; 0x50000
    52f4:	c3010000 	movwgt	r0, #4096	; 0x1000
    52f8:	00004105 	andeq	r4, r0, r5, lsl #2
    52fc:	00241700 	eoreq	r1, r4, r0, lsl #14
    5300:	26fa1b00 	ldrbtcs	r1, [sl], r0, lsl #22
    5304:	c5010000 	strgt	r0, [r1]
    5308:	00004105 	andeq	r4, r0, r5, lsl #2
    530c:	00242a00 	eoreq	r2, r4, r0, lsl #20
    5310:	01290000 	teqeq	r9, r0
    5314:	00002658 	andeq	r2, r0, r8, asr r6
    5318:	0105e601 	tsteq	r5, r1, lsl #12
    531c:	08005868 	stmdaeq	r0, {r3, r5, r6, fp, ip, lr}
    5320:	0800587c 	stmdaeq	r0, {r2, r3, r4, r5, r6, fp, ip, lr}
    5324:	14ad5d01 	strtne	r5, [sp], #3329
    5328:	8d250000 	stchi	0, cr0, [r5]
    532c:	01000022 	tsteq	r0, r2, lsr #32
    5330:	051e05e5 	ldreq	r0, [lr, #-1509]
    5334:	50010000 	andpl	r0, r1, r0
    5338:	00229225 	eoreq	r9, r2, r5, lsr #4
    533c:	05e50100 	strbeq	r0, [r5, #256]!
    5340:	00000041 	andeq	r0, r0, r1, asr #32
    5344:	fa1b5101 	blx	6d9750 <__Stack_Size+0x6d9350>
    5348:	01000026 	tsteq	r0, r6, lsr #32
    534c:	004105e7 	subeq	r0, r1, r7, ror #11
    5350:	24480000 	strbcs	r0, [r8]
    5354:	29000000 	stmdbcs	r0, {}
    5358:	0023c601 	eoreq	ip, r3, r1, lsl #12
    535c:	06030100 	streq	r0, [r3], -r0, lsl #2
    5360:	00587c01 	subseq	r7, r8, r1, lsl #24
    5364:	00589608 	subseq	r9, r8, r8, lsl #12
    5368:	e25d0108 	subs	r0, sp, #2	; 0x2
    536c:	25000014 	strcs	r0, [r0, #-20]
    5370:	0000228d 	andeq	r2, r0, sp, lsl #5
    5374:	1e060201 	cdpne	2, 0, cr0, cr6, cr1, {0}
    5378:	01000005 	tsteq	r0, r5
    537c:	117c2550 	cmnne	ip, r0, asr r5
    5380:	02010000 	andeq	r0, r1, #0	; 0x0
    5384:	0000a906 	andeq	sl, r0, r6, lsl #18
    5388:	00510100 	subseq	r0, r1, r0, lsl #2
    538c:	270f0129 	strcs	r0, [pc, -r9, lsr #2]
    5390:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    5394:	58980106 	ldmpl	r8, {r1, r2, r8}
    5398:	58b20800 	ldmpl	r2!, {fp}
    539c:	5d010800 	stcpl	8, cr0, [r1]
    53a0:	00001517 	andeq	r1, r0, r7, lsl r5
    53a4:	00228d25 	eoreq	r8, r2, r5, lsr #26
    53a8:	061d0100 	ldreq	r0, [sp], -r0, lsl #2
    53ac:	0000051e 	andeq	r0, r0, lr, lsl r5
    53b0:	7c255001 	stcvc	0, cr5, [r5], #-4
    53b4:	01000011 	tsteq	r0, r1, lsl r0
    53b8:	00a9061d 	adceq	r0, r9, sp, lsl r6
    53bc:	51010000 	tstpl	r1, r0
    53c0:	17012900 	strne	r2, [r1, -r0, lsl #18]
    53c4:	01000022 	tsteq	r0, r2, lsr #32
    53c8:	b401063a 	strlt	r0, [r1], #-1594
    53cc:	ce080058 	mcrgt	0, 0, r0, cr8, cr8, {2}
    53d0:	01080058 	qaddeq	r0, r8, r8
    53d4:	00154c5d 	andseq	r4, r5, sp, asr ip
    53d8:	228d2500 	addcs	r2, sp, #0	; 0x0
    53dc:	39010000 	stmdbcc	r1, {}
    53e0:	00051e06 	andeq	r1, r5, r6, lsl #28
    53e4:	25500100 	ldrbcs	r0, [r0, #-256]
    53e8:	0000117c 	andeq	r1, r0, ip, ror r1
    53ec:	a9063901 	stmdbge	r6, {r0, r8, fp, ip, sp}
    53f0:	01000000 	tsteq	r0, r0
    53f4:	01290051 	qsubeq	r0, r1, r9
    53f8:	0000271d 	andeq	r2, r0, sp, lsl r7
    53fc:	01065601 	tsteq	r6, r1, lsl #12
    5400:	080058d0 	stmdaeq	r0, {r4, r6, r7, fp, ip, lr}
    5404:	080058ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, fp, ip, lr}
    5408:	15815d01 	strne	r5, [r1, #3329]
    540c:	8d250000 	stchi	0, cr0, [r5]
    5410:	01000022 	tsteq	r0, r2, lsr #32
    5414:	051e0655 	ldreq	r0, [lr, #-1621]
    5418:	50010000 	andpl	r0, r1, r0
    541c:	00117c25 	andseq	r7, r1, r5, lsr #24
    5420:	06550100 	ldrbeq	r0, [r5], -r0, lsl #2
    5424:	000000a9 	andeq	r0, r0, r9, lsr #1
    5428:	29005101 	stmdbcs	r0, {r0, r8, ip, lr}
    542c:	00223e01 	eoreq	r3, r2, r1, lsl #28
    5430:	06750100 	ldrbteq	r0, [r5], -r0, lsl #2
    5434:	0058ec01 	subseq	lr, r8, r1, lsl #24
    5438:	0058fc08 	subseq	pc, r8, r8, lsl #24
    543c:	c85d0108 	ldmdagt	sp, {r3, r8}^
    5440:	25000015 	strcs	r0, [r0, #-21]
    5444:	0000228d 	andeq	r2, r0, sp, lsl #5
    5448:	1e067401 	cdpne	4, 0, cr7, cr6, cr1, {0}
    544c:	01000005 	tsteq	r0, r5
    5450:	21091a50 	tstcs	r9, r0, asr sl
    5454:	74010000 	strvc	r0, [r1]
    5458:	00004106 	andeq	r4, r0, r6, lsl #2
    545c:	00246600 	eoreq	r6, r4, r0, lsl #12
    5460:	26f11b00 	ldrbtcs	r1, [r1], r0, lsl #22
    5464:	76010000 	strvc	r0, [r1], -r0
    5468:	00004106 	andeq	r4, r0, r6, lsl #2
    546c:	00247900 	eoreq	r7, r4, r0, lsl #18
    5470:	01290000 	teqeq	r9, r0
    5474:	000021ba 	strheq	r2, [r0], -sl
    5478:	01069601 	tsteq	r6, r1, lsl #12
    547c:	080058fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, ip, lr}
    5480:	08005910 	stmdaeq	r0, {r4, r8, fp, ip, lr}
    5484:	160d5d01 	strne	r5, [sp], -r1, lsl #26
    5488:	8d250000 	stchi	0, cr0, [r5]
    548c:	01000022 	tsteq	r0, r2, lsr #32
    5490:	051e0695 	ldreq	r0, [lr, #-1685]
    5494:	50010000 	andpl	r0, r1, r0
    5498:	00210925 	eoreq	r0, r1, r5, lsr #18
    549c:	06950100 	ldreq	r0, [r5], r0, lsl #2
    54a0:	00000041 	andeq	r0, r0, r1, asr #32
    54a4:	f11b5101 	undefined instruction 0xf11b5101
    54a8:	01000026 	tsteq	r0, r6, lsr #32
    54ac:	00410697 	umaaleq	r0, r1, r7, r6
    54b0:	24970000 	ldrcs	r0, [r7]
    54b4:	29000000 	stmdbcs	r0, {}
    54b8:	00211701 	eoreq	r1, r1, r1, lsl #14
    54bc:	06b70100 	ldrteq	r0, [r7], r0, lsl #2
    54c0:	00591001 	subseq	r1, r9, r1
    54c4:	00592008 	subseq	r2, r9, r8
    54c8:	545d0108 	ldrbpl	r0, [sp], #-264
    54cc:	25000016 	strcs	r0, [r0, #-22]
    54d0:	0000228d 	andeq	r2, r0, sp, lsl #5
    54d4:	1e06b601 	cfmadd32ne	mvax0, mvfx11, mvfx6, mvfx1
    54d8:	01000005 	tsteq	r0, r5
    54dc:	21091a50 	tstcs	r9, r0, asr sl
    54e0:	b6010000 	strlt	r0, [r1], -r0
    54e4:	00004106 	andeq	r4, r0, r6, lsl #2
    54e8:	0024b500 	eoreq	fp, r4, r0, lsl #10
    54ec:	26fa1b00 	ldrbtcs	r1, [sl], r0, lsl #22
    54f0:	b8010000 	stmdalt	r1, {}
    54f4:	00004106 	andeq	r4, r0, r6, lsl #2
    54f8:	0024c800 	eoreq	ip, r4, r0, lsl #16
    54fc:	01290000 	teqeq	r9, r0
    5500:	000020ad 	andeq	r2, r0, sp, lsr #1
    5504:	0106d801 	tsteq	r6, r1, lsl #16
    5508:	08005920 	stmdaeq	r0, {r5, r8, fp, ip, lr}
    550c:	08005934 	stmdaeq	r0, {r2, r4, r5, r8, fp, ip, lr}
    5510:	16995d01 	ldrne	r5, [r9], r1, lsl #26
    5514:	8d250000 	stchi	0, cr0, [r5]
    5518:	01000022 	tsteq	r0, r2, lsr #32
    551c:	051e06d7 	ldreq	r0, [lr, #-1751]
    5520:	50010000 	andpl	r0, r1, r0
    5524:	00210925 	eoreq	r0, r1, r5, lsr #18
    5528:	06d70100 	ldrbeq	r0, [r7], r0, lsl #2
    552c:	00000041 	andeq	r0, r0, r1, asr #32
    5530:	fa1b5101 	blx	6d993c <__Stack_Size+0x6d953c>
    5534:	01000026 	tsteq	r0, r6, lsr #32
    5538:	004106d9 	ldrdeq	r0, [r1], #-105
    553c:	24e60000 	strbtcs	r0, [r6]
    5540:	29000000 	stmdbcs	r0, {}
    5544:	0026a001 	eoreq	sl, r6, r1
    5548:	06f80100 	ldrbteq	r0, [r8], r0, lsl #2
    554c:	00593401 	subseq	r3, r9, r1, lsl #8
    5550:	00594408 	subseq	r4, r9, r8, lsl #8
    5554:	e05d0108 	subs	r0, sp, r8, lsl #2
    5558:	25000016 	strcs	r0, [r0, #-22]
    555c:	0000228d 	andeq	r2, r0, sp, lsl #5
    5560:	1e06f701 	cdpne	7, 0, cr15, cr6, cr1, {0}
    5564:	01000005 	tsteq	r0, r5
    5568:	21491a50 	cmpcs	r9, r0, asr sl
    556c:	f7010000 	undefined instruction 0xf7010000
    5570:	00004106 	andeq	r4, r0, r6, lsl #2
    5574:	00250400 	eoreq	r0, r5, r0, lsl #8
    5578:	26f11b00 	ldrbtcs	r1, [r1], r0, lsl #22
    557c:	f9010000 	undefined instruction 0xf9010000
    5580:	00004106 	andeq	r4, r0, r6, lsl #2
    5584:	00251700 	eoreq	r1, r5, r0, lsl #14
    5588:	01290000 	teqeq	r9, r0
    558c:	0000242d 	andeq	r2, r0, sp, lsr #8
    5590:	01071901 	tsteq	r7, r1, lsl #18
    5594:	08005944 	stmdaeq	r0, {r2, r6, r8, fp, ip, lr}
    5598:	08005958 	stmdaeq	r0, {r3, r4, r6, r8, fp, ip, lr}
    559c:	17255d01 	strne	r5, [r5, -r1, lsl #26]!
    55a0:	8d250000 	stchi	0, cr0, [r5]
    55a4:	01000022 	tsteq	r0, r2, lsr #32
    55a8:	051e0718 	ldreq	r0, [lr, #-1816]
    55ac:	50010000 	andpl	r0, r1, r0
    55b0:	00214925 	eoreq	r4, r1, r5, lsr #18
    55b4:	07180100 	ldreq	r0, [r8, -r0, lsl #2]
    55b8:	00000041 	andeq	r0, r0, r1, asr #32
    55bc:	f11b5101 	undefined instruction 0xf11b5101
    55c0:	01000026 	tsteq	r0, r6, lsr #32
    55c4:	0041071a 	subeq	r0, r1, sl, lsl r7
    55c8:	25350000 	ldrcs	r0, [r5]!
    55cc:	29000000 	stmdbcs	r0, {}
    55d0:	00227b01 	eoreq	r7, r2, r1, lsl #22
    55d4:	073a0100 	ldreq	r0, [sl, -r0, lsl #2]!
    55d8:	00595801 	subseq	r5, r9, r1, lsl #16
    55dc:	00596808 	subseq	r6, r9, r8, lsl #16
    55e0:	6c5d0108 	ldfvse	f0, [sp], {8}
    55e4:	25000017 	strcs	r0, [r0, #-23]
    55e8:	0000228d 	andeq	r2, r0, sp, lsl #5
    55ec:	1e073901 	cdpne	9, 0, cr3, cr7, cr1, {0}
    55f0:	01000005 	tsteq	r0, r5
    55f4:	21491a50 	cmpcs	r9, r0, asr sl
    55f8:	39010000 	stmdbcc	r1, {}
    55fc:	00004107 	andeq	r4, r0, r7, lsl #2
    5600:	00255300 	eoreq	r5, r5, r0, lsl #6
    5604:	26fa1b00 	ldrbtcs	r1, [sl], r0, lsl #22
    5608:	3b010000 	blcc	45610 <__Stack_Size+0x45210>
    560c:	00004107 	andeq	r4, r0, r7, lsl #2
    5610:	00256600 	eoreq	r6, r5, r0, lsl #12
    5614:	01290000 	teqeq	r9, r0
    5618:	00002074 	andeq	r2, r0, r4, ror r0
    561c:	01075b01 	tsteq	r7, r1, lsl #22
    5620:	08005968 	stmdaeq	r0, {r3, r5, r6, r8, fp, ip, lr}
    5624:	0800597c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, ip, lr}
    5628:	17b15d01 	ldrne	r5, [r1, r1, lsl #26]!
    562c:	8d250000 	stchi	0, cr0, [r5]
    5630:	01000022 	tsteq	r0, r2, lsr #32
    5634:	051e075a 	ldreq	r0, [lr, #-1882]
    5638:	50010000 	andpl	r0, r1, r0
    563c:	00214925 	eoreq	r4, r1, r5, lsr #18
    5640:	075a0100 	ldrbeq	r0, [sl, -r0, lsl #2]
    5644:	00000041 	andeq	r0, r0, r1, asr #32
    5648:	fa1b5101 	blx	6d9a54 <__Stack_Size+0x6d9654>
    564c:	01000026 	tsteq	r0, r6, lsr #32
    5650:	0041075c 	subeq	r0, r1, ip, asr r7
    5654:	25840000 	strcs	r0, [r4]
    5658:	29000000 	stmdbcs	r0, {}
    565c:	00294301 	eoreq	r4, r9, r1, lsl #6
    5660:	077c0100 	ldrbeq	r0, [ip, -r0, lsl #2]!
    5664:	00597c01 	subseq	r7, r9, r1, lsl #24
    5668:	00598c08 	subseq	r8, r9, r8, lsl #24
    566c:	f85d0108 	undefined instruction 0xf85d0108
    5670:	25000017 	strcs	r0, [r0, #-23]
    5674:	0000228d 	andeq	r2, r0, sp, lsl #5
    5678:	1e077b01 	fmacdne	d7, d7, d1
    567c:	01000005 	tsteq	r0, r5
    5680:	24e31a50 	strbtcs	r1, [r3], #2640
    5684:	7b010000 	blvc	4568c <__Stack_Size+0x4528c>
    5688:	00004107 	andeq	r4, r0, r7, lsl #2
    568c:	0025a200 	eoreq	sl, r5, r0, lsl #4
    5690:	26f11b00 	ldrbtcs	r1, [r1], r0, lsl #22
    5694:	7d010000 	stcvc	0, cr0, [r1]
    5698:	00004107 	andeq	r4, r0, r7, lsl #2
    569c:	0025b500 	eoreq	fp, r5, r0, lsl #10
    56a0:	01290000 	teqeq	r9, r0
    56a4:	00002837 	andeq	r2, r0, r7, lsr r8
    56a8:	01079c01 	tsteq	r7, r1, lsl #24
    56ac:	0800598c 	stmdaeq	r0, {r2, r3, r7, r8, fp, ip, lr}
    56b0:	0800599c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp, ip, lr}
    56b4:	183d5d01 	ldmdane	sp!, {r0, r8, sl, fp, ip, lr}
    56b8:	8d250000 	stchi	0, cr0, [r5]
    56bc:	01000022 	tsteq	r0, r2, lsr #32
    56c0:	051e079b 	ldreq	r0, [lr, #-1947]
    56c4:	50010000 	andpl	r0, r1, r0
    56c8:	0024e325 	eoreq	lr, r4, r5, lsr #6
    56cc:	079b0100 	ldreq	r0, [fp, r0, lsl #2]
    56d0:	00000041 	andeq	r0, r0, r1, asr #32
    56d4:	f11b5101 	undefined instruction 0xf11b5101
    56d8:	01000026 	tsteq	r0, r6, lsr #32
    56dc:	0041079d 	umaaleq	r0, r1, sp, r7
    56e0:	25d30000 	ldrbcs	r0, [r3]
    56e4:	29000000 	stmdbcs	r0, {}
    56e8:	00263c01 	eoreq	r3, r6, r1, lsl #24
    56ec:	07bc0100 	ldreq	r0, [ip, r0, lsl #2]!
    56f0:	00599c01 	subseq	r9, r9, r1, lsl #24
    56f4:	0059ac08 	subseq	sl, r9, r8, lsl #24
    56f8:	845d0108 	ldrbhi	r0, [sp], #-264
    56fc:	25000018 	strcs	r0, [r0, #-24]
    5700:	0000228d 	andeq	r2, r0, sp, lsl #5
    5704:	1e07bb01 	fmacdne	d11, d7, d1
    5708:	01000005 	tsteq	r0, r5
    570c:	24e31a50 	strbtcs	r1, [r3], #2640
    5710:	bb010000 	bllt	45718 <__Stack_Size+0x45318>
    5714:	00004107 	andeq	r4, r0, r7, lsl #2
    5718:	0025f100 	eoreq	pc, r5, r0, lsl #2
    571c:	26fa1b00 	ldrbtcs	r1, [sl], r0, lsl #22
    5720:	bd010000 	stclt	0, cr0, [r1]
    5724:	00004107 	andeq	r4, r0, r7, lsl #2
    5728:	00260400 	eoreq	r0, r6, r0, lsl #8
    572c:	01290000 	teqeq	r9, r0
    5730:	00002376 	andeq	r2, r0, r6, ror r3
    5734:	0107dc01 	tsteq	r7, r1, lsl #24
    5738:	080059ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp, ip, lr}
    573c:	080059bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, fp, ip, lr}
    5740:	18c95d01 	stmiane	r9, {r0, r8, sl, fp, ip, lr}^
    5744:	8d250000 	stchi	0, cr0, [r5]
    5748:	01000022 	tsteq	r0, r2, lsr #32
    574c:	051e07db 	ldreq	r0, [lr, #-2011]
    5750:	50010000 	andpl	r0, r1, r0
    5754:	0024e325 	eoreq	lr, r4, r5, lsr #6
    5758:	07db0100 	ldrbeq	r0, [fp, r0, lsl #2]
    575c:	00000041 	andeq	r0, r0, r1, asr #32
    5760:	fa1b5101 	blx	6d9b6c <__Stack_Size+0x6d976c>
    5764:	01000026 	tsteq	r0, r6, lsr #32
    5768:	004107dd 	ldrdeq	r0, [r1], #-125
    576c:	26220000 	strtcs	r0, [r2], -r0
    5770:	29000000 	stmdbcs	r0, {}
    5774:	00208601 	eoreq	r8, r0, r1, lsl #12
    5778:	07fc0100 	ldrbeq	r0, [ip, r0, lsl #2]!
    577c:	0059bc01 	subseq	fp, r9, r1, lsl #24
    5780:	0059cc08 	subseq	ip, r9, r8, lsl #24
    5784:	105d0108 	subsne	r0, sp, r8, lsl #2
    5788:	25000019 	strcs	r0, [r0, #-25]
    578c:	0000228d 	andeq	r2, r0, sp, lsl #5
    5790:	1e07fb01 	fmacdne	d15, d7, d1
    5794:	01000005 	tsteq	r0, r5
    5798:	00711a50 	rsbseq	r1, r1, r0, asr sl
    579c:	fb010000 	blx	457a6 <__Stack_Size+0x453a6>
    57a0:	00004107 	andeq	r4, r0, r7, lsl #2
    57a4:	00264000 	eoreq	r4, r6, r0
    57a8:	24101b00 	ldrcs	r1, [r0], #-2816
    57ac:	fd010000 	stc2	0, cr0, [r1]
    57b0:	00004107 	andeq	r4, r0, r7, lsl #2
    57b4:	00265300 	eoreq	r5, r6, r0, lsl #6
    57b8:	01290000 	teqeq	r9, r0
    57bc:	000026c0 	andeq	r2, r0, r0, asr #13
    57c0:	01081901 	tsteq	r8, r1, lsl #18
    57c4:	080059cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp, ip, lr}
    57c8:	080059dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, ip, lr}
    57cc:	19575d01 	ldmdbne	r7, {r0, r8, sl, fp, ip, lr}^
    57d0:	8d250000 	stchi	0, cr0, [r5]
    57d4:	01000022 	tsteq	r0, r2, lsr #32
    57d8:	051e0818 	ldreq	r0, [lr, #-2072]
    57dc:	50010000 	andpl	r0, r1, r0
    57e0:	00030c1a 	andeq	r0, r3, sl, lsl ip
    57e4:	08180100 	ldmdaeq	r8, {r8}
    57e8:	00000041 	andeq	r0, r0, r1, asr #32
    57ec:	00002671 	andeq	r2, r0, r1, ror r6
    57f0:	0024101b 	eoreq	r1, r4, fp, lsl r0
    57f4:	081a0100 	ldmdaeq	sl, {r8}
    57f8:	00000041 	andeq	r0, r0, r1, asr #32
    57fc:	00002684 	andeq	r2, r0, r4, lsl #13
    5800:	22012900 	andcs	r2, r1, #0	; 0x0
    5804:	0100002a 	tsteq	r0, sl, lsr #32
    5808:	dc010837 	stcle	8, cr0, [r1], {55}
    580c:	f0080059 	undefined instruction 0xf0080059
    5810:	01080059 	qaddeq	r0, r9, r8
    5814:	00199c5d 	andseq	r9, r9, sp, asr ip
    5818:	228d2500 	addcs	r2, sp, #0	; 0x0
    581c:	36010000 	strcc	r0, [r1], -r0
    5820:	00051e08 	andeq	r1, r5, r8, lsl #28
    5824:	25500100 	ldrbcs	r0, [r0, #-256]
    5828:	00000071 	andeq	r0, r0, r1, ror r0
    582c:	41083601 	tstmi	r8, r1, lsl #12
    5830:	01000000 	tsteq	r0, r0
    5834:	24101b51 	ldrcs	r1, [r0], #-2897
    5838:	38010000 	stmdacc	r1, {}
    583c:	00004108 	andeq	r4, r0, r8, lsl #2
    5840:	0026a200 	eoreq	sl, r6, r0, lsl #4
    5844:	01290000 	teqeq	r9, r0
    5848:	00002903 	andeq	r2, r0, r3, lsl #18
    584c:	01085401 	tsteq	r8, r1, lsl #8
    5850:	080059f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, ip, lr}
    5854:	08005a04 	stmdaeq	r0, {r2, r9, fp, ip, lr}
    5858:	19e15d01 	stmibne	r1!, {r0, r8, sl, fp, ip, lr}^
    585c:	8d250000 	stchi	0, cr0, [r5]
    5860:	01000022 	tsteq	r0, r2, lsr #32
    5864:	051e0853 	ldreq	r0, [lr, #-2131]
    5868:	50010000 	andpl	r0, r1, r0
    586c:	00030c25 	andeq	r0, r3, r5, lsr #24
    5870:	08530100 	ldmdaeq	r3, {r8}^
    5874:	00000041 	andeq	r0, r0, r1, asr #32
    5878:	101b5101 	andsne	r5, fp, r1, lsl #2
    587c:	01000024 	tsteq	r0, r4, lsr #32
    5880:	00410855 	subeq	r0, r1, r5, asr r8
    5884:	26c00000 	strbcs	r0, [r0], r0
    5888:	29000000 	stmdbcs	r0, {}
    588c:	00295301 	eoreq	r5, r9, r1, lsl #6
    5890:	08720100 	ldmdaeq	r2!, {r8}^
    5894:	005a0401 	subseq	r0, sl, r1, lsl #8
    5898:	005a1808 	subseq	r1, sl, r8, lsl #16
    589c:	265d0108 	ldrbcs	r0, [sp], -r8, lsl #2
    58a0:	2500001a 	strcs	r0, [r0, #-26]
    58a4:	0000228d 	andeq	r2, r0, sp, lsl #5
    58a8:	1e087101 	adfnee	f7, f0, f1
    58ac:	01000005 	tsteq	r0, r5
    58b0:	00712550 	rsbseq	r2, r1, r0, asr r5
    58b4:	71010000 	tstvc	r1, r0
    58b8:	00004108 	andeq	r4, r0, r8, lsl #2
    58bc:	1b510100 	blne	1445cc4 <__Stack_Size+0x14458c4>
    58c0:	00002410 	andeq	r2, r0, r0, lsl r4
    58c4:	41087301 	tstmi	r8, r1, lsl #6
    58c8:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    58cc:	00000026 	andeq	r0, r0, r6, lsr #32
    58d0:	20f20129 	rscscs	r0, r2, r9, lsr #2
    58d4:	8f010000 	svchi	0x00010000
    58d8:	5a180108 	bpl	605d00 <__Stack_Size+0x605900>
    58dc:	5a2c0800 	bpl	b078e4 <__Stack_Size+0xb074e4>
    58e0:	5d010800 	stcpl	8, cr0, [r1]
    58e4:	00001a6b 	andeq	r1, r0, fp, ror #20
    58e8:	00228d25 	eoreq	r8, r2, r5, lsr #26
    58ec:	088e0100 	stmeq	lr, {r8}
    58f0:	0000051e 	andeq	r0, r0, lr, lsl r5
    58f4:	0c255001 	stceq	0, cr5, [r5], #-4
    58f8:	01000003 	tsteq	r0, r3
    58fc:	0041088e 	subeq	r0, r1, lr, lsl #17
    5900:	51010000 	tstpl	r1, r0
    5904:	0024101b 	eoreq	r1, r4, fp, lsl r0
    5908:	08900100 	ldmeq	r0, {r8}
    590c:	00000041 	andeq	r0, r0, r1, asr #32
    5910:	000026fc 	strdeq	r2, [r0], -ip
    5914:	1a012900 	bne	4fd1c <__Stack_Size+0x4f91c>
    5918:	01000029 	tsteq	r0, r9, lsr #32
    591c:	2c0108ad 	stccs	8, cr0, [r1], {173}
    5920:	4008005a 	andmi	r0, r8, sl, asr r0
    5924:	0108005a 	qaddeq	r0, sl, r8
    5928:	001ab05d 	andseq	fp, sl, sp, asr r0
    592c:	228d2500 	addcs	r2, sp, #0	; 0x0
    5930:	ac010000 	stcge	0, cr0, [r1], {0}
    5934:	00051e08 	andeq	r1, r5, r8, lsl #28
    5938:	25500100 	ldrbcs	r0, [r0, #-256]
    593c:	00000071 	andeq	r0, r0, r1, ror r0
    5940:	4108ac01 	tstmi	r8, r1, lsl #24
    5944:	01000000 	tsteq	r0, r0
    5948:	24101b51 	ldrcs	r1, [r0], #-2897
    594c:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    5950:	00004108 	andeq	r4, r0, r8, lsl #2
    5954:	00271a00 	eoreq	r1, r7, r0, lsl #20
    5958:	01290000 	teqeq	r9, r0
    595c:	00002501 	andeq	r2, r0, r1, lsl #10
    5960:	0108cf01 	tsteq	r8, r1, lsl #30
    5964:	08005a40 	stmdaeq	r0, {r6, r9, fp, ip, lr}
    5968:	08005a60 	stmdaeq	r0, {r5, r6, r9, fp, ip, lr}
    596c:	1af55d01 	bne	ffd5cd78 <SCS_BASE+0x1fd4ed78>
    5970:	8d250000 	stchi	0, cr0, [r5]
    5974:	01000022 	tsteq	r0, r2, lsr #32
    5978:	051e08ce 	ldreq	r0, [lr, #-2254]
    597c:	50010000 	andpl	r0, r1, r0
    5980:	00270325 	eoreq	r0, r7, r5, lsr #6
    5984:	08ce0100 	stmiaeq	lr, {r8}^
    5988:	00000041 	andeq	r0, r0, r1, asr #32
    598c:	721a5101 	andsvc	r5, sl, #1073741824	; 0x40000000
    5990:	01000027 	tsteq	r0, r7, lsr #32
    5994:	004108ce 	subeq	r0, r1, lr, asr #17
    5998:	27380000 	ldrcs	r0, [r8, -r0]!
    599c:	29000000 	stmdbcs	r0, {}
    59a0:	0021a501 	eoreq	sl, r1, r1, lsl #10
    59a4:	08eb0100 	stmiaeq	fp!, {r8}^
    59a8:	005a6001 	subseq	r6, sl, r1
    59ac:	005a8008 	subseq	r8, sl, r8
    59b0:	3a5d0108 	bcc	1745dd8 <__Stack_Size+0x17459d8>
    59b4:	2500001b 	strcs	r0, [r0, #-27]
    59b8:	0000228d 	andeq	r2, r0, sp, lsl #5
    59bc:	1e08ea01 	fmacsne	s28, s16, s2
    59c0:	01000005 	tsteq	r0, r5
    59c4:	27032550 	smlsdcs	r3, r0, r5, r2
    59c8:	ea010000 	b	459d0 <__Stack_Size+0x455d0>
    59cc:	00004108 	andeq	r4, r0, r8, lsl #2
    59d0:	1a510100 	bne	1445dd8 <__Stack_Size+0x14459d8>
    59d4:	00002579 	andeq	r2, r0, r9, ror r5
    59d8:	4108ea01 	tstmi	r8, r1, lsl #20
    59dc:	4b000000 	blmi	59e4 <__Stack_Size+0x55e4>
    59e0:	00000027 	andeq	r0, r0, r7, lsr #32
    59e4:	24800119 	strcs	r0, [r0], #281
    59e8:	13010000 	movwne	r0, #4096	; 0x1000
    59ec:	5a800109 	bpl	fe005e18 <SCS_BASE+0x1dff7e18>
    59f0:	5ae80800 	bpl	ffa079f8 <SCS_BASE+0x1f9f99f8>
    59f4:	275e0800 	ldrbcs	r0, [lr, -r0, lsl #16]
    59f8:	1b850000 	blne	fe145a00 <SCS_BASE+0x1e137a00>
    59fc:	8d1a0000 	ldchi	0, cr0, [sl]
    5a00:	01000022 	tsteq	r0, r2, lsr #32
    5a04:	051e0912 	ldreq	r0, [lr, #-2322]
    5a08:	277d0000 	ldrbcs	r0, [sp, -r0]!
    5a0c:	031a0000 	tsteq	sl, #0	; 0x0
    5a10:	01000027 	tsteq	r0, r7, lsr #32
    5a14:	00410912 	subeq	r0, r1, r2, lsl r9
    5a18:	279c0000 	ldrcs	r0, [ip, r0]
    5a1c:	591a0000 	ldmdbpl	sl, {}
    5a20:	01000005 	tsteq	r0, r5
    5a24:	00410912 	subeq	r0, r1, r2, lsl r9
    5a28:	27ba0000 	ldrcs	r0, [sl, r0]!
    5a2c:	29000000 	stmdbcs	r0, {}
    5a30:	0025b601 	eoreq	fp, r5, r1, lsl #12
    5a34:	09390100 	ldmdbeq	r9!, {r8}
    5a38:	005ae801 	subseq	lr, sl, r1, lsl #16
    5a3c:	005b0208 	subseq	r0, fp, r8, lsl #4
    5a40:	ba5d0108 	blt	1745e68 <__Stack_Size+0x1745a68>
    5a44:	2500001b 	strcs	r0, [r0, #-27]
    5a48:	0000228d 	andeq	r2, r0, sp, lsl #5
    5a4c:	1e093801 	cdpne	8, 0, cr3, cr9, cr1, {0}
    5a50:	01000005 	tsteq	r0, r5
    5a54:	117c2550 	cmnne	ip, r0, asr r5
    5a58:	38010000 	stmdacc	r1, {}
    5a5c:	0000a909 	andeq	sl, r0, r9, lsl #18
    5a60:	00510100 	subseq	r0, r1, r0, lsl #2
    5a64:	21f40129 	mvnscs	r0, r9, lsr #2
    5a68:	56010000 	strpl	r0, [r1], -r0
    5a6c:	5b040109 	blpl	105e98 <__Stack_Size+0x105a98>
    5a70:	5b1e0800 	blpl	787a78 <__Stack_Size+0x787678>
    5a74:	5d010800 	stcpl	8, cr0, [r1]
    5a78:	00001bef 	andeq	r1, r0, pc, ror #23
    5a7c:	00228d25 	eoreq	r8, r2, r5, lsr #26
    5a80:	09550100 	ldmdbeq	r5, {r8}^
    5a84:	0000051e 	andeq	r0, r0, lr, lsl r5
    5a88:	ce255001 	cdpgt	0, 2, cr5, cr5, cr1, {0}
    5a8c:	01000025 	tsteq	r0, r5, lsr #32
    5a90:	00410955 	subeq	r0, r1, r5, asr r9
    5a94:	51010000 	tstpl	r1, r0
    5a98:	3e012900 	cdpcc	9, 0, cr2, cr1, cr0, {0}
    5a9c:	01000025 	tsteq	r0, r5, lsr #32
    5aa0:	20010971 	andcs	r0, r1, r1, ror r9
    5aa4:	3a08005b 	bcc	205c18 <__Stack_Size+0x205818>
    5aa8:	0108005b 	qaddeq	r0, fp, r8
    5aac:	001c245d 	andseq	r2, ip, sp, asr r4
    5ab0:	228d2500 	addcs	r2, sp, #0	; 0x0
    5ab4:	70010000 	andvc	r0, r1, r0
    5ab8:	00051e09 	andeq	r1, r5, r9, lsl #28
    5abc:	25500100 	ldrbcs	r0, [r0, #-256]
    5ac0:	0000117c 	andeq	r1, r0, ip, ror r1
    5ac4:	a9097001 	stmdbge	r9, {r0, ip, sp, lr}
    5ac8:	01000000 	tsteq	r0, r0
    5acc:	01290051 	qsubeq	r0, r1, r9
    5ad0:	000027bf 	strheq	r2, [r0], -pc
    5ad4:	01098e01 	tsteq	r9, r1, lsl #28
    5ad8:	08005b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp, ip, lr}
    5adc:	08005b52 	stmdaeq	r0, {r1, r4, r6, r8, r9, fp, ip, lr}
    5ae0:	1c5b5d01 	mrrcne	13, 0, r5, fp, cr1
    5ae4:	8d250000 	stchi	0, cr0, [r5]
    5ae8:	01000022 	tsteq	r0, r2, lsr #32
    5aec:	051e098d 	ldreq	r0, [lr, #-2445]
    5af0:	50010000 	andpl	r0, r1, r0
    5af4:	0022271a 	eoreq	r2, r2, sl, lsl r7
    5af8:	098d0100 	stmibeq	sp, {r8}
    5afc:	00000041 	andeq	r0, r0, r1, asr #32
    5b00:	000027d8 	ldrdeq	r2, [r0], -r8
    5b04:	51012900 	tstpl	r1, r0, lsl #18
    5b08:	01000024 	tsteq	r0, r4, lsr #32
    5b0c:	540109af 	strpl	r0, [r1], #-2479
    5b10:	6a08005b 	bvs	205c84 <__Stack_Size+0x205884>
    5b14:	0108005b 	qaddeq	r0, fp, r8
    5b18:	001c925d 	andseq	r9, ip, sp, asr r2
    5b1c:	228d2500 	addcs	r2, sp, #0	; 0x0
    5b20:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    5b24:	00051e09 	andeq	r1, r5, r9, lsl #28
    5b28:	1a500100 	bne	1405f30 <__Stack_Size+0x1405b30>
    5b2c:	000027d6 	ldrdeq	r2, [r0], -r6
    5b30:	4109ae01 	tstmi	r9, r1, lsl #28
    5b34:	eb000000 	bl	5b3c <__Stack_Size+0x573c>
    5b38:	00000027 	andeq	r0, r0, r7, lsr #32
    5b3c:	268c0129 	strcs	r0, [ip], r9, lsr #2
    5b40:	cb010000 	blgt	45b48 <__Stack_Size+0x45748>
    5b44:	5b6c0109 	blpl	1b05f70 <__Stack_Size+0x1b05b70>
    5b48:	5b820800 	blpl	fe087b50 <SCS_BASE+0x1e079b50>
    5b4c:	5d010800 	stcpl	8, cr0, [r1]
    5b50:	00001cc9 	andeq	r1, r0, r9, asr #25
    5b54:	00228d25 	eoreq	r8, r2, r5, lsr #26
    5b58:	09ca0100 	stmibeq	sl, {r8}^
    5b5c:	0000051e 	andeq	r0, r0, lr, lsl r5
    5b60:	c71a5001 	ldrgt	r5, [sl, -r1]
    5b64:	01000022 	tsteq	r0, r2, lsr #32
    5b68:	004109ca 	subeq	r0, r1, sl, asr #19
    5b6c:	27fe0000 	ldrbcs	r0, [lr, r0]!
    5b70:	29000000 	stmdbcs	r0, {}
    5b74:	0029dd01 	eoreq	sp, r9, r1, lsl #26
    5b78:	09e50100 	stmibeq	r5!, {r8}^
    5b7c:	005b8401 	subseq	r8, fp, r1, lsl #8
    5b80:	005b9a08 	subseq	r9, fp, r8, lsl #20
    5b84:	005d0108 	subseq	r0, sp, r8, lsl #2
    5b88:	2500001d 	strcs	r0, [r0, #-29]
    5b8c:	0000228d 	andeq	r2, r0, sp, lsl #5
    5b90:	1e09e401 	cdpne	4, 0, cr14, cr9, cr1, {0}
    5b94:	01000005 	tsteq	r0, r5
    5b98:	28621a50 	stmdacs	r2!, {r4, r6, r9, fp, ip}^
    5b9c:	e4010000 	str	r0, [r1]
    5ba0:	00004109 	andeq	r4, r0, r9, lsl #2
    5ba4:	00281100 	eoreq	r1, r8, r0, lsl #2
    5ba8:	01290000 	teqeq	r9, r0
    5bac:	000024a6 	andeq	r2, r0, r6, lsr #9
    5bb0:	0109fa01 	tstpeq	r9, r1, lsl #20
    5bb4:	08005b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, ip, lr}
    5bb8:	08005ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp, ip, lr}
    5bbc:	1d355d01 	ldcne	13, cr5, [r5, #-4]!
    5bc0:	8d250000 	stchi	0, cr0, [r5]
    5bc4:	01000022 	tsteq	r0, r2, lsr #32
    5bc8:	051e09f9 	ldreq	r0, [lr, #-2553]
    5bcc:	50010000 	andpl	r0, r1, r0
    5bd0:	00202c25 	eoreq	r2, r0, r5, lsr #24
    5bd4:	09f90100 	ldmibeq	r9!, {r8}^
    5bd8:	00000041 	andeq	r0, r0, r1, asr #32
    5bdc:	29005101 	stmdbcs	r0, {r0, r8, ip, lr}
    5be0:	00288a01 	eoreq	r8, r8, r1, lsl #20
    5be4:	0a0b0100 	beq	2c5fec <__Stack_Size+0x2c5bec>
    5be8:	005ba001 	subseq	sl, fp, r1
    5bec:	005ba408 	subseq	sl, fp, r8, lsl #8
    5bf0:	6a5d0108 	bvs	1746018 <__Stack_Size+0x1745c18>
    5bf4:	2500001d 	strcs	r0, [r0, #-29]
    5bf8:	0000228d 	andeq	r2, r0, sp, lsl #5
    5bfc:	1e0a0a01 	fmacsne	s0, s20, s2
    5c00:	01000005 	tsteq	r0, r5
    5c04:	28912550 	ldmcs	r1, {r4, r6, r8, sl, sp}
    5c08:	0a010000 	beq	45c10 <__Stack_Size+0x45810>
    5c0c:	0000410a 	andeq	r4, r0, sl, lsl #2
    5c10:	00510100 	subseq	r0, r1, r0, lsl #2
    5c14:	20c20129 	sbccs	r0, r2, r9, lsr #2
    5c18:	1d010000 	stcne	0, cr0, [r1]
    5c1c:	5ba4010a 	blpl	fe90604c <SCS_BASE+0x1e8f804c>
    5c20:	5ba80800 	blpl	fea07c28 <SCS_BASE+0x1e9f9c28>
    5c24:	5d010800 	stcpl	8, cr0, [r1]
    5c28:	00001d9f 	muleq	r0, pc, sp
    5c2c:	00228d25 	eoreq	r8, r2, r5, lsr #26
    5c30:	0a1c0100 	beq	706038 <__Stack_Size+0x705c38>
    5c34:	0000051e 	andeq	r0, r0, lr, lsl r5
    5c38:	c9255001 	stmdbgt	r5!, {r0, ip, lr}
    5c3c:	01000020 	tsteq	r0, r0, lsr #32
    5c40:	00410a1c 	subeq	r0, r1, ip, lsl sl
    5c44:	51010000 	tstpl	r1, r0
    5c48:	d2012900 	andle	r2, r1, #0	; 0x0
    5c4c:	01000020 	tsteq	r0, r0, lsr #32
    5c50:	a8010a2f 	stmdage	r1, {r0, r1, r2, r3, r5, r9, fp}
    5c54:	ac08005b 	stcge	0, cr0, [r8], {91}
    5c58:	0108005b 	qaddeq	r0, fp, r8
    5c5c:	001dd45d 	andseq	sp, sp, sp, asr r4
    5c60:	228d2500 	addcs	r2, sp, #0	; 0x0
    5c64:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    5c68:	00051e0a 	andeq	r1, r5, sl, lsl #28
    5c6c:	25500100 	ldrbcs	r0, [r0, #-256]
    5c70:	000020d9 	ldrdeq	r2, [r0], -r9
    5c74:	410a2e01 	tstmi	sl, r1, lsl #28
    5c78:	01000000 	tsteq	r0, r0
    5c7c:	01290051 	qsubeq	r0, r1, r9
    5c80:	0000262c 	andeq	r2, r0, ip, lsr #12
    5c84:	010a4101 	tsteq	sl, r1, lsl #2
    5c88:	08005bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp, ip, lr}
    5c8c:	08005bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp, ip, lr}
    5c90:	1e095d01 	cdpne	13, 0, cr5, cr9, cr1, {0}
    5c94:	8d250000 	stchi	0, cr0, [r5]
    5c98:	01000022 	tsteq	r0, r2, lsr #32
    5c9c:	051e0a40 	ldreq	r0, [lr, #-2624]
    5ca0:	50010000 	andpl	r0, r1, r0
    5ca4:	00263325 	eoreq	r3, r6, r5, lsr #6
    5ca8:	0a400100 	beq	10060b0 <__Stack_Size+0x1005cb0>
    5cac:	00000041 	andeq	r0, r0, r1, asr #32
    5cb0:	29005101 	stmdbcs	r0, {r0, r8, ip, lr}
    5cb4:	0020e201 	eoreq	lr, r0, r1, lsl #4
    5cb8:	0a530100 	beq	14c60c0 <__Stack_Size+0x14c5cc0>
    5cbc:	005bb001 	subseq	fp, fp, r1
    5cc0:	005bb608 	subseq	fp, fp, r8, lsl #12
    5cc4:	3e5d0108 	rdfcce	f0, f5, #0.0
    5cc8:	2500001e 	strcs	r0, [r0, #-30]
    5ccc:	0000228d 	andeq	r2, r0, sp, lsl #5
    5cd0:	1e0a5201 	cdpne	2, 0, cr5, cr10, cr1, {0}
    5cd4:	01000005 	tsteq	r0, r5
    5cd8:	20e92550 	rsccs	r2, r9, r0, asr r5
    5cdc:	52010000 	andpl	r0, r1, #0	; 0x0
    5ce0:	0000410a 	andeq	r4, r0, sl, lsl #2
    5ce4:	00510100 	subseq	r0, r1, r0, lsl #2
    5ce8:	0006122a 	andeq	r1, r6, sl, lsr #4
    5cec:	005bb800 	subseq	fp, fp, r0, lsl #16
    5cf0:	005bce08 	subseq	ip, fp, r8, lsl #28
    5cf4:	625d0108 	subsvs	r0, sp, #2	; 0x2
    5cf8:	2b00001e 	blcs	5d78 <__Stack_Size+0x5978>
    5cfc:	00000621 	andeq	r0, r0, r1, lsr #12
    5d00:	2d2c5001 	stccs	0, cr5, [ip, #-4]!
    5d04:	24000006 	strcs	r0, [r0], #-6
    5d08:	00000028 	andeq	r0, r0, r8, lsr #32
    5d0c:	00063a2a 	andeq	r3, r6, sl, lsr #20
    5d10:	005bd000 	subseq	sp, fp, r0
    5d14:	005bea08 	subseq	lr, fp, r8, lsl #20
    5d18:	845d0108 	ldrbhi	r0, [sp], #-264
    5d1c:	2b00001e 	blcs	5d9c <__Stack_Size+0x599c>
    5d20:	00000649 	andeq	r0, r0, r9, asr #12
    5d24:	552b5001 	strpl	r5, [fp, #-1]!
    5d28:	01000006 	tsteq	r0, r6
    5d2c:	c52a0051 	strgt	r0, [sl, #-81]!
    5d30:	ec000006 	stc	0, cr0, [r0], {6}
    5d34:	0208005b 	andeq	r0, r8, #91	; 0x5b
    5d38:	0108005c 	qaddeq	r0, ip, r8
    5d3c:	001ea85d 	andseq	sl, lr, sp, asr r8
    5d40:	06d42b00 	ldrbeq	r2, [r4], r0, lsl #22
    5d44:	50010000 	andpl	r0, r1, r0
    5d48:	0006e02c 	andeq	lr, r6, ip, lsr #32
    5d4c:	00283700 	eoreq	r3, r8, r0, lsl #14
    5d50:	502a0000 	eorpl	r0, sl, r0
    5d54:	04000007 	streq	r0, [r0], #-7
    5d58:	1e08005c 	mcrne	0, 0, r0, cr8, cr12, {2}
    5d5c:	0108005c 	qaddeq	r0, ip, r8
    5d60:	001eca5d 	andseq	ip, lr, sp, asr sl
    5d64:	075f2b00 	ldrbeq	r2, [pc, -r0, lsl #22]
    5d68:	50010000 	andpl	r0, r1, r0
    5d6c:	00076b2b 	andeq	r6, r7, fp, lsr #22
    5d70:	00510100 	subseq	r0, r1, r0, lsl #2
    5d74:	24180129 	ldrcs	r0, [r8], #-297
    5d78:	d9010000 	stmdble	r1, {}
    5d7c:	5c20010a 	stfpls	f0, [r0], #-40
    5d80:	5c300800 	ldcpl	8, cr0, [r0]
    5d84:	5d010800 	stcpl	8, cr0, [r1]
    5d88:	00001f01 	andeq	r1, r0, r1, lsl #30
    5d8c:	00228d25 	eoreq	r8, r2, r5, lsr #26
    5d90:	0ad80100 	beq	ff606198 <SCS_BASE+0x1f5f8198>
    5d94:	0000051e 	andeq	r0, r0, lr, lsl r5
    5d98:	541a5001 	ldrpl	r5, [sl], #-1
    5d9c:	01000021 	tsteq	r0, r1, lsr #32
    5da0:	00410ad8 	ldrdeq	r0, [r1], #-168
    5da4:	284a0000 	stmdacs	sl, {}^
    5da8:	2d000000 	stccs	0, cr0, [r0]
    5dac:	00226301 	eoreq	r6, r2, r1, lsl #6
    5db0:	0aed0100 	beq	ffb461b8 <SCS_BASE+0x1fb381b8>
    5db4:	00004101 	andeq	r4, r0, r1, lsl #2
    5db8:	005c3000 	subseq	r3, ip, r0
    5dbc:	005c3608 	subseq	r3, ip, r8, lsl #12
    5dc0:	2e5d0108 	rdfcse	f0, f5, #0.0
    5dc4:	1a00001f 	bne	5e48 <__Stack_Size+0x5a48>
    5dc8:	0000228d 	andeq	r2, r0, sp, lsl #5
    5dcc:	1e0aec01 	cdpne	12, 0, cr14, cr10, cr1, {0}
    5dd0:	5d000005 	stcpl	0, cr0, [r0, #-20]
    5dd4:	00000028 	andeq	r0, r0, r8, lsr #32
    5dd8:	2325012d 	teqcs	r5, #1073741835	; 0x4000000b
    5ddc:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    5de0:	0041010a 	subeq	r0, r1, sl, lsl #2
    5de4:	5c380000 	ldcpl	0, cr0, [r8]
    5de8:	5c3e0800 	ldcpl	8, cr0, [lr]
    5dec:	5d010800 	stcpl	8, cr0, [r1]
    5df0:	00001f5b 	andeq	r1, r0, fp, asr pc
    5df4:	00228d1a 	eoreq	r8, r2, sl, lsl sp
    5df8:	0afd0100 	beq	fff46200 <SCS_BASE+0x1ff38200>
    5dfc:	0000051e 	andeq	r0, r0, lr, lsl r5
    5e00:	00002870 	andeq	r2, r0, r0, ror r8
    5e04:	35012d00 	strcc	r2, [r1, #-3328]
    5e08:	01000023 	tsteq	r0, r3, lsr #32
    5e0c:	41010b0f 	tstmi	r1, pc, lsl #22
    5e10:	40000000 	andmi	r0, r0, r0
    5e14:	4608005c 	undefined
    5e18:	0108005c 	qaddeq	r0, ip, r8
    5e1c:	001f885d 	andseq	r8, pc, sp, asr r8
    5e20:	228d1a00 	addcs	r1, sp, #0	; 0x0
    5e24:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    5e28:	00051e0b 	andeq	r1, r5, fp, lsl #28
    5e2c:	00288300 	eoreq	r8, r8, r0, lsl #6
    5e30:	012d0000 	teqeq	sp, r0
    5e34:	00002345 	andeq	r2, r0, r5, asr #6
    5e38:	010b2001 	tsteq	fp, r1
    5e3c:	00000041 	andeq	r0, r0, r1, asr #32
    5e40:	08005c48 	stmdaeq	r0, {r3, r6, sl, fp, ip, lr}
    5e44:	08005c50 	stmdaeq	r0, {r4, r6, sl, fp, ip, lr}
    5e48:	1fb55d01 	svcne	0x00b55d01
    5e4c:	8d1a0000 	ldchi	0, cr0, [sl]
    5e50:	01000022 	tsteq	r0, r2, lsr #32
    5e54:	051e0b1f 	ldreq	r0, [lr, #-2847]
    5e58:	28960000 	ldmcs	r6, {}
    5e5c:	2d000000 	stccs	0, cr0, [r0]
    5e60:	00266c01 	eoreq	r6, r6, r1, lsl #24
    5e64:	0b300100 	bleq	c0626c <__Stack_Size+0xc05e6c>
    5e68:	00004101 	andeq	r4, r0, r1, lsl #2
    5e6c:	005c5000 	subseq	r5, ip, r0
    5e70:	005c5608 	subseq	r5, ip, r8, lsl #12
    5e74:	e25d0108 	subs	r0, sp, #2	; 0x2
    5e78:	1a00001f 	bne	5efc <__Stack_Size+0x5afc>
    5e7c:	0000228d 	andeq	r2, r0, sp, lsl #5
    5e80:	1e0b2f01 	cdpne	15, 0, cr2, cr11, cr1, {0}
    5e84:	a9000005 	stmdbge	r0, {r0, r2}
    5e88:	00000028 	andeq	r0, r0, r8, lsr #32
    5e8c:	250c012d 	strcs	r0, [ip, #-301]
    5e90:	40010000 	andmi	r0, r1, r0
    5e94:	0041010b 	subeq	r0, r1, fp, lsl #2
    5e98:	5c580000 	mrapl	r0, r8, acc0
    5e9c:	5c5e0800 	mrrcpl	8, 0, r0, lr, cr0
    5ea0:	5d010800 	stcpl	8, cr0, [r1]
    5ea4:	0000200f 	andeq	r2, r0, pc
    5ea8:	00228d1a 	eoreq	r8, r2, sl, lsl sp
    5eac:	0b3f0100 	bleq	fc62b4 <__Stack_Size+0xfc5eb4>
    5eb0:	0000051e 	andeq	r0, r0, lr, lsl r5
    5eb4:	000028bc 	strheq	r2, [r0], -ip
    5eb8:	2c012d00 	stccs	13, cr2, [r1], {0}
    5ebc:	01000021 	tsteq	r0, r1, lsr #32
    5ec0:	7e010b5e 	mcrvc	11, 0, r0, cr1, cr14, {2}
    5ec4:	60000000 	andvs	r0, r0, r0
    5ec8:	6c08005c 	stcvs	0, cr0, [r8], {92}
    5ecc:	0108005c 	qaddeq	r0, ip, r8
    5ed0:	0020565d 	eoreq	r5, r0, sp, asr r6
    5ed4:	228d1a00 	addcs	r1, sp, #0	; 0x0
    5ed8:	5d010000 	stcpl	0, cr0, [r1]
    5edc:	00051e0b 	andeq	r1, r5, fp, lsl #28
    5ee0:	0028cf00 	eoreq	ip, r8, r0, lsl #30
    5ee4:	248f2500 	strcs	r2, [pc], #1280	; 5eec <__Stack_Size+0x5aec>
    5ee8:	5d010000 	stcpl	0, cr0, [r1]
    5eec:	0000410b 	andeq	r4, r0, fp, lsl #2
    5ef0:	12510100 	subsne	r0, r1, #0	; 0x0
    5ef4:	00001203 	andeq	r1, r0, r3, lsl #4
    5ef8:	890b5f01 	stmdbhi	fp, {r0, r8, r9, sl, fp, ip, lr}
    5efc:	00000000 	andeq	r0, r0, r0
    5f00:	23680129 	cmncs	r8, #1073741834	; 0x4000000a
    5f04:	87010000 	strhi	r0, [r1, -r0]
    5f08:	5c6c010b 	stfple	f0, [ip], #-44
    5f0c:	5c760800 	ldclpl	8, cr0, [r6]
    5f10:	5d010800 	stcpl	8, cr0, [r1]
    5f14:	0000208d 	andeq	r2, r0, sp, lsl #1
    5f18:	00228d25 	eoreq	r8, r2, r5, lsr #26
    5f1c:	0b860100 	bleq	fe186324 <SCS_BASE+0x1e178324>
    5f20:	0000051e 	andeq	r0, r0, lr, lsl r5
    5f24:	8f1a5001 	svchi	0x001a5001
    5f28:	01000024 	tsteq	r0, r4, lsr #32
    5f2c:	00410b86 	subeq	r0, r1, r6, lsl #23
    5f30:	28e20000 	stmiacs	r2!, {}^
    5f34:	2d000000 	stccs	0, cr0, [r0]
    5f38:	00298b01 	eoreq	r8, r9, r1, lsl #22
    5f3c:	0ba30100 	bleq	fe8c6344 <SCS_BASE+0x1e8b8344>
    5f40:	00008901 	andeq	r8, r0, r1, lsl #18
    5f44:	005c7800 	subseq	r7, ip, r0, lsl #16
    5f48:	005c9008 	subseq	r9, ip, r8
    5f4c:	ec5d0108 	ldfe	f0, [sp], {8}
    5f50:	1a000020 	bne	5fd8 <__Stack_Size+0x5bd8>
    5f54:	0000228d 	andeq	r2, r0, sp, lsl #5
    5f58:	1e0ba201 	cdpne	2, 0, cr10, cr11, cr1, {0}
    5f5c:	f5000005 	undefined instruction 0xf5000005
    5f60:	25000028 	strcs	r0, [r0, #-40]
    5f64:	000029a2 	andeq	r2, r0, r2, lsr #19
    5f68:	410ba201 	tstmi	fp, r1, lsl #4
    5f6c:	01000000 	tsteq	r0, r0
    5f70:	12031251 	andne	r1, r3, #268435461	; 0x10000005
    5f74:	a4010000 	strge	r0, [r1]
    5f78:	0000890b 	andeq	r8, r0, fp, lsl #18
    5f7c:	12041200 	andne	r1, r4, #0	; 0x0
    5f80:	a5010000 	strge	r0, [r1]
    5f84:	0000410b 	andeq	r4, r0, fp, lsl #2
    5f88:	21b11200 	undefined instruction 0x21b11200
    5f8c:	a5010000 	strge	r0, [r1]
    5f90:	0000410b 	andeq	r4, r0, fp, lsl #2
    5f94:	01290000 	teqeq	r9, r0
    5f98:	000023a2 	andeq	r2, r0, r2, lsr #7
    5f9c:	010bce01 	tsteq	fp, r1, lsl #28
    5fa0:	08005c90 	stmdaeq	r0, {r4, r7, sl, fp, ip, lr}
    5fa4:	08005c9a 	stmdaeq	r0, {r1, r3, r4, r7, sl, fp, ip, lr}
    5fa8:	21235d01 	teqcs	r3, r1, lsl #26
    5fac:	8d250000 	stchi	0, cr0, [r5]
    5fb0:	01000022 	tsteq	r0, r2, lsr #32
    5fb4:	051e0bcd 	ldreq	r0, [lr, #-3021]
    5fb8:	50010000 	andpl	r0, r1, r0
    5fbc:	0029a21a 	eoreq	sl, r9, sl, lsl r2
    5fc0:	0bcd0100 	bleq	ff3463c8 <SCS_BASE+0x1f3383c8>
    5fc4:	00000041 	andeq	r0, r0, r1, asr #32
    5fc8:	00002908 	andeq	r2, r0, r8, lsl #18
    5fcc:	0c012e00 	stceq	14, cr2, [r1], {0}
    5fd0:	01000022 	tsteq	r0, r2, lsr #32
    5fd4:	5c9c0187 	ldfpls	f0, [ip], {135}
    5fd8:	5d680800 	stclpl	8, cr0, [r8]
    5fdc:	291b0800 	ldmdbcs	fp, {fp}
    5fe0:	8d170000 	ldchi	0, cr0, [r7]
    5fe4:	01000022 	tsteq	r0, r2, lsr #32
    5fe8:	00051e86 	andeq	r1, r5, r6, lsl #29
    5fec:	00294600 	eoreq	r4, r9, r0, lsl #12
    5ff0:	4c000000 	stcmi	0, cr0, [r0], {0}
    5ff4:	02000009 	andeq	r0, r0, #9	; 0x9
    5ff8:	00142c00 	andseq	r2, r4, r0, lsl #24
    5ffc:	3b010400 	blcc	47004 <__Stack_Size+0x46c04>
    6000:	01000005 	tsteq	r0, r5
    6004:	00002d65 	andeq	r2, r0, r5, ror #26
    6008:	00000431 	andeq	r0, r0, r1, lsr r4
    600c:	08005d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip, lr}
    6010:	08006124 	stmdaeq	r0, {r2, r5, r8, sp, lr}
    6014:	000014f2 	strdeq	r1, [r0], -r2
    6018:	21050402 	tstcs	r5, r2, lsl #8
    601c:	0200002e 	andeq	r0, r0, #46	; 0x2e
    6020:	05b80502 	ldreq	r0, [r8, #1282]!
    6024:	01020000 	tsteq	r2, r0
    6028:	0006cc06 	andeq	ip, r6, r6, lsl #24
    602c:	33750300 	cmncc	r5, #0	; 0x0
    6030:	27020032 	smladxcs	r2, r2, r0, r0
    6034:	00000045 	andeq	r0, r0, r5, asr #32
    6038:	9b070402 	blls	1c7048 <__Stack_Size+0x1c6c48>
    603c:	0300002e 	movweq	r0, #46	; 0x2e
    6040:	00363175 	eorseq	r3, r6, r5, ror r1
    6044:	00572802 	subseq	r2, r7, r2, lsl #16
    6048:	02020000 	andeq	r0, r2, #0	; 0x0
    604c:	00081e07 	andeq	r1, r8, r7, lsl #28
    6050:	38750300 	ldmdacc	r5!, {r8, r9}^
    6054:	68290200 	stmdavs	r9!, {r9}
    6058:	02000000 	andeq	r0, r0, #0	; 0x0
    605c:	06ca0801 	strbeq	r0, [sl], r1, lsl #16
    6060:	57040000 	strpl	r0, [r4, -r0]
    6064:	05000000 	streq	r0, [r0]
    6068:	89390201 	ldmdbhi	r9!, {r0, r9}
    606c:	06000000 	streq	r0, [r0], -r0
    6070:	0000149d 	muleq	r0, sp, r4
    6074:	45530700 	ldrbmi	r0, [r3, #-1792]
    6078:	00010054 	andeq	r0, r1, r4, asr r0
    607c:	001df008 	andseq	pc, sp, r8
    6080:	74390200 	ldrtvc	r0, [r9], #-512
    6084:	08000000 	stmdaeq	r0, {}
    6088:	00001bea 	andeq	r1, r0, sl, ror #23
    608c:	00743902 	rsbseq	r3, r4, r2, lsl #18
    6090:	01050000 	tsteq	r5, r0
    6094:	00b43b02 	adcseq	r3, r4, r2, lsl #22
    6098:	63060000 	movwvs	r0, #24576	; 0x6000
    609c:	00000003 	andeq	r0, r0, r3
    60a0:	00068d06 	andeq	r8, r6, r6, lsl #26
    60a4:	08000100 	stmdaeq	r0, {r8}
    60a8:	000000d1 	ldrdeq	r0, [r0], -r1
    60ac:	009f3b02 	addseq	r3, pc, r2, lsl #22
    60b0:	04090000 	streq	r0, [r9]
    60b4:	031c0a07 	tsteq	ip, #28672	; 0x7000
    60b8:	019c0239 	orrseq	r0, ip, r9, lsr r2
    60bc:	530b0000 	movwpl	r0, #45056	; 0xb000
    60c0:	3a030052 	bcc	c6210 <__Stack_Size+0xc5e10>
    60c4:	00006f02 	andeq	r6, r0, r2, lsl #30
    60c8:	00230200 	eoreq	r0, r3, r0, lsl #4
    60cc:	0005720c 	andeq	r7, r5, ip, lsl #4
    60d0:	023b0300 	eorseq	r0, fp, #0	; 0x0
    60d4:	0000004c 	andeq	r0, r0, ip, asr #32
    60d8:	0b022302 	bleq	8ece8 <__Stack_Size+0x8e8e8>
    60dc:	03005244 	movweq	r5, #580	; 0x244
    60e0:	006f023c 	rsbeq	r0, pc, ip, lsr r2
    60e4:	23020000 	movwcs	r0, #8192	; 0x2000
    60e8:	057c0c04 	ldrbeq	r0, [ip, #-3076]!
    60ec:	3d030000 	stccc	0, cr0, [r3]
    60f0:	00004c02 	andeq	r4, r0, r2, lsl #24
    60f4:	06230200 	strteq	r0, [r3], -r0, lsl #4
    60f8:	5252420b 	subspl	r4, r2, #-1342177280	; 0xb0000000
    60fc:	023e0300 	eorseq	r0, lr, #0	; 0x0
    6100:	0000006f 	andeq	r0, r0, pc, rrx
    6104:	0c082302 	stceq	3, cr2, [r8], {2}
    6108:	00000586 	andeq	r0, r0, r6, lsl #11
    610c:	4c023f03 	stcmi	15, cr3, [r2], {3}
    6110:	02000000 	andeq	r0, r0, #0	; 0x0
    6114:	430b0a23 	movwmi	r0, #47651	; 0xba23
    6118:	03003152 	movweq	r3, #338	; 0x152
    611c:	006f0240 	rsbeq	r0, pc, r0, asr #4
    6120:	23020000 	movwcs	r0, #8192	; 0x2000
    6124:	05900c0c 	ldreq	r0, [r0, #3084]
    6128:	41030000 	tstmi	r3, r0
    612c:	00004c02 	andeq	r4, r0, r2, lsl #24
    6130:	0e230200 	cdpeq	2, 2, cr0, cr3, cr0, {0}
    6134:	3252430b 	subscc	r4, r2, #738197504	; 0x2c000000
    6138:	02420300 	subeq	r0, r2, #0	; 0x0
    613c:	0000006f 	andeq	r0, r0, pc, rrx
    6140:	0c102302 	ldceq	3, cr2, [r0], {2}
    6144:	0000059a 	muleq	r0, sl, r5
    6148:	4c024303 	stcmi	3, cr4, [r2], {3}
    614c:	02000000 	andeq	r0, r0, #0	; 0x0
    6150:	430b1223 	movwmi	r1, #45603	; 0xb223
    6154:	03003352 	movweq	r3, #850	; 0x352
    6158:	006f0244 	rsbeq	r0, pc, r4, asr #4
    615c:	23020000 	movwcs	r0, #8192	; 0x2000
    6160:	05a40c14 	streq	r0, [r4, #3092]!
    6164:	45030000 	strmi	r0, [r3]
    6168:	00004c02 	andeq	r4, r0, r2, lsl #24
    616c:	16230200 	strtne	r0, [r3], -r0, lsl #4
    6170:	0001730c 	andeq	r7, r1, ip, lsl #6
    6174:	02460300 	subeq	r0, r6, #0	; 0x0
    6178:	0000006f 	andeq	r0, r0, pc, rrx
    617c:	0c182302 	ldceq	3, cr2, [r8], {2}
    6180:	000005ae 	andeq	r0, r0, lr, lsr #11
    6184:	4c024703 	stcmi	7, cr4, [r2], {3}
    6188:	02000000 	andeq	r0, r0, #0	; 0x0
    618c:	0d001a23 	fstseq	s2, [r0, #-140]
    6190:	00002a8b 	andeq	r2, r0, fp, lsl #21
    6194:	c2024803 	andgt	r4, r2, #196608	; 0x30000
    6198:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    619c:	051b0410 	ldreq	r0, [fp, #-1040]
    61a0:	0f000002 	svceq	0x00000002
    61a4:	00000196 	muleq	r0, r6, r1
    61a8:	003a1c04 	eorseq	r1, sl, r4, lsl #24
    61ac:	23020000 	movwcs	r0, #8192	; 0x2000
    61b0:	01100f00 	tsteq	r0, r0, lsl #30
    61b4:	1d040000 	stcne	0, cr0, [r4]
    61b8:	0000004c 	andeq	r0, r0, ip, asr #32
    61bc:	0f042302 	svceq	0x00042302
    61c0:	0000012c 	andeq	r0, r0, ip, lsr #2
    61c4:	004c1e04 	subeq	r1, ip, r4, lsl #28
    61c8:	23020000 	movwcs	r0, #8192	; 0x2000
    61cc:	07d70f06 	ldrbeq	r0, [r7, r6, lsl #30]
    61d0:	1f040000 	svcne	0x00040000
    61d4:	0000004c 	andeq	r0, r0, ip, asr #32
    61d8:	0f082302 	svceq	0x00082302
    61dc:	000003ac 	andeq	r0, r0, ip, lsr #7
    61e0:	004c2004 	subeq	r2, ip, r4
    61e4:	23020000 	movwcs	r0, #8192	; 0x2000
    61e8:	03e00f0a 	mvneq	r0, #40	; 0x28
    61ec:	21040000 	tstcs	r4, r0
    61f0:	0000004c 	andeq	r0, r0, ip, asr #32
    61f4:	000c2302 	andeq	r2, ip, r2, lsl #6
    61f8:	00079108 	andeq	r9, r7, r8, lsl #2
    61fc:	a8220400 	stmdage	r2!, {sl}
    6200:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    6204:	51260408 	teqpl	r6, r8, lsl #8
    6208:	0f000002 	svceq	0x00000002
    620c:	00002c89 	andeq	r2, r0, r9, lsl #25
    6210:	004c2704 	subeq	r2, ip, r4, lsl #14
    6214:	23020000 	movwcs	r0, #8192	; 0x2000
    6218:	2d530f00 	ldclcs	15, cr0, [r3]
    621c:	28040000 	stmdacs	r4, {}
    6220:	0000004c 	andeq	r0, r0, ip, asr #32
    6224:	0f022302 	svceq	0x00022302
    6228:	00002a47 	andeq	r2, r0, r7, asr #20
    622c:	004c2904 	subeq	r2, ip, r4, lsl #18
    6230:	23020000 	movwcs	r0, #8192	; 0x2000
    6234:	2af70f04 	bcs	ffdc9e4c <SCS_BASE+0x1fdbbe4c>
    6238:	2a040000 	bcs	106240 <__Stack_Size+0x105e40>
    623c:	0000004c 	andeq	r0, r0, ip, asr #32
    6240:	00062302 	andeq	r2, r6, r2, lsl #6
    6244:	002a9908 	eoreq	r9, sl, r8, lsl #18
    6248:	102b0400 	eorne	r0, fp, r0, lsl #8
    624c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    6250:	ab1a0514 	blge	6876a8 <__Stack_Size+0x6872a8>
    6254:	0f000002 	svceq	0x00000002
    6258:	00001e4e 	andeq	r1, r0, lr, asr #28
    625c:	003a1b05 	eorseq	r1, sl, r5, lsl #22
    6260:	23020000 	movwcs	r0, #8192	; 0x2000
    6264:	1c540f00 	mrrcne	15, 0, r0, r4, cr0
    6268:	1c050000 	stcne	0, cr0, [r5], {0}
    626c:	0000003a 	andeq	r0, r0, sl, lsr r0
    6270:	0f042302 	svceq	0x00042302
    6274:	00001eb7 	strheq	r1, [r0], -r7
    6278:	003a1d05 	eorseq	r1, sl, r5, lsl #26
    627c:	23020000 	movwcs	r0, #8192	; 0x2000
    6280:	1e6a0f08 	cdpne	15, 6, cr0, cr10, cr8, {0}
    6284:	1e050000 	cdpne	0, 0, cr0, cr5, cr0, {0}
    6288:	0000003a 	andeq	r0, r0, sl, lsr r0
    628c:	0f0c2302 	svceq	0x000c2302
    6290:	00001db0 	strheq	r1, [r0], -r0
    6294:	003a1f05 	eorseq	r1, sl, r5, lsl #30
    6298:	23020000 	movwcs	r0, #8192	; 0x2000
    629c:	1c080010 	stcne	0, cr0, [r8], {16}
    62a0:	0500001c 	streq	r0, [r0, #-28]
    62a4:	00025c20 	andeq	r5, r2, r0, lsr #24
    62a8:	92011000 	andls	r1, r1, #0	; 0x0
    62ac:	0100002d 	tsteq	r0, sp, lsr #32
    62b0:	5d6801e9 	stfple	f0, [r8, #-932]!
    62b4:	5d860800 	stcpl	8, cr0, [r6]
    62b8:	5d010800 	stcpl	8, cr0, [r1]
    62bc:	000002db 	ldrdeq	r0, [r0], -fp
    62c0:	002c3011 	eoreq	r3, ip, r1, lsl r0
    62c4:	dbe80100 	blle	ffa066cc <SCS_BASE+0x1f9f86cc>
    62c8:	01000002 	tsteq	r0, r2
    62cc:	04120050 	ldreq	r0, [r2], #-80
    62d0:	00000205 	andeq	r0, r0, r5, lsl #4
    62d4:	2d0e0113 	stfcss	f0, [lr, #-76]
    62d8:	00010000 	andeq	r0, r1, r0
    62dc:	5d880101 	stfpls	f0, [r8, #4]
    62e0:	5db00800 	ldcpl	8, cr0, [r0]
    62e4:	5d010800 	stcpl	8, cr0, [r1]
    62e8:	00000324 	andeq	r0, r0, r4, lsr #6
    62ec:	002c1611 	eoreq	r1, ip, r1, lsl r6
    62f0:	24ff0100 	ldrbtcs	r0, [pc], #256	; 62f8 <__Stack_Size+0x5ef8>
    62f4:	01000003 	tsteq	r0, r3
    62f8:	2b7e1450 	blcs	1f8b440 <__Stack_Size+0x1f8b040>
    62fc:	ff010000 	undefined instruction 0xff010000
    6300:	0000032a 	andeq	r0, r0, sl, lsr #6
    6304:	00002965 	andeq	r2, r0, r5, ror #18
    6308:	00154e15 	andseq	r4, r5, r5, lsl lr
    630c:	01010100 	tsteq	r1, r0, lsl #2
    6310:	0000003a 	andeq	r0, r0, sl, lsr r0
    6314:	12005201 	andne	r5, r0, #268435456	; 0x10000000
    6318:	00019c04 	andeq	r9, r1, r4, lsl #24
    631c:	51041200 	tstpl	r4, r0, lsl #4
    6320:	13000002 	movwne	r0, #2	; 0x2
    6324:	002ba101 	eoreq	sl, fp, r1, lsl #2
    6328:	01240100 	teqeq	r4, r0, lsl #2
    632c:	005db001 	subseq	fp, sp, r1
    6330:	005dbe08 	subseq	fp, sp, r8, lsl #28
    6334:	575d0108 	ldrbpl	r0, [sp, -r8, lsl #2]
    6338:	16000003 	strne	r0, [r0], -r3
    633c:	00002b7e 	andeq	r2, r0, lr, ror fp
    6340:	2a012301 	bcs	4ef4c <__Stack_Size+0x4eb4c>
    6344:	01000003 	tsteq	r0, r3
    6348:	01130050 	tsteq	r3, r0, asr r0
    634c:	00002ab0 	strheq	r2, [r0], -r0
    6350:	01013801 	tsteq	r1, r1, lsl #16
    6354:	08005dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, ip, lr}
    6358:	08005dda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, fp, ip, lr}
    635c:	038c5d01 	orreq	r5, ip, #64	; 0x40
    6360:	16160000 	ldrne	r0, [r6], -r0
    6364:	0100002c 	tsteq	r0, ip, lsr #32
    6368:	03240137 	teqeq	r4, #-1073741811	; 0xc000000d
    636c:	50010000 	andpl	r0, r1, r0
    6370:	00117c16 	andseq	r7, r1, r6, lsl ip
    6374:	01370100 	teqeq	r7, r0, lsl #2
    6378:	000000b4 	strheq	r0, [r0], -r4
    637c:	17005101 	strne	r5, [r0, -r1, lsl #2]
    6380:	002c0701 	eoreq	r0, ip, r1, lsl #14
    6384:	01630100 	cmneq	r3, r0, lsl #2
    6388:	005ddc01 	subseq	sp, sp, r1, lsl #24
    638c:	005e1a08 	subseq	r1, lr, r8, lsl #20
    6390:	00297808 	eoreq	r7, r9, r8, lsl #16
    6394:	00040d00 	andeq	r0, r4, r0, lsl #26
    6398:	2c161800 	ldccs	8, cr1, [r6], {0}
    639c:	62010000 	andvs	r0, r1, #0	; 0x0
    63a0:	00032401 	andeq	r2, r3, r1, lsl #8
    63a4:	00299700 	eoreq	r9, r9, r0, lsl #14
    63a8:	2d051800 	stccs	8, cr1, [r5]
    63ac:	62010000 	andvs	r0, r1, #0	; 0x0
    63b0:	00004c01 	andeq	r4, r0, r1, lsl #24
    63b4:	0029aa00 	eoreq	sl, r9, r0, lsl #20
    63b8:	117c1600 	cmnne	ip, r0, lsl #12
    63bc:	62010000 	andvs	r0, r1, #0	; 0x0
    63c0:	0000b401 	andeq	fp, r0, r1, lsl #8
    63c4:	15520100 	ldrbne	r0, [r2, #-256]
    63c8:	00002d89 	andeq	r2, r0, r9, lsl #27
    63cc:	3a016401 	bcc	5f3d8 <__Stack_Size+0x5efd8>
    63d0:	01000000 	tsteq	r0, r0
    63d4:	2c50195c 	mrrccs	9, 5, r1, r0, cr12
    63d8:	64010000 	strvs	r0, [r1]
    63dc:	00003a01 	andeq	r3, r0, r1, lsl #20
    63e0:	2d5e1500 	cfldr64cs	mvdx1, [lr]
    63e4:	64010000 	strvs	r0, [r1]
    63e8:	00003a01 	andeq	r3, r0, r1, lsl #20
    63ec:	1a510100 	bne	14467f4 <__Stack_Size+0x14463f4>
    63f0:	00002bb7 	strheq	r2, [r0], -r7
    63f4:	3a016501 	bcc	5f800 <__Stack_Size+0x5f400>
    63f8:	c8000000 	stmdagt	r0, {}
    63fc:	00000029 	andeq	r0, r0, r9, lsr #32
    6400:	2aea0113 	bcs	ffa86854 <SCS_BASE+0x1fa78854>
    6404:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    6408:	5e1c0101 	mufple	f0, f4, f1
    640c:	5e340800 	cdppl	8, 3, cr0, cr4, cr0, {0}
    6410:	5d010800 	stcpl	8, cr0, [r1]
    6414:	00000450 	andeq	r0, r0, r0, asr r4
    6418:	002c1616 	eoreq	r1, ip, r6, lsl r6
    641c:	019d0100 	orrseq	r0, sp, r0, lsl #2
    6420:	00000324 	andeq	r0, r0, r4, lsr #6
    6424:	94165001 	ldrls	r5, [r6], #-1
    6428:	0100002b 	tsteq	r0, fp, lsr #32
    642c:	004c019d 	umaaleq	r0, ip, sp, r1
    6430:	51010000 	tstpl	r1, r0
    6434:	00117c16 	andseq	r7, r1, r6, lsl ip
    6438:	019d0100 	orrseq	r0, sp, r0, lsl #2
    643c:	000000b4 	strheq	r0, [r0], -r4
    6440:	13005201 	movwne	r5, #513	; 0x201
    6444:	002bd301 	eoreq	sp, fp, r1, lsl #6
    6448:	01bd0100 	undefined instruction 0x01bd0100
    644c:	005e3401 	subseq	r3, lr, r1, lsl #8
    6450:	005e4a08 	subseq	r4, lr, r8, lsl #20
    6454:	855d0108 	ldrbhi	r0, [sp, #-264]
    6458:	16000004 	strne	r0, [r0], -r4
    645c:	00002c16 	andeq	r2, r0, r6, lsl ip
    6460:	2401bc01 	strcs	fp, [r1], #-3073
    6464:	01000003 	tsteq	r0, r3
    6468:	2c411650 	mcrrcs	6, 5, r1, r1, cr0
    646c:	bc010000 	stclt	0, cr0, [r1], {0}
    6470:	00005e01 	andeq	r5, r0, r1, lsl #28
    6474:	00510100 	subseq	r0, r1, r0, lsl #2
    6478:	2d1e0113 	ldfcss	f0, [lr, #-76]
    647c:	d6010000 	strle	r0, [r1], -r0
    6480:	5e4c0101 	dvfple	f0, f4, f1
    6484:	5e620800 	cdppl	8, 6, cr0, cr2, cr0, {0}
    6488:	5d010800 	stcpl	8, cr0, [r1]
    648c:	000004bc 	strheq	r0, [r0], -ip
    6490:	002c1616 	eoreq	r1, ip, r6, lsl r6
    6494:	01d50100 	bicseq	r0, r5, r0, lsl #2
    6498:	00000324 	andeq	r0, r0, r4, lsr #6
    649c:	dd185001 	ldcle	0, cr5, [r8, #-4]
    64a0:	0100002a 	tsteq	r0, sl, lsr #32
    64a4:	004c01d5 	ldrdeq	r0, [ip], #-21
    64a8:	29f10000 	ldmibcs	r1!, {}^
    64ac:	13000000 	movwne	r0, #0	; 0x0
    64b0:	002c9501 	eoreq	r9, ip, r1, lsl #10
    64b4:	01eb0100 	mvneq	r0, r0, lsl #2
    64b8:	005e6401 	subseq	r6, lr, r1, lsl #8
    64bc:	005e7e08 	subseq	r7, lr, r8, lsl #28
    64c0:	f15d0108 	undefined instruction 0xf15d0108
    64c4:	16000004 	strne	r0, [r0], -r4
    64c8:	00002c16 	andeq	r2, r0, r6, lsl ip
    64cc:	2401ea01 	strcs	lr, [r1], #-2561
    64d0:	01000003 	tsteq	r0, r3
    64d4:	117c1650 	cmnne	ip, r0, asr r6
    64d8:	ea010000 	b	464e0 <__Stack_Size+0x460e0>
    64dc:	0000b401 	andeq	fp, r0, r1, lsl #8
    64e0:	00510100 	subseq	r0, r1, r0, lsl #2
    64e4:	2b450113 	blcs	1146938 <__Stack_Size+0x1146538>
    64e8:	0b010000 	bleq	464f0 <__Stack_Size+0x460f0>
    64ec:	5e800102 	rmfpls	f0, f0, f2
    64f0:	5e960800 	cdppl	8, 9, cr0, cr6, cr0, {0}
    64f4:	5d010800 	stcpl	8, cr0, [r1]
    64f8:	00000528 	andeq	r0, r0, r8, lsr #10
    64fc:	002c1616 	eoreq	r1, ip, r6, lsl r6
    6500:	020a0100 	andeq	r0, sl, #0	; 0x0
    6504:	00000324 	andeq	r0, r0, r4, lsr #6
    6508:	70185001 	andsvc	r5, r8, r1
    650c:	0100002a 	tsteq	r0, sl, lsr #32
    6510:	004c020a 	subeq	r0, ip, sl, lsl #4
    6514:	2a040000 	bcs	10651c <__Stack_Size+0x10611c>
    6518:	13000000 	movwne	r0, #0	; 0x0
    651c:	002cbb01 	eoreq	fp, ip, r1, lsl #22
    6520:	02200100 	eoreq	r0, r0, #0	; 0x0
    6524:	005e9801 	subseq	r9, lr, r1, lsl #16
    6528:	005eb208 	subseq	fp, lr, r8, lsl #4
    652c:	5d5d0108 	ldfple	f0, [sp, #-32]
    6530:	16000005 	strne	r0, [r0], -r5
    6534:	00002c16 	andeq	r2, r0, r6, lsl ip
    6538:	24021f01 	strcs	r1, [r2], #-3841
    653c:	01000003 	tsteq	r0, r3
    6540:	117c1650 	cmnne	ip, r0, asr r6
    6544:	1f010000 	svcne	0x00010000
    6548:	0000b402 	andeq	fp, r0, r2, lsl #8
    654c:	00510100 	subseq	r0, r1, r0, lsl #2
    6550:	2aba0113 	bcs	fee869a4 <SCS_BASE+0x1ee789a4>
    6554:	3c010000 	stccc	0, cr0, [r1], {0}
    6558:	5eb40102 	frdpls	f0, f4, f2
    655c:	5ebc0800 	cdppl	8, 11, cr0, cr12, cr0, {0}
    6560:	5d010800 	stcpl	8, cr0, [r1]
    6564:	00000594 	muleq	r0, r4, r5
    6568:	002c1616 	eoreq	r1, ip, r6, lsl r6
    656c:	023b0100 	eorseq	r0, fp, #0	; 0x0
    6570:	00000324 	andeq	r0, r0, r4, lsr #6
    6574:	07185001 	ldreq	r5, [r8, -r1]
    6578:	01000013 	tsteq	r0, r3, lsl r0
    657c:	004c023b 	subeq	r0, ip, fp, lsr r2
    6580:	2a170000 	bcs	5c6588 <__Stack_Size+0x5c6188>
    6584:	1b000000 	blne	658c <__Stack_Size+0x618c>
    6588:	002d3101 	eoreq	r3, sp, r1, lsl #2
    658c:	024f0100 	subeq	r0, pc, #0	; 0x0
    6590:	00004c01 	andeq	r4, r0, r1, lsl #24
    6594:	005ebc00 	subseq	fp, lr, r0, lsl #24
    6598:	005ec408 	subseq	ip, lr, r8, lsl #8
    659c:	c15d0108 	cmpgt	sp, r8, lsl #2
    65a0:	18000005 	stmdane	r0, {r0, r2}
    65a4:	00002c16 	andeq	r2, r0, r6, lsl ip
    65a8:	24024e01 	strcs	r4, [r2], #-3585
    65ac:	2a000003 	bcs	65c0 <__Stack_Size+0x61c0>
    65b0:	0000002a 	andeq	r0, r0, sl, lsr #32
    65b4:	2bf70113 	blcs	ffdc6a08 <SCS_BASE+0x1fdb8a08>
    65b8:	61010000 	tstvs	r1, r0
    65bc:	5ec40102 	polpls	f0, f4, f2
    65c0:	5ed00800 	cdppl	8, 13, cr0, cr0, cr0, {0}
    65c4:	5d010800 	stcpl	8, cr0, [r1]
    65c8:	000005e8 	andeq	r0, r0, r8, ror #11
    65cc:	002c1616 	eoreq	r1, ip, r6, lsl r6
    65d0:	02600100 	rsbeq	r0, r0, #0	; 0x0
    65d4:	00000324 	andeq	r0, r0, r4, lsr #6
    65d8:	13005001 	movwne	r5, #1	; 0x1
    65dc:	002be401 	eoreq	lr, fp, r1, lsl #8
    65e0:	02740100 	rsbseq	r0, r4, #0	; 0x0
    65e4:	005ed001 	subseq	sp, lr, r1
    65e8:	005ee208 	subseq	lr, lr, r8, lsl #4
    65ec:	1d5d0108 	ldfnee	f0, [sp, #-32]
    65f0:	16000006 	strne	r0, [r0], -r6
    65f4:	00002c16 	andeq	r2, r0, r6, lsl ip
    65f8:	24027301 	strcs	r7, [r2], #-769
    65fc:	01000003 	tsteq	r0, r3
    6600:	2b351650 	blcs	d4bf48 <__Stack_Size+0xd4bb48>
    6604:	73010000 	movwvc	r0, #4096	; 0x1000
    6608:	00005e02 	andeq	r5, r0, r2, lsl #28
    660c:	00510100 	subseq	r0, r1, r0, lsl #2
    6610:	2a520113 	bcs	1486a64 <__Stack_Size+0x1486664>
    6614:	8a010000 	bhi	4661c <__Stack_Size+0x4621c>
    6618:	5ee40102 	cdppl	1, 14, cr0, cr4, cr2, {0}
    661c:	5ef60800 	cdppl	8, 15, cr0, cr6, cr0, {0}
    6620:	5d010800 	stcpl	8, cr0, [r1]
    6624:	00000652 	andeq	r0, r0, r2, asr r6
    6628:	002c1616 	eoreq	r1, ip, r6, lsl r6
    662c:	02890100 	addeq	r0, r9, #0	; 0x0
    6630:	00000324 	andeq	r0, r0, r4, lsr #6
    6634:	43165001 	tstmi	r6, #1	; 0x1
    6638:	0100002d 	tsteq	r0, sp, lsr #32
    663c:	005e0289 	subseq	r0, lr, r9, lsl #5
    6640:	51010000 	tstpl	r1, r0
    6644:	1d011300 	stcne	3, cr1, [r1]
    6648:	0100002c 	tsteq	r0, ip, lsr #32
    664c:	f80102a0 	undefined instruction 0xf80102a0
    6650:	1208005e 	andne	r0, r8, #94	; 0x5e
    6654:	0108005f 	qaddeq	r0, pc, r8
    6658:	0006875d 	andeq	r8, r6, sp, asr r7
    665c:	2c161600 	ldccs	6, cr1, [r6], {0}
    6660:	9f010000 	svcls	0x00010000
    6664:	00032402 	andeq	r2, r3, r2, lsl #8
    6668:	16500100 	ldrbne	r0, [r0], -r0, lsl #2
    666c:	0000117c 	andeq	r1, r0, ip, ror r1
    6670:	b4029f01 	strlt	r9, [r2], #-3841
    6674:	01000000 	tsteq	r0, r0
    6678:	01130051 	tsteq	r3, r1, asr r0
    667c:	00002cda 	ldrdeq	r2, [r0], -sl
    6680:	0102bd01 	tsteq	r2, r1, lsl #26
    6684:	08005f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, ip, lr}
    6688:	08005f2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, sl, fp, ip, lr}
    668c:	06bc5d01 	ldrteq	r5, [ip], r1, lsl #26
    6690:	16160000 	ldrne	r0, [r6], -r0
    6694:	0100002c 	tsteq	r0, ip, lsr #32
    6698:	032402bc 	teqeq	r4, #-1073741813	; 0xc000000b
    669c:	50010000 	andpl	r0, r1, r0
    66a0:	00117c16 	andseq	r7, r1, r6, lsl ip
    66a4:	02bc0100 	adcseq	r0, ip, #0	; 0x0
    66a8:	000000b4 	strheq	r0, [r0], -r4
    66ac:	13005101 	movwne	r5, #257	; 0x101
    66b0:	002ac901 	eoreq	ip, sl, r1, lsl #18
    66b4:	02da0100 	sbcseq	r0, sl, #0	; 0x0
    66b8:	005f3001 	subseq	r3, pc, r1
    66bc:	005f4a08 	subseq	r4, pc, r8, lsl #20
    66c0:	f15d0108 	undefined instruction 0xf15d0108
    66c4:	16000006 	strne	r0, [r0], -r6
    66c8:	00002c16 	andeq	r2, r0, r6, lsl ip
    66cc:	2402d901 	strcs	sp, [r2], #-2305
    66d0:	01000003 	tsteq	r0, r3
    66d4:	117c1650 	cmnne	ip, r0, asr r6
    66d8:	d9010000 	stmdble	r1, {}
    66dc:	0000b402 	andeq	fp, r0, r2, lsl #8
    66e0:	00510100 	subseq	r0, r1, r0, lsl #2
    66e4:	2c780113 	ldfcse	f0, [r8], #-76
    66e8:	f9010000 	undefined instruction 0xf9010000
    66ec:	5f4c0102 	svcpl	0x004c0102
    66f0:	5f620800 	svcpl	0x00620800
    66f4:	5d010800 	stcpl	8, cr0, [r1]
    66f8:	00000728 	andeq	r0, r0, r8, lsr #14
    66fc:	002c1616 	eoreq	r1, ip, r6, lsl r6
    6700:	02f80100 	rscseq	r0, r8, #0	; 0x0
    6704:	00000324 	andeq	r0, r0, r4, lsr #6
    6708:	05185001 	ldreq	r5, [r8, #-1]
    670c:	0100002b 	tsteq	r0, fp, lsr #32
    6710:	004c02f8 	strdeq	r0, [ip], #-40
    6714:	2a3d0000 	bcs	f4671c <__Stack_Size+0xf4631c>
    6718:	13000000 	movwne	r0, #0	; 0x0
    671c:	002cad01 	eoreq	sl, ip, r1, lsl #26
    6720:	030e0100 	movweq	r0, #57600	; 0xe100
    6724:	005f6401 	subseq	r6, pc, r1, lsl #8
    6728:	005f7e08 	subseq	r7, pc, r8, lsl #28
    672c:	5d5d0108 	ldfple	f0, [sp, #-32]
    6730:	16000007 	strne	r0, [r0], -r7
    6734:	00002c16 	andeq	r2, r0, r6, lsl ip
    6738:	24030d01 	strcs	r0, [r3], #-3329
    673c:	01000003 	tsteq	r0, r3
    6740:	117c1650 	cmnne	ip, r0, asr r6
    6744:	0d010000 	stceq	0, cr0, [r1]
    6748:	0000b403 	andeq	fp, r0, r3, lsl #8
    674c:	00510100 	subseq	r0, r1, r0, lsl #2
    6750:	2cf1011b 	ldfcse	f0, [r1], #108
    6754:	36010000 	strcc	r0, [r1], -r0
    6758:	00890103 	addeq	r0, r9, r3, lsl #2
    675c:	5f800000 	svcpl	0x00800000
    6760:	5f8c0800 	svcpl	0x008c0800
    6764:	5d010800 	stcpl	8, cr0, [r1]
    6768:	000007a4 	andeq	r0, r0, r4, lsr #15
    676c:	002c1618 	eoreq	r1, ip, r8, lsl r6
    6770:	03350100 	teqeq	r5, #0	; 0x0
    6774:	00000324 	andeq	r0, r0, r4, lsr #6
    6778:	00002a50 	andeq	r2, r0, r0, asr sl
    677c:	002b6616 	eoreq	r6, fp, r6, lsl r6
    6780:	03350100 	teqeq	r5, #0	; 0x0
    6784:	0000004c 	andeq	r0, r0, ip, asr #32
    6788:	03195101 	tsteq	r9, #1073741824	; 0x40000000
    678c:	01000012 	tsteq	r0, r2, lsl r0
    6790:	00890337 	addeq	r0, r9, r7, lsr r3
    6794:	13000000 	movwne	r0, #0	; 0x0
    6798:	002c5601 	eoreq	r5, ip, r1, lsl #12
    679c:	036a0100 	cmneq	sl, #0	; 0x0
    67a0:	005f8c01 	subseq	r8, pc, r1, lsl #24
    67a4:	005f9608 	subseq	r9, pc, r8, lsl #12
    67a8:	db5d0108 	blle	1746bd0 <__Stack_Size+0x17467d0>
    67ac:	16000007 	strne	r0, [r0], -r7
    67b0:	00002c16 	andeq	r2, r0, r6, lsl ip
    67b4:	24036901 	strcs	r6, [r3], #-2305
    67b8:	01000003 	tsteq	r0, r3
    67bc:	2b661850 	blcs	198c904 <__Stack_Size+0x198c504>
    67c0:	69010000 	stmdbvs	r1, {}
    67c4:	00004c03 	andeq	r4, r0, r3, lsl #24
    67c8:	002a6300 	eoreq	r6, sl, r0, lsl #6
    67cc:	011b0000 	tsteq	fp, r0
    67d0:	00002c66 	andeq	r2, r0, r6, ror #24
    67d4:	01038b01 	tsteq	r3, r1, lsl #22
    67d8:	00000094 	muleq	r0, r4, r0
    67dc:	08005f98 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, fp, ip, lr}
    67e0:	08005fe2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    67e4:	08525d01 	ldmdaeq	r2, {r0, r8, sl, fp, ip, lr}^
    67e8:	16180000 	ldrne	r0, [r8], -r0
    67ec:	0100002c 	tsteq	r0, ip, lsr #32
    67f0:	0324038a 	teqeq	r4, #671088642	; 0x28000002
    67f4:	2a760000 	bcs	1d867fc <__Stack_Size+0x1d863fc>
    67f8:	05180000 	ldreq	r0, [r8]
    67fc:	0100002d 	tsteq	r0, sp, lsr #32
    6800:	004c038a 	subeq	r0, ip, sl, lsl #7
    6804:	2a890000 	bcs	fe24680c <SCS_BASE+0x1e23880c>
    6808:	4f150000 	svcmi	0x00150000
    680c:	0100002c 	tsteq	r0, ip, lsr #32
    6810:	003a038c 	eorseq	r0, sl, ip, lsl #7
    6814:	52010000 	andpl	r0, r1, #0	; 0x0
    6818:	002d5e1a 	eoreq	r5, sp, sl, lsl lr
    681c:	038c0100 	orreq	r0, ip, #0	; 0x0
    6820:	0000003a 	andeq	r0, r0, sl, lsr r0
    6824:	00002ab2 	strheq	r2, [r0], -r2
    6828:	002d891a 	eoreq	r8, sp, sl, lsl r9
    682c:	038c0100 	orreq	r0, ip, #0	; 0x0
    6830:	0000003a 	andeq	r0, r0, sl, lsr r0
    6834:	00002ad0 	ldrdeq	r2, [r0], -r0
    6838:	00120319 	andseq	r0, r2, r9, lsl r3
    683c:	038d0100 	orreq	r0, sp, #0	; 0x0
    6840:	00000094 	muleq	r0, r4, r0
    6844:	1d011300 	stcne	3, cr1, [r1]
    6848:	0100002b 	tsteq	r0, fp, lsr #32
    684c:	e40103db 	str	r0, [r1], #-987
    6850:	f408005f 	vst4.16	{d0-d3}, [r8, :64]
    6854:	0108005f 	qaddeq	r0, pc, r8
    6858:	0008a15d 	andeq	sl, r8, sp, asr r1
    685c:	2c161600 	ldccs	6, cr1, [r6], {0}
    6860:	da010000 	ble	46868 <__Stack_Size+0x46468>
    6864:	00032403 	andeq	r2, r3, r3, lsl #8
    6868:	18500100 	ldmdane	r0, {r8}^
    686c:	00002d05 	andeq	r2, r0, r5, lsl #26
    6870:	4c03da01 	stcmi	10, cr13, [r3], {1}
    6874:	e3000000 	movw	r0, #0	; 0x0
    6878:	1900002a 	stmdbne	r0, {r1, r3, r5}
    687c:	00002c4f 	andeq	r2, r0, pc, asr #24
    6880:	4c03dc01 	stcmi	12, cr13, [r3], {1}
    6884:	19000000 	stmdbne	r0, {}
    6888:	00002d5e 	andeq	r2, r0, lr, asr sp
    688c:	4c03dc01 	stcmi	12, cr13, [r3], {1}
    6890:	00000000 	andeq	r0, r0, r0
    6894:	2a65011c 	bcs	1946d0c <__Stack_Size+0x194690c>
    6898:	8d010000 	stchi	0, cr0, [r1]
    689c:	005ff401 	subseq	pc, pc, r1, lsl #8
    68a0:	00609008 	rsbeq	r9, r0, r8
    68a4:	002af608 	eoreq	pc, sl, r8, lsl #12
    68a8:	00092a00 	andeq	r2, r9, r0, lsl #20
    68ac:	2c161400 	cfldrscs	mvf1, [r6], {0}
    68b0:	8c010000 	stchi	0, cr0, [r1], {0}
    68b4:	00000324 	andeq	r0, r0, r4, lsr #6
    68b8:	00002b21 	andeq	r2, r0, r1, lsr #22
    68bc:	002c3014 	eoreq	r3, ip, r4, lsl r0
    68c0:	db8c0100 	blle	fe306cc8 <SCS_BASE+0x1e2f8cc8>
    68c4:	40000002 	andmi	r0, r0, r2
    68c8:	1d00002b 	stcne	0, cr0, [r0, #-172]
    68cc:	0000154e 	andeq	r1, r0, lr, asr #10
    68d0:	003a8e01 	eorseq	r8, sl, r1, lsl #28
    68d4:	2b5e0000 	blcs	17868dc <__Stack_Size+0x17864dc>
    68d8:	141d0000 	ldrne	r0, [sp]
    68dc:	0100002b 	tsteq	r0, fp, lsr #32
    68e0:	00003a8e 	andeq	r3, r0, lr, lsl #21
    68e4:	002b8700 	eoreq	r8, fp, r0, lsl #14
    68e8:	2a381e00 	bcs	e0e0f0 <__Stack_Size+0xe0dcf0>
    68ec:	8f010000 	svchi	0x00010000
    68f0:	0000003a 	andeq	r0, r0, sl, lsr r0
    68f4:	c81f5101 	ldmdagt	pc, {r0, r8, ip, lr}
    68f8:	0100002c 	tsteq	r0, ip, lsr #32
    68fc:	00003a90 	muleq	r0, r0, sl
    6900:	2bb71e00 	blcs	fedce108 <SCS_BASE+0x1edc0108>
    6904:	91010000 	tstls	r1, r0
    6908:	0000003a 	andeq	r0, r0, sl, lsr r0
    690c:	c21e5401 	andsgt	r5, lr, #16777216	; 0x1000000
    6910:	0100002b 	tsteq	r0, fp, lsr #32
    6914:	0002ab92 	muleq	r2, r2, fp
    6918:	5c910200 	lfmpl	f0, 4, [r1], {0}
    691c:	71012000 	tstvc	r1, r0
    6920:	0100002b 	tsteq	r0, fp, lsr #32
    6924:	6090015b 	addsvs	r0, r0, fp, asr r1
    6928:	61240800 	teqvs	r4, r0, lsl #16
    692c:	2b9a0800 	blcs	fe688934 <SCS_BASE+0x1e67a934>
    6930:	16140000 	ldrne	r0, [r4], -r0
    6934:	0100002c 	tsteq	r0, ip, lsr #32
    6938:	0003245a 	andeq	r2, r3, sl, asr r4
    693c:	002bc500 	eoreq	ip, fp, r0, lsl #10
    6940:	9a000000 	bls	6948 <__Stack_Size+0x6548>
    6944:	02000000 	andeq	r0, r0, #0	; 0x0
    6948:	00160d00 	andseq	r0, r6, r0, lsl #26
    694c:	f0010400 	undefined instruction 0xf0010400
    6950:	24000016 	strcs	r0, [r0], #-22
    6954:	92080061 	andls	r0, r8, #97	; 0x61
    6958:	73080061 	movwvc	r0, #32865	; 0x8061
    695c:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    6960:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    6964:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    6968:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    696c:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    6970:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!
    6974:	616d5f33 	cmnvs	sp, r3, lsr pc
    6978:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
    697c:	3a430073 	bcc	10c6b50 <__Stack_Size+0x10c6750>
    6980:	6573555c 	ldrbvs	r5, [r3, #-1372]!
    6984:	6f5c7372 	svcvs	0x005c7372
    6988:	616d6173 	smcvs	54803
    698c:	7365445c 	cmnvc	r5, #1543503872	; 0x5c000000
    6990:	706f746b 	rsbvc	r7, pc, fp, ror #8
    6994:	6a61485c 	bvs	1858b0c <__Stack_Size+0x185870c>
    6998:	6d61485f 	stclvs	8, cr4, [r1, #-380]!
    699c:	4f5f6964 	svcmi	0x005f6964
    69a0:	616d6173 	smcvs	54803
    69a4:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
    69a8:	6f6c6568 	svcvs	0x006c6568
    69ac:	62726172 	rsbsvs	r6, r2, #-2147483620	; 0x8000001c
    69b0:	5f746965 	svcpl	0x00746965
    69b4:	34323032 	ldrtcc	r3, [r2], #-50
    69b8:	7461445f 	strbtvc	r4, [r1], #-1119
    69bc:	5c6e6965 	stclpl	9, cr6, [lr], #-404
    69c0:	6c6f6962 	stclvs	9, cr6, [pc], #-392
    69c4:	4664696f 	strbtmi	r6, [r4], -pc, ror #18
    69c8:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
    69cc:	00657261 	rsbeq	r7, r5, r1, ror #4
    69d0:	20554e47 	subscs	r4, r5, r7, asr #28
    69d4:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
    69d8:	2e38312e 	rsfcsep	f3, f0, #0.5
    69dc:	01003035 	tsteq	r0, r5, lsr r0
    69e0:	00010280 	andeq	r0, r1, r0, lsl #5
    69e4:	21000200 	tstcs	r0, r0, lsl #4
    69e8:	04000016 	streq	r0, [r0], #-22
    69ec:	00053b01 	andeq	r3, r5, r1, lsl #22
    69f0:	2ddd0100 	ldfcse	f0, [sp]
    69f4:	04310000 	ldrteq	r0, [r1]
    69f8:	61940000 	orrsvs	r0, r4, r0
    69fc:	61e80800 	mvnvs	r0, r0, lsl #16
    6a00:	17940800 	ldrne	r0, [r4, r0, lsl #16]
    6a04:	04020000 	streq	r0, [r2]
    6a08:	002e2105 	eoreq	r2, lr, r5, lsl #2
    6a0c:	05020200 	streq	r0, [r2, #-512]
    6a10:	000005b8 	strheq	r0, [r0], -r8
    6a14:	cc060102 	stfgts	f0, [r6], {2}
    6a18:	02000006 	andeq	r0, r0, #6	; 0x6
    6a1c:	2e9b0704 	cdpcs	7, 9, cr0, cr11, cr4, {0}
    6a20:	02020000 	andeq	r0, r2, #0	; 0x0
    6a24:	00081e07 	andeq	r1, r8, r7, lsl #28
    6a28:	08010200 	stmdaeq	r1, {r9}
    6a2c:	000006ca 	andeq	r0, r0, sl, asr #13
    6a30:	04070403 	streq	r0, [r7], #-1027
    6a34:	002db201 	eoreq	fp, sp, r1, lsl #4
    6a38:	01920100 	orrseq	r0, r2, r0, lsl #2
    6a3c:	08006194 	stmdaeq	r0, {r2, r4, r7, r8, sp, lr}
    6a40:	080061e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sp, lr}
    6a44:	00002be4 	andeq	r2, r0, r4, ror #23
    6a48:	00000086 	andeq	r0, r0, r6, lsl #1
    6a4c:	002e0f05 	eoreq	r0, lr, r5, lsl #30
    6a50:	86930100 	ldrhi	r0, [r3], r0, lsl #2
    6a54:	06000000 	streq	r0, [r0], -r0
    6a58:	00002dc0 	andeq	r2, r0, r0, asr #27
    6a5c:	00869301 	addeq	r9, r6, r1, lsl #6
    6a60:	2c030000 	stccs	0, cr0, [r3], {0}
    6a64:	07000000 	streq	r0, [r0, -r0]
    6a68:	00003a04 	andeq	r3, r0, r4, lsl #20
    6a6c:	2dc80800 	stclcs	8, cr0, [r8]
    6a70:	19010000 	stmdbne	r1, {}
    6a74:	0000003a 	andeq	r0, r0, sl, lsr r0
    6a78:	ab080101 	blge	206e84 <__Stack_Size+0x206a84>
    6a7c:	0100002d 	tsteq	r0, sp, lsr #32
    6a80:	00003a1b 	andeq	r3, r0, fp, lsl sl
    6a84:	08010100 	stmdaeq	r1, {r8}
    6a88:	00002dd6 	ldrdeq	r2, [r0], -r6
    6a8c:	003a1d01 	eorseq	r1, sl, r1, lsl #26
    6a90:	01010000 	tsteq	r1, r0
    6a94:	002e1608 	eoreq	r1, lr, r8, lsl #12
    6a98:	3a200100 	bcc	806ea0 <__Stack_Size+0x806aa0>
    6a9c:	01000000 	tsteq	r0, r0
    6aa0:	2dd00801 	ldclcs	8, cr0, [r0, #4]
    6aa4:	22010000 	andcs	r0, r1, #0	; 0x0
    6aa8:	0000003a 	andeq	r0, r0, sl, lsr r0
    6aac:	a3090101 	movwge	r0, #37121	; 0x9101
    6ab0:	0100002d 	tsteq	r0, sp, lsr #32
    6ab4:	0a010125 	beq	46f50 <__Stack_Size+0x46b50>
    6ab8:	000000e8 	andeq	r0, r0, r8, ror #1
    6abc:	000000e6 	andeq	r0, r0, r6, ror #1
    6ac0:	00004f0b 	andeq	r4, r0, fp, lsl #30
    6ac4:	0c004c00 	stceq	12, cr4, [r0], {0}
    6ac8:	e6040701 	str	r0, [r4], -r1, lsl #14
    6acc:	0d000000 	stceq	0, cr0, [r0]
    6ad0:	00002e02 	andeq	r2, r0, r2, lsl #28
    6ad4:	01003901 	tsteq	r0, r1, lsl #18
    6ad8:	05010000 	streq	r0, [r1]
    6adc:	00300003 	eorseq	r0, r0, r3
    6ae0:	00d60e08 	sbcseq	r0, r6, r8, lsl #28
    6ae4:	c1000000 	tstgt	r0, r0
    6ae8:	02000000 	andeq	r0, r0, #0	; 0x0
    6aec:	0016d600 	andseq	sp, r6, r0, lsl #12
    6af0:	3b010400 	blcc	47af8 <__Stack_Size+0x476f8>
    6af4:	01000005 	tsteq	r0, r5
    6af8:	00002e61 	andeq	r2, r0, r1, ror #28
    6afc:	00002e2a 	andeq	r2, r0, sl, lsr #28
	...
    6b08:	000017f2 	strdeq	r1, [r0], -r2
    6b0c:	a0070402 	andge	r0, r7, r2, lsl #8
    6b10:	0200002e 	andeq	r0, r0, #46	; 0x2e
    6b14:	06cc0601 	strbeq	r0, [ip], r1, lsl #12
    6b18:	01020000 	tsteq	r2, r0
    6b1c:	0006ca08 	andeq	ip, r6, r8, lsl #20
    6b20:	05020200 	streq	r0, [r2, #-512]
    6b24:	000005b8 	strheq	r0, [r0], -r8
    6b28:	1e070202 	cdpne	2, 0, cr0, cr7, cr2, {0}
    6b2c:	03000008 	movweq	r0, #8	; 0x8
    6b30:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    6b34:	08020074 	stmdaeq	r2, {r2, r4, r5, r6}
    6b38:	002e1c05 	eoreq	r1, lr, r5, lsl #24
    6b3c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    6b40:	00002e96 	muleq	r0, r6, lr
    6b44:	21050402 	tstcs	r5, r2, lsl #8
    6b48:	0400002e 	streq	r0, [r0], #-46
    6b4c:	04020704 	streq	r0, [r2], #-1796
    6b50:	002e9b07 	eoreq	r9, lr, r7, lsl #22
    6b54:	06010500 	streq	r0, [r1], -r0, lsl #10
    6b58:	00006e04 	andeq	r6, r0, r4, lsl #28
    6b5c:	08010200 	stmdaeq	r1, {r9}
    6b60:	000006d3 	ldrdeq	r0, [r0], -r3
    6b64:	002ec207 	eoreq	ip, lr, r7, lsl #4
    6b68:	06020100 	streq	r0, [r2], -r0, lsl #2
    6b6c:	0000009c 	muleq	r0, ip, r0
    6b70:	002ed108 	eoreq	sp, lr, r8, lsl #2
    6b74:	b6080000 	strlt	r0, [r8], -r0
    6b78:	0100002e 	tsteq	r0, lr, lsr #32
    6b7c:	002ead08 	eoreq	sl, lr, r8, lsl #26
    6b80:	09000200 	stmdbeq	r0, {r9}
    6b84:	002ed601 	eoreq	sp, lr, r1, lsl #12
    6b88:	01400100 	cmpeq	r0, r0, lsl #2
    6b8c:	00000048 	andeq	r0, r0, r8, asr #32
	...
    6b98:	00002c16 	andeq	r2, r0, r6, lsl ip
    6b9c:	006e660a 	rsbeq	r6, lr, sl, lsl #12
    6ba0:	00703d01 	rsbseq	r3, r0, r1, lsl #26
    6ba4:	2c410000 	marcs	acc0, r0, r1
    6ba8:	00000000 	andeq	r0, r0, r0
    6bac:	00000936 	andeq	r0, r0, r6, lsr r9
    6bb0:	17570002 	ldrbne	r0, [r7, -r2]
    6bb4:	01040000 	tsteq	r4, r0
    6bb8:	0000053b 	andeq	r0, r0, fp, lsr r5
    6bbc:	002ee901 	eoreq	lr, lr, r1, lsl #18
    6bc0:	002e2a00 	eoreq	r2, lr, r0, lsl #20
	...
    6bcc:	00186600 	andseq	r6, r8, r0, lsl #12
    6bd0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6bd4:	00002ea0 	andeq	r2, r0, r0, lsr #29
    6bd8:	cc060102 	stfgts	f0, [r6], {2}
    6bdc:	02000006 	andeq	r0, r0, #6	; 0x6
    6be0:	06ca0801 	strbeq	r0, [sl], r1, lsl #16
    6be4:	02020000 	andeq	r0, r2, #0	; 0x0
    6be8:	0005b805 	andeq	fp, r5, r5, lsl #16
    6bec:	07020200 	streq	r0, [r2, -r0, lsl #4]
    6bf0:	0000081e 	andeq	r0, r0, lr, lsl r8
    6bf4:	69050403 	stmdbvs	r5, {r0, r1, sl}
    6bf8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    6bfc:	2e1c0508 	cfmul32cs	mvfx0, mvfx12, mvfx8
    6c00:	08020000 	stmdaeq	r2, {}
    6c04:	002e9607 	eoreq	r9, lr, r7, lsl #12
    6c08:	30f00400 	rscscc	r0, r0, r0, lsl #8
    6c0c:	07020000 	streq	r0, [r2, -r0]
    6c10:	00000048 	andeq	r0, r0, r8, asr #32
    6c14:	21050402 	tstcs	r5, r2, lsl #8
    6c18:	0400002e 	streq	r0, [r0], #-46
    6c1c:	0000319f 	muleq	r0, pc, r1
    6c20:	00682c03 	rsbeq	r2, r8, r3, lsl #24
    6c24:	98050000 	stmdals	r5, {}
    6c28:	04000030 	streq	r0, [r0], #-48
    6c2c:	00250163 	eoreq	r0, r5, r3, ror #2
    6c30:	04060000 	streq	r0, [r6]
    6c34:	00a54703 	adceq	r4, r5, r3, lsl #14
    6c38:	92070000 	andls	r0, r7, #0	; 0x0
    6c3c:	03000030 	movweq	r0, #48	; 0x30
    6c40:	00007a48 	andeq	r7, r0, r8, asr #20
    6c44:	304c0700 	subcc	r0, ip, r0, lsl #14
    6c48:	49030000 	stmdbmi	r3, {}
    6c4c:	000000a5 	andeq	r0, r0, r5, lsr #1
    6c50:	00330800 	eorseq	r0, r3, r0, lsl #16
    6c54:	00b50000 	adcseq	r0, r5, r0
    6c58:	b5090000 	strlt	r0, [r9]
    6c5c:	03000000 	movweq	r0, #0	; 0x0
    6c60:	07040a00 	streq	r0, [r4, -r0, lsl #20]
    6c64:	4403080b 	strmi	r0, [r3], #-2059
    6c68:	000000dd 	ldrdeq	r0, [r0], -sp
    6c6c:	0031890c 	eorseq	r8, r1, ip, lsl #18
    6c70:	48450300 	stmdami	r5, {r8, r9}^
    6c74:	02000000 	andeq	r0, r0, #0	; 0x0
    6c78:	910c0023 	tstls	ip, r3, lsr #32
    6c7c:	03000031 	movweq	r0, #49	; 0x31
    6c80:	0000864a 	andeq	r8, r0, sl, asr #12
    6c84:	04230200 	strteq	r0, [r3], #-512
    6c88:	31250400 	teqcc	r5, r0, lsl #8
    6c8c:	4b030000 	blmi	c6c94 <__Stack_Size+0xc6894>
    6c90:	000000b8 	strheq	r0, [r0], -r8
    6c94:	00301e04 	eorseq	r1, r0, r4, lsl #28
    6c98:	5d4f0300 	stclpl	3, cr0, [pc]
    6c9c:	0d000000 	stceq	0, cr0, [r0]
    6ca0:	31d20404 	bicscc	r0, r2, r4, lsl #8
    6ca4:	15050000 	strne	r0, [r5]
    6ca8:	00000100 	andeq	r0, r0, r0, lsl #2
    6cac:	9b070402 	blls	1c7cbc <__Stack_Size+0x1c78bc>
    6cb0:	0e00002e 	cdpeq	0, 0, cr0, cr0, cr14, {1}
    6cb4:	0000302f 	andeq	r3, r0, pc, lsr #32
    6cb8:	662d0518 	undefined
    6cbc:	0c000001 	stceq	0, cr0, [r0], {1}
    6cc0:	0000313d 	andeq	r3, r0, sp, lsr r1
    6cc4:	01662e05 	cmneq	r6, r5, lsl #28
    6cc8:	23020000 	movwcs	r0, #8192	; 0x2000
    6ccc:	6b5f0f00 	blvs	17ca8d4 <__Stack_Size+0x17ca4d4>
    6cd0:	482f0500 	stmdami	pc!, {r8, sl}
    6cd4:	02000000 	andeq	r0, r0, #0	; 0x0
    6cd8:	740c0423 	strvc	r0, [ip], #-1059
    6cdc:	05000031 	streq	r0, [r0, #-49]
    6ce0:	0000482f 	andeq	r4, r0, pc, lsr #16
    6ce4:	08230200 	stmdaeq	r3!, {r9}
    6ce8:	0030180c 	eorseq	r1, r0, ip, lsl #16
    6cec:	482f0500 	stmdami	pc!, {r8, sl}
    6cf0:	02000000 	andeq	r0, r0, #0	; 0x0
    6cf4:	1e0c0c23 	cdpne	12, 0, cr0, cr12, cr3, {1}
    6cf8:	05000032 	streq	r0, [r0, #-50]
    6cfc:	0000482f 	andeq	r4, r0, pc, lsr #16
    6d00:	10230200 	eorne	r0, r3, r0, lsl #4
    6d04:	00785f0f 	rsbseq	r5, r8, pc, lsl #30
    6d08:	016c3005 	cmneq	ip, r5
    6d0c:	23020000 	movwcs	r0, #8192	; 0x2000
    6d10:	04100014 	ldreq	r0, [r0], #-20
    6d14:	00000107 	andeq	r0, r0, r7, lsl #2
    6d18:	0000f508 	andeq	pc, r0, r8, lsl #10
    6d1c:	00017c00 	andeq	r7, r1, r0, lsl #24
    6d20:	00b50900 	adcseq	r0, r5, r0, lsl #18
    6d24:	00000000 	andeq	r0, r0, r0
    6d28:	0030470e 	eorseq	r4, r0, lr, lsl #14
    6d2c:	35052400 	strcc	r2, [r5, #-1024]
    6d30:	00000207 	andeq	r0, r0, r7, lsl #4
    6d34:	002f7b0c 	eoreq	r7, pc, ip, lsl #22
    6d38:	48360500 	ldmdami	r6!, {r8, sl}
    6d3c:	02000000 	andeq	r0, r0, #0	; 0x0
    6d40:	ae0c0023 	cdpge	0, 0, cr0, cr12, cr3, {1}
    6d44:	05000031 	streq	r0, [r0, #-49]
    6d48:	00004837 	andeq	r4, r0, r7, lsr r8
    6d4c:	04230200 	strteq	r0, [r3], #-512
    6d50:	002f900c 	eoreq	r9, pc, ip
    6d54:	48380500 	ldmdami	r8!, {r8, sl}
    6d58:	02000000 	andeq	r0, r0, #0	; 0x0
    6d5c:	900c0823 	andls	r0, ip, r3, lsr #16
    6d60:	05000032 	streq	r0, [r0, #-50]
    6d64:	00004839 	andeq	r4, r0, r9, lsr r8
    6d68:	0c230200 	sfmeq	f0, 4, [r3]
    6d6c:	0030c30c 	eorseq	ip, r0, ip, lsl #6
    6d70:	483a0500 	ldmdami	sl!, {r8, sl}
    6d74:	02000000 	andeq	r0, r0, #0	; 0x0
    6d78:	b20c1023 	andlt	r1, ip, #35	; 0x23
    6d7c:	05000030 	streq	r0, [r0, #-48]
    6d80:	0000483b 	andeq	r4, r0, fp, lsr r8
    6d84:	14230200 	strtne	r0, [r3], #-512
    6d88:	0032230c 	eorseq	r2, r2, ip, lsl #6
    6d8c:	483c0500 	ldmdami	ip!, {r8, sl}
    6d90:	02000000 	andeq	r0, r0, #0	; 0x0
    6d94:	070c1823 	streq	r1, [ip, -r3, lsr #16]
    6d98:	05000031 	streq	r0, [r0, #-49]
    6d9c:	0000483d 	andeq	r4, r0, sp, lsr r8
    6da0:	1c230200 	sfmne	f0, 4, [r3]
    6da4:	00325e0c 	eorseq	r5, r2, ip, lsl #28
    6da8:	483e0500 	ldmdami	lr!, {r8, sl}
    6dac:	02000000 	andeq	r0, r0, #0	; 0x0
    6db0:	11002023 	tstne	r0, r3, lsr #32
    6db4:	00002f9f 	muleq	r0, pc, pc
    6db8:	47050108 	strmi	r0, [r5, -r8, lsl #2]
    6dbc:	00000250 	andeq	r0, r0, r0, asr r2
    6dc0:	00300b0c 	eorseq	r0, r0, ip, lsl #22
    6dc4:	50480500 	subpl	r0, r8, r0, lsl #10
    6dc8:	02000002 	andeq	r0, r0, #2	; 0x2
    6dcc:	dd0c0023 	stcle	0, cr0, [ip, #-140]
    6dd0:	0500002e 	streq	r0, [r0, #-46]
    6dd4:	00025049 	andeq	r5, r2, r9, asr #32
    6dd8:	80230300 	eorhi	r0, r3, r0, lsl #6
    6ddc:	31c40c01 	biccc	r0, r4, r1, lsl #24
    6de0:	4b050000 	blmi	146de8 <__Stack_Size+0x1469e8>
    6de4:	000000f5 	strdeq	r0, [r0], -r5
    6de8:	02802303 	addeq	r2, r0, #201326592	; 0xc000000
    6dec:	002fc40c 	eoreq	ip, pc, ip, lsl #8
    6df0:	f54e0500 	undefined instruction 0xf54e0500
    6df4:	03000000 	movweq	r0, #0	; 0x0
    6df8:	00028423 	andeq	r8, r2, r3, lsr #8
    6dfc:	0000f308 	andeq	pc, r0, r8, lsl #6
    6e00:	00026000 	andeq	r6, r2, r0
    6e04:	00b50900 	adcseq	r0, r5, r0, lsl #18
    6e08:	001f0000 	andseq	r0, pc, r0
    6e0c:	002ed511 	eoreq	sp, lr, r1, lsl r5
    6e10:	05019000 	streq	r9, [r1]
    6e14:	0002a759 	andeq	sl, r2, r9, asr r7
    6e18:	313d0c00 	teqcc	sp, r0, lsl #24
    6e1c:	5a050000 	bpl	146e24 <__Stack_Size+0x146a24>
    6e20:	000002a7 	andeq	r0, r0, r7, lsr #5
    6e24:	0c002302 	stceq	3, cr2, [r0], {2}
    6e28:	00003155 	andeq	r3, r0, r5, asr r1
    6e2c:	00485b05 	subeq	r5, r8, r5, lsl #22
    6e30:	23020000 	movwcs	r0, #8192	; 0x2000
    6e34:	30130c04 	andscc	r0, r3, r4, lsl #24
    6e38:	5d050000 	stcpl	0, cr0, [r5]
    6e3c:	000002ad 	andeq	r0, r0, sp, lsr #5
    6e40:	0c082302 	stceq	3, cr2, [r8], {2}
    6e44:	00002f9f 	muleq	r0, pc, pc
    6e48:	02075e05 	andeq	r5, r7, #80	; 0x50
    6e4c:	23030000 	movwcs	r0, #12288	; 0x3000
    6e50:	10000188 	andne	r0, r0, r8, lsl #3
    6e54:	00026004 	andeq	r6, r2, r4
    6e58:	02bf0800 	adcseq	r0, pc, #0	; 0x0
    6e5c:	02bd0000 	adcseq	r0, sp, #0	; 0x0
    6e60:	b5090000 	strlt	r0, [r9]
    6e64:	1f000000 	svcne	0x00000000
    6e68:	10011200 	andne	r1, r1, r0, lsl #4
    6e6c:	0002bd04 	andeq	fp, r2, r4, lsl #26
    6e70:	31110e00 	tstcc	r1, r0, lsl #28
    6e74:	05080000 	streq	r0, [r8]
    6e78:	0002ee69 	andeq	lr, r2, r9, ror #28
    6e7c:	2f8a0c00 	svccs	0x008a0c00
    6e80:	6a050000 	bvs	146e88 <__Stack_Size+0x146a88>
    6e84:	000002ee 	andeq	r0, r0, lr, ror #5
    6e88:	0c002302 	stceq	3, cr2, [r0], {2}
    6e8c:	00002f1c 	andeq	r2, r0, ip, lsl pc
    6e90:	00486b05 	subeq	r6, r8, r5, lsl #22
    6e94:	23020000 	movwcs	r0, #8192	; 0x2000
    6e98:	04100004 	ldreq	r0, [r0], #-4
    6e9c:	00000033 	andeq	r0, r0, r3, lsr r0
    6ea0:	0031300e 	eorseq	r3, r1, lr
    6ea4:	a9055c00 	stmdbge	r5, {sl, fp, ip, lr}
    6ea8:	00000432 	andeq	r0, r0, r2, lsr r4
    6eac:	00705f0f 	rsbseq	r5, r0, pc, lsl #30
    6eb0:	02eeaa05 	rsceq	sl, lr, #20480	; 0x5000
    6eb4:	23020000 	movwcs	r0, #8192	; 0x2000
    6eb8:	725f0f00 	subsvc	r0, pc, #0	; 0x0
    6ebc:	48ab0500 	stmiami	fp!, {r8, sl}
    6ec0:	02000000 	andeq	r0, r0, #0	; 0x0
    6ec4:	5f0f0423 	svcpl	0x000f0423
    6ec8:	ac050077 	stcge	0, cr0, [r5], {119}
    6ecc:	00000048 	andeq	r0, r0, r8, asr #32
    6ed0:	0c082302 	stceq	3, cr2, [r8], {2}
    6ed4:	00002fbd 	strheq	r2, [r0], -sp
    6ed8:	003aad05 	eorseq	sl, sl, r5, lsl #26
    6edc:	23020000 	movwcs	r0, #8192	; 0x2000
    6ee0:	30630c0c 	rsbcc	r0, r3, ip, lsl #24
    6ee4:	ae050000 	cdpge	0, 0, cr0, cr5, cr0, {0}
    6ee8:	0000003a 	andeq	r0, r0, sl, lsr r0
    6eec:	0f0e2302 	svceq	0x000e2302
    6ef0:	0066625f 	rsbeq	r6, r6, pc, asr r2
    6ef4:	02c5af05 	sbceq	sl, r5, #20	; 0x14
    6ef8:	23020000 	movwcs	r0, #8192	; 0x2000
    6efc:	2f550c10 	svccs	0x00550c10
    6f00:	b0050000 	andlt	r0, r5, r0
    6f04:	00000048 	andeq	r0, r0, r8, asr #32
    6f08:	0c182302 	ldceq	3, cr2, [r8], {2}
    6f0c:	00002fad 	andeq	r2, r0, sp, lsr #31
    6f10:	00f3b705 	rscseq	fp, r3, r5, lsl #14
    6f14:	23020000 	movwcs	r0, #8192	; 0x2000
    6f18:	30370c1c 	eorscc	r0, r7, ip, lsl ip
    6f1c:	b9050000 	stmdblt	r5, {}
    6f20:	000005c1 	andeq	r0, r0, r1, asr #11
    6f24:	0c202302 	stceq	3, cr2, [r0], #-8
    6f28:	000030ab 	andeq	r3, r0, fp, lsr #1
    6f2c:	05f1bb05 	ldrbeq	fp, [r1, #2821]!
    6f30:	23020000 	movwcs	r0, #8192	; 0x2000
    6f34:	31990c24 	orrscc	r0, r9, r4, lsr #24
    6f38:	bd050000 	stclt	0, cr0, [r5]
    6f3c:	00000616 	andeq	r0, r0, r6, lsl r6
    6f40:	0c282302 	stceq	3, cr2, [r8], #-8
    6f44:	00000e40 	andeq	r0, r0, r0, asr #28
    6f48:	0631be05 	ldrteq	fp, [r1], -r5, lsl #28
    6f4c:	23020000 	movwcs	r0, #8192	; 0x2000
    6f50:	755f0f2c 	ldrbvc	r0, [pc, #-3884]	; 602c <__Stack_Size+0x5c2c>
    6f54:	c1050062 	tstgt	r5, r2, rrx
    6f58:	000002c5 	andeq	r0, r0, r5, asr #5
    6f5c:	0f302302 	svceq	0x00302302
    6f60:	0070755f 	rsbseq	r7, r0, pc, asr r5
    6f64:	02eec205 	rsceq	ip, lr, #1342177280	; 0x50000000
    6f68:	23020000 	movwcs	r0, #8192	; 0x2000
    6f6c:	755f0f38 	ldrbvc	r0, [pc, #-3896]	; 603c <__Stack_Size+0x5c3c>
    6f70:	c3050072 	movwgt	r0, #20594	; 0x5072
    6f74:	00000048 	andeq	r0, r0, r8, asr #32
    6f78:	0c3c2302 	ldceq	3, cr2, [ip], #-8
    6f7c:	00002f84 	andeq	r2, r0, r4, lsl #31
    6f80:	0637c605 	ldrteq	ip, [r7], -r5, lsl #12
    6f84:	23020000 	movwcs	r0, #8192	; 0x2000
    6f88:	32500c40 	subscc	r0, r0, #16384	; 0x4000
    6f8c:	c7050000 	strgt	r0, [r5, -r0]
    6f90:	00000647 	andeq	r0, r0, r7, asr #12
    6f94:	0f432302 	svceq	0x00432302
    6f98:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    6f9c:	02c5ca05 	sbceq	ip, r5, #20480	; 0x5000
    6fa0:	23020000 	movwcs	r0, #8192	; 0x2000
    6fa4:	2fd30c44 	svccs	0x00d30c44
    6fa8:	cd050000 	stcgt	0, cr0, [r5]
    6fac:	00000048 	andeq	r0, r0, r8, asr #32
    6fb0:	0c4c2302 	mcrreq	3, 0, r2, ip, cr2
    6fb4:	00002fe4 	andeq	r2, r0, r4, ror #31
    6fb8:	0048ce05 	subeq	ip, r8, r5, lsl #28
    6fbc:	23020000 	movwcs	r0, #8192	; 0x2000
    6fc0:	32a00c50 	adccc	r0, r0, #20480	; 0x5000
    6fc4:	d1050000 	tstle	r5, r0
    6fc8:	00000451 	andeq	r0, r0, r1, asr r4
    6fcc:	0c542302 	mrrceq	3, 0, r2, r4, cr2
    6fd0:	0000309f 	muleq	r0, pc, r0
    6fd4:	00e8d505 	rsceq	sp, r8, r5, lsl #10
    6fd8:	23020000 	movwcs	r0, #8192	; 0x2000
    6fdc:	01130058 	tsteq	r3, r8, asr r0
    6fe0:	00000048 	andeq	r0, r0, r8, asr #32
    6fe4:	00000451 	andeq	r0, r0, r1, asr r4
    6fe8:	00045114 	andeq	r5, r4, r4, lsl r1
    6fec:	00f31400 	rscseq	r1, r3, r0, lsl #8
    6ff0:	b4140000 	ldrlt	r0, [r4]
    6ff4:	14000005 	strne	r0, [r0], #-5
    6ff8:	00000048 	andeq	r0, r0, r8, asr #32
    6ffc:	57041000 	strpl	r1, [r4, -r0]
    7000:	11000004 	tstne	r0, r4
    7004:	0000317c 	andeq	r3, r0, ip, ror r1
    7008:	25050400 	strcs	r0, [r5, #-1024]
    700c:	000005b4 	strheq	r0, [r0], -r4
    7010:	0031a715 	eorseq	sl, r1, r5, lsl r7
    7014:	02410500 	subeq	r0, r1, #0	; 0x0
    7018:	00000048 	andeq	r0, r0, r8, asr #32
    701c:	15002302 	strne	r2, [r0, #-770]
    7020:	00002fcc 	andeq	r2, r0, ip, asr #31
    7024:	a4024605 	strge	r4, [r2], #-1541
    7028:	02000006 	andeq	r0, r0, #6	; 0x6
    702c:	53150423 	tstpl	r5, #587202560	; 0x23000000
    7030:	05000030 	streq	r0, [r0, #-48]
    7034:	06a40246 	strteq	r0, [r4], r6, asr #4
    7038:	23020000 	movwcs	r0, #8192	; 0x2000
    703c:	30271508 	eorcc	r1, r7, r8, lsl #10
    7040:	46050000 	strmi	r0, [r5], -r0
    7044:	0006a402 	andeq	sl, r6, r2, lsl #8
    7048:	0c230200 	sfmeq	f0, 4, [r3]
    704c:	00315015 	eorseq	r5, r1, r5, lsl r0
    7050:	02480500 	subeq	r0, r8, #0	; 0x0
    7054:	00000048 	andeq	r0, r0, r8, asr #32
    7058:	15102302 	ldrne	r2, [r0, #-770]
    705c:	00002f2a 	andeq	r2, r0, sl, lsr #30
    7060:	af024905 	svcge	0x00024905
    7064:	02000008 	andeq	r0, r0, #8	; 0x8
    7068:	fa151423 	blx	54c0fc <__Stack_Size+0x54bcfc>
    706c:	05000031 	streq	r0, [r0, #-49]
    7070:	0048024b 	subeq	r0, r8, fp, asr #4
    7074:	23020000 	movwcs	r0, #8192	; 0x2000
    7078:	315a1530 	cmpcc	sl, r0, lsr r5
    707c:	4c050000 	stcmi	0, cr0, [r5], {0}
    7080:	0005e602 	andeq	lr, r5, r2, lsl #12
    7084:	34230200 	strtcc	r0, [r3], #-512
    7088:	0030cc15 	eorseq	ip, r0, r5, lsl ip
    708c:	024e0500 	subeq	r0, lr, #0	; 0x0
    7090:	00000048 	andeq	r0, r0, r8, asr #32
    7094:	15382302 	ldrne	r2, [r8, #-770]!
    7098:	0000316a 	andeq	r3, r0, sl, ror #2
    709c:	cb025005 	blgt	9b0b8 <__Stack_Size+0x9acb8>
    70a0:	02000008 	andeq	r0, r0, #8	; 0x8
    70a4:	13153c23 	tstne	r5, #8960	; 0x2300
    70a8:	05000010 	streq	r0, [r0, #-16]
    70ac:	01660253 	cmneq	r6, r3, asr r2
    70b0:	23020000 	movwcs	r0, #8192	; 0x2000
    70b4:	303d1540 	eorscc	r1, sp, r0, asr #10
    70b8:	54050000 	strpl	r0, [r5]
    70bc:	00004802 	andeq	r4, r0, r2, lsl #16
    70c0:	44230200 	strtmi	r0, [r3], #-512
    70c4:	00328b15 	eorseq	r8, r2, r5, lsl fp
    70c8:	02550500 	subseq	r0, r5, #0	; 0x0
    70cc:	00000166 	andeq	r0, r0, r6, ror #2
    70d0:	15482302 	strbne	r2, [r8, #-770]
    70d4:	000030e6 	andeq	r3, r0, r6, ror #1
    70d8:	d1025605 	tstle	r2, r5, lsl #12
    70dc:	02000008 	andeq	r0, r0, #8	; 0x8
    70e0:	5b154c23 	blpl	55a174 <__Stack_Size+0x559d74>
    70e4:	05000030 	streq	r0, [r0, #-48]
    70e8:	00480259 	subeq	r0, r8, r9, asr r2
    70ec:	23020000 	movwcs	r0, #8192	; 0x2000
    70f0:	2fdc1550 	svccs	0x00dc1550
    70f4:	5a050000 	bpl	1470fc <__Stack_Size+0x146cfc>
    70f8:	0005b402 	andeq	fp, r5, r2, lsl #8
    70fc:	54230200 	strtpl	r0, [r3], #-512
    7100:	00310215 	eorseq	r0, r1, r5, lsl r2
    7104:	027c0500 	rsbseq	r0, ip, #0	; 0x0
    7108:	0000088d 	andeq	r0, r0, sp, lsl #17
    710c:	15582302 	ldrbne	r2, [r8, #-770]
    7110:	00002ed5 	ldrdeq	r2, [r0], -r5
    7114:	a7027f05 	strge	r7, [r2, -r5, lsl #30]
    7118:	03000002 	movweq	r0, #2	; 0x2
    711c:	1502c823 	strne	ip, [r2, #-2083]
    7120:	00003070 	andeq	r3, r0, r0, ror r0
    7124:	60028005 	andvs	r8, r2, r5
    7128:	03000002 	movweq	r0, #2	; 0x2
    712c:	1502cc23 	strne	ip, [r2, #-3107]
    7130:	00003246 	andeq	r3, r0, r6, asr #4
    7134:	e3028305 	movw	r8, #8965	; 0x2305
    7138:	03000008 	movweq	r0, #8	; 0x8
    713c:	1505dc23 	strne	sp, [r5, #-3107]
    7140:	00002fb5 	strheq	r2, [r0], -r5
    7144:	63028805 	movwvs	r8, #10245	; 0x2805
    7148:	03000006 	movweq	r0, #6	; 0x6
    714c:	1505e023 	strne	lr, [r5, #-35]
    7150:	00002f9a 	muleq	r0, sl, pc
    7154:	ef028905 	svc	0x00028905
    7158:	03000008 	movweq	r0, #8	; 0x8
    715c:	0005ec23 	andeq	lr, r5, r3, lsr #24
    7160:	05ba0410 	ldreq	r0, [sl, #1040]!
    7164:	01020000 	tsteq	r2, r0
    7168:	0006d308 	andeq	sp, r6, r8, lsl #6
    716c:	32041000 	andcc	r1, r4, #0	; 0x0
    7170:	13000004 	movwne	r0, #4	; 0x4
    7174:	00004801 	andeq	r4, r0, r1, lsl #16
    7178:	0005e600 	andeq	lr, r5, r0, lsl #12
    717c:	04511400 	ldrbeq	r1, [r1], #-1024
    7180:	f3140000 	vhadd.u16	d0, d4, d0
    7184:	14000000 	strne	r0, [r0]
    7188:	000005e6 	andeq	r0, r0, r6, ror #11
    718c:	00004814 	andeq	r4, r0, r4, lsl r8
    7190:	04100000 	ldreq	r0, [r0]
    7194:	000005ec 	andeq	r0, r0, ip, ror #11
    7198:	0005ba16 	andeq	fp, r5, r6, lsl sl
    719c:	c7041000 	strgt	r1, [r4, -r0]
    71a0:	13000005 	movwne	r0, #5	; 0x5
    71a4:	00006f01 	andeq	r6, r0, r1, lsl #30
    71a8:	00061600 	andeq	r1, r6, r0, lsl #12
    71ac:	04511400 	ldrbeq	r1, [r1], #-1024
    71b0:	f3140000 	vhadd.u16	d0, d4, d0
    71b4:	14000000 	strne	r0, [r0]
    71b8:	0000006f 	andeq	r0, r0, pc, rrx
    71bc:	00004814 	andeq	r4, r0, r4, lsl r8
    71c0:	04100000 	ldreq	r0, [r0]
    71c4:	000005f7 	strdeq	r0, [r0], -r7
    71c8:	00480113 	subeq	r0, r8, r3, lsl r1
    71cc:	06310000 	ldrteq	r0, [r1], -r0
    71d0:	51140000 	tstpl	r4, r0
    71d4:	14000004 	strne	r0, [r0], #-4
    71d8:	000000f3 	strdeq	r0, [r0], -r3
    71dc:	1c041000 	stcne	0, cr1, [r4], {0}
    71e0:	08000006 	stmdaeq	r0, {r1, r2}
    71e4:	00000033 	andeq	r0, r0, r3, lsr r0
    71e8:	00000647 	andeq	r0, r0, r7, asr #12
    71ec:	0000b509 	andeq	fp, r0, r9, lsl #10
    71f0:	08000200 	stmdaeq	r0, {r9}
    71f4:	00000033 	andeq	r0, r0, r3, lsr r0
    71f8:	00000657 	andeq	r0, r0, r7, asr r6
    71fc:	0000b509 	andeq	fp, r0, r9, lsl #10
    7200:	05000000 	streq	r0, [r0]
    7204:	0000311e 	andeq	r3, r0, lr, lsl r1
    7208:	f4010e05 	undefined instruction 0xf4010e05
    720c:	17000002 	strne	r0, [r0, -r2]
    7210:	0000322d 	andeq	r3, r0, sp, lsr #4
    7214:	0113050c 	tsteq	r3, ip, lsl #10
    7218:	0000069e 	muleq	r0, lr, r6
    721c:	00313d15 	eorseq	r3, r1, r5, lsl sp
    7220:	01140500 	tsteq	r4, r0, lsl #10
    7224:	0000069e 	muleq	r0, lr, r6
    7228:	15002302 	strne	r2, [r0, #-770]
    722c:	00003069 	andeq	r3, r0, r9, rrx
    7230:	48011505 	stmdami	r1, {r0, r2, r8, sl, ip}
    7234:	02000000 	andeq	r0, r0, #0	; 0x0
    7238:	18150423 	ldmdane	r5, {r0, r1, r5, sl}
    723c:	05000031 	streq	r0, [r0, #-49]
    7240:	06a40116 	ssateq	r0, #5, r6, lsl #2
    7244:	23020000 	movwcs	r0, #8192	; 0x2000
    7248:	04100008 	ldreq	r0, [r0], #-8
    724c:	00000663 	andeq	r0, r0, r3, ror #12
    7250:	06570410 	undefined
    7254:	22170000 	andscs	r0, r7, #0	; 0x0
    7258:	0e00002f 	cdpeq	0, 0, cr0, cr0, cr15, {1}
    725c:	e5012e05 	str	r2, [r1, #-3589]
    7260:	15000006 	strne	r0, [r0, #-6]
    7264:	00003183 	andeq	r3, r0, r3, lsl #3
    7268:	e5012f05 	str	r2, [r1, #-3845]
    726c:	02000006 	andeq	r0, r0, #6	; 0x6
    7270:	a5150023 	ldrge	r0, [r5, #-35]
    7274:	05000030 	streq	r0, [r0, #-48]
    7278:	06e50130 	undefined
    727c:	23020000 	movwcs	r0, #8192	; 0x2000
    7280:	31cd1506 	biccc	r1, sp, r6, lsl #10
    7284:	31050000 	tstcc	r5, r0
    7288:	00004101 	andeq	r4, r0, r1, lsl #2
    728c:	0c230200 	sfmeq	f0, 4, [r3]
    7290:	00410800 	subeq	r0, r1, r0, lsl #16
    7294:	06f50000 	ldrbteq	r0, [r5], r0
    7298:	b5090000 	strlt	r0, [r9]
    729c:	02000000 	andeq	r0, r0, #0	; 0x0
    72a0:	05d01800 	ldrbeq	r1, [r0, #2048]
    72a4:	0815025f 	ldmdaeq	r5, {r0, r1, r2, r3, r4, r6, r9}
    72a8:	11150000 	tstne	r5, r0
    72ac:	05000032 	streq	r0, [r0, #-50]
    72b0:	00250260 	eoreq	r0, r5, r0, ror #4
    72b4:	23020000 	movwcs	r0, #8192	; 0x2000
    72b8:	31b71500 	undefined instruction 0x31b71500
    72bc:	61050000 	tstvs	r5, r0
    72c0:	0005b402 	andeq	fp, r5, r2, lsl #8
    72c4:	04230200 	strteq	r0, [r3], #-512
    72c8:	00308515 	eorseq	r8, r0, r5, lsl r5
    72cc:	02620500 	rsbeq	r0, r2, #0	; 0x0
    72d0:	00000815 	andeq	r0, r0, r5, lsl r8
    72d4:	15082302 	strne	r2, [r8, #-770]
    72d8:	00003269 	andeq	r3, r0, r9, ror #4
    72dc:	7c026305 	stcvc	3, cr6, [r2], {5}
    72e0:	02000001 	andeq	r0, r0, #1	; 0x1
    72e4:	d7152423 	ldrle	r2, [r5, -r3, lsr #8]
    72e8:	05000030 	streq	r0, [r0, #-48]
    72ec:	00480264 	subeq	r0, r8, r4, ror #4
    72f0:	23020000 	movwcs	r0, #8192	; 0x2000
    72f4:	31381548 	teqcc	r8, r8, asr #10
    72f8:	65050000 	strvs	r0, [r5]
    72fc:	00005602 	andeq	r5, r0, r2, lsl #12
    7300:	50230200 	eorpl	r0, r3, r0, lsl #4
    7304:	00327815 	eorseq	r7, r2, r5, lsl r8
    7308:	02660500 	rsbeq	r0, r6, #0	; 0x0
    730c:	000006aa 	andeq	r0, r0, sl, lsr #13
    7310:	15582302 	ldrbne	r2, [r8, #-770]
    7314:	00003143 	andeq	r3, r0, r3, asr #2
    7318:	dd026705 	stcle	7, cr6, [r2, #-20]
    731c:	02000000 	andeq	r0, r0, #0	; 0x0
    7320:	7d156823 	ldcvc	8, cr6, [r5, #-140]
    7324:	05000032 	streq	r0, [r0, #-50]
    7328:	00dd0268 	sbcseq	r0, sp, r8, ror #4
    732c:	23020000 	movwcs	r0, #8192	; 0x2000
    7330:	2f6d1570 	svccs	0x006d1570
    7334:	69050000 	stmdbvs	r5, {}
    7338:	0000dd02 	andeq	sp, r0, r2, lsl #26
    733c:	78230200 	stmdavc	r3!, {r9}
    7340:	00323c15 	eorseq	r3, r2, r5, lsl ip
    7344:	026a0500 	rsbeq	r0, sl, #0	; 0x0
    7348:	00000825 	andeq	r0, r0, r5, lsr #16
    734c:	01802303 	orreq	r2, r0, r3, lsl #6
    7350:	00307915 	eorseq	r7, r0, r5, lsl r9
    7354:	026b0500 	rsbeq	r0, fp, #0	; 0x0
    7358:	00000835 	andeq	r0, r0, r5, lsr r8
    735c:	01882303 	orreq	r2, r8, r3, lsl #6
    7360:	0031da15 	eorseq	sp, r1, r5, lsl sl
    7364:	026c0500 	rsbeq	r0, ip, #0	; 0x0
    7368:	00000048 	andeq	r0, r0, r8, asr #32
    736c:	01a02303 	lsleq	r2, r3, #6
    7370:	002ffd15 	eoreq	pc, pc, r5, lsl sp
    7374:	026d0500 	rsbeq	r0, sp, #0	; 0x0
    7378:	000000dd 	ldrdeq	r0, [r0], -sp
    737c:	01a42303 	undefined instruction 0x01a42303
    7380:	002f5e15 	eoreq	r5, pc, r5, lsl lr
    7384:	026e0500 	rsbeq	r0, lr, #0	; 0x0
    7388:	000000dd 	ldrdeq	r0, [r0], -sp
    738c:	01ac2303 	undefined instruction 0x01ac2303
    7390:	002fec15 	eoreq	lr, pc, r5, lsl ip
    7394:	026f0500 	rsbeq	r0, pc, #0	; 0x0
    7398:	000000dd 	ldrdeq	r0, [r0], -sp
    739c:	01b42303 	undefined instruction 0x01b42303
    73a0:	002f3515 	eoreq	r3, pc, r5, lsl r5
    73a4:	02700500 	rsbseq	r0, r0, #0	; 0x0
    73a8:	000000dd 	ldrdeq	r0, [r0], -sp
    73ac:	01bc2303 	undefined instruction 0x01bc2303
    73b0:	002f4415 	eoreq	r4, pc, r5, lsl r4
    73b4:	02710500 	rsbseq	r0, r1, #0	; 0x0
    73b8:	000000dd 	ldrdeq	r0, [r0], -sp
    73bc:	01c42303 	biceq	r2, r4, r3, lsl #6
    73c0:	05ba0800 	ldreq	r0, [sl, #2048]!
    73c4:	08250000 	stmdaeq	r5!, {}
    73c8:	b5090000 	strlt	r0, [r9]
    73cc:	19000000 	stmdbne	r0, {}
    73d0:	05ba0800 	ldreq	r0, [sl, #2048]!
    73d4:	08350000 	ldmdaeq	r5!, {}
    73d8:	b5090000 	strlt	r0, [r9]
    73dc:	07000000 	streq	r0, [r0, -r0]
    73e0:	05ba0800 	ldreq	r0, [sl, #2048]!
    73e4:	08450000 	stmdaeq	r5, {}^
    73e8:	b5090000 	strlt	r0, [r9]
    73ec:	17000000 	strne	r0, [r0, -r0]
    73f0:	05f01800 	ldrbeq	r1, [r0, #2048]!
    73f4:	086d0277 	stmdaeq	sp!, {r0, r1, r2, r4, r5, r6, r9}^
    73f8:	bc150000 	ldclt	0, cr0, [r5], {0}
    73fc:	05000030 	streq	r0, [r0, #-48]
    7400:	086d0279 	stmdaeq	sp!, {r0, r3, r4, r5, r6, r9}^
    7404:	23020000 	movwcs	r0, #8192	; 0x2000
    7408:	32331500 	eorscc	r1, r3, #0	; 0x0
    740c:	7a050000 	bvc	147414 <__Stack_Size+0x147014>
    7410:	00087d02 	andeq	r7, r8, r2, lsl #26
    7414:	78230200 	stmdavc	r3!, {r9}
    7418:	02ee0800 	rsceq	r0, lr, #0	; 0x0
    741c:	087d0000 	ldmdaeq	sp!, {}^
    7420:	b5090000 	strlt	r0, [r9]
    7424:	1d000000 	stcne	0, cr0, [r0]
    7428:	00250800 	eoreq	r0, r5, r0, lsl #16
    742c:	088d0000 	stmeq	sp, {}
    7430:	b5090000 	strlt	r0, [r9]
    7434:	1d000000 	stcne	0, cr0, [r0]
    7438:	05f01900 	ldrbeq	r1, [r0, #2304]!
    743c:	08af025d 	stmiaeq	pc!, {r0, r2, r3, r4, r6, r9}
    7440:	7c1a0000 	ldcvc	0, cr0, [sl], {0}
    7444:	05000031 	streq	r0, [r0, #-49]
    7448:	06f50272 	undefined
    744c:	561a0000 	ldrpl	r0, [sl], -r0
    7450:	05000032 	streq	r0, [r0, #-50]
    7454:	0845027b 	stmdaeq	r5, {r0, r1, r3, r4, r5, r6, r9}^
    7458:	08000000 	stmdaeq	r0, {}
    745c:	000005ba 	strheq	r0, [r0], -sl
    7460:	000008bf 	strheq	r0, [r0], -pc
    7464:	0000b509 	andeq	fp, r0, r9, lsl #10
    7468:	1b001800 	blne	d470 <__Stack_Size+0xd070>
    746c:	0008cb01 	andeq	ip, r8, r1, lsl #22
    7470:	04511400 	ldrbeq	r1, [r1], #-1024
    7474:	10000000 	andne	r0, r0, r0
    7478:	0008bf04 	andeq	fp, r8, r4, lsl #30
    747c:	66041000 	strvs	r1, [r4], -r0
    7480:	1b000001 	blne	748c <__Stack_Size+0x708c>
    7484:	0008e301 	andeq	lr, r8, r1, lsl #6
    7488:	00481400 	subeq	r1, r8, r0, lsl #8
    748c:	10000000 	andne	r0, r0, r0
    7490:	0008e904 	andeq	lr, r8, r4, lsl #18
    7494:	d7041000 	strle	r1, [r4, -r0]
    7498:	08000008 	stmdaeq	r0, {r3}
    749c:	00000657 	andeq	r0, r0, r7, asr r6
    74a0:	000008ff 	strdeq	r0, [r0], -pc
    74a4:	0000b509 	andeq	fp, r0, r9, lsl #10
    74a8:	1c000200 	sfmne	f0, 4, [r0], {0}
    74ac:	002ebd01 	eoreq	fp, lr, r1, lsl #26
    74b0:	013c0100 	teqeq	ip, r0, lsl #2
	...
    74bc:	09265d01 	stmdbeq	r6!, {r0, r8, sl, fp, ip, lr}
    74c0:	0c1d0000 	ldceq	0, cr0, [sp], {0}
    74c4:	01000032 	tsteq	r0, r2, lsr r0
    74c8:	0000483a 	andeq	r4, r0, sl, lsr r8
    74cc:	002c5f00 	eoreq	r5, ip, r0, lsl #30
    74d0:	e71e0000 	ldr	r0, [lr, -r0]
    74d4:	05000031 	streq	r0, [r0, #-49]
    74d8:	09340328 	ldmdbeq	r4!, {r3, r5, r8, r9}
    74dc:	01010000 	tsteq	r1, r0
    74e0:	00045116 	andeq	r5, r4, r6, lsl r1
    74e4:	09360000 	ldmdbeq	r6!, {}
    74e8:	00020000 	.word	0x00020000
    74ec:	000018ce 	.word	0x000018ce
    74f0:	053b0104 	.word	0x053b0104
    74f4:	a6010000 	.word	0xa6010000
    74f8:	da000032 	.word	0xda000032
    74fc:	00000032 	.word	0x00000032
    7500:	00000000 	.word	0x00000000
    7504:	55000000 	.word	0x55000000
    7508:	02000019 	.word	0x02000019
    750c:	06cc0601 	.word	0x06cc0601
    7510:	01020000 	.word	0x01020000
    7514:	0006ca08 	.word	0x0006ca08
    7518:	05020200 	.word	0x05020200
    751c:	000005b8 	.word	0x000005b8
    7520:	1e070202 	.word	0x1e070202
    7524:	03000008 	.word	0x03000008
    7528:	6e690504 	.word	0x6e690504
    752c:	04020074 	.word	0x04020074
    7530:	002ea007 	.word	0x002ea007
    7534:	05080200 	.word	0x05080200
    7538:	00002e1c 	.word	0x00002e1c
    753c:	96070802 	.word	0x96070802
    7540:	0400002e 	.word	0x0400002e
    7544:	000030f0 	.word	0x000030f0
    7548:	00410701 	.word	0x00410701
    754c:	04020000 	.word	0x04020000
    7550:	002e2105 	.word	0x002e2105
    7554:	319f0400 	.word	0x319f0400
    7558:	2c020000 	.word	0x2c020000
    755c:	00000068 	.word	0x00000068
    7560:	00309805 	.word	0x00309805
    7564:	01630300 	.word	0x01630300
    7568:	00000048 	.word	0x00000048
    756c:	47020406 	.word	0x47020406
    7570:	000000a5 	.word	0x000000a5
    7574:	00309207 	.word	0x00309207
    7578:	7a480200 	.word	0x7a480200
    757c:	07000000 	.word	0x07000000
    7580:	0000304c 	.word	0x0000304c
    7584:	00a54902 	.word	0x00a54902
    7588:	08000000 	.word	0x08000000
    758c:	0000002c 	.word	0x0000002c
    7590:	000000b5 	.word	0x000000b5
    7594:	0000b509 	.word	0x0000b509
    7598:	0a000300 	.word	0x0a000300
    759c:	080b0704 	.word	0x080b0704
    75a0:	00dd4402 	.word	0x00dd4402
    75a4:	890c0000 	.word	0x890c0000
    75a8:	02000031 	.word	0x02000031
    75ac:	00004145 	.word	0x00004145
    75b0:	00230200 	.word	0x00230200
    75b4:	0031910c 	.word	0x0031910c
    75b8:	864a0200 	.word	0x864a0200
    75bc:	02000000 	.word	0x02000000
    75c0:	04000423 	.word	0x04000423
    75c4:	00003125 	.word	0x00003125
    75c8:	00b84b02 	.word	0x00b84b02
    75cc:	1e040000 	.word	0x1e040000
    75d0:	02000030 	.word	0x02000030
    75d4:	00005d4f 	.word	0x00005d4f
    75d8:	04040d00 	.word	0x04040d00
    75dc:	000031d2 	.word	0x000031d2
    75e0:	01001504 	.word	0x01001504
    75e4:	04020000 	.word	0x04020000
    75e8:	002e9b07 	.word	0x002e9b07
    75ec:	302f0e00 	.word	0x302f0e00
    75f0:	04180000 	.word	0x04180000
    75f4:	0001662d 	.word	0x0001662d
    75f8:	313d0c00 	.word	0x313d0c00
    75fc:	2e040000 	.word	0x2e040000
    7600:	00000166 	.word	0x00000166
    7604:	0f002302 	.word	0x0f002302
    7608:	04006b5f 	.word	0x04006b5f
    760c:	0000412f 	.word	0x0000412f
    7610:	04230200 	.word	0x04230200
    7614:	0031740c 	.word	0x0031740c
    7618:	412f0400 	.word	0x412f0400
    761c:	02000000 	.word	0x02000000
    7620:	180c0823 	.word	0x180c0823
    7624:	04000030 	.word	0x04000030
    7628:	0000412f 	.word	0x0000412f
    762c:	0c230200 	.word	0x0c230200
    7630:	00321e0c 	.word	0x00321e0c
    7634:	412f0400 	.word	0x412f0400
    7638:	02000000 	.word	0x02000000
    763c:	5f0f1023 	.word	0x5f0f1023
    7640:	30040078 	.word	0x30040078
    7644:	0000016c 	.word	0x0000016c
    7648:	00142302 	.word	0x00142302
    764c:	01070410 	.word	0x01070410
    7650:	f5080000 	.word	0xf5080000
    7654:	7c000000 	.word	0x7c000000
    7658:	09000001 	.word	0x09000001
    765c:	000000b5 	.word	0x000000b5
    7660:	470e0000 	.word	0x470e0000
    7664:	24000030 	.word	0x24000030
    7668:	02073504 	.word	0x02073504
    766c:	7b0c0000 	.word	0x7b0c0000
    7670:	0400002f 	.word	0x0400002f
    7674:	00004136 	.word	0x00004136
    7678:	00230200 	.word	0x00230200
    767c:	0031ae0c 	.word	0x0031ae0c
    7680:	41370400 	.word	0x41370400
    7684:	02000000 	.word	0x02000000
    7688:	900c0423 	.word	0x900c0423
    768c:	0400002f 	.word	0x0400002f
    7690:	00004138 	.word	0x00004138
    7694:	08230200 	.word	0x08230200
    7698:	0032900c 	.word	0x0032900c
    769c:	41390400 	.word	0x41390400
    76a0:	02000000 	.word	0x02000000
    76a4:	c30c0c23 	.word	0xc30c0c23
    76a8:	04000030 	.word	0x04000030
    76ac:	0000413a 	.word	0x0000413a
    76b0:	10230200 	.word	0x10230200
    76b4:	0030b20c 	.word	0x0030b20c
    76b8:	413b0400 	.word	0x413b0400
    76bc:	02000000 	.word	0x02000000
    76c0:	230c1423 	.word	0x230c1423
    76c4:	04000032 	.word	0x04000032
    76c8:	0000413c 	.word	0x0000413c
    76cc:	18230200 	.word	0x18230200
    76d0:	0031070c 	.word	0x0031070c
    76d4:	413d0400 	.word	0x413d0400
    76d8:	02000000 	.word	0x02000000
    76dc:	5e0c1c23 	.word	0x5e0c1c23
    76e0:	04000032 	.word	0x04000032
    76e4:	0000413e 	.word	0x0000413e
    76e8:	20230200 	.word	0x20230200
    76ec:	2f9f1100 	.word	0x2f9f1100
    76f0:	01080000 	.word	0x01080000
    76f4:	02504704 	.word	0x02504704
    76f8:	0b0c0000 	.word	0x0b0c0000
    76fc:	04000030 	.word	0x04000030
    7700:	00025048 	.word	0x00025048
    7704:	00230200 	.word	0x00230200
    7708:	002edd0c 	.word	0x002edd0c
    770c:	50490400 	.word	0x50490400
    7710:	03000002 	.word	0x03000002
    7714:	0c018023 	.word	0x0c018023
    7718:	000031c4 	.word	0x000031c4
    771c:	00f54b04 	.word	0x00f54b04
    7720:	23030000 	.word	0x23030000
    7724:	c40c0280 	.word	0xc40c0280
    7728:	0400002f 	.word	0x0400002f
    772c:	0000f54e 	.word	0x0000f54e
    7730:	84230300 	.word	0x84230300
    7734:	f3080002 	.word	0xf3080002
    7738:	60000000 	.word	0x60000000
    773c:	09000002 	.word	0x09000002
    7740:	000000b5 	.word	0x000000b5
    7744:	d511001f 	.word	0xd511001f
    7748:	9000002e 	.word	0x9000002e
    774c:	a7590401 	.word	0xa7590401
    7750:	0c000002 	.word	0x0c000002
    7754:	0000313d 	.word	0x0000313d
    7758:	02a75a04 	.word	0x02a75a04
    775c:	23020000 	.word	0x23020000
    7760:	31550c00 	.word	0x31550c00
    7764:	5b040000 	.word	0x5b040000
    7768:	00000041 	.word	0x00000041
    776c:	0c042302 	.word	0x0c042302
    7770:	00003013 	.word	0x00003013
    7774:	02ad5d04 	.word	0x02ad5d04
    7778:	23020000 	.word	0x23020000
    777c:	2f9f0c08 	.word	0x2f9f0c08
    7780:	5e040000 	.word	0x5e040000
    7784:	00000207 	.word	0x00000207
    7788:	01882303 	.word	0x01882303
    778c:	60041000 	.word	0x60041000
    7790:	08000002 	.word	0x08000002
    7794:	000002bf 	.word	0x000002bf
    7798:	000002bd 	.word	0x000002bd
    779c:	0000b509 	.word	0x0000b509
    77a0:	12001f00 	.word	0x12001f00
    77a4:	bd041001 	.word	0xbd041001
    77a8:	0e000002 	.word	0x0e000002
    77ac:	00003111 	.word	0x00003111
    77b0:	ee690408 	.word	0xee690408
    77b4:	0c000002 	.word	0x0c000002
    77b8:	00002f8a 	.word	0x00002f8a
    77bc:	02ee6a04 	.word	0x02ee6a04
    77c0:	23020000 	.word	0x23020000
    77c4:	2f1c0c00 	.word	0x2f1c0c00
    77c8:	6b040000 	.word	0x6b040000
    77cc:	00000041 	.word	0x00000041
    77d0:	00042302 	.word	0x00042302
    77d4:	002c0410 	.word	0x002c0410
    77d8:	300e0000 	.word	0x300e0000
    77dc:	5c000031 	.word	0x5c000031
    77e0:	0432a904 	.word	0x0432a904
    77e4:	5f0f0000 	.word	0x5f0f0000
    77e8:	aa040070 	.word	0xaa040070
    77ec:	000002ee 	.word	0x000002ee
    77f0:	0f002302 	.word	0x0f002302
    77f4:	0400725f 	.word	0x0400725f
    77f8:	000041ab 	.word	0x000041ab
    77fc:	04230200 	.word	0x04230200
    7800:	00775f0f 	.word	0x00775f0f
    7804:	0041ac04 	.word	0x0041ac04
    7808:	23020000 	.word	0x23020000
    780c:	2fbd0c08 	.word	0x2fbd0c08
    7810:	ad040000 	.word	0xad040000
    7814:	00000033 	.word	0x00000033
    7818:	0c0c2302 	.word	0x0c0c2302
    781c:	00003063 	.word	0x00003063
    7820:	0033ae04 	.word	0x0033ae04
    7824:	23020000 	.word	0x23020000
    7828:	625f0f0e 	.word	0x625f0f0e
    782c:	af040066 	.word	0xaf040066
    7830:	000002c5 	.word	0x000002c5
    7834:	0c102302 	.word	0x0c102302
    7838:	00002f55 	.word	0x00002f55
    783c:	0041b004 	.word	0x0041b004
    7840:	23020000 	.word	0x23020000
    7844:	2fad0c18 	.word	0x2fad0c18
    7848:	b7040000 	.word	0xb7040000
    784c:	000000f3 	.word	0x000000f3
    7850:	0c1c2302 	.word	0x0c1c2302
    7854:	00003037 	.word	0x00003037
    7858:	05c1b904 	.word	0x05c1b904
    785c:	23020000 	.word	0x23020000
    7860:	30ab0c20 	.word	0x30ab0c20
    7864:	bb040000 	.word	0xbb040000
    7868:	000005f1 	.word	0x000005f1
    786c:	0c242302 	.word	0x0c242302
    7870:	00003199 	.word	0x00003199
    7874:	0616bd04 	.word	0x0616bd04
    7878:	23020000 	.word	0x23020000
    787c:	0e400c28 	.word	0x0e400c28
    7880:	be040000 	.word	0xbe040000
    7884:	00000631 	.word	0x00000631
    7888:	0f2c2302 	.word	0x0f2c2302
    788c:	0062755f 	.word	0x0062755f
    7890:	02c5c104 	.word	0x02c5c104
    7894:	23020000 	.word	0x23020000
    7898:	755f0f30 	.word	0x755f0f30
    789c:	c2040070 	.word	0xc2040070
    78a0:	000002ee 	.word	0x000002ee
    78a4:	0f382302 	.word	0x0f382302
    78a8:	0072755f 	.word	0x0072755f
    78ac:	0041c304 	.word	0x0041c304
    78b0:	23020000 	.word	0x23020000
    78b4:	2f840c3c 	.word	0x2f840c3c
    78b8:	c6040000 	.word	0xc6040000
    78bc:	00000637 	.word	0x00000637
    78c0:	0c402302 	.word	0x0c402302
    78c4:	00003250 	.word	0x00003250
    78c8:	0647c704 	.word	0x0647c704
    78cc:	23020000 	.word	0x23020000
    78d0:	6c5f0f43 	.word	0x6c5f0f43
    78d4:	ca040062 	.word	0xca040062
    78d8:	000002c5 	.word	0x000002c5
    78dc:	0c442302 	.word	0x0c442302
    78e0:	00002fd3 	.word	0x00002fd3
    78e4:	0041cd04 	.word	0x0041cd04
    78e8:	23020000 	.word	0x23020000
    78ec:	2fe40c4c 	.word	0x2fe40c4c
    78f0:	ce040000 	.word	0xce040000
    78f4:	00000041 	.word	0x00000041
    78f8:	0c502302 	.word	0x0c502302
    78fc:	000032a0 	.word	0x000032a0
    7900:	0451d104 	.word	0x0451d104
    7904:	23020000 	.word	0x23020000
    7908:	309f0c54 	.word	0x309f0c54
    790c:	d5040000 	.word	0xd5040000
    7910:	000000e8 	.word	0x000000e8
    7914:	00582302 	.word	0x00582302
    7918:	00410113 	.word	0x00410113
    791c:	04510000 	.word	0x04510000
    7920:	51140000 	.word	0x51140000
    7924:	14000004 	.word	0x14000004
    7928:	000000f3 	.word	0x000000f3
    792c:	0005b414 	.word	0x0005b414
    7930:	00411400 	.word	0x00411400
    7934:	10000000 	.word	0x10000000
    7938:	00045704 	.word	0x00045704
    793c:	317c1100 	.word	0x317c1100
    7940:	04000000 	.word	0x04000000
    7944:	05b42504 	.word	0x05b42504
    7948:	a7150000 	.word	0xa7150000
    794c:	04000031 	.word	0x04000031
    7950:	00410241 	.word	0x00410241
    7954:	23020000 	.word	0x23020000
    7958:	2fcc1500 	.word	0x2fcc1500
    795c:	46040000 	.word	0x46040000
    7960:	0006a402 	.word	0x0006a402
    7964:	04230200 	.word	0x04230200
    7968:	00305315 	.word	0x00305315
    796c:	02460400 	.word	0x02460400
    7970:	000006a4 	.word	0x000006a4
    7974:	15082302 	.word	0x15082302
    7978:	00003027 	.word	0x00003027
    797c:	a4024604 	.word	0xa4024604
    7980:	02000006 	.word	0x02000006
    7984:	50150c23 	.word	0x50150c23
    7988:	04000031 	.word	0x04000031
    798c:	00410248 	.word	0x00410248
    7990:	23020000 	.word	0x23020000
    7994:	2f2a1510 	.word	0x2f2a1510
    7998:	49040000 	.word	0x49040000
    799c:	0008af02 	.word	0x0008af02
    79a0:	14230200 	.word	0x14230200
    79a4:	0031fa15 	.word	0x0031fa15
    79a8:	024b0400 	.word	0x024b0400
    79ac:	00000041 	.word	0x00000041
    79b0:	15302302 	.word	0x15302302
    79b4:	0000315a 	.word	0x0000315a
    79b8:	e6024c04 	.word	0xe6024c04
    79bc:	02000005 	.word	0x02000005
    79c0:	cc153423 	.word	0xcc153423
    79c4:	04000030 	.word	0x04000030
    79c8:	0041024e 	.word	0x0041024e
    79cc:	23020000 	.word	0x23020000
    79d0:	316a1538 	.word	0x316a1538
    79d4:	50040000 	.word	0x50040000
    79d8:	0008cb02 	.word	0x0008cb02
    79dc:	3c230200 	.word	0x3c230200
    79e0:	00101315 	.word	0x00101315
    79e4:	02530400 	.word	0x02530400
    79e8:	00000166 	.word	0x00000166
    79ec:	15402302 	.word	0x15402302
    79f0:	0000303d 	.word	0x0000303d
    79f4:	41025404 	.word	0x41025404
    79f8:	02000000 	.word	0x02000000
    79fc:	8b154423 	.word	0x8b154423
    7a00:	04000032 	.word	0x04000032
    7a04:	01660255 	.word	0x01660255
    7a08:	23020000 	.word	0x23020000
    7a0c:	30e61548 	.word	0x30e61548
    7a10:	56040000 	.word	0x56040000
    7a14:	0008d102 	.word	0x0008d102
    7a18:	4c230200 	.word	0x4c230200
    7a1c:	00305b15 	.word	0x00305b15
    7a20:	02590400 	.word	0x02590400
    7a24:	00000041 	.word	0x00000041
    7a28:	15502302 	.word	0x15502302
    7a2c:	00002fdc 	.word	0x00002fdc
    7a30:	b4025a04 	.word	0xb4025a04
    7a34:	02000005 	.word	0x02000005
    7a38:	02155423 	.word	0x02155423
    7a3c:	04000031 	.word	0x04000031
    7a40:	088d027c 	.word	0x088d027c
    7a44:	23020000 	.word	0x23020000
    7a48:	2ed51558 	.word	0x2ed51558
    7a4c:	7f040000 	.word	0x7f040000
    7a50:	0002a702 	.word	0x0002a702
    7a54:	c8230300 	.word	0xc8230300
    7a58:	30701502 	.word	0x30701502
    7a5c:	80040000 	.word	0x80040000
    7a60:	00026002 	.word	0x00026002
    7a64:	cc230300 	.word	0xcc230300
    7a68:	32461502 	.word	0x32461502
    7a6c:	83040000 	.word	0x83040000
    7a70:	0008e302 	.word	0x0008e302
    7a74:	dc230300 	.word	0xdc230300
    7a78:	2fb51505 	.word	0x2fb51505
    7a7c:	88040000 	.word	0x88040000
    7a80:	00066302 	.word	0x00066302
    7a84:	e0230300 	.word	0xe0230300
    7a88:	2f9a1505 	.word	0x2f9a1505
    7a8c:	89040000 	.word	0x89040000
    7a90:	0008ef02 	.word	0x0008ef02
    7a94:	ec230300 	.word	0xec230300
    7a98:	04100005 	.word	0x04100005
    7a9c:	000005ba 	.word	0x000005ba
    7aa0:	d3080102 	.word	0xd3080102
    7aa4:	10000006 	.word	0x10000006
    7aa8:	00043204 	.word	0x00043204
    7aac:	41011300 	.word	0x41011300
    7ab0:	e6000000 	.word	0xe6000000
    7ab4:	14000005 	.word	0x14000005
    7ab8:	00000451 	.word	0x00000451
    7abc:	0000f314 	.word	0x0000f314
    7ac0:	05e61400 	.word	0x05e61400
    7ac4:	41140000 	.word	0x41140000
    7ac8:	00000000 	.word	0x00000000
    7acc:	05ec0410 	.word	0x05ec0410
    7ad0:	ba160000 	.word	0xba160000
    7ad4:	10000005 	.word	0x10000005
    7ad8:	0005c704 	.word	0x0005c704
    7adc:	6f011300 	.word	0x6f011300
    7ae0:	16000000 	.word	0x16000000
    7ae4:	14000006 	.word	0x14000006
    7ae8:	00000451 	.word	0x00000451
    7aec:	0000f314 	.word	0x0000f314
    7af0:	006f1400 	.word	0x006f1400
    7af4:	41140000 	.word	0x41140000
    7af8:	00000000 	.word	0x00000000
    7afc:	05f70410 	.word	0x05f70410
    7b00:	01130000 	.word	0x01130000
    7b04:	00000041 	.word	0x00000041
    7b08:	00000631 	.word	0x00000631
    7b0c:	00045114 	.word	0x00045114
    7b10:	00f31400 	.word	0x00f31400
    7b14:	10000000 	.word	0x10000000
    7b18:	00061c04 	.word	0x00061c04
    7b1c:	002c0800 	.word	0x002c0800
    7b20:	06470000 	.word	0x06470000
    7b24:	b5090000 	.word	0xb5090000
    7b28:	02000000 	.word	0x02000000
    7b2c:	002c0800 	.word	0x002c0800
    7b30:	06570000 	.word	0x06570000
    7b34:	b5090000 	.word	0xb5090000
    7b38:	00000000 	.word	0x00000000
    7b3c:	311e0500 	.word	0x311e0500
    7b40:	0e040000 	.word	0x0e040000
    7b44:	0002f401 	.word	0x0002f401
    7b48:	322d1700 	.word	0x322d1700
    7b4c:	040c0000 	.word	0x040c0000
    7b50:	069e0113 	.word	0x069e0113
    7b54:	3d150000 	.word	0x3d150000
    7b58:	04000031 	.word	0x04000031
    7b5c:	069e0114 	.word	0x069e0114
    7b60:	23020000 	.word	0x23020000
    7b64:	30691500 	.word	0x30691500
    7b68:	15040000 	.word	0x15040000
    7b6c:	00004101 	.word	0x00004101
    7b70:	04230200 	.word	0x04230200
    7b74:	00311815 	.word	0x00311815
    7b78:	01160400 	.word	0x01160400
    7b7c:	000006a4 	.word	0x000006a4
    7b80:	00082302 	.word	0x00082302
    7b84:	06630410 	.word	0x06630410
    7b88:	04100000 	.word	0x04100000
    7b8c:	00000657 	.word	0x00000657
    7b90:	002f2217 	.word	0x002f2217
    7b94:	2e040e00 	.word	0x2e040e00
    7b98:	0006e501 	.word	0x0006e501
    7b9c:	31831500 	.word	0x31831500
    7ba0:	2f040000 	.word	0x2f040000
    7ba4:	0006e501 	.word	0x0006e501
    7ba8:	00230200 	.word	0x00230200
    7bac:	0030a515 	.word	0x0030a515
    7bb0:	01300400 	.word	0x01300400
    7bb4:	000006e5 	.word	0x000006e5
    7bb8:	15062302 	.word	0x15062302
    7bbc:	000031cd 	.word	0x000031cd
    7bc0:	3a013104 	.word	0x3a013104
    7bc4:	02000000 	.word	0x02000000
    7bc8:	08000c23 	.word	0x08000c23
    7bcc:	0000003a 	.word	0x0000003a
    7bd0:	000006f5 	.word	0x000006f5
    7bd4:	0000b509 	.word	0x0000b509
    7bd8:	18000200 	.word	0x18000200
    7bdc:	025f04d0 	.word	0x025f04d0
    7be0:	00000815 	.word	0x00000815
    7be4:	00321115 	.word	0x00321115
    7be8:	02600400 	.word	0x02600400
    7bec:	00000048 	.word	0x00000048
    7bf0:	15002302 	.word	0x15002302
    7bf4:	000031b7 	.word	0x000031b7
    7bf8:	b4026104 	.word	0xb4026104
    7bfc:	02000005 	.word	0x02000005
    7c00:	85150423 	.word	0x85150423
    7c04:	04000030 	.word	0x04000030
    7c08:	08150262 	.word	0x08150262
    7c0c:	23020000 	.word	0x23020000
    7c10:	32691508 	.word	0x32691508
    7c14:	63040000 	.word	0x63040000
    7c18:	00017c02 	.word	0x00017c02
    7c1c:	24230200 	.word	0x24230200
    7c20:	0030d715 	.word	0x0030d715
    7c24:	02640400 	.word	0x02640400
    7c28:	00000041 	.word	0x00000041
    7c2c:	15482302 	.word	0x15482302
    7c30:	00003138 	.word	0x00003138
    7c34:	56026504 	.word	0x56026504
    7c38:	02000000 	.word	0x02000000
    7c3c:	78155023 	.word	0x78155023
    7c40:	04000032 	.word	0x04000032
    7c44:	06aa0266 	.word	0x06aa0266
    7c48:	23020000 	.word	0x23020000
    7c4c:	31431558 	.word	0x31431558
    7c50:	67040000 	.word	0x67040000
    7c54:	0000dd02 	.word	0x0000dd02
    7c58:	68230200 	.word	0x68230200
    7c5c:	00327d15 	.word	0x00327d15
    7c60:	02680400 	.word	0x02680400
    7c64:	000000dd 	.word	0x000000dd
    7c68:	15702302 	.word	0x15702302
    7c6c:	00002f6d 	.word	0x00002f6d
    7c70:	dd026904 	.word	0xdd026904
    7c74:	02000000 	.word	0x02000000
    7c78:	3c157823 	.word	0x3c157823
    7c7c:	04000032 	.word	0x04000032
    7c80:	0825026a 	.word	0x0825026a
    7c84:	23030000 	.word	0x23030000
    7c88:	79150180 	.word	0x79150180
    7c8c:	04000030 	.word	0x04000030
    7c90:	0835026b 	.word	0x0835026b
    7c94:	23030000 	.word	0x23030000
    7c98:	da150188 	.word	0xda150188
    7c9c:	04000031 	.word	0x04000031
    7ca0:	0041026c 	.word	0x0041026c
    7ca4:	23030000 	.word	0x23030000
    7ca8:	fd1501a0 	.word	0xfd1501a0
    7cac:	0400002f 	.word	0x0400002f
    7cb0:	00dd026d 	.word	0x00dd026d
    7cb4:	23030000 	.word	0x23030000
    7cb8:	5e1501a4 	.word	0x5e1501a4
    7cbc:	0400002f 	.word	0x0400002f
    7cc0:	00dd026e 	.word	0x00dd026e
    7cc4:	23030000 	.word	0x23030000
    7cc8:	ec1501ac 	.word	0xec1501ac
    7ccc:	0400002f 	.word	0x0400002f
    7cd0:	00dd026f 	.word	0x00dd026f
    7cd4:	23030000 	.word	0x23030000
    7cd8:	351501b4 	.word	0x351501b4
    7cdc:	0400002f 	.word	0x0400002f
    7ce0:	00dd0270 	.word	0x00dd0270
    7ce4:	23030000 	.word	0x23030000
    7ce8:	441501bc 	.word	0x441501bc
    7cec:	0400002f 	.word	0x0400002f
    7cf0:	00dd0271 	.word	0x00dd0271
    7cf4:	23030000 	.word	0x23030000
    7cf8:	080001c4 	.word	0x080001c4
    7cfc:	000005ba 	.word	0x000005ba
    7d00:	00000825 	.word	0x00000825
    7d04:	0000b509 	.word	0x0000b509
    7d08:	08001900 	.word	0x08001900
    7d0c:	000005ba 	.word	0x000005ba
    7d10:	00000835 	.word	0x00000835
    7d14:	0000b509 	.word	0x0000b509
    7d18:	08000700 	.word	0x08000700
    7d1c:	000005ba 	.word	0x000005ba
    7d20:	00000845 	.word	0x00000845
    7d24:	0000b509 	.word	0x0000b509
    7d28:	18001700 	.word	0x18001700
    7d2c:	027704f0 	.word	0x027704f0
    7d30:	0000086d 	.word	0x0000086d
    7d34:	0030bc15 	.word	0x0030bc15
    7d38:	02790400 	.word	0x02790400
    7d3c:	0000086d 	.word	0x0000086d
    7d40:	15002302 	.word	0x15002302
    7d44:	00003233 	.word	0x00003233
    7d48:	7d027a04 	.word	0x7d027a04
    7d4c:	02000008 	.word	0x02000008
    7d50:	08007823 	.word	0x08007823
    7d54:	000002ee 	.word	0x000002ee
    7d58:	0000087d 	.word	0x0000087d
    7d5c:	0000b509 	.word	0x0000b509
    7d60:	08001d00 	.word	0x08001d00
    7d64:	00000048 	.word	0x00000048
    7d68:	0000088d 	.word	0x0000088d
    7d6c:	0000b509 	.word	0x0000b509
    7d70:	19001d00 	.word	0x19001d00
    7d74:	025d04f0 	.word	0x025d04f0
    7d78:	000008af 	.word	0x000008af
    7d7c:	00317c1a 	.word	0x00317c1a
    7d80:	02720400 	.word	0x02720400
    7d84:	000006f5 	.word	0x000006f5
    7d88:	0032561a 	.word	0x0032561a
    7d8c:	027b0400 	.word	0x027b0400
    7d90:	00000845 	.word	0x00000845
    7d94:	05ba0800 	.word	0x05ba0800
    7d98:	08bf0000 	.word	0x08bf0000
    7d9c:	b5090000 	.word	0xb5090000
    7da0:	18000000 	.word	0x18000000
    7da4:	cb011b00 	.word	0xcb011b00
    7da8:	14000008 	.word	0x14000008
    7dac:	00000451 	.word	0x00000451
    7db0:	bf041000 	.word	0xbf041000
    7db4:	10000008 	.word	0x10000008
    7db8:	00016604 	.word	0x00016604
    7dbc:	e3011b00 	.word	0xe3011b00
    7dc0:	14000008 	.word	0x14000008
    7dc4:	00000041 	.word	0x00000041
    7dc8:	e9041000 	.word	0xe9041000
    7dcc:	10000008 	.word	0x10000008
    7dd0:	0008d704 	.word	0x0008d704
    7dd4:	06570800 	.word	0x06570800
    7dd8:	08ff0000 	.word	0x08ff0000
    7ddc:	b5090000 	.word	0xb5090000
    7de0:	02000000 	.word	0x02000000
    7de4:	329a1c00 	.word	0x329a1c00
    7de8:	0c050000 	.word	0x0c050000
    7dec:	00000457 	.word	0x00000457
    7df0:	00000305 	.word	0x00000305
    7df4:	ee1d0000 	.word	0xee1d0000
    7df8:	05000031 	.word	0x05000031
    7dfc:	00045110 	.word	0x00045110
    7e00:	03050100 	.word	0x03050100
    7e04:	00000000 	.word	0x00000000
    7e08:	0031e71d 	.word	0x0031e71d
    7e0c:	34110500 	.word	0x34110500
    7e10:	01000009 	.word	0x01000009
    7e14:	00000305 	.word	0x00000305
    7e18:	51160000 	.word	0x51160000
    7e1c:	00000004 	.word	0x00000004
    7e20:	00000142 	.word	0x00000142
    7e24:	1a2e0002 	.word	0x1a2e0002
    7e28:	01040000 	.word	0x01040000
    7e2c:	0000053b 	.word	0x0000053b
    7e30:	00334f01 	.word	0x00334f01
    7e34:	0033a300 	.word	0x0033a300
	...
    7e40:	001a3000 	.word	0x001a3000
    7e44:	06010200 	.word	0x06010200
    7e48:	000006cc 	.word	0x000006cc
    7e4c:	ca080102 	.word	0xca080102
    7e50:	02000006 	.word	0x02000006
    7e54:	05b80502 	.word	0x05b80502
    7e58:	02020000 	.word	0x02020000
    7e5c:	00081e07 	.word	0x00081e07
    7e60:	05040300 	.word	0x05040300
    7e64:	00746e69 	.word	0x00746e69
    7e68:	a0070402 	.word	0xa0070402
    7e6c:	0200002e 	.word	0x0200002e
    7e70:	2e1c0508 	.word	0x2e1c0508
    7e74:	08020000 	.word	0x08020000
    7e78:	002e9607 	.word	0x002e9607
    7e7c:	05040200 	.word	0x05040200
    7e80:	00002e21 	.word	0x00002e21
    7e84:	05070404 	.word	0x05070404
    7e88:	00003323 	.word	0x00003323
    7e8c:	0048d602 	.word	0x0048d602
    7e90:	04020000 	.word	0x04020000
    7e94:	002e9b07 	.word	0x002e9b07
    7e98:	08010200 	.word	0x08010200
    7e9c:	000006d3 	.word	0x000006d3
    7ea0:	33d80106 	.word	0x33d80106
    7ea4:	32010000 	.word	0x32010000
    7ea8:	00000001 	.word	0x00000001
    7eac:	00000000 	.word	0x00000000
    7eb0:	002c7d00 	.word	0x002c7d00
    7eb4:	0000b200 	.word	0x0000b200
    7eb8:	318b0700 	.word	0x318b0700
    7ebc:	33010000 	.word	0x33010000
    7ec0:	00000067 	.word	0x00000067
    7ec4:	69085501 	.word	0x69085501
    7ec8:	67340100 	.word	0x67340100
    7ecc:	01000000 	.word	0x01000000
    7ed0:	01060054 	.word	0x01060054
    7ed4:	00003391 	.word	0x00003391
    7ed8:	00012001 	.word	0x00012001
    7edc:	00000000 	.word	0x00000000
    7ee0:	9c000000 	.word	0x9c000000
    7ee4:	e400002c 	.word	0xe400002c
    7ee8:	07000000 	.word	0x07000000
    7eec:	0000318b 	.word	0x0000318b
    7ef0:	00672101 	.word	0x00672101
    7ef4:	55010000 	.word	0x55010000
    7ef8:	01006908 	.word	0x01006908
    7efc:	00006722 	.word	0x00006722
    7f00:	00540100 	.word	0x00540100
    7f04:	0000f109 	.word	0x0000f109
    7f08:	0000ef00 	.word	0x0000ef00
    7f0c:	0b000a00 	.word	0x0b000a00
    7f10:	ef040c01 	.word	0xef040c01
    7f14:	0d000000 	.word	0x0d000000
    7f18:	000033ea 	.word	0x000033ea
    7f1c:	00e41301 	.word	0x00e41301
    7f20:	01010000 	.word	0x01010000
    7f24:	00333b0d 	.word	0x00333b0d
    7f28:	e4140100 	.word	0xe4140100
    7f2c:	01000000 	.word	0x01000000
    7f30:	34000d01 	.word	0x34000d01
    7f34:	15010000 	.word	0x15010000
    7f38:	000000e4 	.word	0x000000e4
    7f3c:	800d0101 	.word	0x800d0101
    7f40:	01000033 	.word	0x01000033
    7f44:	0000e416 	.word	0x0000e416
    7f48:	0d010100 	.word	0x0d010100
    7f4c:	00003310 	.word	0x00003310
    7f50:	00e41701 	.word	0x00e41701
    7f54:	01010000 	.word	0x01010000
    7f58:	00332a0d 	.word	0x00332a0d
    7f5c:	e4180100 	.word	0xe4180100
    7f60:	01000000 	.word	0x01000000
    7f64:	010f0001 	.word	0x010f0001
    7f68:	00020000 	.word	0x00020000
    7f6c:	00001ad2 	.word	0x00001ad2
    7f70:	053b0104 	.word	0x053b0104
    7f74:	57010000 	.word	0x57010000
    7f78:	20000034 	.word	0x20000034
    7f7c:	00000034 	.word	0x00000034
    7f80:	00000000 	.word	0x00000000
    7f84:	d6000000 	.word	0xd6000000
    7f88:	0200001a 	.word	0x0200001a
    7f8c:	06cc0601 	.word	0x06cc0601
    7f90:	01020000 	.word	0x01020000
    7f94:	0006ca08 	.word	0x0006ca08
    7f98:	05020200 	.word	0x05020200
    7f9c:	000005b8 	.word	0x000005b8
    7fa0:	1e070202 	.word	0x1e070202
    7fa4:	03000008 	.word	0x03000008
    7fa8:	6e690504 	.word	0x6e690504
    7fac:	04020074 	.word	0x04020074
    7fb0:	002ea007 	.word	0x002ea007
    7fb4:	05080200 	.word	0x05080200
    7fb8:	00002e1c 	.word	0x00002e1c
    7fbc:	96070802 	.word	0x96070802
    7fc0:	0200002e 	.word	0x0200002e
    7fc4:	2e210504 	.word	0x2e210504
    7fc8:	04040000 	.word	0x04040000
    7fcc:	02040507 	.word	0x02040507
    7fd0:	2e9b0704 	.word	0x2e9b0704
    7fd4:	04060000 	.word	0x04060000
    7fd8:	00000076 	.word	0x00000076
    7fdc:	d3080102 	.word	0xd3080102
    7fe0:	07000006 	.word	0x07000006
    7fe4:	00003323 	.word	0x00003323
    7fe8:	0048d602 	.word	0x0048d602
    7fec:	01080000 	.word	0x01080000
    7ff0:	0000348c 	.word	0x0000348c
    7ff4:	67012f01 	.word	0x67012f01
	...
    8000:	bb000000 	.word	0xbb000000
    8004:	0c00002c 	.word	0x0c00002c
    8008:	09000001 	.word	0x09000001
    800c:	2b01006d 	.word	0x2b01006d
    8010:	00000067 	.word	0x00000067
    8014:	00002cda 	.word	0x00002cda
    8018:	01006309 	.word	0x01006309
    801c:	0000412b 	.word	0x0000412b
    8020:	002d0e00 	.word	0x002d0e00
    8024:	006e0900 	.word	0x006e0900
    8028:	007d2b01 	.word	0x007d2b01
    802c:	2d370000 	.word	0x2d370000
    8030:	730a0000 	.word	0x730a0000
    8034:	703a0100 	.word	0x703a0100
    8038:	6b000000 	.word	0x6b000000
    803c:	0b00002d 	.word	0x0b00002d
    8040:	3b010069 	.word	0x3b010069
    8044:	00000041 	.word	0x00000041
    8048:	0034930c 	.word	0x0034930c
    804c:	693c0100 	.word	0x693c0100
    8050:	89000000 	.word	0x89000000
    8054:	0c00002d 	.word	0x0c00002d
    8058:	00003413 	.word	0x00003413
    805c:	010c3d01 	.word	0x010c3d01
    8060:	2db20000 	.word	0x2db20000
    8064:	640d0000 	.word	0x640d0000
    8068:	483e0100 	.word	0x483e0100
    806c:	01000000 	.word	0x01000000
    8070:	04060055 	.word	0x04060055
    8074:	00000069 	.word	0x00000069
    8078:	0009a100 	.word	0x0009a100
    807c:	84000200 	.word	0x84000200
    8080:	0400001b 	.word	0x0400001b
    8084:	00053b01 	.word	0x00053b01
    8088:	349a0100 	.word	0x349a0100
    808c:	2e2a0000 	.word	0x2e2a0000
	...
    8098:	1bb20000 	.word	0x1bb20000
    809c:	04020000 	.word	0x04020000
    80a0:	746e6905 	.word	0x746e6905
    80a4:	07040300 	.word	0x07040300
    80a8:	00002ea0 	.word	0x00002ea0
    80ac:	cc060103 	.word	0xcc060103
    80b0:	03000006 	.word	0x03000006
    80b4:	06ca0801 	.word	0x06ca0801
    80b8:	02030000 	.word	0x02030000
    80bc:	0005b805 	.word	0x0005b805
    80c0:	07020300 	.word	0x07020300
    80c4:	0000081e 	.word	0x0000081e
    80c8:	1c050803 	.word	0x1c050803
    80cc:	0300002e 	.word	0x0300002e
    80d0:	2e960708 	.word	0x2e960708
    80d4:	f0040000 	.word	0xf0040000
    80d8:	02000030 	.word	0x02000030
    80dc:	00002507 	.word	0x00002507
    80e0:	05040300 	.word	0x05040300
    80e4:	00002e21 	.word	0x00002e21
    80e8:	00319f04 	.word	0x00319f04
    80ec:	682c0300 	.word	0x682c0300
    80f0:	05000000 	.word	0x05000000
    80f4:	00003098 	.word	0x00003098
    80f8:	2c016304 	.word	0x2c016304
    80fc:	06000000 	.word	0x06000000
    8100:	a5470304 	.word	0xa5470304
    8104:	07000000 	.word	0x07000000
    8108:	00003092 	.word	0x00003092
    810c:	007a4803 	.word	0x007a4803
    8110:	4c070000 	.word	0x4c070000
    8114:	03000030 	.word	0x03000030
    8118:	0000a549 	.word	0x0000a549
    811c:	3a080000 	.word	0x3a080000
    8120:	b5000000 	.word	0xb5000000
    8124:	09000000 	.word	0x09000000
    8128:	000000b5 	.word	0x000000b5
    812c:	040a0003 	.word	0x040a0003
    8130:	03080b07 	.word	0x03080b07
    8134:	0000dd44 	.word	0x0000dd44
    8138:	31890c00 	.word	0x31890c00
    813c:	45030000 	.word	0x45030000
    8140:	00000025 	.word	0x00000025
    8144:	0c002302 	.word	0x0c002302
    8148:	00003191 	.word	0x00003191
    814c:	00864a03 	.word	0x00864a03
    8150:	23020000 	.word	0x23020000
    8154:	25040004 	.word	0x25040004
    8158:	03000031 	.word	0x03000031
    815c:	0000b84b 	.word	0x0000b84b
    8160:	301e0400 	.word	0x301e0400
    8164:	4f030000 	.word	0x4f030000
    8168:	0000005d 	.word	0x0000005d
    816c:	d204040d 	.word	0xd204040d
    8170:	05000031 	.word	0x05000031
    8174:	00010015 	.word	0x00010015
    8178:	07040300 	.word	0x07040300
    817c:	00002e9b 	.word	0x00002e9b
    8180:	00302f0e 	.word	0x00302f0e
    8184:	2d051800 	.word	0x2d051800
    8188:	00000166 	.word	0x00000166
    818c:	00313d0c 	.word	0x00313d0c
    8190:	662e0500 	.word	0x662e0500
    8194:	02000001 	.word	0x02000001
    8198:	5f0f0023 	.word	0x5f0f0023
    819c:	2f05006b 	.word	0x2f05006b
    81a0:	00000025 	.word	0x00000025
    81a4:	0c042302 	.word	0x0c042302
    81a8:	00003174 	.word	0x00003174
    81ac:	00252f05 	.word	0x00252f05
    81b0:	23020000 	.word	0x23020000
    81b4:	30180c08 	.word	0x30180c08
    81b8:	2f050000 	.word	0x2f050000
    81bc:	00000025 	.word	0x00000025
    81c0:	0c0c2302 	.word	0x0c0c2302
    81c4:	0000321e 	.word	0x0000321e
    81c8:	00252f05 	.word	0x00252f05
    81cc:	23020000 	.word	0x23020000
    81d0:	785f0f10 	.word	0x785f0f10
    81d4:	6c300500 	.word	0x6c300500
    81d8:	02000001 	.word	0x02000001
    81dc:	10001423 	.word	0x10001423
    81e0:	00010704 	.word	0x00010704
    81e4:	00f50800 	.word	0x00f50800
    81e8:	017c0000 	.word	0x017c0000
    81ec:	b5090000 	.word	0xb5090000
    81f0:	00000000 	.word	0x00000000
    81f4:	30470e00 	.word	0x30470e00
    81f8:	05240000 	.word	0x05240000
    81fc:	00020735 	.word	0x00020735
    8200:	2f7b0c00 	.word	0x2f7b0c00
    8204:	36050000 	.word	0x36050000
    8208:	00000025 	.word	0x00000025
    820c:	0c002302 	.word	0x0c002302
    8210:	000031ae 	.word	0x000031ae
    8214:	00253705 	.word	0x00253705
    8218:	23020000 	.word	0x23020000
    821c:	2f900c04 	.word	0x2f900c04
    8220:	38050000 	.word	0x38050000
    8224:	00000025 	.word	0x00000025
    8228:	0c082302 	.word	0x0c082302
    822c:	00003290 	.word	0x00003290
    8230:	00253905 	.word	0x00253905
    8234:	23020000 	.word	0x23020000
    8238:	30c30c0c 	.word	0x30c30c0c
    823c:	3a050000 	.word	0x3a050000
    8240:	00000025 	.word	0x00000025
    8244:	0c102302 	.word	0x0c102302
    8248:	000030b2 	.word	0x000030b2
    824c:	00253b05 	.word	0x00253b05
    8250:	23020000 	.word	0x23020000
    8254:	32230c14 	.word	0x32230c14
    8258:	3c050000 	.word	0x3c050000
    825c:	00000025 	.word	0x00000025
    8260:	0c182302 	.word	0x0c182302
    8264:	00003107 	.word	0x00003107
    8268:	00253d05 	.word	0x00253d05
    826c:	23020000 	.word	0x23020000
    8270:	325e0c1c 	.word	0x325e0c1c
    8274:	3e050000 	.word	0x3e050000
    8278:	00000025 	.word	0x00000025
    827c:	00202302 	.word	0x00202302
    8280:	002f9f11 	.word	0x002f9f11
    8284:	05010800 	.word	0x05010800
    8288:	00025047 	.word	0x00025047
    828c:	300b0c00 	.word	0x300b0c00
    8290:	48050000 	.word	0x48050000
    8294:	00000250 	.word	0x00000250
    8298:	0c002302 	.word	0x0c002302
    829c:	00002edd 	.word	0x00002edd
    82a0:	02504905 	.word	0x02504905
    82a4:	23030000 	.word	0x23030000
    82a8:	c40c0180 	.word	0xc40c0180
    82ac:	05000031 	.word	0x05000031
    82b0:	0000f54b 	.word	0x0000f54b
    82b4:	80230300 	.word	0x80230300
    82b8:	2fc40c02 	.word	0x2fc40c02
    82bc:	4e050000 	.word	0x4e050000
    82c0:	000000f5 	.word	0x000000f5
    82c4:	02842303 	.word	0x02842303
    82c8:	00f30800 	.word	0x00f30800
    82cc:	02600000 	.word	0x02600000
    82d0:	b5090000 	.word	0xb5090000
    82d4:	1f000000 	.word	0x1f000000
    82d8:	2ed51100 	.word	0x2ed51100
    82dc:	01900000 	.word	0x01900000
    82e0:	02a75905 	.word	0x02a75905
    82e4:	3d0c0000 	.word	0x3d0c0000
    82e8:	05000031 	.word	0x05000031
    82ec:	0002a75a 	.word	0x0002a75a
    82f0:	00230200 	.word	0x00230200
    82f4:	0031550c 	.word	0x0031550c
    82f8:	255b0500 	.word	0x255b0500
    82fc:	02000000 	.word	0x02000000
    8300:	130c0423 	.word	0x130c0423
    8304:	05000030 	.word	0x05000030
    8308:	0002ad5d 	.word	0x0002ad5d
    830c:	08230200 	.word	0x08230200
    8310:	002f9f0c 	.word	0x002f9f0c
    8314:	075e0500 	.word	0x075e0500
    8318:	03000002 	.word	0x03000002
    831c:	00018823 	.word	0x00018823
    8320:	02600410 	.word	0x02600410
    8324:	bf080000 	.word	0xbf080000
    8328:	bd000002 	.word	0xbd000002
    832c:	09000002 	.word	0x09000002
    8330:	000000b5 	.word	0x000000b5
    8334:	0112001f 	.word	0x0112001f
    8338:	02bd0410 	.word	0x02bd0410
    833c:	110e0000 	.word	0x110e0000
    8340:	08000031 	.word	0x08000031
    8344:	02ee6905 	.word	0x02ee6905
    8348:	8a0c0000 	.word	0x8a0c0000
    834c:	0500002f 	.word	0x0500002f
    8350:	0002ee6a 	.word	0x0002ee6a
    8354:	00230200 	.word	0x00230200
    8358:	002f1c0c 	.word	0x002f1c0c
    835c:	256b0500 	.word	0x256b0500
    8360:	02000000 	.word	0x02000000
    8364:	10000423 	.word	0x10000423
    8368:	00003a04 	.word	0x00003a04
    836c:	31300e00 	.word	0x31300e00
    8370:	055c0000 	.word	0x055c0000
    8374:	000432a9 	.word	0x000432a9
    8378:	705f0f00 	.word	0x705f0f00
    837c:	eeaa0500 	.word	0xeeaa0500
    8380:	02000002 	.word	0x02000002
    8384:	5f0f0023 	.word	0x5f0f0023
    8388:	ab050072 	.word	0xab050072
    838c:	00000025 	.word	0x00000025
    8390:	0f042302 	.word	0x0f042302
    8394:	0500775f 	.word	0x0500775f
    8398:	000025ac 	.word	0x000025ac
    839c:	08230200 	.word	0x08230200
    83a0:	002fbd0c 	.word	0x002fbd0c
    83a4:	41ad0500 	.word	0x41ad0500
    83a8:	02000000 	.word	0x02000000
    83ac:	630c0c23 	.word	0x630c0c23
    83b0:	05000030 	.word	0x05000030
    83b4:	000041ae 	.word	0x000041ae
    83b8:	0e230200 	.word	0x0e230200
    83bc:	66625f0f 	.word	0x66625f0f
    83c0:	c5af0500 	.word	0xc5af0500
    83c4:	02000002 	.word	0x02000002
    83c8:	550c1023 	.word	0x550c1023
    83cc:	0500002f 	.word	0x0500002f
    83d0:	000025b0 	.word	0x000025b0
    83d4:	18230200 	.word	0x18230200
    83d8:	002fad0c 	.word	0x002fad0c
    83dc:	f3b70500 	.word	0xf3b70500
    83e0:	02000000 	.word	0x02000000
    83e4:	370c1c23 	.word	0x370c1c23
    83e8:	05000030 	.word	0x05000030
    83ec:	0005c1b9 	.word	0x0005c1b9
    83f0:	20230200 	.word	0x20230200
    83f4:	0030ab0c 	.word	0x0030ab0c
    83f8:	f1bb0500 	.word	0xf1bb0500
    83fc:	02000005 	.word	0x02000005
    8400:	990c2423 	.word	0x990c2423
    8404:	05000031 	.word	0x05000031
    8408:	000616bd 	.word	0x000616bd
    840c:	28230200 	.word	0x28230200
    8410:	000e400c 	.word	0x000e400c
    8414:	31be0500 	.word	0x31be0500
    8418:	02000006 	.word	0x02000006
    841c:	5f0f2c23 	.word	0x5f0f2c23
    8420:	05006275 	.word	0x05006275
    8424:	0002c5c1 	.word	0x0002c5c1
    8428:	30230200 	.word	0x30230200
    842c:	70755f0f 	.word	0x70755f0f
    8430:	eec20500 	.word	0xeec20500
    8434:	02000002 	.word	0x02000002
    8438:	5f0f3823 	.word	0x5f0f3823
    843c:	05007275 	.word	0x05007275
    8440:	000025c3 	.word	0x000025c3
    8444:	3c230200 	.word	0x3c230200
    8448:	002f840c 	.word	0x002f840c
    844c:	37c60500 	.word	0x37c60500
    8450:	02000006 	.word	0x02000006
    8454:	500c4023 	.word	0x500c4023
    8458:	05000032 	.word	0x05000032
    845c:	000647c7 	.word	0x000647c7
    8460:	43230200 	.word	0x43230200
    8464:	626c5f0f 	.word	0x626c5f0f
    8468:	c5ca0500 	.word	0xc5ca0500
    846c:	02000002 	.word	0x02000002
    8470:	d30c4423 	.word	0xd30c4423
    8474:	0500002f 	.word	0x0500002f
    8478:	000025cd 	.word	0x000025cd
    847c:	4c230200 	.word	0x4c230200
    8480:	002fe40c 	.word	0x002fe40c
    8484:	25ce0500 	.word	0x25ce0500
    8488:	02000000 	.word	0x02000000
    848c:	a00c5023 	.word	0xa00c5023
    8490:	05000032 	.word	0x05000032
    8494:	000451d1 	.word	0x000451d1
    8498:	54230200 	.word	0x54230200
    849c:	00309f0c 	.word	0x00309f0c
    84a0:	e8d50500 	.word	0xe8d50500
    84a4:	02000000 	.word	0x02000000
    84a8:	13005823 	.word	0x13005823
    84ac:	00002501 	.word	0x00002501
    84b0:	00045100 	.word	0x00045100
    84b4:	04511400 	.word	0x04511400
    84b8:	f3140000 	.word	0xf3140000
    84bc:	14000000 	.word	0x14000000
    84c0:	000005b4 	.word	0x000005b4
    84c4:	00002514 	.word	0x00002514
    84c8:	04100000 	.word	0x04100000
    84cc:	00000457 	.word	0x00000457
    84d0:	00317c11 	.word	0x00317c11
    84d4:	05040000 	.word	0x05040000
    84d8:	0005b425 	.word	0x0005b425
    84dc:	31a71500 	.word	0x31a71500
    84e0:	41050000 	.word	0x41050000
    84e4:	00002502 	.word	0x00002502
    84e8:	00230200 	.word	0x00230200
    84ec:	002fcc15 	.word	0x002fcc15
    84f0:	02460500 	.word	0x02460500
    84f4:	000006a4 	.word	0x000006a4
    84f8:	15042302 	.word	0x15042302
    84fc:	00003053 	.word	0x00003053
    8500:	a4024605 	.word	0xa4024605
    8504:	02000006 	.word	0x02000006
    8508:	27150823 	.word	0x27150823
    850c:	05000030 	.word	0x05000030
    8510:	06a40246 	.word	0x06a40246
    8514:	23020000 	.word	0x23020000
    8518:	3150150c 	.word	0x3150150c
    851c:	48050000 	.word	0x48050000
    8520:	00002502 	.word	0x00002502
    8524:	10230200 	.word	0x10230200
    8528:	002f2a15 	.word	0x002f2a15
    852c:	02490500 	.word	0x02490500
    8530:	000008af 	.word	0x000008af
    8534:	15142302 	.word	0x15142302
    8538:	000031fa 	.word	0x000031fa
    853c:	25024b05 	.word	0x25024b05
    8540:	02000000 	.word	0x02000000
    8544:	5a153023 	.word	0x5a153023
    8548:	05000031 	.word	0x05000031
    854c:	05e6024c 	.word	0x05e6024c
    8550:	23020000 	.word	0x23020000
    8554:	30cc1534 	.word	0x30cc1534
    8558:	4e050000 	.word	0x4e050000
    855c:	00002502 	.word	0x00002502
    8560:	38230200 	.word	0x38230200
    8564:	00316a15 	.word	0x00316a15
    8568:	02500500 	.word	0x02500500
    856c:	000008cb 	.word	0x000008cb
    8570:	153c2302 	.word	0x153c2302
    8574:	00001013 	.word	0x00001013
    8578:	66025305 	.word	0x66025305
    857c:	02000001 	.word	0x02000001
    8580:	3d154023 	.word	0x3d154023
    8584:	05000030 	.word	0x05000030
    8588:	00250254 	.word	0x00250254
    858c:	23020000 	.word	0x23020000
    8590:	328b1544 	.word	0x328b1544
    8594:	55050000 	.word	0x55050000
    8598:	00016602 	.word	0x00016602
    859c:	48230200 	.word	0x48230200
    85a0:	0030e615 	.word	0x0030e615
    85a4:	02560500 	.word	0x02560500
    85a8:	000008d1 	.word	0x000008d1
    85ac:	154c2302 	.word	0x154c2302
    85b0:	0000305b 	.word	0x0000305b
    85b4:	25025905 	.word	0x25025905
    85b8:	02000000 	.word	0x02000000
    85bc:	dc155023 	.word	0xdc155023
    85c0:	0500002f 	.word	0x0500002f
    85c4:	05b4025a 	.word	0x05b4025a
    85c8:	23020000 	.word	0x23020000
    85cc:	31021554 	.word	0x31021554
    85d0:	7c050000 	.word	0x7c050000
    85d4:	00088d02 	.word	0x00088d02
    85d8:	58230200 	.word	0x58230200
    85dc:	002ed515 	.word	0x002ed515
    85e0:	027f0500 	.word	0x027f0500
    85e4:	000002a7 	.word	0x000002a7
    85e8:	02c82303 	.word	0x02c82303
    85ec:	00307015 	.word	0x00307015
    85f0:	02800500 	.word	0x02800500
    85f4:	00000260 	.word	0x00000260
    85f8:	02cc2303 	.word	0x02cc2303
    85fc:	00324615 	.word	0x00324615
    8600:	02830500 	.word	0x02830500
    8604:	000008e3 	.word	0x000008e3
    8608:	05dc2303 	.word	0x05dc2303
    860c:	002fb515 	.word	0x002fb515
    8610:	02880500 	.word	0x02880500
    8614:	00000663 	.word	0x00000663
    8618:	05e02303 	.word	0x05e02303
    861c:	002f9a15 	.word	0x002f9a15
    8620:	02890500 	.word	0x02890500
    8624:	000008ef 	.word	0x000008ef
    8628:	05ec2303 	.word	0x05ec2303
    862c:	ba041000 	.word	0xba041000
    8630:	03000005 	.word	0x03000005
    8634:	06d30801 	.word	0x06d30801
    8638:	04100000 	.word	0x04100000
    863c:	00000432 	.word	0x00000432
    8640:	00250113 	.word	0x00250113
    8644:	05e60000 	.word	0x05e60000
    8648:	51140000 	.word	0x51140000
    864c:	14000004 	.word	0x14000004
    8650:	000000f3 	.word	0x000000f3
    8654:	0005e614 	.word	0x0005e614
    8658:	00251400 	.word	0x00251400
    865c:	10000000 	.word	0x10000000
    8660:	0005ec04 	.word	0x0005ec04
    8664:	05ba1600 	.word	0x05ba1600
    8668:	04100000 	.word	0x04100000
    866c:	000005c7 	.word	0x000005c7
    8670:	006f0113 	.word	0x006f0113
    8674:	06160000 	.word	0x06160000
    8678:	51140000 	.word	0x51140000
    867c:	14000004 	.word	0x14000004
    8680:	000000f3 	.word	0x000000f3
    8684:	00006f14 	.word	0x00006f14
    8688:	00251400 	.word	0x00251400
    868c:	10000000 	.word	0x10000000
    8690:	0005f704 	.word	0x0005f704
    8694:	25011300 	.word	0x25011300
    8698:	31000000 	.word	0x31000000
    869c:	14000006 	.word	0x14000006
    86a0:	00000451 	.word	0x00000451
    86a4:	0000f314 	.word	0x0000f314
    86a8:	04100000 	.word	0x04100000
    86ac:	0000061c 	.word	0x0000061c
    86b0:	00003a08 	.word	0x00003a08
    86b4:	00064700 	.word	0x00064700
    86b8:	00b50900 	.word	0x00b50900
    86bc:	00020000 	.word	0x00020000
    86c0:	00003a08 	.word	0x00003a08
    86c4:	00065700 	.word	0x00065700
    86c8:	00b50900 	.word	0x00b50900
    86cc:	00000000 	.word	0x00000000
    86d0:	00311e05 	.word	0x00311e05
    86d4:	010e0500 	.word	0x010e0500
    86d8:	000002f4 	.word	0x000002f4
    86dc:	00322d17 	.word	0x00322d17
    86e0:	13050c00 	.word	0x13050c00
    86e4:	00069e01 	.word	0x00069e01
    86e8:	313d1500 	.word	0x313d1500
    86ec:	14050000 	.word	0x14050000
    86f0:	00069e01 	.word	0x00069e01
    86f4:	00230200 	.word	0x00230200
    86f8:	00306915 	.word	0x00306915
    86fc:	01150500 	.word	0x01150500
    8700:	00000025 	.word	0x00000025
    8704:	15042302 	.word	0x15042302
    8708:	00003118 	.word	0x00003118
    870c:	a4011605 	.word	0xa4011605
    8710:	02000006 	.word	0x02000006
    8714:	10000823 	.word	0x10000823
    8718:	00066304 	.word	0x00066304
    871c:	57041000 	.word	0x57041000
    8720:	17000006 	.word	0x17000006
    8724:	00002f22 	.word	0x00002f22
    8728:	012e050e 	.word	0x012e050e
    872c:	000006e5 	.word	0x000006e5
    8730:	00318315 	.word	0x00318315
    8734:	012f0500 	.word	0x012f0500
    8738:	000006e5 	.word	0x000006e5
    873c:	15002302 	.word	0x15002302
    8740:	000030a5 	.word	0x000030a5
    8744:	e5013005 	.word	0xe5013005
    8748:	02000006 	.word	0x02000006
    874c:	cd150623 	.word	0xcd150623
    8750:	05000031 	.word	0x05000031
    8754:	00480131 	.word	0x00480131
    8758:	23020000 	.word	0x23020000
    875c:	4808000c 	.word	0x4808000c
    8760:	f5000000 	.word	0xf5000000
    8764:	09000006 	.word	0x09000006
    8768:	000000b5 	.word	0x000000b5
    876c:	d0180002 	.word	0xd0180002
    8770:	15025f05 	.word	0x15025f05
    8774:	15000008 	.word	0x15000008
    8778:	00003211 	.word	0x00003211
    877c:	2c026005 	.word	0x2c026005
    8780:	02000000 	.word	0x02000000
    8784:	b7150023 	.word	0xb7150023
    8788:	05000031 	.word	0x05000031
    878c:	05b40261 	.word	0x05b40261
    8790:	23020000 	.word	0x23020000
    8794:	30851504 	.word	0x30851504
    8798:	62050000 	.word	0x62050000
    879c:	00081502 	.word	0x00081502
    87a0:	08230200 	.word	0x08230200
    87a4:	00326915 	.word	0x00326915
    87a8:	02630500 	.word	0x02630500
    87ac:	0000017c 	.word	0x0000017c
    87b0:	15242302 	.word	0x15242302
    87b4:	000030d7 	.word	0x000030d7
    87b8:	25026405 	.word	0x25026405
    87bc:	02000000 	.word	0x02000000
    87c0:	38154823 	.word	0x38154823
    87c4:	05000031 	.word	0x05000031
    87c8:	00560265 	.word	0x00560265
    87cc:	23020000 	.word	0x23020000
    87d0:	32781550 	.word	0x32781550
    87d4:	66050000 	.word	0x66050000
    87d8:	0006aa02 	.word	0x0006aa02
    87dc:	58230200 	.word	0x58230200
    87e0:	00314315 	.word	0x00314315
    87e4:	02670500 	.word	0x02670500
    87e8:	000000dd 	.word	0x000000dd
    87ec:	15682302 	.word	0x15682302
    87f0:	0000327d 	.word	0x0000327d
    87f4:	dd026805 	.word	0xdd026805
    87f8:	02000000 	.word	0x02000000
    87fc:	6d157023 	.word	0x6d157023
    8800:	0500002f 	.word	0x0500002f
    8804:	00dd0269 	.word	0x00dd0269
    8808:	23020000 	.word	0x23020000
    880c:	323c1578 	.word	0x323c1578
    8810:	6a050000 	.word	0x6a050000
    8814:	00082502 	.word	0x00082502
    8818:	80230300 	.word	0x80230300
    881c:	30791501 	.word	0x30791501
    8820:	6b050000 	.word	0x6b050000
    8824:	00083502 	.word	0x00083502
    8828:	88230300 	.word	0x88230300
    882c:	31da1501 	.word	0x31da1501
    8830:	6c050000 	.word	0x6c050000
    8834:	00002502 	.word	0x00002502
    8838:	a0230300 	.word	0xa0230300
    883c:	2ffd1501 	.word	0x2ffd1501
    8840:	6d050000 	.word	0x6d050000
    8844:	0000dd02 	.word	0x0000dd02
    8848:	a4230300 	.word	0xa4230300
    884c:	2f5e1501 	.word	0x2f5e1501
    8850:	6e050000 	.word	0x6e050000
    8854:	0000dd02 	.word	0x0000dd02
    8858:	ac230300 	.word	0xac230300
    885c:	2fec1501 	.word	0x2fec1501
    8860:	6f050000 	.word	0x6f050000
    8864:	0000dd02 	.word	0x0000dd02
    8868:	b4230300 	.word	0xb4230300
    886c:	2f351501 	.word	0x2f351501
    8870:	70050000 	.word	0x70050000
    8874:	0000dd02 	.word	0x0000dd02
    8878:	bc230300 	.word	0xbc230300
    887c:	2f441501 	.word	0x2f441501
    8880:	71050000 	.word	0x71050000
    8884:	0000dd02 	.word	0x0000dd02
    8888:	c4230300 	.word	0xc4230300
    888c:	ba080001 	.word	0xba080001
    8890:	25000005 	.word	0x25000005
    8894:	09000008 	.word	0x09000008
    8898:	000000b5 	.word	0x000000b5
    889c:	ba080019 	.word	0xba080019
    88a0:	35000005 	.word	0x35000005
    88a4:	09000008 	.word	0x09000008
    88a8:	000000b5 	.word	0x000000b5
    88ac:	ba080007 	.word	0xba080007
    88b0:	45000005 	.word	0x45000005
    88b4:	09000008 	.word	0x09000008
    88b8:	000000b5 	.word	0x000000b5
    88bc:	f0180017 	.word	0xf0180017
    88c0:	6d027705 	.word	0x6d027705
    88c4:	15000008 	.word	0x15000008
    88c8:	000030bc 	.word	0x000030bc
    88cc:	6d027905 	.word	0x6d027905
    88d0:	02000008 	.word	0x02000008
    88d4:	33150023 	.word	0x33150023
    88d8:	05000032 	.word	0x05000032
    88dc:	087d027a 	.word	0x087d027a
    88e0:	23020000 	.word	0x23020000
    88e4:	ee080078 	.word	0xee080078
    88e8:	7d000002 	.word	0x7d000002
    88ec:	09000008 	.word	0x09000008
    88f0:	000000b5 	.word	0x000000b5
    88f4:	2c08001d 	.word	0x2c08001d
    88f8:	8d000000 	.word	0x8d000000
    88fc:	09000008 	.word	0x09000008
    8900:	000000b5 	.word	0x000000b5
    8904:	f019001d 	.word	0xf019001d
    8908:	af025d05 	.word	0xaf025d05
    890c:	1a000008 	.word	0x1a000008
    8910:	0000317c 	.word	0x0000317c
    8914:	f5027205 	.word	0xf5027205
    8918:	1a000006 	.word	0x1a000006
    891c:	00003256 	.word	0x00003256
    8920:	45027b05 	.word	0x45027b05
    8924:	00000008 	.word	0x00000008
    8928:	0005ba08 	.word	0x0005ba08
    892c:	0008bf00 	.word	0x0008bf00
    8930:	00b50900 	.word	0x00b50900
    8934:	00180000 	.word	0x00180000
    8938:	08cb011b 	.word	0x08cb011b
    893c:	51140000 	.word	0x51140000
    8940:	00000004 	.word	0x00000004
    8944:	08bf0410 	.word	0x08bf0410
    8948:	04100000 	.word	0x04100000
    894c:	00000166 	.word	0x00000166
    8950:	08e3011b 	.word	0x08e3011b
    8954:	25140000 	.word	0x25140000
    8958:	00000000 	.word	0x00000000
    895c:	08e90410 	.word	0x08e90410
    8960:	04100000 	.word	0x04100000
    8964:	000008d7 	.word	0x000008d7
    8968:	00065708 	.word	0x00065708
    896c:	0008ff00 	.word	0x0008ff00
    8970:	00b50900 	.word	0x00b50900
    8974:	00020000 	.word	0x00020000
    8978:	002ec21c 	.word	0x002ec21c
    897c:	06060100 	.word	0x06060100
    8980:	0000091e 	.word	0x0000091e
    8984:	002ed11d 	.word	0x002ed11d
    8988:	b61d0000 	.word	0xb61d0000
    898c:	0100002e 	.word	0x0100002e
    8990:	002ead1d 	.word	0x002ead1d
    8994:	1e000200 	.word	0x1e000200
    8998:	0034d601 	.word	0x0034d601
    899c:	01170100 	.word	0x01170100
    89a0:	00000025 	.word	0x00000025
	...
    89ac:	00002de6 	.word	0x00002de6
    89b0:	0000098b 	.word	0x0000098b
    89b4:	0034d11f 	.word	0x0034d11f
    89b8:	25110100 	.word	0x25110100
    89bc:	05000000 	.word	0x05000000
    89c0:	2000002e 	.word	0x2000002e
    89c4:	01006e66 	.word	0x01006e66
    89c8:	0002bf11 	.word	0x0002bf11
    89cc:	002e2300 	.word	0x002e2300
    89d0:	72612000 	.word	0x72612000
    89d4:	11010067 	.word	0x11010067
    89d8:	000000f3 	.word	0x000000f3
    89dc:	00002e41 	.word	0x00002e41
    89e0:	01006420 	.word	0x01006420
    89e4:	0000f311 	.word	0x0000f311
    89e8:	002e5f00 	.word	0x002e5f00
    89ec:	2fa82100 	.word	0x2fa82100
    89f0:	18010000 	.word	0x18010000
    89f4:	0000098b 	.word	0x0000098b
    89f8:	01007022 	.word	0x01007022
    89fc:	0002a719 	.word	0x0002a719
    8a00:	005c0100 	.word	0x005c0100
    8a04:	02070410 	.word	0x02070410
    8a08:	e7230000 	.word	0xe7230000
    8a0c:	05000031 	.word	0x05000031
    8a10:	099f0328 	.word	0x099f0328
    8a14:	01010000 	.word	0x01010000
    8a18:	00045116 	.word	0x00045116
    8a1c:	09ae0000 	.word	0x09ae0000
    8a20:	00020000 	.word	0x00020000
    8a24:	00001d40 	.word	0x00001d40
    8a28:	053b0104 	.word	0x053b0104
    8a2c:	fb010000 	.word	0xfb010000
    8a30:	2a000034 	.word	0x2a000034
    8a34:	0000002e 	.word	0x0000002e
    8a38:	00000000 	.word	0x00000000
    8a3c:	d9000000 	.word	0xd9000000
    8a40:	0200001c 	.word	0x0200001c
    8a44:	2ea00704 	.word	0x2ea00704
    8a48:	01020000 	.word	0x01020000
    8a4c:	0006cc06 	.word	0x0006cc06
    8a50:	08010200 	.word	0x08010200
    8a54:	000006ca 	.word	0x000006ca
    8a58:	b8050202 	.word	0xb8050202
    8a5c:	02000005 	.word	0x02000005
    8a60:	081e0702 	.word	0x081e0702
    8a64:	04030000 	.word	0x04030000
    8a68:	746e6905 	.word	0x746e6905
    8a6c:	05080200 	.word	0x05080200
    8a70:	00002e1c 	.word	0x00002e1c
    8a74:	96070802 	.word	0x96070802
    8a78:	0400002e 	.word	0x0400002e
    8a7c:	000030f0 	.word	0x000030f0
    8a80:	00480702 	.word	0x00480702
    8a84:	04020000 	.word	0x04020000
    8a88:	002e2105 	.word	0x002e2105
    8a8c:	319f0400 	.word	0x319f0400
    8a90:	2c030000 	.word	0x2c030000
    8a94:	00000068 	.word	0x00000068
    8a98:	00309805 	.word	0x00309805
    8a9c:	01630400 	.word	0x01630400
    8aa0:	00000025 	.word	0x00000025
    8aa4:	47030406 	.word	0x47030406
    8aa8:	000000a5 	.word	0x000000a5
    8aac:	00309207 	.word	0x00309207
    8ab0:	7a480300 	.word	0x7a480300
    8ab4:	07000000 	.word	0x07000000
    8ab8:	0000304c 	.word	0x0000304c
    8abc:	00a54903 	.word	0x00a54903
    8ac0:	08000000 	.word	0x08000000
    8ac4:	00000033 	.word	0x00000033
    8ac8:	000000b5 	.word	0x000000b5
    8acc:	0000b509 	.word	0x0000b509
    8ad0:	0a000300 	.word	0x0a000300
    8ad4:	080b0704 	.word	0x080b0704
    8ad8:	00dd4403 	.word	0x00dd4403
    8adc:	890c0000 	.word	0x890c0000
    8ae0:	03000031 	.word	0x03000031
    8ae4:	00004845 	.word	0x00004845
    8ae8:	00230200 	.word	0x00230200
    8aec:	0031910c 	.word	0x0031910c
    8af0:	864a0300 	.word	0x864a0300
    8af4:	02000000 	.word	0x02000000
    8af8:	04000423 	.word	0x04000423
    8afc:	00003125 	.word	0x00003125
    8b00:	00b84b03 	.word	0x00b84b03
    8b04:	1e040000 	.word	0x1e040000
    8b08:	03000030 	.word	0x03000030
    8b0c:	00005d4f 	.word	0x00005d4f
    8b10:	04040d00 	.word	0x04040d00
    8b14:	000031d2 	.word	0x000031d2
    8b18:	01001505 	.word	0x01001505
    8b1c:	04020000 	.word	0x04020000
    8b20:	002e9b07 	.word	0x002e9b07
    8b24:	302f0e00 	.word	0x302f0e00
    8b28:	05180000 	.word	0x05180000
    8b2c:	0001662d 	.word	0x0001662d
    8b30:	313d0c00 	.word	0x313d0c00
    8b34:	2e050000 	.word	0x2e050000
    8b38:	00000166 	.word	0x00000166
    8b3c:	0f002302 	.word	0x0f002302
    8b40:	05006b5f 	.word	0x05006b5f
    8b44:	0000482f 	.word	0x0000482f
    8b48:	04230200 	.word	0x04230200
    8b4c:	0031740c 	.word	0x0031740c
    8b50:	482f0500 	.word	0x482f0500
    8b54:	02000000 	.word	0x02000000
    8b58:	180c0823 	.word	0x180c0823
    8b5c:	05000030 	.word	0x05000030
    8b60:	0000482f 	.word	0x0000482f
    8b64:	0c230200 	.word	0x0c230200
    8b68:	00321e0c 	.word	0x00321e0c
    8b6c:	482f0500 	.word	0x482f0500
    8b70:	02000000 	.word	0x02000000
    8b74:	5f0f1023 	.word	0x5f0f1023
    8b78:	30050078 	.word	0x30050078
    8b7c:	0000016c 	.word	0x0000016c
    8b80:	00142302 	.word	0x00142302
    8b84:	01070410 	.word	0x01070410
    8b88:	f5080000 	.word	0xf5080000
    8b8c:	7c000000 	.word	0x7c000000
    8b90:	09000001 	.word	0x09000001
    8b94:	000000b5 	.word	0x000000b5
    8b98:	470e0000 	.word	0x470e0000
    8b9c:	24000030 	.word	0x24000030
    8ba0:	02073505 	.word	0x02073505
    8ba4:	7b0c0000 	.word	0x7b0c0000
    8ba8:	0500002f 	.word	0x0500002f
    8bac:	00004836 	.word	0x00004836
    8bb0:	00230200 	.word	0x00230200
    8bb4:	0031ae0c 	.word	0x0031ae0c
    8bb8:	48370500 	.word	0x48370500
    8bbc:	02000000 	.word	0x02000000
    8bc0:	900c0423 	.word	0x900c0423
    8bc4:	0500002f 	.word	0x0500002f
    8bc8:	00004838 	.word	0x00004838
    8bcc:	08230200 	.word	0x08230200
    8bd0:	0032900c 	.word	0x0032900c
    8bd4:	48390500 	.word	0x48390500
    8bd8:	02000000 	.word	0x02000000
    8bdc:	c30c0c23 	.word	0xc30c0c23
    8be0:	05000030 	.word	0x05000030
    8be4:	0000483a 	.word	0x0000483a
    8be8:	10230200 	.word	0x10230200
    8bec:	0030b20c 	.word	0x0030b20c
    8bf0:	483b0500 	.word	0x483b0500
    8bf4:	02000000 	.word	0x02000000
    8bf8:	230c1423 	.word	0x230c1423
    8bfc:	05000032 	.word	0x05000032
    8c00:	0000483c 	.word	0x0000483c
    8c04:	18230200 	.word	0x18230200
    8c08:	0031070c 	.word	0x0031070c
    8c0c:	483d0500 	.word	0x483d0500
    8c10:	02000000 	.word	0x02000000
    8c14:	5e0c1c23 	.word	0x5e0c1c23
    8c18:	05000032 	.word	0x05000032
    8c1c:	0000483e 	.word	0x0000483e
    8c20:	20230200 	.word	0x20230200
    8c24:	2f9f1100 	.word	0x2f9f1100
    8c28:	01080000 	.word	0x01080000
    8c2c:	02504705 	.word	0x02504705
    8c30:	0b0c0000 	.word	0x0b0c0000
    8c34:	05000030 	.word	0x05000030
    8c38:	00025048 	.word	0x00025048
    8c3c:	00230200 	.word	0x00230200
    8c40:	002edd0c 	.word	0x002edd0c
    8c44:	50490500 	.word	0x50490500
    8c48:	03000002 	.word	0x03000002
    8c4c:	0c018023 	.word	0x0c018023
    8c50:	000031c4 	.word	0x000031c4
    8c54:	00f54b05 	.word	0x00f54b05
    8c58:	23030000 	.word	0x23030000
    8c5c:	c40c0280 	.word	0xc40c0280
    8c60:	0500002f 	.word	0x0500002f
    8c64:	0000f54e 	.word	0x0000f54e
    8c68:	84230300 	.word	0x84230300
    8c6c:	f3080002 	.word	0xf3080002
    8c70:	60000000 	.word	0x60000000
    8c74:	09000002 	.word	0x09000002
    8c78:	000000b5 	.word	0x000000b5
    8c7c:	d511001f 	.word	0xd511001f
    8c80:	9000002e 	.word	0x9000002e
    8c84:	a7590501 	.word	0xa7590501
    8c88:	0c000002 	.word	0x0c000002
    8c8c:	0000313d 	.word	0x0000313d
    8c90:	02a75a05 	.word	0x02a75a05
    8c94:	23020000 	.word	0x23020000
    8c98:	31550c00 	.word	0x31550c00
    8c9c:	5b050000 	.word	0x5b050000
    8ca0:	00000048 	.word	0x00000048
    8ca4:	0c042302 	.word	0x0c042302
    8ca8:	00003013 	.word	0x00003013
    8cac:	02ad5d05 	.word	0x02ad5d05
    8cb0:	23020000 	.word	0x23020000
    8cb4:	2f9f0c08 	.word	0x2f9f0c08
    8cb8:	5e050000 	.word	0x5e050000
    8cbc:	00000207 	.word	0x00000207
    8cc0:	01882303 	.word	0x01882303
    8cc4:	60041000 	.word	0x60041000
    8cc8:	08000002 	.word	0x08000002
    8ccc:	000002bf 	.word	0x000002bf
    8cd0:	000002bd 	.word	0x000002bd
    8cd4:	0000b509 	.word	0x0000b509
    8cd8:	12001f00 	.word	0x12001f00
    8cdc:	bd041001 	.word	0xbd041001
    8ce0:	0e000002 	.word	0x0e000002
    8ce4:	00003111 	.word	0x00003111
    8ce8:	ee690508 	.word	0xee690508
    8cec:	0c000002 	.word	0x0c000002
    8cf0:	00002f8a 	.word	0x00002f8a
    8cf4:	02ee6a05 	.word	0x02ee6a05
    8cf8:	23020000 	.word	0x23020000
    8cfc:	2f1c0c00 	.word	0x2f1c0c00
    8d00:	6b050000 	.word	0x6b050000
    8d04:	00000048 	.word	0x00000048
    8d08:	00042302 	.word	0x00042302
    8d0c:	00330410 	.word	0x00330410
    8d10:	300e0000 	.word	0x300e0000
    8d14:	5c000031 	.word	0x5c000031
    8d18:	0432a905 	.word	0x0432a905
    8d1c:	5f0f0000 	.word	0x5f0f0000
    8d20:	aa050070 	.word	0xaa050070
    8d24:	000002ee 	.word	0x000002ee
    8d28:	0f002302 	.word	0x0f002302
    8d2c:	0500725f 	.word	0x0500725f
    8d30:	000048ab 	.word	0x000048ab
    8d34:	04230200 	.word	0x04230200
    8d38:	00775f0f 	.word	0x00775f0f
    8d3c:	0048ac05 	.word	0x0048ac05
    8d40:	23020000 	.word	0x23020000
    8d44:	2fbd0c08 	.word	0x2fbd0c08
    8d48:	ad050000 	.word	0xad050000
    8d4c:	0000003a 	.word	0x0000003a
    8d50:	0c0c2302 	.word	0x0c0c2302
    8d54:	00003063 	.word	0x00003063
    8d58:	003aae05 	.word	0x003aae05
    8d5c:	23020000 	.word	0x23020000
    8d60:	625f0f0e 	.word	0x625f0f0e
    8d64:	af050066 	.word	0xaf050066
    8d68:	000002c5 	.word	0x000002c5
    8d6c:	0c102302 	.word	0x0c102302
    8d70:	00002f55 	.word	0x00002f55
    8d74:	0048b005 	.word	0x0048b005
    8d78:	23020000 	.word	0x23020000
    8d7c:	2fad0c18 	.word	0x2fad0c18
    8d80:	b7050000 	.word	0xb7050000
    8d84:	000000f3 	.word	0x000000f3
    8d88:	0c1c2302 	.word	0x0c1c2302
    8d8c:	00003037 	.word	0x00003037
    8d90:	05c1b905 	.word	0x05c1b905
    8d94:	23020000 	.word	0x23020000
    8d98:	30ab0c20 	.word	0x30ab0c20
    8d9c:	bb050000 	.word	0xbb050000
    8da0:	000005f1 	.word	0x000005f1
    8da4:	0c242302 	.word	0x0c242302
    8da8:	00003199 	.word	0x00003199
    8dac:	0616bd05 	.word	0x0616bd05
    8db0:	23020000 	.word	0x23020000
    8db4:	0e400c28 	.word	0x0e400c28
    8db8:	be050000 	.word	0xbe050000
    8dbc:	00000631 	.word	0x00000631
    8dc0:	0f2c2302 	.word	0x0f2c2302
    8dc4:	0062755f 	.word	0x0062755f
    8dc8:	02c5c105 	.word	0x02c5c105
    8dcc:	23020000 	.word	0x23020000
    8dd0:	755f0f30 	.word	0x755f0f30
    8dd4:	c2050070 	.word	0xc2050070
    8dd8:	000002ee 	.word	0x000002ee
    8ddc:	0f382302 	.word	0x0f382302
    8de0:	0072755f 	.word	0x0072755f
    8de4:	0048c305 	.word	0x0048c305
    8de8:	23020000 	.word	0x23020000
    8dec:	2f840c3c 	.word	0x2f840c3c
    8df0:	c6050000 	.word	0xc6050000
    8df4:	00000637 	.word	0x00000637
    8df8:	0c402302 	.word	0x0c402302
    8dfc:	00003250 	.word	0x00003250
    8e00:	0647c705 	.word	0x0647c705
    8e04:	23020000 	.word	0x23020000
    8e08:	6c5f0f43 	.word	0x6c5f0f43
    8e0c:	ca050062 	.word	0xca050062
    8e10:	000002c5 	.word	0x000002c5
    8e14:	0c442302 	.word	0x0c442302
    8e18:	00002fd3 	.word	0x00002fd3
    8e1c:	0048cd05 	.word	0x0048cd05
    8e20:	23020000 	.word	0x23020000
    8e24:	2fe40c4c 	.word	0x2fe40c4c
    8e28:	ce050000 	.word	0xce050000
    8e2c:	00000048 	.word	0x00000048
    8e30:	0c502302 	.word	0x0c502302
    8e34:	000032a0 	.word	0x000032a0
    8e38:	0451d105 	.word	0x0451d105
    8e3c:	23020000 	.word	0x23020000
    8e40:	309f0c54 	.word	0x309f0c54
    8e44:	d5050000 	.word	0xd5050000
    8e48:	000000e8 	.word	0x000000e8
    8e4c:	00582302 	.word	0x00582302
    8e50:	00480113 	.word	0x00480113
    8e54:	04510000 	.word	0x04510000
    8e58:	51140000 	.word	0x51140000
    8e5c:	14000004 	.word	0x14000004
    8e60:	000000f3 	.word	0x000000f3
    8e64:	0005b414 	.word	0x0005b414
    8e68:	00481400 	.word	0x00481400
    8e6c:	10000000 	.word	0x10000000
    8e70:	00045704 	.word	0x00045704
    8e74:	317c1100 	.word	0x317c1100
    8e78:	04000000 	.word	0x04000000
    8e7c:	05b42505 	.word	0x05b42505
    8e80:	a7150000 	.word	0xa7150000
    8e84:	05000031 	.word	0x05000031
    8e88:	00480241 	.word	0x00480241
    8e8c:	23020000 	.word	0x23020000
    8e90:	2fcc1500 	.word	0x2fcc1500
    8e94:	46050000 	.word	0x46050000
    8e98:	0006a402 	.word	0x0006a402
    8e9c:	04230200 	.word	0x04230200
    8ea0:	00305315 	.word	0x00305315
    8ea4:	02460500 	.word	0x02460500
    8ea8:	000006a4 	.word	0x000006a4
    8eac:	15082302 	.word	0x15082302
    8eb0:	00003027 	.word	0x00003027
    8eb4:	a4024605 	.word	0xa4024605
    8eb8:	02000006 	.word	0x02000006
    8ebc:	50150c23 	.word	0x50150c23
    8ec0:	05000031 	.word	0x05000031
    8ec4:	00480248 	.word	0x00480248
    8ec8:	23020000 	.word	0x23020000
    8ecc:	2f2a1510 	.word	0x2f2a1510
    8ed0:	49050000 	.word	0x49050000
    8ed4:	0008af02 	.word	0x0008af02
    8ed8:	14230200 	.word	0x14230200
    8edc:	0031fa15 	.word	0x0031fa15
    8ee0:	024b0500 	.word	0x024b0500
    8ee4:	00000048 	.word	0x00000048
    8ee8:	15302302 	.word	0x15302302
    8eec:	0000315a 	.word	0x0000315a
    8ef0:	e6024c05 	.word	0xe6024c05
    8ef4:	02000005 	.word	0x02000005
    8ef8:	cc153423 	.word	0xcc153423
    8efc:	05000030 	.word	0x05000030
    8f00:	0048024e 	.word	0x0048024e
    8f04:	23020000 	.word	0x23020000
    8f08:	316a1538 	.word	0x316a1538
    8f0c:	50050000 	.word	0x50050000
    8f10:	0008cb02 	.word	0x0008cb02
    8f14:	3c230200 	.word	0x3c230200
    8f18:	00101315 	.word	0x00101315
    8f1c:	02530500 	.word	0x02530500
    8f20:	00000166 	.word	0x00000166
    8f24:	15402302 	.word	0x15402302
    8f28:	0000303d 	.word	0x0000303d
    8f2c:	48025405 	.word	0x48025405
    8f30:	02000000 	.word	0x02000000
    8f34:	8b154423 	.word	0x8b154423
    8f38:	05000032 	.word	0x05000032
    8f3c:	01660255 	.word	0x01660255
    8f40:	23020000 	.word	0x23020000
    8f44:	30e61548 	.word	0x30e61548
    8f48:	56050000 	.word	0x56050000
    8f4c:	0008d102 	.word	0x0008d102
    8f50:	4c230200 	.word	0x4c230200
    8f54:	00305b15 	.word	0x00305b15
    8f58:	02590500 	.word	0x02590500
    8f5c:	00000048 	.word	0x00000048
    8f60:	15502302 	.word	0x15502302
    8f64:	00002fdc 	.word	0x00002fdc
    8f68:	b4025a05 	.word	0xb4025a05
    8f6c:	02000005 	.word	0x02000005
    8f70:	02155423 	.word	0x02155423
    8f74:	05000031 	.word	0x05000031
    8f78:	088d027c 	.word	0x088d027c
    8f7c:	23020000 	.word	0x23020000
    8f80:	2ed51558 	.word	0x2ed51558
    8f84:	7f050000 	.word	0x7f050000
    8f88:	0002a702 	.word	0x0002a702
    8f8c:	c8230300 	.word	0xc8230300
    8f90:	30701502 	.word	0x30701502
    8f94:	80050000 	.word	0x80050000
    8f98:	00026002 	.word	0x00026002
    8f9c:	cc230300 	.word	0xcc230300
    8fa0:	32461502 	.word	0x32461502
    8fa4:	83050000 	.word	0x83050000
    8fa8:	0008e302 	.word	0x0008e302
    8fac:	dc230300 	.word	0xdc230300
    8fb0:	2fb51505 	.word	0x2fb51505
    8fb4:	88050000 	.word	0x88050000
    8fb8:	00066302 	.word	0x00066302
    8fbc:	e0230300 	.word	0xe0230300
    8fc0:	2f9a1505 	.word	0x2f9a1505
    8fc4:	89050000 	.word	0x89050000
    8fc8:	0008ef02 	.word	0x0008ef02
    8fcc:	ec230300 	.word	0xec230300
    8fd0:	04100005 	.word	0x04100005
    8fd4:	000005ba 	.word	0x000005ba
    8fd8:	d3080102 	.word	0xd3080102
    8fdc:	10000006 	.word	0x10000006
    8fe0:	00043204 	.word	0x00043204
    8fe4:	48011300 	.word	0x48011300
    8fe8:	e6000000 	.word	0xe6000000
    8fec:	14000005 	.word	0x14000005
    8ff0:	00000451 	.word	0x00000451
    8ff4:	0000f314 	.word	0x0000f314
    8ff8:	05e61400 	.word	0x05e61400
    8ffc:	48140000 	.word	0x48140000
    9000:	00000000 	.word	0x00000000
    9004:	05ec0410 	.word	0x05ec0410
    9008:	ba160000 	.word	0xba160000
    900c:	10000005 	.word	0x10000005
    9010:	0005c704 	.word	0x0005c704
    9014:	6f011300 	.word	0x6f011300
    9018:	16000000 	.word	0x16000000
    901c:	14000006 	.word	0x14000006
    9020:	00000451 	.word	0x00000451
    9024:	0000f314 	.word	0x0000f314
    9028:	006f1400 	.word	0x006f1400
    902c:	48140000 	.word	0x48140000
    9030:	00000000 	.word	0x00000000
    9034:	05f70410 	.word	0x05f70410
    9038:	01130000 	.word	0x01130000
    903c:	00000048 	.word	0x00000048
    9040:	00000631 	.word	0x00000631
    9044:	00045114 	.word	0x00045114
    9048:	00f31400 	.word	0x00f31400
    904c:	10000000 	.word	0x10000000
    9050:	00061c04 	.word	0x00061c04
    9054:	00330800 	.word	0x00330800
    9058:	06470000 	.word	0x06470000
    905c:	b5090000 	.word	0xb5090000
    9060:	02000000 	.word	0x02000000
    9064:	00330800 	.word	0x00330800
    9068:	06570000 	.word	0x06570000
    906c:	b5090000 	.word	0xb5090000
    9070:	00000000 	.word	0x00000000
    9074:	311e0500 	.word	0x311e0500
    9078:	0e050000 	.word	0x0e050000
    907c:	0002f401 	.word	0x0002f401
    9080:	322d1700 	.word	0x322d1700
    9084:	050c0000 	.word	0x050c0000
    9088:	069e0113 	.word	0x069e0113
    908c:	3d150000 	.word	0x3d150000
    9090:	05000031 	.word	0x05000031
    9094:	069e0114 	.word	0x069e0114
    9098:	23020000 	.word	0x23020000
    909c:	30691500 	.word	0x30691500
    90a0:	15050000 	.word	0x15050000
    90a4:	00004801 	.word	0x00004801
    90a8:	04230200 	.word	0x04230200
    90ac:	00311815 	.word	0x00311815
    90b0:	01160500 	.word	0x01160500
    90b4:	000006a4 	.word	0x000006a4
    90b8:	00082302 	.word	0x00082302
    90bc:	06630410 	.word	0x06630410
    90c0:	04100000 	.word	0x04100000
    90c4:	00000657 	.word	0x00000657
    90c8:	002f2217 	.word	0x002f2217
    90cc:	2e050e00 	.word	0x2e050e00
    90d0:	0006e501 	.word	0x0006e501
    90d4:	31831500 	.word	0x31831500
    90d8:	2f050000 	.word	0x2f050000
    90dc:	0006e501 	.word	0x0006e501
    90e0:	00230200 	.word	0x00230200
    90e4:	0030a515 	.word	0x0030a515
    90e8:	01300500 	.word	0x01300500
    90ec:	000006e5 	.word	0x000006e5
    90f0:	15062302 	.word	0x15062302
    90f4:	000031cd 	.word	0x000031cd
    90f8:	41013105 	.word	0x41013105
    90fc:	02000000 	.word	0x02000000
    9100:	08000c23 	.word	0x08000c23
    9104:	00000041 	.word	0x00000041
    9108:	000006f5 	.word	0x000006f5
    910c:	0000b509 	.word	0x0000b509
    9110:	18000200 	.word	0x18000200
    9114:	025f05d0 	.word	0x025f05d0
    9118:	00000815 	.word	0x00000815
    911c:	00321115 	.word	0x00321115
    9120:	02600500 	.word	0x02600500
    9124:	00000025 	.word	0x00000025
    9128:	15002302 	.word	0x15002302
    912c:	000031b7 	.word	0x000031b7
    9130:	b4026105 	.word	0xb4026105
    9134:	02000005 	.word	0x02000005
    9138:	85150423 	.word	0x85150423
    913c:	05000030 	.word	0x05000030
    9140:	08150262 	.word	0x08150262
    9144:	23020000 	.word	0x23020000
    9148:	32691508 	.word	0x32691508
    914c:	63050000 	.word	0x63050000
    9150:	00017c02 	.word	0x00017c02
    9154:	24230200 	.word	0x24230200
    9158:	0030d715 	.word	0x0030d715
    915c:	02640500 	.word	0x02640500
    9160:	00000048 	.word	0x00000048
    9164:	15482302 	.word	0x15482302
    9168:	00003138 	.word	0x00003138
    916c:	56026505 	.word	0x56026505
    9170:	02000000 	.word	0x02000000
    9174:	78155023 	.word	0x78155023
    9178:	05000032 	.word	0x05000032
    917c:	06aa0266 	.word	0x06aa0266
    9180:	23020000 	.word	0x23020000
    9184:	31431558 	.word	0x31431558
    9188:	67050000 	.word	0x67050000
    918c:	0000dd02 	.word	0x0000dd02
    9190:	68230200 	.word	0x68230200
    9194:	00327d15 	.word	0x00327d15
    9198:	02680500 	.word	0x02680500
    919c:	000000dd 	.word	0x000000dd
    91a0:	15702302 	.word	0x15702302
    91a4:	00002f6d 	.word	0x00002f6d
    91a8:	dd026905 	.word	0xdd026905
    91ac:	02000000 	.word	0x02000000
    91b0:	3c157823 	.word	0x3c157823
    91b4:	05000032 	.word	0x05000032
    91b8:	0825026a 	.word	0x0825026a
    91bc:	23030000 	.word	0x23030000
    91c0:	79150180 	.word	0x79150180
    91c4:	05000030 	.word	0x05000030
    91c8:	0835026b 	.word	0x0835026b
    91cc:	23030000 	.word	0x23030000
    91d0:	da150188 	.word	0xda150188
    91d4:	05000031 	.word	0x05000031
    91d8:	0048026c 	.word	0x0048026c
    91dc:	23030000 	.word	0x23030000
    91e0:	fd1501a0 	.word	0xfd1501a0
    91e4:	0500002f 	.word	0x0500002f
    91e8:	00dd026d 	.word	0x00dd026d
    91ec:	23030000 	.word	0x23030000
    91f0:	5e1501a4 	.word	0x5e1501a4
    91f4:	0500002f 	.word	0x0500002f
    91f8:	00dd026e 	.word	0x00dd026e
    91fc:	23030000 	.word	0x23030000
    9200:	ec1501ac 	.word	0xec1501ac
    9204:	0500002f 	.word	0x0500002f
    9208:	00dd026f 	.word	0x00dd026f
    920c:	23030000 	.word	0x23030000
    9210:	351501b4 	.word	0x351501b4
    9214:	0500002f 	.word	0x0500002f
    9218:	00dd0270 	.word	0x00dd0270
    921c:	23030000 	.word	0x23030000
    9220:	441501bc 	.word	0x441501bc
    9224:	0500002f 	.word	0x0500002f
    9228:	00dd0271 	.word	0x00dd0271
    922c:	23030000 	.word	0x23030000
    9230:	080001c4 	.word	0x080001c4
    9234:	000005ba 	.word	0x000005ba
    9238:	00000825 	.word	0x00000825
    923c:	0000b509 	.word	0x0000b509
    9240:	08001900 	.word	0x08001900
    9244:	000005ba 	.word	0x000005ba
    9248:	00000835 	.word	0x00000835
    924c:	0000b509 	.word	0x0000b509
    9250:	08000700 	.word	0x08000700
    9254:	000005ba 	.word	0x000005ba
    9258:	00000845 	.word	0x00000845
    925c:	0000b509 	.word	0x0000b509
    9260:	18001700 	.word	0x18001700
    9264:	027705f0 	.word	0x027705f0
    9268:	0000086d 	.word	0x0000086d
    926c:	0030bc15 	.word	0x0030bc15
    9270:	02790500 	.word	0x02790500
    9274:	0000086d 	.word	0x0000086d
    9278:	15002302 	.word	0x15002302
    927c:	00003233 	.word	0x00003233
    9280:	7d027a05 	.word	0x7d027a05
    9284:	02000008 	.word	0x02000008
    9288:	08007823 	.word	0x08007823
    928c:	000002ee 	.word	0x000002ee
    9290:	0000087d 	.word	0x0000087d
    9294:	0000b509 	.word	0x0000b509
    9298:	08001d00 	.word	0x08001d00
    929c:	00000025 	.word	0x00000025
    92a0:	0000088d 	.word	0x0000088d
    92a4:	0000b509 	.word	0x0000b509
    92a8:	19001d00 	.word	0x19001d00
    92ac:	025d05f0 	.word	0x025d05f0
    92b0:	000008af 	.word	0x000008af
    92b4:	00317c1a 	.word	0x00317c1a
    92b8:	02720500 	.word	0x02720500
    92bc:	000006f5 	.word	0x000006f5
    92c0:	0032561a 	.word	0x0032561a
    92c4:	027b0500 	.word	0x027b0500
    92c8:	00000845 	.word	0x00000845
    92cc:	05ba0800 	.word	0x05ba0800
    92d0:	08bf0000 	.word	0x08bf0000
    92d4:	b5090000 	.word	0xb5090000
    92d8:	18000000 	.word	0x18000000
    92dc:	cb011b00 	.word	0xcb011b00
    92e0:	14000008 	.word	0x14000008
    92e4:	00000451 	.word	0x00000451
    92e8:	bf041000 	.word	0xbf041000
    92ec:	10000008 	.word	0x10000008
    92f0:	00016604 	.word	0x00016604
    92f4:	e3011b00 	.word	0xe3011b00
    92f8:	14000008 	.word	0x14000008
    92fc:	00000048 	.word	0x00000048
    9300:	e9041000 	.word	0xe9041000
    9304:	10000008 	.word	0x10000008
    9308:	0008d704 	.word	0x0008d704
    930c:	06570800 	.word	0x06570800
    9310:	08ff0000 	.word	0x08ff0000
    9314:	b5090000 	.word	0xb5090000
    9318:	02000000 	.word	0x02000000
    931c:	ea011c00 	.word	0xea011c00
    9320:	01000034 	.word	0x01000034
    9324:	00000112 	.word	0x00000112
    9328:	00000000 	.word	0x00000000
    932c:	2e7d0000 	.word	0x2e7d0000
    9330:	09920000 	.word	0x09920000
    9334:	0c1d0000 	.word	0x0c1d0000
    9338:	01000032 	.word	0x01000032
    933c:	00004810 	.word	0x00004810
    9340:	002ea800 	.word	0x002ea800
    9344:	00641e00 	.word	0x00641e00
    9348:	00f31001 	.word	0x00f31001
    934c:	2ef70000 	.word	0x2ef70000
    9350:	701f0000 	.word	0x701f0000
    9354:	a7130100 	.word	0xa7130100
    9358:	01000002 	.word	0x01000002
    935c:	35372056 	.word	0x35372056
    9360:	14010000 	.word	0x14010000
    9364:	00000992 	.word	0x00000992
    9368:	002fa820 	.word	0x002fa820
    936c:	98150100 	.word	0x98150100
    9370:	1f000009 	.word	0x1f000009
    9374:	1601006e 	.word	0x1601006e
    9378:	00000048 	.word	0x00000048
    937c:	69215501 	.word	0x69215501
    9380:	48170100 	.word	0x48170100
    9384:	22000000 	.word	0x22000000
    9388:	01006e66 	.word	0x01006e66
    938c:	0002bf18 	.word	0x0002bf18
    9390:	002f1500 	.word	0x002f1500
    9394:	353d2300 	.word	0x353d2300
    9398:	49010000 	.word	0x49010000
    939c:	00023824 	.word	0x00023824
    93a0:	6e691f00 	.word	0x6e691f00
    93a4:	27010064 	.word	0x27010064
    93a8:	00000048 	.word	0x00000048
    93ac:	00005801 	.word	0x00005801
    93b0:	02a70410 	.word	0x02a70410
    93b4:	04100000 	.word	0x04100000
    93b8:	00000207 	.word	0x00000207
    93bc:	0031e725 	.word	0x0031e725
    93c0:	03280500 	.word	0x03280500
    93c4:	000009ac 	.word	0x000009ac
    93c8:	51160101 	.word	0x51160101
    93cc:	00000004 	.word	0x00000004
    93d0:	00000049 	.word	0x00000049
    93d4:	1f100002 	.word	0x1f100002
    93d8:	01040000 	.word	0x01040000
    93dc:	00001df8 	.word	0x00001df8
    93e0:	00000258 	.word	0x00000258
    93e4:	6e747263 	.word	0x6e747263
    93e8:	6d73612e 	.word	0x6d73612e
    93ec:	5c3a6300 	.word	0x5c3a6300
    93f0:	616e6977 	.word	0x616e6977
    93f4:	5c736d72 	.word	0x5c736d72
    93f8:	6c697562 	.word	0x6c697562
    93fc:	63675c64 	.word	0x63675c64
    9400:	75622d63 	.word	0x75622d63
    9404:	5c646c69 	.word	0x5c646c69
    9408:	00636367 	.word	0x00636367
    940c:	20554e47 	.word	0x20554e47
    9410:	32205341 	.word	0x32205341
    9414:	2e38312e 	.word	0x2e38312e
    9418:	01003035 	.word	0x01003035
    941c:	Address 0x0000941c is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
       4:	03065506 	movweq	r5, #25862	; 0x6506
       8:	25081b08 	strcs	r1, [r8, #-2824]
       c:	00051308 	andeq	r1, r5, r8, lsl #6
      10:	11010000 	tstne	r1, r0
      14:	11061000 	tstne	r6, r0
      18:	03011201 	movweq	r1, #4609	; 0x1201
      1c:	25081b08 	strcs	r1, [r8, #-2824]
      20:	00051308 	andeq	r1, r5, r8, lsl #6
      24:	11010000 	tstne	r1, r0
      28:	130e2501 	movwne	r2, #58625	; 0xe501
      2c:	1b0e030b 	blne	380c60 <__Stack_Size+0x380860>
      30:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
      34:	00061001 	andeq	r1, r6, r1
      38:	00160200 	andseq	r0, r6, r0, lsl #4
      3c:	0b3a0803 	bleq	e82050 <__Stack_Size+0xe81c50>
      40:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      44:	24030000 	strcs	r0, [r3]
      48:	3e0b0b00 	fmacdcc	d0, d11, d0
      4c:	000e030b 	andeq	r0, lr, fp, lsl #6
      50:	00350400 	eorseq	r0, r5, r0, lsl #8
      54:	00001349 	andeq	r1, r0, r9, asr #6
      58:	0b010405 	bleq	41074 <__Stack_Size+0x40c74>
      5c:	3b0b3a0b 	blcc	2ce890 <__Stack_Size+0x2ce490>
      60:	0013010b 	andseq	r0, r3, fp, lsl #2
      64:	00280600 	eoreq	r0, r8, r0, lsl #12
      68:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
      6c:	28070000 	stmdacs	r7, {}
      70:	1c080300 	stcne	3, cr0, [r8], {0}
      74:	0800000d 	stmdaeq	r0, {r0, r2, r3}
      78:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      7c:	0b3b0b3a 	bleq	ec2d6c <__Stack_Size+0xec296c>
      80:	00001349 	andeq	r1, r0, r9, asr #6
      84:	0b002409 	bleq	90b0 <__Stack_Size+0x8cb0>
      88:	000b3e0b 	andeq	r3, fp, fp, lsl #28
      8c:	01130a00 	tsteq	r3, r0, lsl #20
      90:	0b3a0b0b 	bleq	e82cc4 <__Stack_Size+0xe828c4>
      94:	1301053b 	movwne	r0, #5435	; 0x153b
      98:	0d0b0000 	stceq	0, cr0, [fp]
      9c:	3a080300 	bcc	200ca4 <__Stack_Size+0x2008a4>
      a0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      a4:	000a3813 	andeq	r3, sl, r3, lsl r8
      a8:	000d0c00 	andeq	r0, sp, r0, lsl #24
      ac:	0b3a0e03 	bleq	e838c0 <__Stack_Size+0xe834c0>
      b0:	1349053b 	movtne	r0, #38203	; 0x953b
      b4:	00000a38 	andeq	r0, r0, r8, lsr sl
      b8:	0b01130d 	bleq	44cf4 <__Stack_Size+0x448f4>
      bc:	3b0b3a0b 	blcc	2ce8f0 <__Stack_Size+0x2ce4f0>
      c0:	0013010b 	andseq	r0, r3, fp, lsl #2
      c4:	000d0e00 	andeq	r0, sp, r0, lsl #28
      c8:	0b3a0e03 	bleq	e838dc <__Stack_Size+0xe834dc>
      cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      d0:	00000a38 	andeq	r0, r0, r8, lsr sl
      d4:	3f012e0f 	svccc	0x00012e0f
      d8:	3a0e030c 	bcc	380d10 <__Stack_Size+0x380910>
      dc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
      e0:	2013490c 	andscs	r4, r3, ip, lsl #18
      e4:	0013010b 	andseq	r0, r3, fp, lsl #2
      e8:	00341000 	eorseq	r1, r4, r0
      ec:	0b3a0e03 	bleq	e83900 <__Stack_Size+0xe83500>
      f0:	1349053b 	movtne	r0, #38203	; 0x953b
      f4:	2e110000 	wxorcs	wr0, wr1, wr0
      f8:	030c3f01 	movweq	r3, #52993	; 0xcf01
      fc:	3b0b3a0e 	blcc	2ce93c <__Stack_Size+0x2ce53c>
     100:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     104:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     108:	010a4001 	tsteq	sl, r1
     10c:	12000013 	andne	r0, r0, #19	; 0x13
     110:	08030005 	stmdaeq	r3, {r0, r2}
     114:	0b3b0b3a 	bleq	ec2e04 <__Stack_Size+0xec2a04>
     118:	06021349 	streq	r1, [r2], -r9, asr #6
     11c:	05130000 	ldreq	r0, [r3]
     120:	3a0e0300 	bcc	380d28 <__Stack_Size+0x380928>
     124:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     128:	000a0213 	andeq	r0, sl, r3, lsl r2
     12c:	00241400 	eoreq	r1, r4, r0, lsl #8
     130:	0b3e0b0b 	bleq	f82d64 <__Stack_Size+0xf82964>
     134:	00000803 	andeq	r0, r0, r3, lsl #16
     138:	0b000f15 	bleq	3d94 <__Stack_Size+0x3994>
     13c:	0013490b 	andseq	r4, r3, fp, lsl #18
     140:	012e1600 	teqeq	lr, r0, lsl #12
     144:	01111331 	tsteq	r1, r1, lsr r3
     148:	0a400112 	beq	1000598 <__Stack_Size+0x1000198>
     14c:	00001301 	andeq	r1, r0, r1, lsl #6
     150:	31003417 	tstcc	r0, r7, lsl r4
     154:	000a0213 	andeq	r0, sl, r3, lsl r2
     158:	002e1800 	eoreq	r1, lr, r0, lsl #16
     15c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     160:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     164:	01110c27 	tsteq	r1, r7, lsr #24
     168:	0a400112 	beq	10005b8 <__Stack_Size+0x10001b8>
     16c:	2e190000 	wxorcs	wr0, wr9, wr0
     170:	030c3f00 	movweq	r3, #52992	; 0xcf00
     174:	3b0b3a0e 	blcc	2ce9b4 <__Stack_Size+0x2ce5b4>
     178:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     17c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     180:	000a4001 	andeq	r4, sl, r1
     184:	012e1a00 	teqeq	lr, r0, lsl #20
     188:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     18c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     190:	13490c27 	movtne	r0, #39975	; 0x9c27
     194:	01120111 	tsteq	r2, r1, lsl r1
     198:	13010a40 	movwne	r0, #6720	; 0x1a40
     19c:	341b0000 	ldrcc	r0, [fp]
     1a0:	3a0e0300 	bcc	380da8 <__Stack_Size+0x3809a8>
     1a4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     1a8:	000a0213 	andeq	r0, sl, r3, lsl r2
     1ac:	012e1c00 	teqeq	lr, r0, lsl #24
     1b0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     1b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     1b8:	01110c27 	tsteq	r1, r7, lsr #24
     1bc:	0a400112 	beq	100060c <__Stack_Size+0x100020c>
     1c0:	00001301 	andeq	r1, r0, r1, lsl #6
     1c4:	0300051d 	movweq	r0, #1309	; 0x51d
     1c8:	3b0b3a0e 	blcc	2cea08 <__Stack_Size+0x2ce608>
     1cc:	02134905 	andseq	r4, r3, #81920	; 0x14000
     1d0:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
     1d4:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     1d8:	0b3a0e03 	bleq	e839ec <__Stack_Size+0xe835ec>
     1dc:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     1e0:	01120111 	tsteq	r2, r1, lsl r1
     1e4:	00000640 	andeq	r0, r0, r0, asr #12
     1e8:	3f012e1f 	svccc	0x00012e1f
     1ec:	3a0e030c 	bcc	380e24 <__Stack_Size+0x380a24>
     1f0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     1f4:	1201110c 	andne	r1, r1, #3	; 0x3
     1f8:	01064001 	tsteq	r6, r1
     1fc:	20000013 	andcs	r0, r0, r3, lsl r0
     200:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     204:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     208:	06021349 	streq	r1, [r2], -r9, asr #6
     20c:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     210:	030c3f01 	movweq	r3, #52993	; 0xcf01
     214:	3b0b3a0e 	blcc	2cea54 <__Stack_Size+0x2ce654>
     218:	110c270b 	tstne	ip, fp, lsl #14
     21c:	40011201 	andmi	r1, r1, r1, lsl #4
     220:	00130106 	andseq	r0, r3, r6, lsl #2
     224:	00052200 	andeq	r2, r5, r0, lsl #4
     228:	0b3a0e03 	bleq	e83a3c <__Stack_Size+0xe8363c>
     22c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     230:	00000602 	andeq	r0, r0, r2, lsl #12
     234:	3f002e23 	svccc	0x00002e23
     238:	3a0e030c 	bcc	380e70 <__Stack_Size+0x380a70>
     23c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     240:	1201110c 	andne	r1, r1, #3	; 0x3
     244:	00064001 	andeq	r4, r6, r1
     248:	012e2400 	teqeq	lr, r0, lsl #8
     24c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     250:	0b3b0b3a 	bleq	ec2f40 <__Stack_Size+0xec2b40>
     254:	13490c27 	movtne	r0, #39975	; 0x9c27
     258:	01120111 	tsteq	r2, r1, lsl r1
     25c:	13010640 	movwne	r0, #5696	; 0x1640
     260:	1d250000 	stcne	0, cr0, [r5]
     264:	55133101 	ldrpl	r3, [r3, #-257]
     268:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     26c:	2600000b 	strcs	r0, [r0], -fp
     270:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     274:	34270000 	strtcc	r0, [r7]
     278:	00133100 	andseq	r3, r3, r0, lsl #2
     27c:	01012800 	tsteq	r1, r0, lsl #16
     280:	13011349 	movwne	r1, #4937	; 0x1349
     284:	21290000 	teqcs	r9, r0
     288:	2f134900 	svccs	0x00134900
     28c:	2a00000b 	bcs	2c0 <_Minimum_Stack_Size+0x1c0>
     290:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     294:	0b3b0b3a 	bleq	ec2f84 <__Stack_Size+0xec2b84>
     298:	0c3f1349 	ldceq	3, cr1, [pc], #-292
     29c:	00000a02 	andeq	r0, r0, r2, lsl #20
     2a0:	0300342b 	movweq	r3, #1067	; 0x42b
     2a4:	3b0b3a08 	blcc	2ceacc <__Stack_Size+0x2ce6cc>
     2a8:	3f13490b 	svccc	0x0013490b
     2ac:	000a020c 	andeq	r0, sl, ip, lsl #4
     2b0:	11010000 	tstne	r1, r0
     2b4:	130e2501 	movwne	r2, #58625	; 0xe501
     2b8:	1b0e030b 	blne	380eec <__Stack_Size+0x380aec>
     2bc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     2c0:	00061001 	andeq	r1, r6, r1
     2c4:	002e0200 	eoreq	r0, lr, r0, lsl #4
     2c8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     2cc:	0b3b0b3a 	bleq	ec2fbc <__Stack_Size+0xec2bbc>
     2d0:	01110c27 	tsteq	r1, r7, lsr #24
     2d4:	0a400112 	beq	1000724 <__Stack_Size+0x1000324>
     2d8:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
     2dc:	030c3f00 	movweq	r3, #52992	; 0xcf00
     2e0:	3b0b3a0e 	blcc	2ceb20 <__Stack_Size+0x2ce720>
     2e4:	110c2705 	tstne	ip, r5, lsl #14
     2e8:	40011201 	andmi	r1, r1, r1, lsl #4
     2ec:	0400000a 	streq	r0, [r0], #-10
     2f0:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     2f4:	0b3a0e03 	bleq	e83b08 <__Stack_Size+0xe83708>
     2f8:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     2fc:	01120111 	tsteq	r2, r1, lsl r1
     300:	00000640 	andeq	r0, r0, r0, asr #12
     304:	3f002e05 	svccc	0x00002e05
     308:	3a0e030c 	bcc	380f40 <__Stack_Size+0x380b40>
     30c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     310:	1201110c 	andne	r1, r1, #3	; 0x3
     314:	00064001 	andeq	r4, r6, r1
     318:	11010000 	tstne	r1, r0
     31c:	130e2501 	movwne	r2, #58625	; 0xe501
     320:	1b0e030b 	blne	380f54 <__Stack_Size+0x380b54>
     324:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     328:	00061001 	andeq	r1, r6, r1
     32c:	00240200 	eoreq	r0, r4, r0, lsl #4
     330:	0b3e0b0b 	bleq	f82f64 <__Stack_Size+0xf82b64>
     334:	00000e03 	andeq	r0, r0, r3, lsl #28
     338:	0b002403 	bleq	934c <__Stack_Size+0x8f4c>
     33c:	000b3e0b 	andeq	r3, fp, fp, lsl #28
     340:	002e0400 	eoreq	r0, lr, r0, lsl #8
     344:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     348:	0b3b0b3a 	bleq	ec3038 <__Stack_Size+0xec2c38>
     34c:	13490c27 	movtne	r0, #39975	; 0x9c27
     350:	01120111 	tsteq	r2, r1, lsl r1
     354:	00000640 	andeq	r0, r0, r0, asr #12
     358:	0b002405 	bleq	9374 <__Stack_Size+0x8f74>
     35c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     360:	06000008 	streq	r0, [r0], -r8
     364:	0c3f012e 	ldfeqs	f0, [pc], #-184
     368:	0b3a0e03 	bleq	e83b7c <__Stack_Size+0xe8377c>
     36c:	0c270b3b 	stceq	11, cr0, [r7], #-236
     370:	01120111 	tsteq	r2, r1, lsl r1
     374:	13010640 	movwne	r0, #5696	; 0x1640
     378:	05070000 	streq	r0, [r7]
     37c:	3a0e0300 	bcc	380f84 <__Stack_Size+0x380b84>
     380:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     384:	00060213 	andeq	r0, r6, r3, lsl r2
     388:	012e0800 	teqeq	lr, r0, lsl #16
     38c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     390:	0b3b0b3a 	bleq	ec3080 <__Stack_Size+0xec2c80>
     394:	13490c27 	movtne	r0, #39975	; 0x9c27
     398:	01120111 	tsteq	r2, r1, lsl r1
     39c:	13010640 	movwne	r0, #5696	; 0x1640
     3a0:	34090000 	strcc	r0, [r9]
     3a4:	3a080300 	bcc	200fac <__Stack_Size+0x200bac>
     3a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3ac:	000a0213 	andeq	r0, sl, r3, lsl r2
     3b0:	000f0a00 	andeq	r0, pc, r0, lsl #20
     3b4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     3b8:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
     3bc:	030c3f00 	movweq	r3, #52992	; 0xcf00
     3c0:	3b0b3a0e 	blcc	2cec00 <__Stack_Size+0x2ce800>
     3c4:	110c270b 	tstne	ip, fp, lsl #14
     3c8:	40011201 	andmi	r1, r1, r1, lsl #4
     3cc:	0c000006 	stceq	0, cr0, [r0], {6}
     3d0:	0c3f012e 	ldfeqs	f0, [pc], #-184
     3d4:	0b3a0e03 	bleq	e83be8 <__Stack_Size+0xe837e8>
     3d8:	0c270b3b 	stceq	11, cr0, [r7], #-236
     3dc:	01111349 	tsteq	r1, r9, asr #6
     3e0:	06400112 	undefined
     3e4:	01000000 	tsteq	r0, r0
     3e8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     3ec:	0e030b13 	vmoveq.32	d3[0], r0
     3f0:	01110e1b 	tsteq	r1, fp, lsl lr
     3f4:	06100112 	undefined
     3f8:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
     3fc:	030c3f01 	movweq	r3, #52993	; 0xcf01
     400:	3b0b3a0e 	blcc	2cec40 <__Stack_Size+0x2ce840>
     404:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     408:	010b2013 	tsteq	fp, r3, lsl r0
     40c:	03000013 	movweq	r0, #19	; 0x13
     410:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     414:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     418:	00001349 	andeq	r1, r0, r9, asr #6
     41c:	03003404 	movweq	r3, #1028	; 0x404
     420:	3b0b3a0e 	blcc	2cec60 <__Stack_Size+0x2ce860>
     424:	00134905 	andseq	r4, r3, r5, lsl #18
     428:	00240500 	eoreq	r0, r4, r0, lsl #10
     42c:	0b3e0b0b 	bleq	f83060 <__Stack_Size+0xf82c60>
     430:	00000803 	andeq	r0, r0, r3, lsl #16
     434:	0b002406 	bleq	9454 <__Stack_Size+0x9054>
     438:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     43c:	0700000e 	streq	r0, [r0, -lr]
     440:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     444:	0b3a0e03 	bleq	e83c58 <__Stack_Size+0xe83858>
     448:	0c270b3b 	stceq	11, cr0, [r7], #-236
     44c:	01111349 	tsteq	r1, r9, asr #6
     450:	0a400112 	beq	10008a0 <__Stack_Size+0x10004a0>
     454:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
     458:	030c3f01 	movweq	r3, #52993	; 0xcf01
     45c:	3b0b3a0e 	blcc	2cec9c <__Stack_Size+0x2ce89c>
     460:	110c270b 	tstne	ip, fp, lsl #14
     464:	40011201 	andmi	r1, r1, r1, lsl #4
     468:	0013010a 	andseq	r0, r3, sl, lsl #2
     46c:	00050900 	andeq	r0, r5, r0, lsl #18
     470:	0b3a0803 	bleq	e82484 <__Stack_Size+0xe82084>
     474:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     478:	00000a02 	andeq	r0, r0, r2, lsl #20
     47c:	0300050a 	movweq	r0, #1290	; 0x50a
     480:	3b0b3a0e 	blcc	2cecc0 <__Stack_Size+0x2ce8c0>
     484:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     488:	0b00000a 	bleq	4b8 <__Stack_Size+0xb8>
     48c:	0c3f012e 	ldfeqs	f0, [pc], #-184
     490:	0b3a0e03 	bleq	e83ca4 <__Stack_Size+0xe838a4>
     494:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     498:	01111349 	tsteq	r1, r9, asr #6
     49c:	0a400112 	beq	10008ec <__Stack_Size+0x10004ec>
     4a0:	00001301 	andeq	r1, r0, r1, lsl #6
     4a4:	0300050c 	movweq	r0, #1292	; 0x50c
     4a8:	3b0b3a0e 	blcc	2cece8 <__Stack_Size+0x2ce8e8>
     4ac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     4b0:	0d000006 	stceq	0, cr0, [r0, #-24]
     4b4:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     4b8:	0b3a0e03 	bleq	e83ccc <__Stack_Size+0xe838cc>
     4bc:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     4c0:	01111349 	tsteq	r1, r9, asr #6
     4c4:	0a400112 	beq	1000914 <__Stack_Size+0x1000514>
     4c8:	050e0000 	streq	r0, [lr]
     4cc:	3a0e0300 	bcc	3810d4 <__Stack_Size+0x380cd4>
     4d0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     4d4:	00060213 	andeq	r0, r6, r3, lsl r2
     4d8:	012e0f00 	teqeq	lr, r0, lsl #30
     4dc:	01111331 	tsteq	r1, r1, lsr r3
     4e0:	0a400112 	beq	1000930 <__Stack_Size+0x1000530>
     4e4:	00001301 	andeq	r1, r0, r1, lsl #6
     4e8:	31000510 	tstcc	r0, r0, lsl r5
     4ec:	00060213 	andeq	r0, r6, r3, lsl r2
     4f0:	00051100 	andeq	r1, r5, r0, lsl #2
     4f4:	0a021331 	beq	851c0 <__Stack_Size+0x84dc0>
     4f8:	34120000 	ldrcc	r0, [r2]
     4fc:	00133100 	andseq	r3, r3, r0, lsl #2
     500:	00341300 	eorseq	r1, r4, r0, lsl #6
     504:	06021331 	undefined
     508:	2e140000 	wxorcs	wr0, wr4, wr0
     50c:	030c3f01 	movweq	r3, #52993	; 0xcf01
     510:	3b0b3a0e 	blcc	2ced50 <__Stack_Size+0x2ce950>
     514:	110c270b 	tstne	ip, fp, lsl #14
     518:	40011201 	andmi	r1, r1, r1, lsl #4
     51c:	00130106 	andseq	r0, r3, r6, lsl #2
     520:	00341500 	eorseq	r1, r4, r0, lsl #10
     524:	0b3a0803 	bleq	e82538 <__Stack_Size+0xe82138>
     528:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     52c:	00000602 	andeq	r0, r0, r2, lsl #12
     530:	03003416 	movweq	r3, #1046	; 0x416
     534:	3b0b3a0e 	blcc	2ced74 <__Stack_Size+0x2ce974>
     538:	0013490b 	andseq	r4, r3, fp, lsl #18
     53c:	00341700 	eorseq	r1, r4, r0, lsl #14
     540:	0b3a0e03 	bleq	e83d54 <__Stack_Size+0xe83954>
     544:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     548:	00000602 	andeq	r0, r0, r2, lsl #12
     54c:	03003418 	movweq	r3, #1048	; 0x418
     550:	3b0b3a0e 	blcc	2ced90 <__Stack_Size+0x2ce990>
     554:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     558:	1900000a 	stmdbne	r0, {r1, r3}
     55c:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     560:	0b3a0e03 	bleq	e83d74 <__Stack_Size+0xe83974>
     564:	0c270b3b 	stceq	11, cr0, [r7], #-236
     568:	01120111 	tsteq	r2, r1, lsl r1
     56c:	00000640 	andeq	r0, r0, r0, asr #12
     570:	3f012e1a 	svccc	0x00012e1a
     574:	3a0e030c 	bcc	3811ac <__Stack_Size+0x380dac>
     578:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     57c:	1201110c 	andne	r1, r1, #3	; 0x3
     580:	01064001 	tsteq	r6, r1
     584:	1b000013 	blne	5d8 <__Stack_Size+0x1d8>
     588:	08030005 	stmdaeq	r3, {r0, r2}
     58c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     590:	06021349 	streq	r1, [r2], -r9, asr #6
     594:	1d1c0000 	ldcne	0, cr0, [ip]
     598:	11133101 	tstne	r3, r1, lsl #2
     59c:	58011201 	stmdapl	r1, {r0, r9, ip}
     5a0:	0005590b 	andeq	r5, r5, fp, lsl #18
     5a4:	00051d00 	andeq	r1, r5, r0, lsl #26
     5a8:	00001331 	andeq	r1, r0, r1, lsr r3
     5ac:	11010b1e 	tstne	r1, lr, lsl fp
     5b0:	00011201 	andeq	r1, r1, r1, lsl #4
     5b4:	012e1f00 	teqeq	lr, r0, lsl #30
     5b8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     5bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     5c0:	13490c27 	movtne	r0, #39975	; 0x9c27
     5c4:	01120111 	tsteq	r2, r1, lsl r1
     5c8:	13010640 	movwne	r0, #5696	; 0x1640
     5cc:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     5d0:	030c3f01 	movweq	r3, #52993	; 0xcf01
     5d4:	3b0b3a0e 	blcc	2cee14 <__Stack_Size+0x2cea14>
     5d8:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     5dc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     5e0:	01064001 	tsteq	r6, r1
     5e4:	21000013 	tstcs	r0, r3, lsl r0
     5e8:	13490101 	movtne	r0, #37121	; 0x9101
     5ec:	00001301 	andeq	r1, r0, r1, lsl #6
     5f0:	49002122 	stmdbmi	r0, {r1, r5, r8, sp}
     5f4:	000b2f13 	andeq	r2, fp, r3, lsl pc
     5f8:	00242300 	eoreq	r2, r4, r0, lsl #6
     5fc:	0b3e0b0b 	bleq	f83230 <__Stack_Size+0xf82e30>
     600:	34240000 	strtcc	r0, [r4]
     604:	3a0e0300 	bcc	38120c <__Stack_Size+0x380e0c>
     608:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     60c:	020c3f13 	andeq	r3, ip, #76	; 0x4c
     610:	0000000a 	andeq	r0, r0, sl
     614:	25011101 	strcs	r1, [r1, #-257]
     618:	030b130e 	movweq	r1, #45838	; 0xb30e
     61c:	110e1b0e 	tstne	lr, lr, lsl #22
     620:	10011201 	andne	r1, r1, r1, lsl #4
     624:	02000006 	andeq	r0, r0, #6	; 0x6
     628:	0b0b0024 	bleq	2c06c0 <__Stack_Size+0x2c02c0>
     62c:	0e030b3e 	vmoveq.16	d3[0], r0
     630:	16030000 	strne	r0, [r3], -r0
     634:	3a080300 	bcc	20123c <__Stack_Size+0x200e3c>
     638:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     63c:	04000013 	streq	r0, [r0], #-19
     640:	13490035 	movtne	r0, #36917	; 0x9035
     644:	04050000 	streq	r0, [r5]
     648:	3a0b0b01 	bcc	2c3254 <__Stack_Size+0x2c2e54>
     64c:	010b3b0b 	tsteq	fp, fp, lsl #22
     650:	06000013 	undefined
     654:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     658:	00000d1c 	andeq	r0, r0, ip, lsl sp
     65c:	03002807 	movweq	r2, #2055	; 0x807
     660:	000d1c08 	andeq	r1, sp, r8, lsl #24
     664:	00160800 	andseq	r0, r6, r0, lsl #16
     668:	0b3a0e03 	bleq	e83e7c <__Stack_Size+0xe83a7c>
     66c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     670:	24090000 	strcs	r0, [r9]
     674:	3e0b0b00 	fmacdcc	d0, d11, d0
     678:	0a00000b 	beq	6ac <__Stack_Size+0x2ac>
     67c:	0b0b0113 	bleq	2c0ad0 <__Stack_Size+0x2c06d0>
     680:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     684:	00001301 	andeq	r1, r0, r1, lsl #6
     688:	03000d0b 	movweq	r0, #3339	; 0xd0b
     68c:	3b0b3a08 	blcc	2ceeb4 <__Stack_Size+0x2ceab4>
     690:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     694:	0c00000a 	stceq	0, cr0, [r0], {10}
     698:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     69c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     6a0:	0a381349 	beq	e053cc <__Stack_Size+0xe04fcc>
     6a4:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
     6a8:	030c3f01 	movweq	r3, #52993	; 0xcf01
     6ac:	3b0b3a0e 	blcc	2ceeec <__Stack_Size+0x2ceaec>
     6b0:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     6b4:	010b2013 	tsteq	fp, r3, lsl r0
     6b8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     6bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     6c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     6c4:	00001349 	andeq	r1, r0, r9, asr #6
     6c8:	03012e0f 	movweq	r2, #7695	; 0x1e0f
     6cc:	3b0b3a0e 	blcc	2cef0c <__Stack_Size+0x2ceb0c>
     6d0:	200c2705 	andcs	r2, ip, r5, lsl #14
     6d4:	0013010b 	andseq	r0, r3, fp, lsl #2
     6d8:	00341000 	eorseq	r1, r4, r0
     6dc:	0b3a0803 	bleq	e826f0 <__Stack_Size+0xe822f0>
     6e0:	1349053b 	movtne	r0, #38203	; 0x953b
     6e4:	2e110000 	wxorcs	wr0, wr1, wr0
     6e8:	030c3f01 	movweq	r3, #52993	; 0xcf01
     6ec:	3b0b3a0e 	blcc	2cef2c <__Stack_Size+0x2ceb2c>
     6f0:	110c270b 	tstne	ip, fp, lsl #14
     6f4:	40011201 	andmi	r1, r1, r1, lsl #4
     6f8:	0013010a 	andseq	r0, r3, sl, lsl #2
     6fc:	00051200 	andeq	r1, r5, r0, lsl #4
     700:	0b3a0e03 	bleq	e83f14 <__Stack_Size+0xe83b14>
     704:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     708:	00000602 	andeq	r0, r0, r2, lsl #12
     70c:	3f002e13 	svccc	0x00002e13
     710:	3a0e030c 	bcc	381348 <__Stack_Size+0x380f48>
     714:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     718:	1201110c 	andne	r1, r1, #3	; 0x3
     71c:	000a4001 	andeq	r4, sl, r1
     720:	002e1400 	eoreq	r1, lr, r0, lsl #8
     724:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     728:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     72c:	13490c27 	movtne	r0, #39975	; 0x9c27
     730:	01120111 	tsteq	r2, r1, lsl r1
     734:	00000a40 	andeq	r0, r0, r0, asr #20
     738:	3f012e15 	svccc	0x00012e15
     73c:	3a0e030c 	bcc	381374 <__Stack_Size+0x380f74>
     740:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     744:	1113490c 	tstne	r3, ip, lsl #18
     748:	40011201 	andmi	r1, r1, r1, lsl #4
     74c:	0013010a 	andseq	r0, r3, sl, lsl #2
     750:	012e1600 	teqeq	lr, r0, lsl #12
     754:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     758:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     75c:	01110c27 	tsteq	r1, r7, lsr #24
     760:	0a400112 	beq	1000bb0 <__Stack_Size+0x10007b0>
     764:	00001301 	andeq	r1, r0, r1, lsl #6
     768:	03000517 	movweq	r0, #1303	; 0x517
     76c:	3b0b3a0e 	blcc	2cefac <__Stack_Size+0x2cebac>
     770:	02134905 	andseq	r4, r3, #81920	; 0x14000
     774:	1800000a 	stmdane	r0, {r1, r3}
     778:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     77c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     780:	06021349 	streq	r1, [r2], -r9, asr #6
     784:	34190000 	ldrcc	r0, [r9]
     788:	3a0e0300 	bcc	381390 <__Stack_Size+0x380f90>
     78c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     790:	00060213 	andeq	r0, r6, r3, lsl r2
     794:	012e1a00 	teqeq	lr, r0, lsl #20
     798:	01111331 	tsteq	r1, r1, lsr r3
     79c:	0a400112 	beq	1000bec <__Stack_Size+0x10007ec>
     7a0:	00001301 	andeq	r1, r0, r1, lsl #6
     7a4:	3100341b 	tstcc	r0, fp, lsl r4
     7a8:	00060213 	andeq	r0, r6, r3, lsl r2
     7ac:	012e1c00 	teqeq	lr, r0, lsl #24
     7b0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     7b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     7b8:	13490c27 	movtne	r0, #39975	; 0x9c27
     7bc:	01120111 	tsteq	r2, r1, lsl r1
     7c0:	13010640 	movwne	r0, #5696	; 0x1640
     7c4:	1d1d0000 	ldcne	0, cr0, [sp]
     7c8:	55133101 	ldrpl	r3, [r3, #-257]
     7cc:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     7d0:	00130105 	andseq	r0, r3, r5, lsl #2
     7d4:	010b1e00 	tsteq	fp, r0, lsl #28
     7d8:	00000655 	andeq	r0, r0, r5, asr r6
     7dc:	3100341f 	tstcc	r0, pc, lsl r4
     7e0:	20000013 	andcs	r0, r0, r3, lsl r0
     7e4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     7e8:	0b580655 	bleq	1602144 <__Stack_Size+0x1601d44>
     7ec:	00000559 	andeq	r0, r0, r9, asr r5
     7f0:	3f012e21 	svccc	0x00012e21
     7f4:	3a0e030c 	bcc	38142c <__Stack_Size+0x38102c>
     7f8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     7fc:	1113490c 	tstne	r3, ip, lsl #18
     800:	40011201 	andmi	r1, r1, r1, lsl #4
     804:	00130106 	andseq	r0, r3, r6, lsl #2
     808:	00342200 	eorseq	r2, r4, r0, lsl #4
     80c:	0b3a0e03 	bleq	e84020 <__Stack_Size+0xe83c20>
     810:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     814:	00000602 	andeq	r0, r0, r2, lsl #12
     818:	3f012e23 	svccc	0x00012e23
     81c:	3a0e030c 	bcc	381454 <__Stack_Size+0x381054>
     820:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     824:	1113490c 	tstne	r3, ip, lsl #18
     828:	40011201 	andmi	r1, r1, r1, lsl #4
     82c:	00000006 	andeq	r0, r0, r6
     830:	25011101 	strcs	r1, [r1, #-257]
     834:	030b130e 	movweq	r1, #45838	; 0xb30e
     838:	110e1b0e 	tstne	lr, lr, lsl #22
     83c:	10011201 	andne	r1, r1, r1, lsl #4
     840:	02000006 	andeq	r0, r0, #6	; 0x6
     844:	0b0b0024 	bleq	2c08dc <__Stack_Size+0x2c04dc>
     848:	0e030b3e 	vmoveq.16	d3[0], r0
     84c:	16030000 	strne	r0, [r3], -r0
     850:	3a080300 	bcc	201458 <__Stack_Size+0x201058>
     854:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     858:	04000013 	streq	r0, [r0], #-19
     85c:	13490035 	movtne	r0, #36917	; 0x9035
     860:	04050000 	streq	r0, [r5]
     864:	3a0b0b01 	bcc	2c3470 <__Stack_Size+0x2c3070>
     868:	010b3b0b 	tsteq	fp, fp, lsl #22
     86c:	06000013 	undefined
     870:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     874:	00000d1c 	andeq	r0, r0, ip, lsl sp
     878:	03001607 	movweq	r1, #1543	; 0x607
     87c:	3b0b3a0e 	blcc	2cf0bc <__Stack_Size+0x2cecbc>
     880:	0013490b 	andseq	r4, r3, fp, lsl #18
     884:	00240800 	eoreq	r0, r4, r0, lsl #16
     888:	0b3e0b0b 	bleq	f834bc <__Stack_Size+0xf830bc>
     88c:	13090000 	movwne	r0, #36864	; 0x9000
     890:	3a0b0b01 	bcc	2c349c <__Stack_Size+0x2c309c>
     894:	01053b0b 	tsteq	r5, fp, lsl #22
     898:	0a000013 	beq	8ec <__Stack_Size+0x4ec>
     89c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     8a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     8a4:	0a381349 	beq	e055d0 <__Stack_Size+0xe051d0>
     8a8:	0d0b0000 	stceq	0, cr0, [fp]
     8ac:	3a0e0300 	bcc	3814b4 <__Stack_Size+0x3810b4>
     8b0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     8b4:	000a3813 	andeq	r3, sl, r3, lsl r8
     8b8:	00160c00 	andseq	r0, r6, r0, lsl #24
     8bc:	0b3a0e03 	bleq	e840d0 <__Stack_Size+0xe83cd0>
     8c0:	1349053b 	movtne	r0, #38203	; 0x953b
     8c4:	010d0000 	tsteq	sp, r0
     8c8:	01134901 	tsteq	r3, r1, lsl #18
     8cc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     8d0:	13490021 	movtne	r0, #36897	; 0x9021
     8d4:	00000b2f 	andeq	r0, r0, pc, lsr #22
     8d8:	0b01130f 	bleq	4551c <__Stack_Size+0x4511c>
     8dc:	3b0b3a0b 	blcc	2cf110 <__Stack_Size+0x2ced10>
     8e0:	0013010b 	andseq	r0, r3, fp, lsl #2
     8e4:	000d1000 	andeq	r1, sp, r0
     8e8:	0b3a0e03 	bleq	e840fc <__Stack_Size+0xe83cfc>
     8ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     8f0:	00000a38 	andeq	r0, r0, r8, lsr sl
     8f4:	3f012e11 	svccc	0x00012e11
     8f8:	3a0e030c 	bcc	381530 <__Stack_Size+0x381130>
     8fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     900:	1201110c 	andne	r1, r1, #3	; 0x3
     904:	01064001 	tsteq	r6, r1
     908:	12000013 	andne	r0, r0, #19	; 0x13
     90c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     910:	0b3b0b3a 	bleq	ec3600 <__Stack_Size+0xec3200>
     914:	0a021349 	beq	85640 <__Stack_Size+0x85240>
     918:	05130000 	ldreq	r0, [r3]
     91c:	3a0e0300 	bcc	381524 <__Stack_Size+0x381124>
     920:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     924:	00060213 	andeq	r0, r6, r3, lsl r2
     928:	00341400 	eorseq	r1, r4, r0, lsl #8
     92c:	0b3a0e03 	bleq	e84140 <__Stack_Size+0xe83d40>
     930:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     934:	00000a02 	andeq	r0, r0, r2, lsl #20
     938:	03003415 	movweq	r3, #1045	; 0x415
     93c:	3b0b3a08 	blcc	2cf164 <__Stack_Size+0x2ced64>
     940:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     944:	16000006 	strne	r0, [r0], -r6
     948:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     94c:	0b3b0b3a 	bleq	ec363c <__Stack_Size+0xec323c>
     950:	00001349 	andeq	r1, r0, r9, asr #6
     954:	0b000f17 	bleq	45b8 <__Stack_Size+0x41b8>
     958:	0013490b 	andseq	r4, r3, fp, lsl #18
     95c:	012e1800 	teqeq	lr, r0, lsl #16
     960:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     964:	0b3b0b3a 	bleq	ec3654 <__Stack_Size+0xec3254>
     968:	01110c27 	tsteq	r1, r7, lsr #24
     96c:	0a400112 	beq	1000dbc <__Stack_Size+0x10009bc>
     970:	00001301 	andeq	r1, r0, r1, lsl #6
     974:	3f012e19 	svccc	0x00012e19
     978:	3a0e030c 	bcc	3815b0 <__Stack_Size+0x3811b0>
     97c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     980:	1113490c 	tstne	r3, ip, lsl #18
     984:	40011201 	andmi	r1, r1, r1, lsl #4
     988:	0013010a 	andseq	r0, r3, sl, lsl #2
     98c:	012e1a00 	teqeq	lr, r0, lsl #20
     990:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     994:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     998:	13490c27 	movtne	r0, #39975	; 0x9c27
     99c:	01120111 	tsteq	r2, r1, lsl r1
     9a0:	13010a40 	movwne	r0, #6720	; 0x1a40
     9a4:	051b0000 	ldreq	r0, [fp]
     9a8:	3a0e0300 	bcc	3815b0 <__Stack_Size+0x3811b0>
     9ac:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9b0:	00060213 	andeq	r0, r6, r3, lsl r2
     9b4:	00051c00 	andeq	r1, r5, r0, lsl #24
     9b8:	0b3a0e03 	bleq	e841cc <__Stack_Size+0xe83dcc>
     9bc:	1349053b 	movtne	r0, #38203	; 0x953b
     9c0:	00000a02 	andeq	r0, r0, r2, lsl #20
     9c4:	0300341d 	movweq	r3, #1053	; 0x41d
     9c8:	3b0b3a0e 	blcc	2cf208 <__Stack_Size+0x2cee08>
     9cc:	00134905 	andseq	r4, r3, r5, lsl #18
     9d0:	012e1e00 	teqeq	lr, r0, lsl #28
     9d4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     9d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     9dc:	01110c27 	tsteq	r1, r7, lsr #24
     9e0:	0a400112 	beq	1000e30 <__Stack_Size+0x1000a30>
     9e4:	00001301 	andeq	r1, r0, r1, lsl #6
     9e8:	0300341f 	movweq	r3, #1055	; 0x41f
     9ec:	3b0b3a08 	blcc	2cf214 <__Stack_Size+0x2cee14>
     9f0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     9f4:	2000000a 	andcs	r0, r0, sl
     9f8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     9fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     a00:	06021349 	streq	r1, [r2], -r9, asr #6
     a04:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     a08:	030c3f01 	movweq	r3, #52993	; 0xcf01
     a0c:	3b0b3a0e 	blcc	2cf24c <__Stack_Size+0x2cee4c>
     a10:	110c2705 	tstne	ip, r5, lsl #14
     a14:	40011201 	andmi	r1, r1, r1, lsl #4
     a18:	00130106 	andseq	r0, r3, r6, lsl #2
     a1c:	00342200 	eorseq	r2, r4, r0, lsl #4
     a20:	0b3a0803 	bleq	e82a34 <__Stack_Size+0xe82634>
     a24:	1349053b 	movtne	r0, #38203	; 0x953b
     a28:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
     a2c:	030c3f00 	movweq	r3, #52992	; 0xcf00
     a30:	3b0b3a0e 	blcc	2cf270 <__Stack_Size+0x2cee70>
     a34:	110c270b 	tstne	ip, fp, lsl #14
     a38:	40011201 	andmi	r1, r1, r1, lsl #4
     a3c:	24000006 	strcs	r0, [r0], #-6
     a40:	0c3f012e 	ldfeqs	f0, [pc], #-184
     a44:	0b3a0e03 	bleq	e84258 <__Stack_Size+0xe83e58>
     a48:	0c270b3b 	stceq	11, cr0, [r7], #-236
     a4c:	01120111 	tsteq	r2, r1, lsl r1
     a50:	00000640 	andeq	r0, r0, r0, asr #12
     a54:	01110100 	tsteq	r1, r0, lsl #2
     a58:	0b130e25 	bleq	4c42f4 <__Stack_Size+0x4c3ef4>
     a5c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     a60:	01120111 	tsteq	r2, r1, lsl r1
     a64:	00000610 	andeq	r0, r0, r0, lsl r6
     a68:	0b002402 	bleq	9a78 <__Stack_Size+0x9678>
     a6c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     a70:	0300000e 	movweq	r0, #14	; 0xe
     a74:	08030016 	stmdaeq	r3, {r1, r2, r4}
     a78:	0b3b0b3a 	bleq	ec3768 <__Stack_Size+0xec3368>
     a7c:	00001349 	andeq	r1, r0, r9, asr #6
     a80:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
     a84:	05000013 	streq	r0, [r0, #-19]
     a88:	13490026 	movtne	r0, #36902	; 0x9026
     a8c:	04060000 	streq	r0, [r6]
     a90:	3a0b0b01 	bcc	2c369c <__Stack_Size+0x2c329c>
     a94:	010b3b0b 	tsteq	fp, fp, lsl #22
     a98:	07000013 	smladeq	r0, r3, r0, r0
     a9c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     aa0:	00000d1c 	andeq	r0, r0, ip, lsl sp
     aa4:	03002808 	movweq	r2, #2056	; 0x808
     aa8:	000d1c08 	andeq	r1, sp, r8, lsl #24
     aac:	00160900 	andseq	r0, r6, r0, lsl #18
     ab0:	0b3a0e03 	bleq	e842c4 <__Stack_Size+0xe83ec4>
     ab4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ab8:	240a0000 	strcs	r0, [sl]
     abc:	3e0b0b00 	fmacdcc	d0, d11, d0
     ac0:	0b00000b 	bleq	af4 <__Stack_Size+0x6f4>
     ac4:	050b0113 	streq	r0, [fp, #-275]
     ac8:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     acc:	00001301 	andeq	r1, r0, r1, lsl #6
     ad0:	03000d0c 	movweq	r0, #3340	; 0xd0c
     ad4:	3b0b3a0e 	blcc	2cf314 <__Stack_Size+0x2cef14>
     ad8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     adc:	0d00000a 	stceq	0, cr0, [r0, #-40]
     ae0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     ae4:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     ae8:	0a381349 	beq	e05814 <__Stack_Size+0xe05414>
     aec:	010e0000 	tsteq	lr, r0
     af0:	01134901 	tsteq	r3, r1, lsl #18
     af4:	0f000013 	svceq	0x00000013
     af8:	13490021 	movtne	r0, #36897	; 0x9021
     afc:	00000b2f 	andeq	r0, r0, pc, lsr #22
     b00:	0b011310 	bleq	45748 <__Stack_Size+0x45348>
     b04:	3b0b3a0b 	blcc	2cf338 <__Stack_Size+0x2cef38>
     b08:	00130105 	andseq	r0, r3, r5, lsl #2
     b0c:	01131100 	tsteq	r3, r0, lsl #2
     b10:	0b3a0b0b 	bleq	e83744 <__Stack_Size+0xe83344>
     b14:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     b18:	0d120000 	ldceq	0, cr0, [r2]
     b1c:	3a0e0300 	bcc	381724 <__Stack_Size+0x381324>
     b20:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b24:	000a3813 	andeq	r3, sl, r3, lsl r8
     b28:	012e1300 	teqeq	lr, r0, lsl #6
     b2c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     b30:	0b3b0b3a 	bleq	ec3820 <__Stack_Size+0xec3420>
     b34:	01110c27 	tsteq	r1, r7, lsr #24
     b38:	0a400112 	beq	1000f88 <__Stack_Size+0x1000b88>
     b3c:	00001301 	andeq	r1, r0, r1, lsl #6
     b40:	03003414 	movweq	r3, #1044	; 0x414
     b44:	3b0b3a0e 	blcc	2cf384 <__Stack_Size+0x2cef84>
     b48:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b4c:	1500000a 	strne	r0, [r0, #-10]
     b50:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b54:	0b3b0b3a 	bleq	ec3844 <__Stack_Size+0xec3444>
     b58:	00001349 	andeq	r1, r0, r9, asr #6
     b5c:	03000516 	movweq	r0, #1302	; 0x516
     b60:	3b0b3a0e 	blcc	2cf3a0 <__Stack_Size+0x2cefa0>
     b64:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b68:	17000006 	strne	r0, [r0, -r6]
     b6c:	0c3f012e 	ldfeqs	f0, [pc], #-184
     b70:	0b3a0e03 	bleq	e84384 <__Stack_Size+0xe83f84>
     b74:	0c270b3b 	stceq	11, cr0, [r7], #-236
     b78:	01120111 	tsteq	r2, r1, lsl r1
     b7c:	13010640 	movwne	r0, #5696	; 0x1640
     b80:	34180000 	ldrcc	r0, [r8]
     b84:	3a0e0300 	bcc	38178c <__Stack_Size+0x38138c>
     b88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b8c:	00060213 	andeq	r0, r6, r3, lsl r2
     b90:	000f1900 	andeq	r1, pc, r0, lsl #18
     b94:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     b98:	051a0000 	ldreq	r0, [sl]
     b9c:	3a0e0300 	bcc	3817a4 <__Stack_Size+0x3813a4>
     ba0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ba4:	000a0213 	andeq	r0, sl, r3, lsl r2
     ba8:	002e1b00 	eoreq	r1, lr, r0, lsl #22
     bac:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     bb0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     bb4:	13490c27 	movtne	r0, #39975	; 0x9c27
     bb8:	01120111 	tsteq	r2, r1, lsl r1
     bbc:	00000a40 	andeq	r0, r0, r0, asr #20
     bc0:	3f012e1c 	svccc	0x00012e1c
     bc4:	3a0e030c 	bcc	3817fc <__Stack_Size+0x3813fc>
     bc8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     bcc:	1113490c 	tstne	r3, ip, lsl #18
     bd0:	40011201 	andmi	r1, r1, r1, lsl #4
     bd4:	0013010a 	andseq	r0, r3, sl, lsl #2
     bd8:	00051d00 	andeq	r1, r5, r0, lsl #26
     bdc:	0b3a0e03 	bleq	e843f0 <__Stack_Size+0xe83ff0>
     be0:	1349053b 	movtne	r0, #38203	; 0x953b
     be4:	00000602 	andeq	r0, r0, r2, lsl #12
     be8:	0300341e 	movweq	r3, #1054	; 0x41e
     bec:	3b0b3a0e 	blcc	2cf42c <__Stack_Size+0x2cf02c>
     bf0:	00134905 	andseq	r4, r3, r5, lsl #18
     bf4:	00341f00 	eorseq	r1, r4, r0, lsl #30
     bf8:	0b3a0803 	bleq	e82c0c <__Stack_Size+0xe8280c>
     bfc:	1349053b 	movtne	r0, #38203	; 0x953b
     c00:	00000a02 	andeq	r0, r0, r2, lsl #20
     c04:	3f012e20 	svccc	0x00012e20
     c08:	3a0e030c 	bcc	381840 <__Stack_Size+0x381440>
     c0c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     c10:	1201110c 	andne	r1, r1, #3	; 0x3
     c14:	010a4001 	tsteq	sl, r1
     c18:	21000013 	tstcs	r0, r3, lsl r0
     c1c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     c20:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     c24:	0a021349 	beq	85950 <__Stack_Size+0x85550>
     c28:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
     c2c:	030c3f00 	movweq	r3, #52992	; 0xcf00
     c30:	3b0b3a0e 	blcc	2cf470 <__Stack_Size+0x2cf070>
     c34:	110c2705 	tstne	ip, r5, lsl #14
     c38:	40011201 	andmi	r1, r1, r1, lsl #4
     c3c:	2300000a 	movwcs	r0, #10	; 0xa
     c40:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     c44:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     c48:	0a021349 	beq	85974 <__Stack_Size+0x85574>
     c4c:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
     c50:	030c3f01 	movweq	r3, #52993	; 0xcf01
     c54:	3b0b3a0e 	blcc	2cf494 <__Stack_Size+0x2cf094>
     c58:	110c2705 	tstne	ip, r5, lsl #14
     c5c:	40011201 	andmi	r1, r1, r1, lsl #4
     c60:	00130106 	andseq	r0, r3, r6, lsl #2
     c64:	00342500 	eorseq	r2, r4, r0, lsl #10
     c68:	0b3a0e03 	bleq	e8447c <__Stack_Size+0xe8407c>
     c6c:	1349053b 	movtne	r0, #38203	; 0x953b
     c70:	00000602 	andeq	r0, r0, r2, lsl #12
     c74:	03003426 	movweq	r3, #1062	; 0x426
     c78:	3b0b3a08 	blcc	2cf4a0 <__Stack_Size+0x2cf0a0>
     c7c:	00134905 	andseq	r4, r3, r5, lsl #18
     c80:	002e2700 	eoreq	r2, lr, r0, lsl #14
     c84:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     c88:	0b3b0b3a 	bleq	ec3978 <__Stack_Size+0xec3578>
     c8c:	13490c27 	movtne	r0, #39975	; 0x9c27
     c90:	01120111 	tsteq	r2, r1, lsl r1
     c94:	00000640 	andeq	r0, r0, r0, asr #12
     c98:	3f002e28 	svccc	0x00002e28
     c9c:	3a0e030c 	bcc	3818d4 <__Stack_Size+0x3814d4>
     ca0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ca4:	1201110c 	andne	r1, r1, #3	; 0x3
     ca8:	00064001 	andeq	r4, r6, r1
     cac:	11010000 	tstne	r1, r0
     cb0:	130e2501 	movwne	r2, #58625	; 0xe501
     cb4:	1b0e030b 	blne	3818e8 <__Stack_Size+0x3814e8>
     cb8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     cbc:	00061001 	andeq	r1, r6, r1
     cc0:	00240200 	eoreq	r0, r4, r0, lsl #4
     cc4:	0b3e0b0b 	bleq	f838f8 <__Stack_Size+0xf834f8>
     cc8:	00000e03 	andeq	r0, r0, r3, lsl #28
     ccc:	03001603 	movweq	r1, #1539	; 0x603
     cd0:	3b0b3a08 	blcc	2cf4f8 <__Stack_Size+0x2cf0f8>
     cd4:	0013490b 	andseq	r4, r3, fp, lsl #18
     cd8:	00350400 	eorseq	r0, r5, r0, lsl #8
     cdc:	00001349 	andeq	r1, r0, r9, asr #6
     ce0:	0b010405 	bleq	41cfc <__Stack_Size+0x418fc>
     ce4:	3b0b3a0b 	blcc	2cf518 <__Stack_Size+0x2cf118>
     ce8:	0013010b 	andseq	r0, r3, fp, lsl #2
     cec:	00280600 	eoreq	r0, r8, r0, lsl #12
     cf0:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     cf4:	28070000 	stmdacs	r7, {}
     cf8:	1c080300 	stcne	3, cr0, [r8], {0}
     cfc:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     d00:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     d04:	0b3b0b3a 	bleq	ec39f4 <__Stack_Size+0xec35f4>
     d08:	00001349 	andeq	r1, r0, r9, asr #6
     d0c:	0b002409 	bleq	9d38 <__Stack_Size+0x9938>
     d10:	000b3e0b 	andeq	r3, fp, fp, lsl #28
     d14:	01130a00 	tsteq	r3, r0, lsl #20
     d18:	0b3a0b0b 	bleq	e8394c <__Stack_Size+0xe8354c>
     d1c:	1301053b 	movwne	r0, #5435	; 0x153b
     d20:	0d0b0000 	stceq	0, cr0, [fp]
     d24:	3a080300 	bcc	20192c <__Stack_Size+0x20152c>
     d28:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d2c:	000a3813 	andeq	r3, sl, r3, lsl r8
     d30:	012e0c00 	teqeq	lr, r0, lsl #24
     d34:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     d38:	0b3b0b3a 	bleq	ec3a28 <__Stack_Size+0xec3628>
     d3c:	01110c27 	tsteq	r1, r7, lsr #24
     d40:	0a400112 	beq	1001190 <__Stack_Size+0x1000d90>
     d44:	00001301 	andeq	r1, r0, r1, lsl #6
     d48:	0300050d 	movweq	r0, #1293	; 0x50d
     d4c:	3b0b3a0e 	blcc	2cf58c <__Stack_Size+0x2cf18c>
     d50:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d54:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
     d58:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     d5c:	0b3b0b3a 	bleq	ec3a4c <__Stack_Size+0xec364c>
     d60:	06021349 	streq	r1, [r2], -r9, asr #6
     d64:	340f0000 	strcc	r0, [pc], #0	; d6c <__Stack_Size+0x96c>
     d68:	3a0e0300 	bcc	381970 <__Stack_Size+0x381570>
     d6c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d70:	00060213 	andeq	r0, r6, r3, lsl r2
     d74:	012e1000 	teqeq	lr, r0
     d78:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     d7c:	0b3b0b3a 	bleq	ec3a6c <__Stack_Size+0xec366c>
     d80:	13490c27 	movtne	r0, #39975	; 0x9c27
     d84:	01120111 	tsteq	r2, r1, lsl r1
     d88:	13010a40 	movwne	r0, #6720	; 0x1a40
     d8c:	34110000 	ldrcc	r0, [r1]
     d90:	3a0e0300 	bcc	381998 <__Stack_Size+0x381598>
     d94:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d98:	12000013 	andne	r0, r0, #19	; 0x13
     d9c:	0c3f012e 	ldfeqs	f0, [pc], #-184
     da0:	0b3a0e03 	bleq	e845b4 <__Stack_Size+0xe841b4>
     da4:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     da8:	01120111 	tsteq	r2, r1, lsl r1
     dac:	13010a40 	movwne	r0, #6720	; 0x1a40
     db0:	05130000 	ldreq	r0, [r3]
     db4:	3a0e0300 	bcc	3819bc <__Stack_Size+0x3815bc>
     db8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     dbc:	000a0213 	andeq	r0, sl, r3, lsl r2
     dc0:	002e1400 	eoreq	r1, lr, r0, lsl #8
     dc4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     dc8:	0b3b0b3a 	bleq	ec3ab8 <__Stack_Size+0xec36b8>
     dcc:	01110c27 	tsteq	r1, r7, lsr #24
     dd0:	06400112 	undefined
     dd4:	2e150000 	wxorcs	wr0, wr5, wr0
     dd8:	030c3f01 	movweq	r3, #52993	; 0xcf01
     ddc:	3b0b3a0e 	blcc	2cf61c <__Stack_Size+0x2cf21c>
     de0:	110c270b 	tstne	ip, fp, lsl #14
     de4:	40011201 	andmi	r1, r1, r1, lsl #4
     de8:	00130106 	andseq	r0, r3, r6, lsl #2
     dec:	11010000 	tstne	r1, r0
     df0:	130e2501 	movwne	r2, #58625	; 0xe501
     df4:	1b0e030b 	blne	381a28 <__Stack_Size+0x381628>
     df8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     dfc:	00061001 	andeq	r1, r6, r1
     e00:	00240200 	eoreq	r0, r4, r0, lsl #4
     e04:	0b3e0b0b 	bleq	f83a38 <__Stack_Size+0xf83638>
     e08:	00000e03 	andeq	r0, r0, r3, lsl #28
     e0c:	03001603 	movweq	r1, #1539	; 0x603
     e10:	3b0b3a08 	blcc	2cf638 <__Stack_Size+0x2cf238>
     e14:	0013490b 	andseq	r4, r3, fp, lsl #18
     e18:	00350400 	eorseq	r0, r5, r0, lsl #8
     e1c:	00001349 	andeq	r1, r0, r9, asr #6
     e20:	0b010405 	bleq	41e3c <__Stack_Size+0x41a3c>
     e24:	3b0b3a0b 	blcc	2cf658 <__Stack_Size+0x2cf258>
     e28:	0013010b 	andseq	r0, r3, fp, lsl #2
     e2c:	00280600 	eoreq	r0, r8, r0, lsl #12
     e30:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     e34:	28070000 	stmdacs	r7, {}
     e38:	1c080300 	stcne	3, cr0, [r8], {0}
     e3c:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     e40:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     e44:	0b3b0b3a 	bleq	ec3b34 <__Stack_Size+0xec3734>
     e48:	00001349 	andeq	r1, r0, r9, asr #6
     e4c:	0b002409 	bleq	9e78 <__Stack_Size+0x9a78>
     e50:	000b3e0b 	andeq	r3, fp, fp, lsl #28
     e54:	01130a00 	tsteq	r3, r0, lsl #20
     e58:	0b3a0b0b 	bleq	e83a8c <__Stack_Size+0xe8368c>
     e5c:	1301053b 	movwne	r0, #5435	; 0x153b
     e60:	0d0b0000 	stceq	0, cr0, [fp]
     e64:	3a080300 	bcc	201a6c <__Stack_Size+0x20166c>
     e68:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e6c:	000a3813 	andeq	r3, sl, r3, lsl r8
     e70:	000d0c00 	andeq	r0, sp, r0, lsl #24
     e74:	0b3a0e03 	bleq	e84688 <__Stack_Size+0xe84288>
     e78:	1349053b 	movtne	r0, #38203	; 0x953b
     e7c:	00000a38 	andeq	r0, r0, r8, lsr sl
     e80:	0b01130d 	bleq	45abc <__Stack_Size+0x456bc>
     e84:	3b0b3a0b 	blcc	2cf6b8 <__Stack_Size+0x2cf2b8>
     e88:	0013010b 	andseq	r0, r3, fp, lsl #2
     e8c:	000d0e00 	andeq	r0, sp, r0, lsl #28
     e90:	0b3a0e03 	bleq	e846a4 <__Stack_Size+0xe842a4>
     e94:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e98:	00000a38 	andeq	r0, r0, r8, lsr sl
     e9c:	3f012e0f 	svccc	0x00012e0f
     ea0:	3a0e030c 	bcc	381ad8 <__Stack_Size+0x3816d8>
     ea4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     ea8:	2013490c 	andscs	r4, r3, ip, lsl #18
     eac:	0013010b 	andseq	r0, r3, fp, lsl #2
     eb0:	00051000 	andeq	r1, r5, r0
     eb4:	0b3a0e03 	bleq	e846c8 <__Stack_Size+0xe842c8>
     eb8:	1349053b 	movtne	r0, #38203	; 0x953b
     ebc:	34110000 	ldrcc	r0, [r1]
     ec0:	3a080300 	bcc	201ac8 <__Stack_Size+0x2016c8>
     ec4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ec8:	12000013 	andne	r0, r0, #19	; 0x13
     ecc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ed0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     ed4:	00001349 	andeq	r1, r0, r9, asr #6
     ed8:	3f002e13 	svccc	0x00002e13
     edc:	3a0e030c 	bcc	381b14 <__Stack_Size+0x381714>
     ee0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ee4:	1201110c 	andne	r1, r1, #3	; 0x3
     ee8:	000a4001 	andeq	r4, sl, r1
     eec:	012e1400 	teqeq	lr, r0, lsl #8
     ef0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     ef4:	0b3b0b3a 	bleq	ec3be4 <__Stack_Size+0xec37e4>
     ef8:	01110c27 	tsteq	r1, r7, lsr #24
     efc:	0a400112 	beq	100134c <__Stack_Size+0x1000f4c>
     f00:	00001301 	andeq	r1, r0, r1, lsl #6
     f04:	03000515 	movweq	r0, #1301	; 0x515
     f08:	3b0b3a0e 	blcc	2cf748 <__Stack_Size+0x2cf348>
     f0c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     f10:	1600000a 	strne	r0, [r0], -sl
     f14:	0c3f012e 	ldfeqs	f0, [pc], #-184
     f18:	0b3a0e03 	bleq	e8472c <__Stack_Size+0xe8432c>
     f1c:	0c270b3b 	stceq	11, cr0, [r7], #-236
     f20:	01111349 	tsteq	r1, r9, asr #6
     f24:	06400112 	undefined
     f28:	00001301 	andeq	r1, r0, r1, lsl #6
     f2c:	03003417 	movweq	r3, #1047	; 0x417
     f30:	3b0b3a0e 	blcc	2cf770 <__Stack_Size+0x2cf370>
     f34:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     f38:	18000006 	stmdane	r0, {r1, r2}
     f3c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f40:	0b3b0b3a 	bleq	ec3c30 <__Stack_Size+0xec3830>
     f44:	00001349 	andeq	r1, r0, r9, asr #6
     f48:	31011d19 	tstcc	r1, r9, lsl sp
     f4c:	55015213 	strpl	r5, [r1, #-531]
     f50:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     f54:	0013010b 	andseq	r0, r3, fp, lsl #2
     f58:	00051a00 	andeq	r1, r5, r0, lsl #20
     f5c:	00001331 	andeq	r1, r0, r1, lsr r3
     f60:	55010b1b 	strpl	r0, [r1, #-2843]
     f64:	1c000006 	stcne	0, cr0, [r0], {6}
     f68:	13310034 	teqne	r1, #52	; 0x34
     f6c:	341d0000 	ldrcc	r0, [sp]
     f70:	02133100 	andseq	r3, r3, #0	; 0x0
     f74:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
     f78:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     f7c:	01120111 	tsteq	r2, r1, lsl r1
     f80:	0b590b58 	bleq	1643ce8 <__Stack_Size+0x16438e8>
     f84:	0b1f0000 	bleq	7c0f8c <__Stack_Size+0x7c0b8c>
     f88:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     f8c:	20000001 	andcs	r0, r0, r1
     f90:	13310034 	teqne	r1, #52	; 0x34
     f94:	00000602 	andeq	r0, r0, r2, lsl #12
     f98:	03003421 	movweq	r3, #1057	; 0x421
     f9c:	3b0b3a0e 	blcc	2cf7dc <__Stack_Size+0x2cf3dc>
     fa0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     fa4:	2200000a 	andcs	r0, r0, #10	; 0xa
     fa8:	0c3f012e 	ldfeqs	f0, [pc], #-184
     fac:	0b3a0e03 	bleq	e847c0 <__Stack_Size+0xe843c0>
     fb0:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     fb4:	01120111 	tsteq	r2, r1, lsl r1
     fb8:	13010a40 	movwne	r0, #6720	; 0x1a40
     fbc:	05230000 	streq	r0, [r3]!
     fc0:	3a0e0300 	bcc	381bc8 <__Stack_Size+0x3817c8>
     fc4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     fc8:	000a0213 	andeq	r0, sl, r3, lsl r2
     fcc:	00052400 	andeq	r2, r5, r0, lsl #8
     fd0:	0b3a0e03 	bleq	e847e4 <__Stack_Size+0xe843e4>
     fd4:	1349053b 	movtne	r0, #38203	; 0x953b
     fd8:	00000602 	andeq	r0, r0, r2, lsl #12
     fdc:	03003425 	movweq	r3, #1061	; 0x425
     fe0:	3b0b3a0e 	blcc	2cf820 <__Stack_Size+0x2cf420>
     fe4:	02134905 	andseq	r4, r3, #81920	; 0x14000
     fe8:	26000006 	strcs	r0, [r0], -r6
     fec:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     ff0:	0b3a0e03 	bleq	e84804 <__Stack_Size+0xe84404>
     ff4:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     ff8:	01111349 	tsteq	r1, r9, asr #6
     ffc:	0a400112 	beq	100144c <__Stack_Size+0x100104c>
    1000:	34270000 	strtcc	r0, [r7]
    1004:	3a0e0300 	bcc	381c0c <__Stack_Size+0x38180c>
    1008:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    100c:	000a0213 	andeq	r0, sl, r3, lsl r2
    1010:	00342800 	eorseq	r2, r4, r0, lsl #16
    1014:	0b3a0803 	bleq	e83028 <__Stack_Size+0xe82c28>
    1018:	1349053b 	movtne	r0, #38203	; 0x953b
    101c:	00000602 	andeq	r0, r0, r2, lsl #12
    1020:	0b000f29 	bleq	4ccc <__Stack_Size+0x48cc>
    1024:	0013490b 	andseq	r4, r3, fp, lsl #18
    1028:	012e2a00 	teqeq	lr, r0, lsl #20
    102c:	01111331 	tsteq	r1, r1, lsr r3
    1030:	0a400112 	beq	1001480 <__Stack_Size+0x1001080>
    1034:	00001301 	andeq	r1, r0, r1, lsl #6
    1038:	3100052b 	tstcc	r0, fp, lsr #10
    103c:	00060213 	andeq	r0, r6, r3, lsl r2
    1040:	002e2c00 	eoreq	r2, lr, r0, lsl #24
    1044:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1048:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    104c:	01110c27 	tsteq	r1, r7, lsr #24
    1050:	0a400112 	beq	10014a0 <__Stack_Size+0x10010a0>
    1054:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
    1058:	030c3f01 	movweq	r3, #52993	; 0xcf01
    105c:	3b0b3a0e 	blcc	2cf89c <__Stack_Size+0x2cf49c>
    1060:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
    1064:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1068:	010a4001 	tsteq	sl, r1
    106c:	2e000013 	mcrcs	0, 0, r0, cr0, cr3, {0}
    1070:	13490101 	movtne	r0, #37121	; 0x9101
    1074:	00001301 	andeq	r1, r0, r1, lsl #6
    1078:	4900212f 	stmdbmi	r0, {r0, r1, r2, r3, r5, r8, sp}
    107c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1080:	00263000 	eoreq	r3, r6, r0
    1084:	00001349 	andeq	r1, r0, r9, asr #6
    1088:	01110100 	tsteq	r1, r0, lsl #2
    108c:	0b130e25 	bleq	4c4928 <__Stack_Size+0x4c4528>
    1090:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1094:	01120111 	tsteq	r2, r1, lsl r1
    1098:	00000610 	andeq	r0, r0, r0, lsl r6
    109c:	0b002402 	bleq	a0ac <__Stack_Size+0x9cac>
    10a0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    10a4:	0300000e 	movweq	r0, #14	; 0xe
    10a8:	08030016 	stmdaeq	r3, {r1, r2, r4}
    10ac:	0b3b0b3a 	bleq	ec3d9c <__Stack_Size+0xec399c>
    10b0:	00001349 	andeq	r1, r0, r9, asr #6
    10b4:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
    10b8:	05000013 	streq	r0, [r0, #-19]
    10bc:	13490026 	movtne	r0, #36902	; 0x9026
    10c0:	04060000 	streq	r0, [r6]
    10c4:	3a0b0b01 	bcc	2c3cd0 <__Stack_Size+0x2c38d0>
    10c8:	010b3b0b 	tsteq	fp, fp, lsl #22
    10cc:	07000013 	smladeq	r0, r3, r0, r0
    10d0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    10d4:	00000d1c 	andeq	r0, r0, ip, lsl sp
    10d8:	03002808 	movweq	r2, #2056	; 0x808
    10dc:	000d1c08 	andeq	r1, sp, r8, lsl #24
    10e0:	00160900 	andseq	r0, r6, r0, lsl #18
    10e4:	0b3a0e03 	bleq	e848f8 <__Stack_Size+0xe844f8>
    10e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    10ec:	240a0000 	strcs	r0, [sl]
    10f0:	3e0b0b00 	fmacdcc	d0, d11, d0
    10f4:	0b00000b 	bleq	1128 <__Stack_Size+0xd28>
    10f8:	0b0b0113 	bleq	2c154c <__Stack_Size+0x2c114c>
    10fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1100:	00001301 	andeq	r1, r0, r1, lsl #6
    1104:	03000d0c 	movweq	r0, #3340	; 0xd0c
    1108:	3b0b3a0e 	blcc	2cf948 <__Stack_Size+0x2cf548>
    110c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1110:	0d00000a 	stceq	0, cr0, [r0, #-40]
    1114:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1118:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    111c:	0a381349 	beq	e05e48 <__Stack_Size+0xe05a48>
    1120:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    1124:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1128:	3b0b3a0e 	blcc	2cf968 <__Stack_Size+0x2cf568>
    112c:	110c270b 	tstne	ip, fp, lsl #14
    1130:	40011201 	andmi	r1, r1, r1, lsl #4
    1134:	0013010a 	andseq	r0, r3, sl, lsl #2
    1138:	00050f00 	andeq	r0, r5, r0, lsl #30
    113c:	0b3a0e03 	bleq	e84950 <__Stack_Size+0xe84550>
    1140:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1144:	00000a02 	andeq	r0, r0, r2, lsl #20
    1148:	3f002e10 	svccc	0x00002e10
    114c:	3a0e030c 	bcc	381d84 <__Stack_Size+0x381984>
    1150:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1154:	1113490c 	tstne	r3, ip, lsl #18
    1158:	40011201 	andmi	r1, r1, r1, lsl #4
    115c:	1100000a 	tstne	r0, sl
    1160:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1164:	0b3a0e03 	bleq	e84978 <__Stack_Size+0xe84578>
    1168:	0c270b3b 	stceq	11, cr0, [r7], #-236
    116c:	01111349 	tsteq	r1, r9, asr #6
    1170:	0a400112 	beq	10015c0 <__Stack_Size+0x10011c0>
    1174:	05120000 	ldreq	r0, [r2]
    1178:	3a0e0300 	bcc	381d80 <__Stack_Size+0x381980>
    117c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1180:	00060213 	andeq	r0, r6, r3, lsl r2
    1184:	00341300 	eorseq	r1, r4, r0, lsl #6
    1188:	0b3a0e03 	bleq	e8499c <__Stack_Size+0xe8459c>
    118c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1190:	00000602 	andeq	r0, r0, r2, lsl #12
    1194:	03003414 	movweq	r3, #1044	; 0x414
    1198:	3b0b3a08 	blcc	2cf9c0 <__Stack_Size+0x2cf5c0>
    119c:	0013490b 	andseq	r4, r3, fp, lsl #18
    11a0:	00341500 	eorseq	r1, r4, r0, lsl #10
    11a4:	0b3a0e03 	bleq	e849b8 <__Stack_Size+0xe845b8>
    11a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    11ac:	01000000 	tsteq	r0, r0
    11b0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    11b4:	0e030b13 	vmoveq.32	d3[0], r0
    11b8:	01110e1b 	tsteq	r1, fp, lsl lr
    11bc:	06100112 	undefined
    11c0:	24020000 	strcs	r0, [r2]
    11c4:	3e0b0b00 	fmacdcc	d0, d11, d0
    11c8:	000e030b 	andeq	r0, lr, fp, lsl #6
    11cc:	00160300 	andseq	r0, r6, r0, lsl #6
    11d0:	0b3a0803 	bleq	e831e4 <__Stack_Size+0xe82de4>
    11d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    11d8:	35040000 	strcc	r0, [r4]
    11dc:	00134900 	andseq	r4, r3, r0, lsl #18
    11e0:	01040500 	tsteq	r4, r0, lsl #10
    11e4:	0b3a0b0b 	bleq	e83e18 <__Stack_Size+0xe83a18>
    11e8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    11ec:	28060000 	stmdacs	r6, {}
    11f0:	1c0e0300 	stcne	3, cr0, [lr], {0}
    11f4:	0700000d 	streq	r0, [r0, -sp]
    11f8:	08030028 	stmdaeq	r3, {r3, r5}
    11fc:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1200:	03001608 	movweq	r1, #1544	; 0x608
    1204:	3b0b3a0e 	blcc	2cfa44 <__Stack_Size+0x2cf644>
    1208:	0013490b 	andseq	r4, r3, fp, lsl #18
    120c:	00240900 	eoreq	r0, r4, r0, lsl #18
    1210:	0b3e0b0b 	bleq	f83e44 <__Stack_Size+0xf83a44>
    1214:	130a0000 	movwne	r0, #40960	; 0xa000
    1218:	3a0b0b01 	bcc	2c3e24 <__Stack_Size+0x2c3a24>
    121c:	01053b0b 	tsteq	r5, fp, lsl #22
    1220:	0b000013 	bleq	1274 <__Stack_Size+0xe74>
    1224:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1228:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    122c:	0a381349 	beq	e05f58 <__Stack_Size+0xe05b58>
    1230:	0d0c0000 	stceq	0, cr0, [ip]
    1234:	3a0e0300 	bcc	381e3c <__Stack_Size+0x381a3c>
    1238:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    123c:	000a3813 	andeq	r3, sl, r3, lsl r8
    1240:	00160d00 	andseq	r0, r6, r0, lsl #26
    1244:	0b3a0e03 	bleq	e84a58 <__Stack_Size+0xe84658>
    1248:	1349053b 	movtne	r0, #38203	; 0x953b
    124c:	130e0000 	movwne	r0, #57344	; 0xe000
    1250:	3a0b0b01 	bcc	2c3e5c <__Stack_Size+0x2c3a5c>
    1254:	010b3b0b 	tsteq	fp, fp, lsl #22
    1258:	0f000013 	svceq	0x00000013
    125c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1260:	0b3b0b3a 	bleq	ec3f50 <__Stack_Size+0xec3b50>
    1264:	0a381349 	beq	e05f90 <__Stack_Size+0xe05b90>
    1268:	2e100000 	wxorcs	wr0, wr0, wr0
    126c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1270:	3b0b3a0e 	blcc	2cfab0 <__Stack_Size+0x2cf6b0>
    1274:	200c2705 	andcs	r2, ip, r5, lsl #14
    1278:	0013010b 	andseq	r0, r3, fp, lsl #2
    127c:	00051100 	andeq	r1, r5, r0, lsl #2
    1280:	0b3a0e03 	bleq	e84a94 <__Stack_Size+0xe84694>
    1284:	1349053b 	movtne	r0, #38203	; 0x953b
    1288:	34120000 	ldrcc	r0, [r2]
    128c:	3a0e0300 	bcc	381e94 <__Stack_Size+0x381a94>
    1290:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1294:	13000013 	movwne	r0, #19	; 0x13
    1298:	0b0b000f 	bleq	2c12dc <__Stack_Size+0x2c0edc>
    129c:	00001349 	andeq	r1, r0, r9, asr #6
    12a0:	03012e14 	movweq	r2, #7700	; 0x1e14
    12a4:	3b0b3a0e 	blcc	2cfae4 <__Stack_Size+0x2cf6e4>
    12a8:	200c2705 	andcs	r2, ip, r5, lsl #14
    12ac:	0013010b 	andseq	r0, r3, fp, lsl #2
    12b0:	00341500 	eorseq	r1, r4, r0, lsl #10
    12b4:	0b3a0803 	bleq	e832c8 <__Stack_Size+0xe82ec8>
    12b8:	1349053b 	movtne	r0, #38203	; 0x953b
    12bc:	2e160000 	wxorcs	wr0, wr6, wr0
    12c0:	030c3f01 	movweq	r3, #52993	; 0xcf01
    12c4:	3b0b3a0e 	blcc	2cfb04 <__Stack_Size+0x2cf704>
    12c8:	110c270b 	tstne	ip, fp, lsl #14
    12cc:	40011201 	andmi	r1, r1, r1, lsl #4
    12d0:	00130106 	andseq	r0, r3, r6, lsl #2
    12d4:	00051700 	andeq	r1, r5, r0, lsl #14
    12d8:	0b3a0e03 	bleq	e84aec <__Stack_Size+0xe846ec>
    12dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    12e0:	00000602 	andeq	r0, r0, r2, lsl #12
    12e4:	03003418 	movweq	r3, #1048	; 0x418
    12e8:	3b0b3a0e 	blcc	2cfb28 <__Stack_Size+0x2cf728>
    12ec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    12f0:	19000006 	stmdbne	r0, {r1, r2}
    12f4:	0c3f012e 	ldfeqs	f0, [pc], #-184
    12f8:	0b3a0e03 	bleq	e84b0c <__Stack_Size+0xe8470c>
    12fc:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    1300:	01120111 	tsteq	r2, r1, lsl r1
    1304:	13010640 	movwne	r0, #5696	; 0x1640
    1308:	051a0000 	ldreq	r0, [sl]
    130c:	3a0e0300 	bcc	381f14 <__Stack_Size+0x381b14>
    1310:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1314:	00060213 	andeq	r0, r6, r3, lsl r2
    1318:	00341b00 	eorseq	r1, r4, r0, lsl #22
    131c:	0b3a0e03 	bleq	e84b30 <__Stack_Size+0xe84730>
    1320:	1349053b 	movtne	r0, #38203	; 0x953b
    1324:	00000602 	andeq	r0, r0, r2, lsl #12
    1328:	31011d1c 	tstcc	r1, ip, lsl sp
    132c:	58065513 	stmdapl	r6, {r0, r1, r4, r8, sl, ip, lr}
    1330:	0105590b 	tsteq	r5, fp, lsl #18
    1334:	1d000013 	stcne	0, cr0, [r0, #-76]
    1338:	13310005 	teqne	r1, #5	; 0x5
    133c:	0b1e0000 	bleq	781344 <__Stack_Size+0x780f44>
    1340:	00065501 	andeq	r5, r6, r1, lsl #10
    1344:	00341f00 	eorseq	r1, r4, r0, lsl #30
    1348:	06021331 	undefined
    134c:	1d200000 	stcne	0, cr0, [r0]
    1350:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1354:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    1358:	0105590b 	tsteq	r5, fp, lsl #18
    135c:	21000013 	tstcs	r0, r3, lsl r0
    1360:	13310034 	teqne	r1, #52	; 0x34
    1364:	1d220000 	stcne	0, cr0, [r2]
    1368:	11133101 	tstne	r3, r1, lsl #2
    136c:	58011201 	stmdapl	r1, {r0, r9, ip}
    1370:	0105590b 	tsteq	r5, fp, lsl #18
    1374:	23000013 	movwcs	r0, #19	; 0x13
    1378:	0111010b 	tsteq	r1, fp, lsl #2
    137c:	00000112 	andeq	r0, r0, r2, lsl r1
    1380:	31011d24 	tstcc	r1, r4, lsr #26
    1384:	55015213 	strpl	r5, [r1, #-531]
    1388:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    138c:	25000005 	strcs	r0, [r0, #-5]
    1390:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1394:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1398:	0a021349 	beq	860c4 <__Stack_Size+0x85cc4>
    139c:	34260000 	strtcc	r0, [r6]
    13a0:	3a0e0300 	bcc	381fa8 <__Stack_Size+0x381ba8>
    13a4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    13a8:	000a0213 	andeq	r0, sl, r3, lsl r2
    13ac:	00342700 	eorseq	r2, r4, r0, lsl #14
    13b0:	0a021331 	beq	8607c <__Stack_Size+0x85c7c>
    13b4:	1d280000 	stcne	0, cr0, [r8]
    13b8:	11133101 	tstne	r3, r1, lsl #2
    13bc:	58011201 	stmdapl	r1, {r0, r9, ip}
    13c0:	0005590b 	andeq	r5, r5, fp, lsl #18
    13c4:	012e2900 	teqeq	lr, r0, lsl #18
    13c8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    13cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    13d0:	01110c27 	tsteq	r1, r7, lsr #24
    13d4:	0a400112 	beq	1001824 <__Stack_Size+0x1001424>
    13d8:	00001301 	andeq	r1, r0, r1, lsl #6
    13dc:	31012e2a 	tstcc	r1, sl, lsr #28
    13e0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    13e4:	010a4001 	tsteq	sl, r1
    13e8:	2b000013 	blcs	143c <__Stack_Size+0x103c>
    13ec:	13310005 	teqne	r1, #5	; 0x5
    13f0:	00000a02 	andeq	r0, r0, r2, lsl #20
    13f4:	3100052c 	tstcc	r0, ip, lsr #10
    13f8:	00060213 	andeq	r0, r6, r3, lsl r2
    13fc:	012e2d00 	teqeq	lr, r0, lsl #26
    1400:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1404:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1408:	13490c27 	movtne	r0, #39975	; 0x9c27
    140c:	01120111 	tsteq	r2, r1, lsl r1
    1410:	13010a40 	movwne	r0, #6720	; 0x1a40
    1414:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
    1418:	030c3f01 	movweq	r3, #52993	; 0xcf01
    141c:	3b0b3a0e 	blcc	2cfc5c <__Stack_Size+0x2cf85c>
    1420:	110c270b 	tstne	ip, fp, lsl #14
    1424:	40011201 	andmi	r1, r1, r1, lsl #4
    1428:	00000006 	andeq	r0, r0, r6
    142c:	25011101 	strcs	r1, [r1, #-257]
    1430:	030b130e 	movweq	r1, #45838	; 0xb30e
    1434:	110e1b0e 	tstne	lr, lr, lsl #22
    1438:	10011201 	andne	r1, r1, r1, lsl #4
    143c:	02000006 	andeq	r0, r0, #6	; 0x6
    1440:	0b0b0024 	bleq	2c14d8 <__Stack_Size+0x2c10d8>
    1444:	0e030b3e 	vmoveq.16	d3[0], r0
    1448:	16030000 	strne	r0, [r3], -r0
    144c:	3a080300 	bcc	202054 <__Stack_Size+0x201c54>
    1450:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1454:	04000013 	streq	r0, [r0], #-19
    1458:	13490035 	movtne	r0, #36917	; 0x9035
    145c:	04050000 	streq	r0, [r5]
    1460:	3a0b0b01 	bcc	2c406c <__Stack_Size+0x2c3c6c>
    1464:	010b3b0b 	tsteq	fp, fp, lsl #22
    1468:	06000013 	undefined
    146c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1470:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1474:	03002807 	movweq	r2, #2055	; 0x807
    1478:	000d1c08 	andeq	r1, sp, r8, lsl #24
    147c:	00160800 	andseq	r0, r6, r0, lsl #16
    1480:	0b3a0e03 	bleq	e84c94 <__Stack_Size+0xe84894>
    1484:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1488:	24090000 	strcs	r0, [r9]
    148c:	3e0b0b00 	fmacdcc	d0, d11, d0
    1490:	0a00000b 	beq	14c4 <__Stack_Size+0x10c4>
    1494:	0b0b0113 	bleq	2c18e8 <__Stack_Size+0x2c14e8>
    1498:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    149c:	00001301 	andeq	r1, r0, r1, lsl #6
    14a0:	03000d0b 	movweq	r0, #3339	; 0xd0b
    14a4:	3b0b3a08 	blcc	2cfccc <__Stack_Size+0x2cf8cc>
    14a8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    14ac:	0c00000a 	stceq	0, cr0, [r0], {10}
    14b0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    14b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    14b8:	0a381349 	beq	e061e4 <__Stack_Size+0xe05de4>
    14bc:	160d0000 	strne	r0, [sp], -r0
    14c0:	3a0e0300 	bcc	3820c8 <__Stack_Size+0x381cc8>
    14c4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    14c8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    14cc:	0b0b0113 	bleq	2c1920 <__Stack_Size+0x2c1520>
    14d0:	0b3b0b3a 	bleq	ec41c0 <__Stack_Size+0xec3dc0>
    14d4:	00001301 	andeq	r1, r0, r1, lsl #6
    14d8:	03000d0f 	movweq	r0, #3343	; 0xd0f
    14dc:	3b0b3a0e 	blcc	2cfd1c <__Stack_Size+0x2cf91c>
    14e0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    14e4:	1000000a 	andne	r0, r0, sl
    14e8:	0c3f012e 	ldfeqs	f0, [pc], #-184
    14ec:	0b3a0e03 	bleq	e84d00 <__Stack_Size+0xe84900>
    14f0:	0c270b3b 	stceq	11, cr0, [r7], #-236
    14f4:	01120111 	tsteq	r2, r1, lsl r1
    14f8:	13010a40 	movwne	r0, #6720	; 0x1a40
    14fc:	05110000 	ldreq	r0, [r1]
    1500:	3a0e0300 	bcc	382108 <__Stack_Size+0x381d08>
    1504:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1508:	000a0213 	andeq	r0, sl, r3, lsl r2
    150c:	000f1200 	andeq	r1, pc, r0, lsl #4
    1510:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1514:	2e130000 	wxorcs	wr0, wr3, wr0
    1518:	030c3f01 	movweq	r3, #52993	; 0xcf01
    151c:	3b0b3a0e 	blcc	2cfd5c <__Stack_Size+0x2cf95c>
    1520:	110c2705 	tstne	ip, r5, lsl #14
    1524:	40011201 	andmi	r1, r1, r1, lsl #4
    1528:	0013010a 	andseq	r0, r3, sl, lsl #2
    152c:	00051400 	andeq	r1, r5, r0, lsl #8
    1530:	0b3a0e03 	bleq	e84d44 <__Stack_Size+0xe84944>
    1534:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1538:	00000602 	andeq	r0, r0, r2, lsl #12
    153c:	03003415 	movweq	r3, #1045	; 0x415
    1540:	3b0b3a0e 	blcc	2cfd80 <__Stack_Size+0x2cf980>
    1544:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1548:	1600000a 	strne	r0, [r0], -sl
    154c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1550:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1554:	0a021349 	beq	86280 <__Stack_Size+0x85e80>
    1558:	2e170000 	wxorcs	wr0, wr7, wr0
    155c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1560:	3b0b3a0e 	blcc	2cfda0 <__Stack_Size+0x2cf9a0>
    1564:	110c2705 	tstne	ip, r5, lsl #14
    1568:	40011201 	andmi	r1, r1, r1, lsl #4
    156c:	00130106 	andseq	r0, r3, r6, lsl #2
    1570:	00051800 	andeq	r1, r5, r0, lsl #16
    1574:	0b3a0e03 	bleq	e84d88 <__Stack_Size+0xe84988>
    1578:	1349053b 	movtne	r0, #38203	; 0x953b
    157c:	00000602 	andeq	r0, r0, r2, lsl #12
    1580:	03003419 	movweq	r3, #1049	; 0x419
    1584:	3b0b3a0e 	blcc	2cfdc4 <__Stack_Size+0x2cf9c4>
    1588:	00134905 	andseq	r4, r3, r5, lsl #18
    158c:	00341a00 	eorseq	r1, r4, r0, lsl #20
    1590:	0b3a0e03 	bleq	e84da4 <__Stack_Size+0xe849a4>
    1594:	1349053b 	movtne	r0, #38203	; 0x953b
    1598:	00000602 	andeq	r0, r0, r2, lsl #12
    159c:	3f012e1b 	svccc	0x00012e1b
    15a0:	3a0e030c 	bcc	3821d8 <__Stack_Size+0x381dd8>
    15a4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    15a8:	1113490c 	tstne	r3, ip, lsl #18
    15ac:	40011201 	andmi	r1, r1, r1, lsl #4
    15b0:	0013010a 	andseq	r0, r3, sl, lsl #2
    15b4:	012e1c00 	teqeq	lr, r0, lsl #24
    15b8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    15bc:	0b3b0b3a 	bleq	ec42ac <__Stack_Size+0xec3eac>
    15c0:	01110c27 	tsteq	r1, r7, lsr #24
    15c4:	06400112 	undefined
    15c8:	00001301 	andeq	r1, r0, r1, lsl #6
    15cc:	0300341d 	movweq	r3, #1053	; 0x41d
    15d0:	3b0b3a0e 	blcc	2cfe10 <__Stack_Size+0x2cfa10>
    15d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    15d8:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    15dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    15e0:	0b3b0b3a 	bleq	ec42d0 <__Stack_Size+0xec3ed0>
    15e4:	0a021349 	beq	86310 <__Stack_Size+0x85f10>
    15e8:	341f0000 	ldrcc	r0, [pc], #0	; 15f0 <__Stack_Size+0x11f0>
    15ec:	3a0e0300 	bcc	3821f4 <__Stack_Size+0x381df4>
    15f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15f4:	20000013 	andcs	r0, r0, r3, lsl r0
    15f8:	0c3f012e 	ldfeqs	f0, [pc], #-184
    15fc:	0b3a0e03 	bleq	e84e10 <__Stack_Size+0xe84a10>
    1600:	0c270b3b 	stceq	11, cr0, [r7], #-236
    1604:	01120111 	tsteq	r2, r1, lsl r1
    1608:	00000640 	andeq	r0, r0, r0, asr #12
    160c:	00110100 	andseq	r0, r1, r0, lsl #2
    1610:	01110610 	tsteq	r1, r0, lsl r6
    1614:	08030112 	stmdaeq	r3, {r1, r4, r8}
    1618:	0825081b 	stmdaeq	r5!, {r0, r1, r3, r4, fp}
    161c:	00000513 	andeq	r0, r0, r3, lsl r5
    1620:	01110100 	tsteq	r1, r0, lsl #2
    1624:	0b130e25 	bleq	4c4ec0 <__Stack_Size+0x4c4ac0>
    1628:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    162c:	01120111 	tsteq	r2, r1, lsl r1
    1630:	00000610 	andeq	r0, r0, r0, lsl r6
    1634:	0b002402 	bleq	a644 <__Stack_Size+0xa244>
    1638:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    163c:	0300000e 	movweq	r0, #14	; 0xe
    1640:	0b0b0024 	bleq	2c16d8 <__Stack_Size+0x2c12d8>
    1644:	00000b3e 	andeq	r0, r0, lr, lsr fp
    1648:	3f012e04 	svccc	0x00012e04
    164c:	3a0e030c 	bcc	382284 <__Stack_Size+0x381e84>
    1650:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1654:	1201110c 	andne	r1, r1, #3	; 0x3
    1658:	01064001 	tsteq	r6, r1
    165c:	05000013 	streq	r0, [r0, #-19]
    1660:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1664:	0b3b0b3a 	bleq	ec4354 <__Stack_Size+0xec3f54>
    1668:	00001349 	andeq	r1, r0, r9, asr #6
    166c:	03003406 	movweq	r3, #1030	; 0x406
    1670:	3b0b3a0e 	blcc	2cfeb0 <__Stack_Size+0x2cfab0>
    1674:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1678:	07000006 	streq	r0, [r0, -r6]
    167c:	0b0b000f 	bleq	2c16c0 <__Stack_Size+0x2c12c0>
    1680:	00001349 	andeq	r1, r0, r9, asr #6
    1684:	03003408 	movweq	r3, #1032	; 0x408
    1688:	3b0b3a0e 	blcc	2cfec8 <__Stack_Size+0x2cfac8>
    168c:	3f13490b 	svccc	0x0013490b
    1690:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1694:	00340900 	eorseq	r0, r4, r0, lsl #18
    1698:	0b3a0e03 	bleq	e84eac <__Stack_Size+0xe84aac>
    169c:	0c3f0b3b 	ldceq	11, cr0, [pc], #-236
    16a0:	00000c3c 	andeq	r0, r0, ip, lsr ip
    16a4:	4901010a 	stmdbmi	r1, {r1, r3, r8}
    16a8:	00130113 	andseq	r0, r3, r3, lsl r1
    16ac:	00210b00 	eoreq	r0, r1, r0, lsl #22
    16b0:	0b2f1349 	bleq	bc63dc <__Stack_Size+0xbc5fdc>
    16b4:	150c0000 	strne	r0, [ip]
    16b8:	000c2700 	andeq	r2, ip, r0, lsl #14
    16bc:	00340d00 	eorseq	r0, r4, r0, lsl #26
    16c0:	0b3a0e03 	bleq	e84ed4 <__Stack_Size+0xe84ad4>
    16c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    16c8:	0a020c3f 	beq	847cc <__Stack_Size+0x843cc>
    16cc:	260e0000 	strcs	r0, [lr], -r0
    16d0:	00134900 	andseq	r4, r3, r0, lsl #18
    16d4:	11010000 	tstne	r1, r0
    16d8:	130e2501 	movwne	r2, #58625	; 0xe501
    16dc:	1b0e030b 	blne	382310 <__Stack_Size+0x381f10>
    16e0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    16e4:	00061001 	andeq	r1, r6, r1
    16e8:	00240200 	eoreq	r0, r4, r0, lsl #4
    16ec:	0b3e0b0b 	bleq	f84320 <__Stack_Size+0xf83f20>
    16f0:	00000e03 	andeq	r0, r0, r3, lsl #28
    16f4:	0b002403 	bleq	a708 <__Stack_Size+0xa308>
    16f8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    16fc:	04000008 	streq	r0, [r0], #-8
    1700:	0b0b0024 	bleq	2c1798 <__Stack_Size+0x2c1398>
    1704:	00000b3e 	andeq	r0, r0, lr, lsr fp
    1708:	27001505 	strcs	r1, [r0, -r5, lsl #10]
    170c:	0600000c 	streq	r0, [r0], -ip
    1710:	0b0b000f 	bleq	2c1754 <__Stack_Size+0x2c1354>
    1714:	00001349 	andeq	r1, r0, r9, asr #6
    1718:	03010407 	movweq	r0, #5127	; 0x1407
    171c:	3a0b0b0e 	bcc	2c435c <__Stack_Size+0x2c3f5c>
    1720:	010b3b0b 	tsteq	fp, fp, lsl #22
    1724:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1728:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    172c:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1730:	3f012e09 	svccc	0x00012e09
    1734:	3a0e030c 	bcc	38236c <__Stack_Size+0x381f6c>
    1738:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    173c:	1113490c 	tstne	r3, ip, lsl #18
    1740:	40011201 	andmi	r1, r1, r1, lsl #4
    1744:	0a000006 	beq	1764 <__Stack_Size+0x1364>
    1748:	08030005 	stmdaeq	r3, {r0, r2}
    174c:	0b3b0b3a 	bleq	ec443c <__Stack_Size+0xec403c>
    1750:	06021349 	streq	r1, [r2], -r9, asr #6
    1754:	01000000 	tsteq	r0, r0
    1758:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    175c:	0e030b13 	vmoveq.32	d3[0], r0
    1760:	01110e1b 	tsteq	r1, fp, lsl lr
    1764:	06100112 	undefined
    1768:	24020000 	strcs	r0, [r2]
    176c:	3e0b0b00 	fmacdcc	d0, d11, d0
    1770:	000e030b 	andeq	r0, lr, fp, lsl #6
    1774:	00240300 	eoreq	r0, r4, r0, lsl #6
    1778:	0b3e0b0b 	bleq	f843ac <__Stack_Size+0xf83fac>
    177c:	00000803 	andeq	r0, r0, r3, lsl #16
    1780:	03001604 	movweq	r1, #1540	; 0x604
    1784:	3b0b3a0e 	blcc	2cffc4 <__Stack_Size+0x2cfbc4>
    1788:	0013490b 	andseq	r4, r3, fp, lsl #18
    178c:	00160500 	andseq	r0, r6, r0, lsl #10
    1790:	0b3a0e03 	bleq	e84fa4 <__Stack_Size+0xe84ba4>
    1794:	1349053b 	movtne	r0, #38203	; 0x953b
    1798:	17060000 	strne	r0, [r6, -r0]
    179c:	3a0b0b01 	bcc	2c43a8 <__Stack_Size+0x2c3fa8>
    17a0:	010b3b0b 	tsteq	fp, fp, lsl #22
    17a4:	07000013 	smladeq	r0, r3, r0, r0
    17a8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    17ac:	0b3b0b3a 	bleq	ec449c <__Stack_Size+0xec409c>
    17b0:	00001349 	andeq	r1, r0, r9, asr #6
    17b4:	49010108 	stmdbmi	r1, {r3, r8}
    17b8:	00130113 	andseq	r0, r3, r3, lsl r1
    17bc:	00210900 	eoreq	r0, r1, r0, lsl #18
    17c0:	0b2f1349 	bleq	bc64ec <__Stack_Size+0xbc60ec>
    17c4:	240a0000 	strcs	r0, [sl]
    17c8:	3e0b0b00 	fmacdcc	d0, d11, d0
    17cc:	0b00000b 	bleq	1800 <__Stack_Size+0x1400>
    17d0:	0b0b0113 	bleq	2c1c24 <__Stack_Size+0x2c1824>
    17d4:	0b3b0b3a 	bleq	ec44c4 <__Stack_Size+0xec40c4>
    17d8:	00001301 	andeq	r1, r0, r1, lsl #6
    17dc:	03000d0c 	movweq	r0, #3340	; 0xd0c
    17e0:	3b0b3a0e 	blcc	2d0020 <__Stack_Size+0x2cfc20>
    17e4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    17e8:	0d00000a 	stceq	0, cr0, [r0, #-40]
    17ec:	0b0b000f 	bleq	2c1830 <__Stack_Size+0x2c1430>
    17f0:	130e0000 	movwne	r0, #57344	; 0xe000
    17f4:	0b0e0301 	bleq	382400 <__Stack_Size+0x382000>
    17f8:	3b0b3a0b 	blcc	2d002c <__Stack_Size+0x2cfc2c>
    17fc:	0013010b 	andseq	r0, r3, fp, lsl #2
    1800:	000d0f00 	andeq	r0, sp, r0, lsl #30
    1804:	0b3a0803 	bleq	e83818 <__Stack_Size+0xe83418>
    1808:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    180c:	00000a38 	andeq	r0, r0, r8, lsr sl
    1810:	0b000f10 	bleq	5458 <__Stack_Size+0x5058>
    1814:	0013490b 	andseq	r4, r3, fp, lsl #18
    1818:	01131100 	tsteq	r3, r0, lsl #2
    181c:	050b0e03 	streq	r0, [fp, #-3587]
    1820:	0b3b0b3a 	bleq	ec4510 <__Stack_Size+0xec4110>
    1824:	00001301 	andeq	r1, r0, r1, lsl #6
    1828:	27001512 	smladcs	r0, r2, r5, r1
    182c:	1300000c 	movwne	r0, #12	; 0xc
    1830:	0c270115 	stfeqs	f0, [r7], #-84
    1834:	13011349 	movwne	r1, #4937	; 0x1349
    1838:	05140000 	ldreq	r0, [r4]
    183c:	00134900 	andseq	r4, r3, r0, lsl #18
    1840:	000d1500 	andeq	r1, sp, r0, lsl #10
    1844:	0b3a0e03 	bleq	e85058 <__Stack_Size+0xe84c58>
    1848:	1349053b 	movtne	r0, #38203	; 0x953b
    184c:	00000a38 	andeq	r0, r0, r8, lsr sl
    1850:	49002616 	stmdbmi	r0, {r1, r2, r4, r9, sl, sp}
    1854:	17000013 	smladne	r0, r3, r0, r0
    1858:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    185c:	0b3a0b0b 	bleq	e84490 <__Stack_Size+0xe84090>
    1860:	1301053b 	movwne	r0, #5435	; 0x153b
    1864:	13180000 	tstne	r8, #0	; 0x0
    1868:	3a0b0b01 	bcc	2c4474 <__Stack_Size+0x2c4074>
    186c:	01053b0b 	tsteq	r5, fp, lsl #22
    1870:	19000013 	stmdbne	r0, {r0, r1, r4}
    1874:	0b0b0117 	bleq	2c1cd8 <__Stack_Size+0x2c18d8>
    1878:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    187c:	00001301 	andeq	r1, r0, r1, lsl #6
    1880:	03000d1a 	movweq	r0, #3354	; 0xd1a
    1884:	3b0b3a0e 	blcc	2d00c4 <__Stack_Size+0x2cfcc4>
    1888:	00134905 	andseq	r4, r3, r5, lsl #18
    188c:	01151b00 	tsteq	r5, r0, lsl #22
    1890:	13010c27 	movwne	r0, #7207	; 0x1c27
    1894:	2e1c0000 	wxorcs	wr0, wr12, wr0
    1898:	030c3f01 	movweq	r3, #52993	; 0xcf01
    189c:	3b0b3a0e 	blcc	2d00dc <__Stack_Size+0x2cfcdc>
    18a0:	110c270b 	tstne	ip, fp, lsl #14
    18a4:	40011201 	andmi	r1, r1, r1, lsl #4
    18a8:	0013010a 	andseq	r0, r3, sl, lsl #2
    18ac:	00051d00 	andeq	r1, r5, r0, lsl #26
    18b0:	0b3a0e03 	bleq	e850c4 <__Stack_Size+0xe84cc4>
    18b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    18b8:	00000602 	andeq	r0, r0, r2, lsl #12
    18bc:	0300341e 	movweq	r3, #1054	; 0x41e
    18c0:	3b0b3a0e 	blcc	2d0100 <__Stack_Size+0x2cfd00>
    18c4:	3f134905 	svccc	0x00134905
    18c8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    18cc:	11010000 	tstne	r1, r0
    18d0:	130e2501 	movwne	r2, #58625	; 0xe501
    18d4:	1b0e030b 	blne	382508 <__Stack_Size+0x382108>
    18d8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    18dc:	00061001 	andeq	r1, r6, r1
    18e0:	00240200 	eoreq	r0, r4, r0, lsl #4
    18e4:	0b3e0b0b 	bleq	f84518 <__Stack_Size+0xf84118>
    18e8:	00000e03 	andeq	r0, r0, r3, lsl #28
    18ec:	0b002403 	bleq	a900 <__Stack_Size+0xa500>
    18f0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    18f4:	04000008 	streq	r0, [r0], #-8
    18f8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    18fc:	0b3b0b3a 	bleq	ec45ec <__Stack_Size+0xec41ec>
    1900:	00001349 	andeq	r1, r0, r9, asr #6
    1904:	03001605 	movweq	r1, #1541	; 0x605
    1908:	3b0b3a0e 	blcc	2d0148 <__Stack_Size+0x2cfd48>
    190c:	00134905 	andseq	r4, r3, r5, lsl #18
    1910:	01170600 	tsteq	r7, r0, lsl #12
    1914:	0b3a0b0b 	bleq	e84548 <__Stack_Size+0xe84148>
    1918:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    191c:	0d070000 	stceq	0, cr0, [r7]
    1920:	3a0e0300 	bcc	382528 <__Stack_Size+0x382128>
    1924:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1928:	08000013 	stmdaeq	r0, {r0, r1, r4}
    192c:	13490101 	movtne	r0, #37121	; 0x9101
    1930:	00001301 	andeq	r1, r0, r1, lsl #6
    1934:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
    1938:	000b2f13 	andeq	r2, fp, r3, lsl pc
    193c:	00240a00 	eoreq	r0, r4, r0, lsl #20
    1940:	0b3e0b0b 	bleq	f84574 <__Stack_Size+0xf84174>
    1944:	130b0000 	movwne	r0, #45056	; 0xb000
    1948:	3a0b0b01 	bcc	2c4554 <__Stack_Size+0x2c4154>
    194c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1950:	0c000013 	stceq	0, cr0, [r0], {19}
    1954:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1958:	0b3b0b3a 	bleq	ec4648 <__Stack_Size+0xec4248>
    195c:	0a381349 	beq	e06688 <__Stack_Size+0xe06288>
    1960:	0f0d0000 	svceq	0x000d0000
    1964:	000b0b00 	andeq	r0, fp, r0, lsl #22
    1968:	01130e00 	tsteq	r3, r0, lsl #28
    196c:	0b0b0e03 	bleq	2c5180 <__Stack_Size+0x2c4d80>
    1970:	0b3b0b3a 	bleq	ec4660 <__Stack_Size+0xec4260>
    1974:	00001301 	andeq	r1, r0, r1, lsl #6
    1978:	03000d0f 	movweq	r0, #3343	; 0xd0f
    197c:	3b0b3a08 	blcc	2d01a4 <__Stack_Size+0x2cfda4>
    1980:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1984:	1000000a 	andne	r0, r0, sl
    1988:	0b0b000f 	bleq	2c19cc <__Stack_Size+0x2c15cc>
    198c:	00001349 	andeq	r1, r0, r9, asr #6
    1990:	03011311 	movweq	r1, #4881	; 0x1311
    1994:	3a050b0e 	bcc	1445d4 <__Stack_Size+0x1441d4>
    1998:	010b3b0b 	tsteq	fp, fp, lsl #22
    199c:	12000013 	andne	r0, r0, #19	; 0x13
    19a0:	0c270015 	stceq	0, cr0, [r7], #-84
    19a4:	15130000 	ldrne	r0, [r3]
    19a8:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
    19ac:	00130113 	andseq	r0, r3, r3, lsl r1
    19b0:	00051400 	andeq	r1, r5, r0, lsl #8
    19b4:	00001349 	andeq	r1, r0, r9, asr #6
    19b8:	03000d15 	movweq	r0, #3349	; 0xd15
    19bc:	3b0b3a0e 	blcc	2d01fc <__Stack_Size+0x2cfdfc>
    19c0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    19c4:	1600000a 	strne	r0, [r0], -sl
    19c8:	13490026 	movtne	r0, #36902	; 0x9026
    19cc:	13170000 	tstne	r7, #0	; 0x0
    19d0:	0b0e0301 	bleq	3825dc <__Stack_Size+0x3821dc>
    19d4:	3b0b3a0b 	blcc	2d0208 <__Stack_Size+0x2cfe08>
    19d8:	00130105 	andseq	r0, r3, r5, lsl #2
    19dc:	01131800 	tsteq	r3, r0, lsl #16
    19e0:	0b3a0b0b 	bleq	e84614 <__Stack_Size+0xe84214>
    19e4:	1301053b 	movwne	r0, #5435	; 0x153b
    19e8:	17190000 	ldrne	r0, [r9, -r0]
    19ec:	3a0b0b01 	bcc	2c45f8 <__Stack_Size+0x2c41f8>
    19f0:	01053b0b 	tsteq	r5, fp, lsl #22
    19f4:	1a000013 	bne	1a48 <__Stack_Size+0x1648>
    19f8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    19fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1a00:	00001349 	andeq	r1, r0, r9, asr #6
    1a04:	2701151b 	smladcs	r1, fp, r5, r1
    1a08:	0013010c 	andseq	r0, r3, ip, lsl #2
    1a0c:	00341c00 	eorseq	r1, r4, r0, lsl #24
    1a10:	0b3a0e03 	bleq	e85224 <__Stack_Size+0xe84e24>
    1a14:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1a18:	00000a02 	andeq	r0, r0, r2, lsl #20
    1a1c:	0300341d 	movweq	r3, #1053	; 0x41d
    1a20:	3b0b3a0e 	blcc	2d0260 <__Stack_Size+0x2cfe60>
    1a24:	3f13490b 	svccc	0x0013490b
    1a28:	000a020c 	andeq	r0, sl, ip, lsl #4
    1a2c:	11010000 	tstne	r1, r0
    1a30:	130e2501 	movwne	r2, #58625	; 0xe501
    1a34:	1b0e030b 	blne	382668 <__Stack_Size+0x382268>
    1a38:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1a3c:	00061001 	andeq	r1, r6, r1
    1a40:	00240200 	eoreq	r0, r4, r0, lsl #4
    1a44:	0b3e0b0b 	bleq	f84678 <__Stack_Size+0xf84278>
    1a48:	00000e03 	andeq	r0, r0, r3, lsl #28
    1a4c:	0b002403 	bleq	aa60 <__Stack_Size+0xa660>
    1a50:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1a54:	04000008 	streq	r0, [r0], #-8
    1a58:	0b0b0024 	bleq	2c1af0 <__Stack_Size+0x2c16f0>
    1a5c:	00000b3e 	andeq	r0, r0, lr, lsr fp
    1a60:	03001605 	movweq	r1, #1541	; 0x605
    1a64:	3b0b3a0e 	blcc	2d02a4 <__Stack_Size+0x2cfea4>
    1a68:	0013490b 	andseq	r4, r3, fp, lsl #18
    1a6c:	012e0600 	teqeq	lr, r0, lsl #12
    1a70:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1a74:	0b3b0b3a 	bleq	ec4764 <__Stack_Size+0xec4364>
    1a78:	01110c27 	tsteq	r1, r7, lsr #24
    1a7c:	06400112 	undefined
    1a80:	00001301 	andeq	r1, r0, r1, lsl #6
    1a84:	03003407 	movweq	r3, #1031	; 0x407
    1a88:	3b0b3a0e 	blcc	2d02c8 <__Stack_Size+0x2cfec8>
    1a8c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1a90:	0800000a 	stmdaeq	r0, {r1, r3}
    1a94:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1a98:	0b3b0b3a 	bleq	ec4788 <__Stack_Size+0xec4388>
    1a9c:	0a021349 	beq	867c8 <__Stack_Size+0x863c8>
    1aa0:	01090000 	tsteq	r9, r0
    1aa4:	01134901 	tsteq	r3, r1, lsl #18
    1aa8:	0a000013 	beq	1afc <__Stack_Size+0x16fc>
    1aac:	00000021 	andeq	r0, r0, r1, lsr #32
    1ab0:	2700150b 	strcs	r1, [r0, -fp, lsl #10]
    1ab4:	0c00000c 	stceq	0, cr0, [r0], {12}
    1ab8:	0b0b000f 	bleq	2c1afc <__Stack_Size+0x2c16fc>
    1abc:	00001349 	andeq	r1, r0, r9, asr #6
    1ac0:	0300340d 	movweq	r3, #1037	; 0x40d
    1ac4:	3b0b3a0e 	blcc	2d0304 <__Stack_Size+0x2cff04>
    1ac8:	3f13490b 	svccc	0x0013490b
    1acc:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1ad0:	11010000 	tstne	r1, r0
    1ad4:	130e2501 	movwne	r2, #58625	; 0xe501
    1ad8:	1b0e030b 	blne	38270c <__Stack_Size+0x38230c>
    1adc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1ae0:	00061001 	andeq	r1, r6, r1
    1ae4:	00240200 	eoreq	r0, r4, r0, lsl #4
    1ae8:	0b3e0b0b 	bleq	f8471c <__Stack_Size+0xf8431c>
    1aec:	00000e03 	andeq	r0, r0, r3, lsl #28
    1af0:	0b002403 	bleq	ab04 <__Stack_Size+0xa704>
    1af4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1af8:	04000008 	streq	r0, [r0], #-8
    1afc:	0b0b0024 	bleq	2c1b94 <__Stack_Size+0x2c1794>
    1b00:	00000b3e 	andeq	r0, r0, lr, lsr fp
    1b04:	0b000f05 	bleq	5720 <__Stack_Size+0x5320>
    1b08:	0600000b 	streq	r0, [r0], -fp
    1b0c:	0b0b000f 	bleq	2c1b50 <__Stack_Size+0x2c1750>
    1b10:	00001349 	andeq	r1, r0, r9, asr #6
    1b14:	03001607 	movweq	r1, #1543	; 0x607
    1b18:	3b0b3a0e 	blcc	2d0358 <__Stack_Size+0x2cff58>
    1b1c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1b20:	012e0800 	teqeq	lr, r0, lsl #16
    1b24:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1b28:	0b3b0b3a 	bleq	ec4818 <__Stack_Size+0xec4418>
    1b2c:	13490c27 	movtne	r0, #39975	; 0x9c27
    1b30:	01120111 	tsteq	r2, r1, lsl r1
    1b34:	13010640 	movwne	r0, #5696	; 0x1640
    1b38:	05090000 	streq	r0, [r9]
    1b3c:	3a080300 	bcc	202744 <__Stack_Size+0x202344>
    1b40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b44:	00060213 	andeq	r0, r6, r3, lsl r2
    1b48:	00340a00 	eorseq	r0, r4, r0, lsl #20
    1b4c:	0b3a0803 	bleq	e83b60 <__Stack_Size+0xe83760>
    1b50:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1b54:	00000602 	andeq	r0, r0, r2, lsl #12
    1b58:	0300340b 	movweq	r3, #1035	; 0x40b
    1b5c:	3b0b3a08 	blcc	2d0384 <__Stack_Size+0x2cff84>
    1b60:	0013490b 	andseq	r4, r3, fp, lsl #18
    1b64:	00340c00 	eorseq	r0, r4, r0, lsl #24
    1b68:	0b3a0e03 	bleq	e8537c <__Stack_Size+0xe84f7c>
    1b6c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1b70:	00000602 	andeq	r0, r0, r2, lsl #12
    1b74:	0300340d 	movweq	r3, #1037	; 0x40d
    1b78:	3b0b3a08 	blcc	2d03a0 <__Stack_Size+0x2cffa0>
    1b7c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1b80:	0000000a 	andeq	r0, r0, sl
    1b84:	25011101 	strcs	r1, [r1, #-257]
    1b88:	030b130e 	movweq	r1, #45838	; 0xb30e
    1b8c:	110e1b0e 	tstne	lr, lr, lsl #22
    1b90:	10011201 	andne	r1, r1, r1, lsl #4
    1b94:	02000006 	andeq	r0, r0, #6	; 0x6
    1b98:	0b0b0024 	bleq	2c1c30 <__Stack_Size+0x2c1830>
    1b9c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1ba0:	24030000 	strcs	r0, [r3]
    1ba4:	3e0b0b00 	fmacdcc	d0, d11, d0
    1ba8:	000e030b 	andeq	r0, lr, fp, lsl #6
    1bac:	00160400 	andseq	r0, r6, r0, lsl #8
    1bb0:	0b3a0e03 	bleq	e853c4 <__Stack_Size+0xe84fc4>
    1bb4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1bb8:	16050000 	strne	r0, [r5], -r0
    1bbc:	3a0e0300 	bcc	3827c4 <__Stack_Size+0x3823c4>
    1bc0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1bc4:	06000013 	undefined
    1bc8:	0b0b0117 	bleq	2c202c <__Stack_Size+0x2c1c2c>
    1bcc:	0b3b0b3a 	bleq	ec48bc <__Stack_Size+0xec44bc>
    1bd0:	00001301 	andeq	r1, r0, r1, lsl #6
    1bd4:	03000d07 	movweq	r0, #3335	; 0xd07
    1bd8:	3b0b3a0e 	blcc	2d0418 <__Stack_Size+0x2d0018>
    1bdc:	0013490b 	andseq	r4, r3, fp, lsl #18
    1be0:	01010800 	tsteq	r1, r0, lsl #16
    1be4:	13011349 	movwne	r1, #4937	; 0x1349
    1be8:	21090000 	tstcs	r9, r0
    1bec:	2f134900 	svccs	0x00134900
    1bf0:	0a00000b 	beq	1c24 <__Stack_Size+0x1824>
    1bf4:	0b0b0024 	bleq	2c1c8c <__Stack_Size+0x2c188c>
    1bf8:	00000b3e 	andeq	r0, r0, lr, lsr fp
    1bfc:	0b01130b 	bleq	46830 <__Stack_Size+0x46430>
    1c00:	3b0b3a0b 	blcc	2d0434 <__Stack_Size+0x2d0034>
    1c04:	0013010b 	andseq	r0, r3, fp, lsl #2
    1c08:	000d0c00 	andeq	r0, sp, r0, lsl #24
    1c0c:	0b3a0e03 	bleq	e85420 <__Stack_Size+0xe85020>
    1c10:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1c14:	00000a38 	andeq	r0, r0, r8, lsr sl
    1c18:	0b000f0d 	bleq	5854 <__Stack_Size+0x5454>
    1c1c:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    1c20:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1c24:	0b3a0b0b 	bleq	e84858 <__Stack_Size+0xe84458>
    1c28:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1c2c:	0d0f0000 	stceq	0, cr0, [pc]
    1c30:	3a080300 	bcc	202838 <__Stack_Size+0x202438>
    1c34:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c38:	000a3813 	andeq	r3, sl, r3, lsl r8
    1c3c:	000f1000 	andeq	r1, pc, r0
    1c40:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1c44:	13110000 	tstne	r1, #0	; 0x0
    1c48:	0b0e0301 	bleq	382854 <__Stack_Size+0x382454>
    1c4c:	3b0b3a05 	blcc	2d0468 <__Stack_Size+0x2d0068>
    1c50:	0013010b 	andseq	r0, r3, fp, lsl #2
    1c54:	00151200 	andseq	r1, r5, r0, lsl #4
    1c58:	00000c27 	andeq	r0, r0, r7, lsr #24
    1c5c:	27011513 	smladcs	r1, r3, r5, r1
    1c60:	0113490c 	tsteq	r3, ip, lsl #18
    1c64:	14000013 	strne	r0, [r0], #-19
    1c68:	13490005 	movtne	r0, #36869	; 0x9005
    1c6c:	0d150000 	ldceq	0, cr0, [r5]
    1c70:	3a0e0300 	bcc	382878 <__Stack_Size+0x382478>
    1c74:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c78:	000a3813 	andeq	r3, sl, r3, lsl r8
    1c7c:	00261600 	eoreq	r1, r6, r0, lsl #12
    1c80:	00001349 	andeq	r1, r0, r9, asr #6
    1c84:	03011317 	movweq	r1, #4887	; 0x1317
    1c88:	3a0b0b0e 	bcc	2c48c8 <__Stack_Size+0x2c44c8>
    1c8c:	01053b0b 	tsteq	r5, fp, lsl #22
    1c90:	18000013 	stmdane	r0, {r0, r1, r4}
    1c94:	0b0b0113 	bleq	2c20e8 <__Stack_Size+0x2c1ce8>
    1c98:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1c9c:	00001301 	andeq	r1, r0, r1, lsl #6
    1ca0:	0b011719 	bleq	4790c <__Stack_Size+0x4750c>
    1ca4:	3b0b3a0b 	blcc	2d04d8 <__Stack_Size+0x2d00d8>
    1ca8:	00130105 	andseq	r0, r3, r5, lsl #2
    1cac:	000d1a00 	andeq	r1, sp, r0, lsl #20
    1cb0:	0b3a0e03 	bleq	e854c4 <__Stack_Size+0xe850c4>
    1cb4:	1349053b 	movtne	r0, #38203	; 0x953b
    1cb8:	151b0000 	ldrne	r0, [fp]
    1cbc:	010c2701 	tsteq	ip, r1, lsl #14
    1cc0:	1c000013 	stcne	0, cr0, [r0], {19}
    1cc4:	0e030104 	adfeqs	f0, f3, f4
    1cc8:	0b3a0b0b 	bleq	e848fc <__Stack_Size+0xe844fc>
    1ccc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1cd0:	281d0000 	ldmdacs	sp, {}
    1cd4:	1c0e0300 	stcne	3, cr0, [lr], {0}
    1cd8:	1e00000d 	cdpne	0, 0, cr0, cr0, cr13, {0}
    1cdc:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1ce0:	0b3a0e03 	bleq	e854f4 <__Stack_Size+0xe850f4>
    1ce4:	0c270b3b 	stceq	11, cr0, [r7], #-236
    1ce8:	01111349 	tsteq	r1, r9, asr #6
    1cec:	06400112 	undefined
    1cf0:	00001301 	andeq	r1, r0, r1, lsl #6
    1cf4:	0300051f 	movweq	r0, #1311	; 0x51f
    1cf8:	3b0b3a0e 	blcc	2d0538 <__Stack_Size+0x2d0138>
    1cfc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1d00:	20000006 	andcs	r0, r0, r6
    1d04:	08030005 	stmdaeq	r3, {r0, r2}
    1d08:	0b3b0b3a 	bleq	ec49f8 <__Stack_Size+0xec45f8>
    1d0c:	06021349 	streq	r1, [r2], -r9, asr #6
    1d10:	34210000 	strtcc	r0, [r1]
    1d14:	3a0e0300 	bcc	38291c <__Stack_Size+0x38251c>
    1d18:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d1c:	22000013 	andcs	r0, r0, #19	; 0x13
    1d20:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1d24:	0b3b0b3a 	bleq	ec4a14 <__Stack_Size+0xec4614>
    1d28:	0a021349 	beq	86a54 <__Stack_Size+0x86654>
    1d2c:	34230000 	strtcc	r0, [r3]
    1d30:	3a0e0300 	bcc	382938 <__Stack_Size+0x382538>
    1d34:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d38:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1d3c:	0000000c 	andeq	r0, r0, ip
    1d40:	25011101 	strcs	r1, [r1, #-257]
    1d44:	030b130e 	movweq	r1, #45838	; 0xb30e
    1d48:	110e1b0e 	tstne	lr, lr, lsl #22
    1d4c:	10011201 	andne	r1, r1, r1, lsl #4
    1d50:	02000006 	andeq	r0, r0, #6	; 0x6
    1d54:	0b0b0024 	bleq	2c1dec <__Stack_Size+0x2c19ec>
    1d58:	0e030b3e 	vmoveq.16	d3[0], r0
    1d5c:	24030000 	strcs	r0, [r3]
    1d60:	3e0b0b00 	fmacdcc	d0, d11, d0
    1d64:	0008030b 	andeq	r0, r8, fp, lsl #6
    1d68:	00160400 	andseq	r0, r6, r0, lsl #8
    1d6c:	0b3a0e03 	bleq	e85580 <__Stack_Size+0xe85180>
    1d70:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1d74:	16050000 	strne	r0, [r5], -r0
    1d78:	3a0e0300 	bcc	382980 <__Stack_Size+0x382580>
    1d7c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d80:	06000013 	undefined
    1d84:	0b0b0117 	bleq	2c21e8 <__Stack_Size+0x2c1de8>
    1d88:	0b3b0b3a 	bleq	ec4a78 <__Stack_Size+0xec4678>
    1d8c:	00001301 	andeq	r1, r0, r1, lsl #6
    1d90:	03000d07 	movweq	r0, #3335	; 0xd07
    1d94:	3b0b3a0e 	blcc	2d05d4 <__Stack_Size+0x2d01d4>
    1d98:	0013490b 	andseq	r4, r3, fp, lsl #18
    1d9c:	01010800 	tsteq	r1, r0, lsl #16
    1da0:	13011349 	movwne	r1, #4937	; 0x1349
    1da4:	21090000 	tstcs	r9, r0
    1da8:	2f134900 	svccs	0x00134900
    1dac:	0a00000b 	beq	1de0 <__Stack_Size+0x19e0>
    1db0:	0b0b0024 	bleq	2c1e48 <__Stack_Size+0x2c1a48>
    1db4:	00000b3e 	andeq	r0, r0, lr, lsr fp
    1db8:	0b01130b 	bleq	469ec <__Stack_Size+0x465ec>
    1dbc:	3b0b3a0b 	blcc	2d05f0 <__Stack_Size+0x2d01f0>
    1dc0:	0013010b 	andseq	r0, r3, fp, lsl #2
    1dc4:	000d0c00 	andeq	r0, sp, r0, lsl #24
    1dc8:	0b3a0e03 	bleq	e855dc <__Stack_Size+0xe851dc>
    1dcc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1dd0:	00000a38 	andeq	r0, r0, r8, lsr sl
    1dd4:	0b000f0d 	bleq	5a10 <__Stack_Size+0x5610>
    1dd8:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    1ddc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1de0:	0b3a0b0b 	bleq	e84a14 <__Stack_Size+0xe84614>
    1de4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1de8:	0d0f0000 	stceq	0, cr0, [pc]
    1dec:	3a080300 	bcc	2029f4 <__Stack_Size+0x2025f4>
    1df0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1df4:	000a3813 	andeq	r3, sl, r3, lsl r8
    1df8:	000f1000 	andeq	r1, pc, r0
    1dfc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1e00:	13110000 	tstne	r1, #0	; 0x0
    1e04:	0b0e0301 	bleq	382a10 <__Stack_Size+0x382610>
    1e08:	3b0b3a05 	blcc	2d0624 <__Stack_Size+0x2d0224>
    1e0c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1e10:	00151200 	andseq	r1, r5, r0, lsl #4
    1e14:	00000c27 	andeq	r0, r0, r7, lsr #24
    1e18:	27011513 	smladcs	r1, r3, r5, r1
    1e1c:	0113490c 	tsteq	r3, ip, lsl #18
    1e20:	14000013 	strne	r0, [r0], #-19
    1e24:	13490005 	movtne	r0, #36869	; 0x9005
    1e28:	0d150000 	ldceq	0, cr0, [r5]
    1e2c:	3a0e0300 	bcc	382a34 <__Stack_Size+0x382634>
    1e30:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e34:	000a3813 	andeq	r3, sl, r3, lsl r8
    1e38:	00261600 	eoreq	r1, r6, r0, lsl #12
    1e3c:	00001349 	andeq	r1, r0, r9, asr #6
    1e40:	03011317 	movweq	r1, #4887	; 0x1317
    1e44:	3a0b0b0e 	bcc	2c4a84 <__Stack_Size+0x2c4684>
    1e48:	01053b0b 	tsteq	r5, fp, lsl #22
    1e4c:	18000013 	stmdane	r0, {r0, r1, r4}
    1e50:	0b0b0113 	bleq	2c22a4 <__Stack_Size+0x2c1ea4>
    1e54:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1e58:	00001301 	andeq	r1, r0, r1, lsl #6
    1e5c:	0b011719 	bleq	47ac8 <__Stack_Size+0x476c8>
    1e60:	3b0b3a0b 	blcc	2d0694 <__Stack_Size+0x2d0294>
    1e64:	00130105 	andseq	r0, r3, r5, lsl #2
    1e68:	000d1a00 	andeq	r1, sp, r0, lsl #20
    1e6c:	0b3a0e03 	bleq	e85680 <__Stack_Size+0xe85280>
    1e70:	1349053b 	movtne	r0, #38203	; 0x953b
    1e74:	151b0000 	ldrne	r0, [fp]
    1e78:	010c2701 	tsteq	ip, r1, lsl #14
    1e7c:	1c000013 	stcne	0, cr0, [r0], {19}
    1e80:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1e84:	0b3a0e03 	bleq	e85698 <__Stack_Size+0xe85298>
    1e88:	0c270b3b 	stceq	11, cr0, [r7], #-236
    1e8c:	01120111 	tsteq	r2, r1, lsl r1
    1e90:	13010640 	movwne	r0, #5696	; 0x1640
    1e94:	051d0000 	ldreq	r0, [sp]
    1e98:	3a0e0300 	bcc	382aa0 <__Stack_Size+0x3826a0>
    1e9c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ea0:	00060213 	andeq	r0, r6, r3, lsl r2
    1ea4:	00051e00 	andeq	r1, r5, r0, lsl #28
    1ea8:	0b3a0803 	bleq	e83ebc <__Stack_Size+0xe83abc>
    1eac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1eb0:	00000602 	andeq	r0, r0, r2, lsl #12
    1eb4:	0300341f 	movweq	r3, #1055	; 0x41f
    1eb8:	3b0b3a08 	blcc	2d06e0 <__Stack_Size+0x2d02e0>
    1ebc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1ec0:	2000000a 	andcs	r0, r0, sl
    1ec4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1ec8:	0b3b0b3a 	bleq	ec4bb8 <__Stack_Size+0xec47b8>
    1ecc:	00001349 	andeq	r1, r0, r9, asr #6
    1ed0:	03003421 	movweq	r3, #1057	; 0x421
    1ed4:	3b0b3a08 	blcc	2d06fc <__Stack_Size+0x2d02fc>
    1ed8:	0013490b 	andseq	r4, r3, fp, lsl #18
    1edc:	00342200 	eorseq	r2, r4, r0, lsl #4
    1ee0:	0b3a0803 	bleq	e83ef4 <__Stack_Size+0xe83af4>
    1ee4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1ee8:	00000602 	andeq	r0, r0, r2, lsl #12
    1eec:	03000a23 	movweq	r0, #2595	; 0xa23
    1ef0:	3b0b3a0e 	blcc	2d0730 <__Stack_Size+0x2d0330>
    1ef4:	2400000b 	strcs	r0, [r0], #-11
    1ef8:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    1efc:	34250000 	strtcc	r0, [r5]
    1f00:	3a0e0300 	bcc	382b08 <__Stack_Size+0x382708>
    1f04:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f08:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1f0c:	0000000c 	andeq	r0, r0, ip
    1f10:	10001101 	andne	r1, r0, r1, lsl #2
    1f14:	03065506 	movweq	r5, #25862	; 0x6506
    1f18:	25081b08 	strcs	r1, [r8, #-2824]
    1f1c:	00051308 	andeq	r1, r5, r8, lsl #6
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000045 	andeq	r0, r0, r5, asr #32
       4:	001f0002 	andseq	r0, pc, r2
       8:	01020000 	tsteq	r2, r0
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	tsteq	r0, r0
      18:	00010000 	andeq	r0, r1, r0
      1c:	69747263 	ldmdbvs	r4!, {r0, r1, r5, r6, r9, ip, sp, lr}^
      20:	6d73612e 	ldfvse	f6, [r3, #-184]!
      24:	00000000 	andeq	r0, r0, r0
      28:	02050000 	andeq	r0, r5, #0	; 0x0
      2c:	00000000 	andeq	r0, r0, r0
      30:	0100cc03 	tsteq	r0, r3, lsl #24
      34:	01000602 	tsteq	r0, r2, lsl #12
      38:	02050001 	andeq	r0, r5, #1	; 0x1
      3c:	00000000 	andeq	r0, r0, r0
      40:	0100d703 	tsteq	r0, r3, lsl #14
      44:	01000602 	tsteq	r0, r2, lsl #12
      48:	00009601 	andeq	r9, r0, r1, lsl #12
      4c:	40000200 	andmi	r0, r0, r0, lsl #4
      50:	02000000 	andeq	r0, r0, #0	; 0x0
      54:	0d0efb01 	vstreq	d15, [lr, #-4]
      58:	01010100 	tsteq	r1, r0, lsl #2
      5c:	00000001 	andeq	r0, r0, r1
      60:	01000001 	tsteq	r0, r1
      64:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
      68:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
      6c:	2f2e2e2f 	svccs	0x002e2e2f
      70:	2d636367 	stclcs	3, cr6, [r3, #-412]!
      74:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
      78:	696c2f30 	stmdbvs	ip!, {r4, r5, r8, r9, sl, fp, sp}^
      7c:	6f6c6762 	svcvs	0x006c6762
      80:	612f7373 	teqvs	pc, r3, ror r3
      84:	00006d72 	andeq	r6, r0, r2, ror sp
      88:	30747263 	rsbscc	r7, r4, r3, ror #4
      8c:	0100532e 	tsteq	r0, lr, lsr #6
      90:	00000000 	andeq	r0, r0, r0
      94:	00000205 	andeq	r0, r0, r5, lsl #4
      98:	d2030000 	andle	r0, r3, #0	; 0x0
      9c:	2f2f0100 	svccs	0x002f0100
      a0:	2f2f2f33 	svccs	0x002f2f33
      a4:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
      a8:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
      ac:	2f302f2f 	svccs	0x00302f2f
      b0:	2f2f302f 	svccs	0x002f302f
      b4:	2f302f2f 	svccs	0x00302f2f
      b8:	09032f30 	stmdbeq	r3, {r4, r5, r8, r9, sl, fp, sp}
      bc:	2f2f322e 	svccs	0x002f322e
      c0:	032f2f30 	teqeq	pc, #192	; 0xc0
      c4:	2f342e0e 	svccs	0x00342e0e
      c8:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
      cc:	2f2f2f2f 	svccs	0x002f2f2f
      d0:	f9032f30 	undefined instruction 0xf9032f30
      d4:	2f2f2e00 	svccs	0x002f2e00
      d8:	2f2f2f2f 	svccs	0x002f2f2f
      dc:	10023030 	andne	r3, r2, r0, lsr r0
      e0:	77010100 	strvc	r0, [r1, -r0, lsl #2]
      e4:	02000002 	andeq	r0, r0, #2	; 0x2
      e8:	0000ae00 	andeq	sl, r0, r0, lsl #28
      ec:	fb010200 	blx	408f6 <__Stack_Size+0x404f6>
      f0:	01000d0e 	tsteq	r0, lr, lsl #26
      f4:	00010101 	andeq	r0, r1, r1, lsl #2
      f8:	00010000 	andeq	r0, r1, r0
      fc:	50410100 	subpl	r0, r1, r0, lsl #2
     100:	72732f50 	rsbsvc	r2, r3, #320	; 0x140
     104:	74730063 	ldrbtvc	r0, [r3], #-99
     108:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     10c:	5f783031 	svcpl	0x00783031
     110:	2f62696c 	svccs	0x0062696c
     114:	00636e69 	rsbeq	r6, r3, r9, ror #28
     118:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     11c:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     120:	73000001 	movwvc	r0, #1	; 0x1
     124:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     128:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     12c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     130:	00682e65 	rsbeq	r2, r8, r5, ror #28
     134:	73000002 	movwvc	r0, #2	; 0x2
     138:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     13c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     140:	70616d5f 	rsbvc	r6, r1, pc, asr sp
     144:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     148:	74730000 	ldrbtvc	r0, [r3]
     14c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     150:	5f783031 	svcpl	0x00783031
     154:	6f697067 	svcvs	0x00697067
     158:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     15c:	74730000 	ldrbtvc	r0, [r3]
     160:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     164:	5f783031 	svcpl	0x00783031
     168:	6369766e 	cmnvs	r9, #115343360	; 0x6e00000
     16c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     170:	74730000 	ldrbtvc	r0, [r3]
     174:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     178:	5f783031 	svcpl	0x00783031
     17c:	2e6d6974 	mcrcs	9, 3, r6, cr13, cr4, {3}
     180:	00020068 	andeq	r0, r2, r8, rrx
     184:	6d747300 	ldclvs	3, cr7, [r4]
     188:	31663233 	cmncc	r6, r3, lsr r2
     18c:	755f7830 	ldrbvc	r7, [pc, #-2096]	; fffff964 <SCS_BASE+0x1fff1964>
     190:	74726173 	ldrbtvc	r6, [r2], #-371
     194:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     198:	00000000 	andeq	r0, r0, r0
     19c:	31340205 	teqcc	r4, r5, lsl #4
     1a0:	f4030800 	vst2.8	{d0-d1}, [r3], r0
     1a4:	9f140101 	svcls	0x00140101
     1a8:	03a01430 	moveq	r1, #805306368	; 0x30000000
     1ac:	172e02cc 	strne	r0, [lr, -ip, asr #5]!
     1b0:	4d4b3d93 	stclmi	13, cr3, [fp, #-588]
     1b4:	13821203 	orrne	r1, r2, #805306368	; 0x30000000
     1b8:	17033d3d 	smladxne	r3, sp, sp, r3
     1bc:	6967134a 	stmdbvs	r7!, {r1, r3, r6, r8, r9, ip}^
     1c0:	10037813 	andne	r7, r3, r3, lsl r8
     1c4:	3d931758 	ldccc	7, cr1, [r3, #352]
     1c8:	8211034d 	andshi	r0, r1, #872415233	; 0x34000001
     1cc:	164d2f13 	undefined
     1d0:	4a6d036a 	bmi	1b40f80 <__Stack_Size+0x1b40b80>
     1d4:	59211f21 	stmdbpl	r1!, {r0, r5, r8, r9, sl, fp, ip}
     1d8:	7f8703ad 	svcvc	0x008703ad
     1dc:	221e2290 	andscs	r2, lr, #9	; 0x9
     1e0:	213b3d5a 	teqcs	fp, sl, asr sp
     1e4:	034c4b21 	movteq	r4, #52001	; 0xcb21
     1e8:	218200e6 	orrcs	r0, r2, r6, ror #1
     1ec:	673d211f 	undefined
     1f0:	214a6003 	cmpcs	sl, r3
     1f4:	1e3f211f 	mrcne	1, 1, r2, cr15, cr15, {0}
     1f8:	4b684b4c 	blmi	1a12f30 <__Stack_Size+0x1a12b30>
     1fc:	5865034b 	stmdapl	r5!, {r0, r1, r3, r6, r8, r9}^
     200:	3d211f21 	stccc	15, cr1, [r1, #-132]!
     204:	204a6f03 	subcs	r6, sl, r3, lsl #30
     208:	4d303e22 	ldcmi	14, cr3, [r0, #-136]!
     20c:	60033d4c 	andvs	r3, r3, ip, asr #26
     210:	212d214a 	teqcs	sp, sl, asr #2
     214:	92675a4c 	rsbls	r5, r7, #311296	; 0x4c000
     218:	4c033e3d 	stcmi	14, cr3, [r3], {61}
     21c:	222c2282 	eorcs	r2, ip, #536870920	; 0x20000008
     220:	55033d31 	strpl	r3, [r3, #-3377]
     224:	303d323c 	eorscc	r3, sp, ip, lsr r2
     228:	3f3e2f2b 	svccc	0x003e2f2b
     22c:	1c321c4f 	ldcne	12, cr1, [r2], #-316
     230:	31302f2f 	teqcc	r0, pc, lsr #30
     234:	2f2f4b69 	svccs	0x002f4b69
     238:	1e221e22 	cdpne	14, 2, cr1, cr2, cr2, {1}
     23c:	5b4d2f30 	blpl	134bf04 <__Stack_Size+0x134bb04>
     240:	7fb0034b 	svcvc	0x00b0034b
     244:	1c242e4a 	stcne	14, cr2, [r4], #-296
     248:	2f4b3124 	svccs	0x004b3124
     24c:	79032f2f 	stmdbvc	r3, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
     250:	3025222e 	eorcc	r2, r5, lr, lsr #4
     254:	4d3e3d22 	ldcmi	13, cr3, [lr, #-136]!
     258:	3d31316a 	ldfccs	f3, [r1, #-424]!
     25c:	4c6a4d3e 	stclmi	13, cr4, [sl], #-248
     260:	3d665003 	stclcc	0, cr5, [r6, #-12]!
     264:	2e63033d 	mcrcs	3, 3, r0, cr3, cr13, {1}
     268:	7a032630 	bvc	c9b30 <__Stack_Size+0xc9730>
     26c:	214b3f20 	cmpcs	fp, r0, lsr #30
     270:	302d2d21 	eorcc	r2, sp, r1, lsr #26
     274:	211f4c30 	tstcs	pc, r0, lsr ip
     278:	4d302f1f 	ldcmi	15, cr2, [r0, #-124]!
     27c:	2d1f211f 	ldfcss	f2, [pc, #-124]
     280:	4c4b3030 	mcrrmi	0, 3, r3, fp, cr0
     284:	bc034b4b 	stclt	11, cr4, [r3], {75}
     288:	0328747f 	teqeq	r8, #2130706432	; 0x7f000000
     28c:	03282e78 	teqeq	r8, #1920	; 0x780
     290:	79034a0b 	stmdbvc	r3, {r0, r1, r3, r9, fp, lr}
     294:	211d5020 	tstcs	sp, r0, lsr #32
     298:	2f2f1c23 	svccs	0x002f1c23
     29c:	24312f2f 	ldrtcs	r2, [r1], #-3887
     2a0:	2f2f2f1c 	svccs	0x002f2f1c
     2a4:	1c24312f 	stfnes	f3, [r4], #-188
     2a8:	2f2f2f2f 	svccs	0x002f2f2f
     2ac:	7f9c032f 	svcvc	0x009c032f
     2b0:	4d31313c 	ldfmis	f3, [r1, #-240]!
     2b4:	3f3f3130 	svccc	0x003f3130
     2b8:	694d3f3f 	stmdbvs	sp, {r0, r1, r2, r3, r4, r5, r8, r9, sl, fp, ip, sp}^
     2bc:	523f5c3f 	eorspl	r5, pc, #16128	; 0x3f00
     2c0:	033d4c5b 	teqeq	sp, #23296	; 0x5b00
     2c4:	24587ef7 	ldrbcs	r7, [r8], #-3831
     2c8:	20780352 	rsbscs	r0, r8, r2, asr r3
     2cc:	7903353d 	stmdbvc	r3, {r0, r2, r3, r4, r5, r8, sl, ip, sp}
     2d0:	3c090320 	stccc	3, cr0, [r9], {32}
     2d4:	21207703 	teqcs	r0, r3, lsl #14
     2d8:	31676767 	cmncc	r7, r7, ror #14
     2dc:	1f2f4d1d 	svcne	0x002f4d1d
     2e0:	211f4b21 	tstcs	pc, r1, lsr #22
     2e4:	4b211f3d 	blmi	847fe0 <__Stack_Size+0x847be0>
     2e8:	1f4b211f 	svcne	0x004b211f
     2ec:	59835b21 	stmibpl	r3, {r0, r5, r8, r9, fp, ip, lr}
     2f0:	5b67e65b 	blpl	19f9c64 <__Stack_Size+0x19f9864>
     2f4:	6c673e08 	stclvs	14, cr3, [r7], #-32
     2f8:	5e675b6d 	fnmuldpl	d21, d7, d29
     2fc:	660b0367 	strvs	r0, [fp], -r7, ror #6
     300:	087f9803 	ldmdaeq	pc!, {r0, r1, fp, ip, pc}^
     304:	1f2f3eac 	svcne	0x002f3eac
     308:	2d23201e 	stccs	0, cr2, [r3, #-120]!
     30c:	2f1e241e 	svccs	0x001e241e
     310:	22304b4b 	eorscs	r4, r0, #76800	; 0x12c00
     314:	4c4b3d3d 	mcrrmi	13, 3, r3, fp, cr13
     318:	3d86c64c 	stccc	6, cr12, [r6, #304]
     31c:	7f8a032f 	svcvc	0x008a032f
     320:	09032274 	stmdbeq	r3, {r2, r4, r5, r6, r9, sp}
     324:	2078032e 	rsbscs	r0, r8, lr, lsr #6
     328:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
     32c:	22595a4b 	subscs	r5, r9, #307200	; 0x4b000
     330:	22594c1e 	subscs	r4, r9, #7680	; 0x1e00
     334:	22594c1e 	subscs	r4, r9, #7680	; 0x1e00
     338:	22594c1e 	subscs	r4, r9, #7680	; 0x1e00
     33c:	22594c1e 	subscs	r4, r9, #7680	; 0x1e00
     340:	03594c1e 	cmpeq	r9, #7680	; 0x1e00
     344:	035803b9 	cmpeq	r8, #-469762046	; 0xe4000002
     348:	033c7cc7 	teqeq	ip, #50944	; 0xc700
     34c:	2b2003bc 	blcs	801244 <__Stack_Size+0x800e44>
     350:	034b2f4d 	movteq	r2, #48973	; 0xbf4d
     354:	494a7cc7 	stmdbmi	sl, {r0, r1, r2, r6, r7, sl, fp, ip, sp, lr}^
     358:	001a024d 	andseq	r0, sl, sp, asr #4
     35c:	01580101 	cmpeq	r8, r1, lsl #2
     360:	00020000 	andeq	r0, r2, r0
     364:	0000002d 	andeq	r0, r0, sp, lsr #32
     368:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     36c:	0101000d 	tsteq	r1, sp
     370:	00000101 	andeq	r0, r0, r1, lsl #2
     374:	00000100 	andeq	r0, r0, r0, lsl #2
     378:	50504101 	subspl	r4, r0, r1, lsl #2
     37c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     380:	74730000 	ldrbtvc	r0, [r3]
     384:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     388:	5f783031 	svcpl	0x00783031
     38c:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
     390:	00000100 	andeq	r0, r0, r0, lsl #2
     394:	02050000 	andeq	r0, r5, #0	; 0x0
     398:	080039b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, fp, ip, sp}
     39c:	13012303 	movwne	r2, #4867	; 0x1303
     3a0:	032e0a03 	teqeq	lr, #12288	; 0x3000
     3a4:	0f032e0f 	svceq	0x00032e0f
     3a8:	2e0f032e 	cdpcs	3, 0, cr0, cr15, cr14, {1}
     3ac:	132e0f03 	teqne	lr, #12	; 0xc
     3b0:	132e0a03 	teqne	lr, #12288	; 0x3000
     3b4:	132e0a03 	teqne	lr, #12288	; 0x3000
     3b8:	132e1603 	teqne	lr, #3145728	; 0x300000
     3bc:	132e0a03 	teqne	lr, #12288	; 0x3000
     3c0:	132e0a03 	teqne	lr, #12288	; 0x3000
     3c4:	132e0a03 	teqne	lr, #12288	; 0x3000
     3c8:	132e0a03 	teqne	lr, #12288	; 0x3000
     3cc:	132e0a03 	teqne	lr, #12288	; 0x3000
     3d0:	132e0a03 	teqne	lr, #12288	; 0x3000
     3d4:	132e0a03 	teqne	lr, #12288	; 0x3000
     3d8:	132e0a03 	teqne	lr, #12288	; 0x3000
     3dc:	132e0a03 	teqne	lr, #12288	; 0x3000
     3e0:	132e0a03 	teqne	lr, #12288	; 0x3000
     3e4:	132e0a03 	teqne	lr, #12288	; 0x3000
     3e8:	132e0a03 	teqne	lr, #12288	; 0x3000
     3ec:	132e0a03 	teqne	lr, #12288	; 0x3000
     3f0:	132e0a03 	teqne	lr, #12288	; 0x3000
     3f4:	132e0a03 	teqne	lr, #12288	; 0x3000
     3f8:	132e0a03 	teqne	lr, #12288	; 0x3000
     3fc:	132e0a03 	teqne	lr, #12288	; 0x3000
     400:	132e0b03 	teqne	lr, #3072	; 0xc00
     404:	132e0b03 	teqne	lr, #3072	; 0xc00
     408:	132e0b03 	teqne	lr, #3072	; 0xc00
     40c:	132e0a03 	teqne	lr, #12288	; 0x3000
     410:	132e0a03 	teqne	lr, #12288	; 0x3000
     414:	132e0a03 	teqne	lr, #12288	; 0x3000
     418:	132e0a03 	teqne	lr, #12288	; 0x3000
     41c:	132e0b03 	teqne	lr, #3072	; 0xc00
     420:	132e0b03 	teqne	lr, #3072	; 0xc00
     424:	132e0a03 	teqne	lr, #12288	; 0x3000
     428:	142e1603 	strtne	r1, [lr], #-1539
     42c:	142e0a03 	strtne	r0, [lr], #-2563
     430:	132e0a03 	teqne	lr, #12288	; 0x3000
     434:	132e0a03 	teqne	lr, #12288	; 0x3000
     438:	132e0a03 	teqne	lr, #12288	; 0x3000
     43c:	132e0a03 	teqne	lr, #12288	; 0x3000
     440:	132e0a03 	teqne	lr, #12288	; 0x3000
     444:	032e0a03 	teqeq	lr, #12288	; 0x3000
     448:	1603010f 	strne	r0, [r3], -pc, lsl #2
     44c:	1703132e 	strne	r1, [r3, -lr, lsr #6]
     450:	0a03142e 	beq	c5510 <__Stack_Size+0xc5110>
     454:	0a03132e 	beq	c5114 <__Stack_Size+0xc4d14>
     458:	0a03132e 	beq	c5118 <__Stack_Size+0xc4d18>
     45c:	0b03132e 	bleq	c511c <__Stack_Size+0xc4d1c>
     460:	0b03132e 	bleq	c5120 <__Stack_Size+0xc4d20>
     464:	0a03132e 	beq	c5124 <__Stack_Size+0xc4d24>
     468:	0a03132e 	beq	c5128 <__Stack_Size+0xc4d28>
     46c:	0a03132e 	beq	c512c <__Stack_Size+0xc4d2c>
     470:	0a03132e 	beq	c5130 <__Stack_Size+0xc4d30>
     474:	0a03132e 	beq	c5134 <__Stack_Size+0xc4d34>
     478:	0a03142e 	beq	c5538 <__Stack_Size+0xc5138>
     47c:	0a03132e 	beq	c513c <__Stack_Size+0xc4d3c>
     480:	0a03132e 	beq	c5140 <__Stack_Size+0xc4d40>
     484:	0a03152e 	beq	c5944 <__Stack_Size+0xc5544>
     488:	0a03132e 	beq	c5148 <__Stack_Size+0xc4d48>
     48c:	0a03132e 	beq	c514c <__Stack_Size+0xc4d4c>
     490:	0a03132e 	beq	c5150 <__Stack_Size+0xc4d50>
     494:	0a03132e 	beq	c5154 <__Stack_Size+0xc4d54>
     498:	0b03132e 	bleq	c5158 <__Stack_Size+0xc4d58>
     49c:	9a03132e 	bls	c515c <__Stack_Size+0xc4d5c>
     4a0:	302f2e7e 	eorcc	r2, pc, lr, ror lr
     4a4:	2f2e6603 	svccs	0x002e6603
     4a8:	7f8a032f 	svcvc	0x008a032f
     4ac:	032f2f2e 	teqeq	pc, #184	; 0xb8
     4b0:	2f2e7db9 	svccs	0x002e7db9
     4b4:	0002022f 	andeq	r0, r2, pc, lsr #4
     4b8:	006f0101 	rsbeq	r0, pc, r1, lsl #2
     4bc:	00020000 	andeq	r0, r2, r0
     4c0:	00000028 	andeq	r0, r0, r8, lsr #32
     4c4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     4c8:	0101000d 	tsteq	r1, sp
     4cc:	00000101 	andeq	r0, r0, r1, lsl #2
     4d0:	00000100 	andeq	r0, r0, r0, lsl #2
     4d4:	50504101 	subspl	r4, r0, r1, lsl #2
     4d8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     4dc:	78640000 	stmdavc	r4!, {}^
     4e0:	61685f6c 	cmnvs	r8, ip, ror #30
     4e4:	00632e6c 	rsbeq	r2, r3, ip, ror #28
     4e8:	00000001 	andeq	r0, r0, r1
     4ec:	ec020500 	cfstr32	mvfx0, [r2], {0}
     4f0:	0308003a 	movweq	r0, #32826	; 0x803a
     4f4:	320100ca 	andcc	r0, r1, #202	; 0xca
     4f8:	2e72032f 	cdpcs	3, 7, cr0, cr2, cr15, {1}
     4fc:	4b251b33 	blmi	9471d0 <__Stack_Size+0x946dd0>
     500:	202e6703 	eorcs	r6, lr, r3, lsl #14
     504:	594a0903 	stmdbpl	sl, {r0, r1, r8, fp}^
     508:	031d232b 	tsteq	sp, #-1409286144	; 0xac000000
     50c:	62033c09 	andvs	r3, r3, #2304	; 0x900
     510:	3b52203c 	blcc	1488608 <__Stack_Size+0x1488208>
     514:	2e6e034e 	cdpcs	3, 6, cr0, cr14, cr14, {2}
     518:	74032f31 	strvc	r2, [r3], #-3889
     51c:	032f322e 	teqeq	pc, #-536870910	; 0xe0000002
     520:	03262e70 	teqeq	r6, #1792	; 0x700
     524:	3026207a 	eorcc	r2, r6, sl, ror r0
     528:	01000302 	tsteq	r0, r2, lsl #6
     52c:	00014201 	andeq	r4, r1, r1, lsl #4
     530:	2a000200 	bcs	d38 <__Stack_Size+0x938>
     534:	02000000 	andeq	r0, r0, #0	; 0x0
     538:	0d0efb01 	vstreq	d15, [lr, #-4]
     53c:	01010100 	tsteq	r1, r0, lsl #2
     540:	00000001 	andeq	r0, r0, r1
     544:	01000001 	tsteq	r0, r1
     548:	2f505041 	svccs	0x00505041
     54c:	00637273 	rsbeq	r7, r3, r3, ror r2
     550:	6e796400 	cdpvs	4, 7, cr6, cr9, cr0, {0}
     554:	78696d61 	stmdavc	r9!, {r0, r5, r6, r8, sl, fp, sp, lr}^
     558:	632e6c65 	teqvs	lr, #25856	; 0x6500
     55c:	00000100 	andeq	r0, r0, r0, lsl #2
     560:	02050000 	andeq	r0, r5, #0	; 0x0
     564:	08003b78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, fp, ip, sp}
     568:	0101e603 	tsteq	r1, r3, lsl #12
     56c:	134d3001 	movtne	r3, #53249	; 0xd001
     570:	2f134d2f 	svccs	0x00134d2f
     574:	3f3d134d 	svccc	0x003d134d
     578:	014d2f13 	cmpeq	sp, r3, lsl pc
     57c:	30014d6b 	andcc	r4, r1, fp, ror #26
     580:	3f3e014d 	svccc	0x003e014d
     584:	01233f16 	teqeq	r3, r6, lsl pc
     588:	3f152325 	svccc	0x00152325
     58c:	207ec203 	rsbscs	ip, lr, r3, lsl #4
     590:	4d241c24 	stcmi	12, cr1, [r4, #-144]!
     594:	3f2f306d 	svccc	0x002f306d
     598:	211f2f96 	ldrbcs	r2, [pc, -r6]
     59c:	0322211f 	teqeq	r2, #-1073741817	; 0xc0000007
     5a0:	03264a0e 	teqeq	r6, #57344	; 0xe000
     5a4:	1e22207a 	mcrne	0, 1, r2, cr2, cr10, {3}
     5a8:	3c700334 	ldclcc	3, cr0, [r0], #-208
     5ac:	442f303d 	strtmi	r3, [pc], #61	; 5b4 <__Stack_Size+0x1b4>
     5b0:	667a0386 	ldrbtvs	r0, [sl], -r6, lsl #7
     5b4:	304a0b03 	subcc	r0, sl, r3, lsl #22
     5b8:	3f4d812f 	svccc	0x004d812f
     5bc:	3d4f687c 	stclcc	8, cr6, [pc, #-496]
     5c0:	5922211f 	stmdbpl	r2!, {r0, r1, r2, r3, r4, r8, sp}
     5c4:	1f211f2f 	svcne	0x00211f2f
     5c8:	7a032821 	bvc	ca654 <__Stack_Size+0xca254>
     5cc:	4e575166 	rdfmisz	f5, f7, f6
     5d0:	2f2f33a0 	svccs	0x002f33a0
     5d4:	d67ed603 	ldrbtle	sp, [lr], -r3, lsl #12
     5d8:	43251b25 	teqmi	r5, #37888	; 0x9400
     5dc:	222c221e 	eorcs	r2, ip, #-536870911	; 0xe0000001
     5e0:	403dc243 	eorsmi	ip, sp, r3, asr #4
     5e4:	573d213d 	undefined
     5e8:	315e5a4c 	cmpcc	lr, ip, asr #20
     5ec:	3e2f1f2f 	cdpcc	15, 2, cr1, cr15, cr15, {1}
     5f0:	3d403d3f 	stclcc	13, cr3, [r0, #-252]
     5f4:	033d3e3e 	teqeq	sp, #992	; 0x3e0
     5f8:	229000ed 	addscs	r0, r0, #237	; 0xed
     5fc:	301e4330 	andscc	r4, lr, r0, lsr r3
     600:	0182033f 	orreq	r0, r2, pc, lsr r3
     604:	211f214a 	tstcs	pc, sl, asr #2
     608:	2122211f 	teqcs	r2, pc, lsl r1
     60c:	2e7fb503 	cdpcs	5, 7, cr11, cr15, cr3, {0}
     610:	2e00cd03 	cdpcs	13, 0, cr12, cr0, cr3, {0}
     614:	221b2f21 	andscs	r2, fp, #132	; 0x84
     618:	032f2223 	teqeq	pc, #805306370	; 0x30000002
     61c:	1f218263 	svcne	0x00218263
     620:	30213021 	eorcc	r3, r1, r1, lsr #32
     624:	22221c21 	eorcs	r1, r2, #8448	; 0x2100
     628:	7fb50325 	svcvc	0x00b50325
     62c:	cd032f2e 	stcgt	15, cr2, [r3, #-184]
     630:	64034a00 	strvs	r4, [r3], #-2560
     634:	211f2190 	ldrbcs	r2, [pc, -r0]
     638:	2122211f 	teqcs	r2, pc, lsl r1
     63c:	21221c31 	teqcs	r2, r1, lsr ip
     640:	032f222f 	teqeq	pc, #-268435454	; 0xf0000002
     644:	1f217467 	svcne	0x00217467
     648:	30213021 	eorcc	r3, r1, r1, lsr #32
     64c:	1e241c2f 	cdpne	12, 2, cr1, cr4, cr15, {1}
     650:	69034d24 	stmdbvs	r3, {r2, r5, r8, sl, fp, lr}
     654:	211f219e 	ldrbcs	r2, [pc, -lr]
     658:	1e2f2130 	mcrne	1, 1, r2, cr15, cr0, {1}
     65c:	032f2222 	teqeq	pc, #536870914	; 0x20000002
     660:	2f747def 	svccs	0x00747def
     664:	2e6e032f 	cdpcs	3, 6, cr0, cr14, cr15, {1}
     668:	4d244624 	stcmi	6, cr4, [r4, #-144]!
     66c:	09024f3d 	stmdbeq	r2, {r0, r2, r3, r4, r5, r8, r9, sl, fp, lr}
     670:	1f010100 	svcne	0x00010100
     674:	02000002 	andeq	r0, r0, #2	; 0x2
     678:	00008800 	andeq	r8, r0, r0, lsl #16
     67c:	fb010200 	blx	40e86 <__Stack_Size+0x40a86>
     680:	01000d0e 	tsteq	r0, lr, lsl #26
     684:	00010101 	andeq	r0, r1, r1, lsl #2
     688:	00010000 	andeq	r0, r1, r0
     68c:	74730100 	ldrbtvc	r0, [r3], #-256
     690:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     694:	5f783031 	svcpl	0x00783031
     698:	2f62696c 	svccs	0x0062696c
     69c:	00637273 	rsbeq	r7, r3, r3, ror r2
     6a0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     6a4:	30316632 	eorscc	r6, r1, r2, lsr r6
     6a8:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     6ac:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
     6b0:	73000063 	movwvc	r0, #99	; 0x63
     6b4:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     6b8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     6bc:	616c665f 	cmnvs	ip, pc, asr r6
     6c0:	632e6873 	teqvs	lr, #7536640	; 0x730000
     6c4:	00000100 	andeq	r0, r0, r0, lsl #2
     6c8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     6cc:	30316632 	eorscc	r6, r1, r2, lsr r6
     6d0:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     6d4:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     6d8:	00000200 	andeq	r0, r0, r0, lsl #4
     6dc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     6e0:	30316632 	eorscc	r6, r1, r2, lsr r6
     6e4:	616d5f78 	smcvs	54776
     6e8:	00682e70 	rsbeq	r2, r8, r0, ror lr
     6ec:	73000002 	movwvc	r0, #2	; 0x2
     6f0:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     6f4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     6f8:	616c665f 	cmnvs	ip, pc, asr r6
     6fc:	682e6873 	stmdavs	lr!, {r0, r1, r4, r5, r6, fp, sp, lr}
     700:	00000200 	andeq	r0, r0, r0, lsl #4
     704:	02050000 	andeq	r0, r5, #0	; 0x0
     708:	08003f84 	stmdaeq	r0, {r2, r7, r8, r9, sl, fp, ip, sp}
     70c:	0100d603 	tsteq	r0, r3, lsl #12
     710:	033d5917 	teqeq	sp, #376832	; 0x5c000
     714:	59174a0d 	ldmdbpl	r7, {r0, r2, r3, r9, fp, lr}
     718:	4a0d033d 	bmi	341414 <__Stack_Size+0x341014>
     71c:	033d5917 	teqeq	sp, #376832	; 0x5c000
     720:	3d144a0b 	fldscc	s8, [r4, #-44]
     724:	660a033d 	undefined
     728:	f5035914 	undefined instruction 0xf5035914
     72c:	3d143c03 	ldccc	12, cr3, [r4, #-12]
     730:	143c0a03 	ldrtne	r0, [ip], #-2563
     734:	4a0b032f 	bmi	2c13f8 <__Stack_Size+0x2c0ff8>
     738:	58090315 	stmdapl	r9, {r0, r2, r4, r8, r9}
     73c:	153c0a03 	ldrne	r0, [ip, #-2563]!
     740:	03580a03 	cmpeq	r8, #12288	; 0x3000
     744:	23173c0e 	tstcs	r7, #3584	; 0xe00
     748:	10035a5d 	andne	r5, r3, sp, asr sl
     74c:	0330183c 	teqeq	r0, #3932160	; 0x3c0000
     750:	0b03580b 	bleq	d6784 <__Stack_Size+0xd6384>
     754:	3c0f0366 	stccc	3, cr0, [pc], {102}
     758:	0b032f17 	bleq	cc3bc <__Stack_Size+0xcbfbc>
     75c:	6c7a154a 	cfldr64vs	mvdx1, [sl], #-296
     760:	03660c03 	cmneq	r6, #768	; 0x300
     764:	5c033c0c 	stcpl	12, cr3, [r3], {12}
     768:	20240320 	eorcs	r0, r4, r0, lsr #6
     76c:	03205c03 	teqeq	r0, #768	; 0x300
     770:	5c032024 	stcpl	0, cr2, [r3], {36}
     774:	036c5e20 	cmneq	ip, #512	; 0x200
     778:	03227438 	teqeq	r2, #939524096	; 0x38000000
     77c:	6c907fba 	ldcvs	15, cr7, [r0], {186}
     780:	6623036c 	strtvs	r0, [r3], -ip, ror #6
     784:	032e5103 	teqeq	lr, #-1073741824	; 0xc0000000
     788:	222000c4 	eorcs	r0, r0, #196	; 0xc4
     78c:	a52e6503 	strge	r6, [lr, #-1283]!
     790:	7def0343 	stclvc	3, cr0, [pc, #268]!
     794:	2009034a 	andcs	r0, r9, sl, asr #6
     798:	032e7703 	teqeq	lr, #786432	; 0xc0000
     79c:	03212009 	teqeq	r1, #9	; 0x9
     7a0:	0a032e76 	beq	cc180 <__Stack_Size+0xcbd80>
     7a4:	73032320 	movwvc	r2, #13088	; 0x3320
     7a8:	2e0d0320 	cdpcs	3, 0, cr0, cr13, cr0, {1}
     7ac:	1e223130 	mcrne	1, 1, r3, cr2, cr0, {1}
     7b0:	233e773e 	teqcs	lr, #16252928	; 0xf80000
     7b4:	7f8e036b 	svcvc	0x008e036b
     7b8:	314c4282 	smlalbbcc	r4, ip, r2, r2
     7bc:	2e790335 	mrccs	3, 3, r0, cr9, cr5, {1}
     7c0:	1c243e21 	stcne	14, cr3, [r4], #-132
     7c4:	31304d3d 	teqcc	r0, sp, lsr sp
     7c8:	4e224c69 	cdpmi	12, 2, cr4, cr2, cr9, {3}
     7cc:	87314c4e 	ldrhi	r4, [r1, -lr, asr #24]!
     7d0:	f8036c23 	undefined instruction 0xf8036c23
     7d4:	0320827e 	teqeq	r0, #-536870905	; 0xe0000007
     7d8:	313e200f 	teqcc	lr, pc
     7dc:	032e7403 	teqeq	lr, #50331648	; 0x3000000
     7e0:	3d212e0c 	stccc	14, cr2, [r1, #-48]!
     7e4:	03207303 	teqeq	r0, #201326592	; 0xc000000
     7e8:	1e30200d 	cdpne	0, 3, cr2, cr0, cr13, {0}
     7ec:	1d232222 	sfmne	f2, 4, [r3, #-136]!
     7f0:	2e6d0323 	cdpcs	3, 6, cr0, cr13, cr3, {1}
     7f4:	a03c1503 	eorsge	r1, ip, r3, lsl #10
     7f8:	03231d23 	teqeq	r3, #2240	; 0x8c0
     7fc:	1c032e67 	stcne	14, cr2, [r3], {103}
     800:	1d23a03c 	stcne	0, cr10, [r3, #-240]!
     804:	2e600323 	cdpcs	3, 6, cr0, cr0, cr3, {1}
     808:	a0202303 	eorge	r2, r0, r3, lsl #6
     80c:	31231d23 	teqcc	r3, r3, lsr #26
     810:	90038723 	andls	r8, r3, r3, lsr #14
     814:	2620827f 	undefined
     818:	26207a03 	strtcs	r7, [r0], -r3, lsl #20
     81c:	03363130 	teqeq	r6, #12	; 0xc
     820:	3f212078 	svccc	0x00212078
     824:	2330234b 	teqcs	r0, #738197505	; 0x2c000001
     828:	7fbb036b 	svcvc	0x00bb036b
     82c:	03272058 	teqeq	r7, #88	; 0x58
     830:	30272079 	eorcc	r2, r7, r9, ror r0
     834:	4c1c2431 	cfldrsmi	mvf2, [ip], {49}
     838:	6b233022 	blvs	8cc8c8 <__Stack_Size+0x8cc4c8>
     83c:	4a7fab03 	bmi	1feb450 <__Stack_Size+0x1feb050>
     840:	79032720 	stmdbvc	r3, {r5, r8, r9, sl, sp}
     844:	32302720 	eorscc	r2, r0, #8388608	; 0x800000
     848:	314c1b25 	cmpcc	ip, r5, lsr #22
     84c:	03313230 	teqeq	r1, #3	; 0x3
     850:	6c233c0a 	stcvs	12, cr3, [r3], #-40
     854:	4a7f9303 	bmi	1fe5468 <__Stack_Size+0x1fe5068>
     858:	36314c24 	ldrtcc	r4, [r1], -r4, lsr #24
     85c:	212e7803 	teqcs	lr, r3, lsl #16
     860:	3d1c243f 	cfldrscc	mvf2, [ip, #-252]
     864:	6931304d 	ldmdbvs	r1!, {r0, r2, r3, r6, ip, sp}
     868:	233f2b23 	teqcs	pc, #35840	; 0x8c00
     86c:	0a03231d 	beq	c94e8 <__Stack_Size+0xc90e8>
     870:	036c232e 	cmneq	ip, #-1207959552	; 0xb8000000
     874:	24827fab 	strcs	r7, [r2], #4011
     878:	234b314c 	movtcs	r3, #45388	; 0xb14c
     87c:	233e3f2b 	teqcs	lr, #172	; 0xac
     880:	3c42036b 	mcrrcc	3, 6, r0, r2, cr11
     884:	25314c43 	ldrcs	r4, [r1, #-3139]!
     888:	3d1b2529 	cfldr32cc	mvfx2, [fp, #-164]
     88c:	23304d21 	teqcs	r0, #2112	; 0x840
     890:	0005026b 	andeq	r0, r5, fp, ror #4
     894:	01740101 	cmneq	r4, r1, lsl #2
     898:	00020000 	andeq	r0, r2, r0
     89c:	00000086 	andeq	r0, r0, r6, lsl #1
     8a0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     8a4:	0101000d 	tsteq	r1, sp
     8a8:	00000101 	andeq	r0, r0, r1, lsl #2
     8ac:	00000100 	andeq	r0, r0, r0, lsl #2
     8b0:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
     8b4:	31663233 	cmncc	r6, r3, lsr r2
     8b8:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     8bc:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
     8c0:	73006372 	movwvc	r6, #882	; 0x372
     8c4:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     8c8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     8cc:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     8d0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     8d4:	74730000 	ldrbtvc	r0, [r3]
     8d8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     8dc:	5f783031 	svcpl	0x00783031
     8e0:	6f697067 	svcvs	0x00697067
     8e4:	0100632e 	tsteq	r0, lr, lsr #6
     8e8:	74730000 	ldrbtvc	r0, [r3]
     8ec:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     8f0:	5f783031 	svcpl	0x00783031
     8f4:	65707974 	ldrbvs	r7, [r0, #-2420]!
     8f8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     8fc:	74730000 	ldrbtvc	r0, [r3]
     900:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     904:	5f783031 	svcpl	0x00783031
     908:	2e70616d 	rpwcssz	f6, f0, #5.0
     90c:	00020068 	andeq	r0, r2, r8, rrx
     910:	6d747300 	ldclvs	3, cr7, [r4]
     914:	31663233 	cmncc	r6, r3, lsr r2
     918:	675f7830 	smmlarvs	pc, r0, r8, r7
     91c:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
     920:	00020068 	andeq	r0, r2, r8, rrx
     924:	05000000 	streq	r0, [r0]
     928:	0044ac02 	subeq	sl, r4, r2, lsl #24
     92c:	00fc0308 	rscseq	r0, ip, r8, lsl #6
     930:	200a0301 	andcs	r0, sl, r1, lsl #6
     934:	03200c03 	teqeq	r0, #768	; 0x300
     938:	03332076 	teqeq	r3, #118	; 0x76
     93c:	33352e79 	teqcc	r5, #1936	; 0x790
     940:	032e6a03 	teqeq	lr, #12288	; 0x3000
     944:	32222016 	eorcc	r2, r2, #22	; 0x16
     948:	2132303e 	teqcs	r2, lr, lsr r0
     94c:	23312b31 	teqcs	r1, #50176	; 0xc400
     950:	28207a03 	stmdacs	r0!, {r0, r1, r9, fp, ip, sp, lr}
     954:	0322273a 	teqeq	r2, #15204352	; 0xe80000
     958:	1f033c66 	svcne	0x00033c66
     95c:	3130253c 	teqcc	r0, ip, lsr r5
     960:	21322f5a 	teqcs	r2, sl, asr pc
     964:	23312b31 	teqcs	r1, #50176	; 0xc400
     968:	28207a03 	stmdacs	r0!, {r0, r1, r9, fp, ip, sp, lr}
     96c:	0322253a 	teqeq	r2, #243269632	; 0xe800000
     970:	1b033c69 	blne	cfb1c <__Stack_Size+0xcf71c>
     974:	0b03223c 	bleq	c926c <__Stack_Size+0xc8e6c>
     978:	2f3d143c 	svccs	0x003d143c
     97c:	200c032f 	andcs	r0, ip, pc, lsr #6
     980:	58090319 	stmdapl	r9, {r0, r3, r4, r8, r9}
     984:	16200a03 	strtne	r0, [r0], -r3, lsl #20
     988:	2e0c032f 	cdpcs	3, 0, cr0, cr12, cr15, {1}
     98c:	58090319 	stmdapl	r9, {r0, r3, r4, r8, r9}
     990:	16200a03 	strtne	r0, [r0], -r3, lsl #20
     994:	2e0d032f 	cdpcs	3, 0, cr0, cr13, cr15, {1}
     998:	0d032117 	stfeqs	f2, [r3, #-92]
     99c:	03211720 	teqeq	r1, #8388608	; 0x800000
     9a0:	22182010 	andscs	r2, r8, #16	; 0x10
     9a4:	0c032232 	sfmeq	f2, 4, [r3], {50}
     9a8:	0321162e 	teqeq	r1, #48234496	; 0x2e00000
     9ac:	3019200d 	andscc	r2, r9, sp
     9b0:	22222222 	eorcs	r2, r2, #536870914	; 0x20000002
     9b4:	200f0321 	andcs	r0, pc, r1, lsr #6
     9b8:	312c3019 	teqcc	ip, r9, lsl r0
     9bc:	2f22302d 	svccs	0x0022302d
     9c0:	163c0b03 	ldrtne	r0, [ip], -r3, lsl #22
     9c4:	4a26032f 	bmi	981688 <__Stack_Size+0x981288>
     9c8:	2c200c03 	stccs	12, cr0, [r0], #-12
     9cc:	27207603 	strcs	r7, [r0, -r3, lsl #12]!
     9d0:	33292223 	teqcc	r9, #805306370	; 0x30000002
     9d4:	4c2f1f23 	stcmi	15, cr1, [pc], #-140
     9d8:	31676b3f 	cmncc	r7, pc, lsr fp
     9dc:	032f5b22 	teqeq	pc, #34816	; 0x8800
     9e0:	3e274a0f 	fmulscc	s8, s14, s30
     9e4:	599f1f2f 	ldmibpl	pc, {r0, r1, r2, r3, r5, r8, r9, sl, fp, ip}
     9e8:	4a7ca703 	bmi	1f2a5fc <__Stack_Size+0x1f2a1fc>
     9ec:	2f212d21 	svccs	0x00212d21
     9f0:	2e45034b 	cdpcs	3, 4, cr0, cr5, cr11, {2}
     9f4:	1c241c24 	stcne	12, cr1, [r4], #-144
     9f8:	4ba10824 	blmi	fe842a90 <SCS_BASE+0x1e834a90>
     9fc:	4b324b32 	blmi	c936cc <__Stack_Size+0xc932cc>
     a00:	4b324b32 	blmi	c936d0 <__Stack_Size+0xc932d0>
     a04:	59324b32 	ldmdbpl	r2!, {r1, r4, r5, r8, r9, fp, lr}
     a08:	0006025e 	andeq	r0, r6, lr, asr r2
     a0c:	01a60101 	undefined instruction 0x01a60101
     a10:	00020000 	andeq	r0, r2, r0
     a14:	00000086 	andeq	r0, r0, r6, lsl #1
     a18:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     a1c:	0101000d 	tsteq	r1, sp
     a20:	00000101 	andeq	r0, r0, r1, lsl #2
     a24:	00000100 	andeq	r0, r0, r0, lsl #2
     a28:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
     a2c:	31663233 	cmncc	r6, r3, lsr r2
     a30:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     a34:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
     a38:	73006372 	movwvc	r6, #882	; 0x372
     a3c:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     a40:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     a44:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     a48:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     a4c:	74730000 	ldrbtvc	r0, [r3]
     a50:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     a54:	5f783031 	svcpl	0x00783031
     a58:	6369766e 	cmnvs	r9, #115343360	; 0x6e00000
     a5c:	0100632e 	tsteq	r0, lr, lsr #6
     a60:	74730000 	ldrbtvc	r0, [r3]
     a64:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     a68:	5f783031 	svcpl	0x00783031
     a6c:	65707974 	ldrbvs	r7, [r0, #-2420]!
     a70:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     a74:	74730000 	ldrbtvc	r0, [r3]
     a78:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     a7c:	5f783031 	svcpl	0x00783031
     a80:	2e70616d 	rpwcssz	f6, f0, #5.0
     a84:	00020068 	andeq	r0, r2, r8, rrx
     a88:	6d747300 	ldclvs	3, cr7, [r4]
     a8c:	31663233 	cmncc	r6, r3, lsr r2
     a90:	6e5f7830 	mrcvs	8, 2, r7, cr15, cr0, {1}
     a94:	2e636976 	mcrcs	9, 3, r6, cr3, cr6, {3}
     a98:	00020068 	andeq	r0, r2, r8, rrx
     a9c:	05000000 	streq	r0, [r0]
     aa0:	00473402 	subeq	r3, r7, r2, lsl #8
     aa4:	01240308 	teqeq	r4, r8, lsl #6
     aa8:	352d3d15 	strcc	r3, [sp, #-3349]!
     aac:	2f207a03 	svccs	0x00207a03
     ab0:	241c322f 	ldrcs	r3, [ip], #-559
     ab4:	242c302c 	strtcs	r3, [ip], #-44
     ab8:	153c0b03 	ldrne	r0, [ip, #-2819]!
     abc:	2f211e3e 	svccs	0x00211e3e
     ac0:	3e232121 	sufccsp	f2, f3, f1
     ac4:	21212f21 	teqcs	r1, r1, lsr #30
     ac8:	17661603 	strbne	r1, [r6, -r3, lsl #12]!
     acc:	4a0d0367 	bmi	341870 <__Stack_Size+0x341470>
     ad0:	3f200a03 	svccc	0x00200a03
     ad4:	0a031c24 	beq	c7b6c <__Stack_Size+0xc776c>
     ad8:	20760320 	rsbscs	r0, r6, r0, lsr #6
     adc:	2b3f3d5c 	blcs	fd0054 <__Stack_Size+0xfcfc54>
     ae0:	2b241f31 	blcs	9087ac <__Stack_Size+0x9083ac>
     ae4:	301e6a22 	andscc	r6, lr, r2, lsr #20
     ae8:	93883122 	orrls	r3, r8, #-2147483640	; 0x80000008
     aec:	14580b03 	ldrbne	r0, [r8], #-2819
     af0:	2121212f 	teqcs	r1, pc, lsr #2
     af4:	2000d703 	andcs	sp, r0, r3, lsl #14
     af8:	0b036713 	bleq	da74c <__Stack_Size+0xda34c>
     afc:	034c1966 	movteq	r1, #51558	; 0xc966
     b00:	0a039e09 	beq	e832c <__Stack_Size+0xe7f2c>
     b04:	032f164a 	teqeq	pc, #77594624	; 0x4a00000
     b08:	91164a0a 	tstls	r6, sl, lsl #20
     b0c:	133c0b03 	teqne	ip, #3072	; 0xc00
     b10:	4a0b034b 	bmi	2c1844 <__Stack_Size+0x2c1444>
     b14:	09034c19 	stmdbeq	r3, {r0, r3, r4, sl, fp, lr}
     b18:	4a0b039e 	bmi	2c1998 <__Stack_Size+0x2c1598>
     b1c:	10032f13 	andne	r2, r3, r3, lsl pc
     b20:	0375174a 	cmneq	r5, #19398656	; 0x1280000
     b24:	3d133c0a 	ldccc	12, cr3, [r3, #-40]
     b28:	13580a03 	cmpne	r8, #12288	; 0x3000
     b2c:	5811033d 	ldmdapl	r1, {r0, r2, r3, r4, r5, r8, r9}
     b30:	5a5c2217 	bpl	1709394 <__Stack_Size+0x1708f94>
     b34:	193c1103 	ldmdbne	ip!, {r0, r1, r8, ip}
     b38:	5a5c225a 	bpl	17094a8 <__Stack_Size+0x17090a8>
     b3c:	034a1803 	movteq	r1, #43011	; 0xa803
     b40:	4b782009 	blmi	1e08b6c <__Stack_Size+0x1e0876c>
     b44:	033f3169 	teqeq	pc, #1073741850	; 0x4000001a
     b48:	03282e79 	teqeq	r8, #1936	; 0x790
     b4c:	7525207a 	strvc	r2, [r5, #-122]!
     b50:	4a100359 	bmi	4018bc <__Stack_Size+0x4014bc>
     b54:	034c2319 	movteq	r2, #49945	; 0xc319
     b58:	0f03820b 	svceq	0x0003820b
     b5c:	0109033c 	tsteq	r9, ip, lsr r3
     b60:	4a0e0383 	bmi	381974 <__Stack_Size+0x381574>
     b64:	91010903 	tstls	r1, r3, lsl #18
     b68:	033c1403 	teqeq	ip, #50331648	; 0x3000000
     b6c:	035a010a 	cmpeq	sl, #-2147483646	; 0x80000002
     b70:	1103820b 	tstne	r3, fp, lsl #4
     b74:	3e23193c 	mcrcc	9, 1, r1, cr3, cr12, {1}
     b78:	7803303e 	stmdavc	r3, {r1, r2, r3, r4, r5, ip, sp}
     b7c:	78032858 	stmdavc	r3, {r3, r4, r6, fp, sp}
     b80:	224b3620 	subcs	r3, fp, #33554432	; 0x2000000
     b84:	03314140 	teqeq	r1, #16	; 0x10
     b88:	09033c0f 	stmdbeq	r3, {r0, r1, r2, r3, sl, fp, ip, sp}
     b8c:	1c323001 	ldcne	0, cr3, [r2], #-4
     b90:	8d032324 	stchi	3, cr2, [r3, #-144]
     b94:	2f2f3c7c 	svccs	0x002f3c7c
     b98:	242e6f03 	strtcs	r6, [lr], #-3843
     b9c:	032f241c 	teqeq	pc, #469762048	; 0x1c000000
     ba0:	2f2f3c6d 	svccs	0x002f3c6d
     ba4:	2f2e7203 	svccs	0x002e7203
     ba8:	2e72032f 	cdpcs	3, 7, cr0, cr2, cr15, {1}
     bac:	72032f2f 	andvc	r2, r3, #188	; 0xbc
     bb0:	022f2f2e 	eoreq	r2, pc, #184	; 0xb8
     bb4:	01010002 	tsteq	r1, r2
     bb8:	000000d2 	ldrdeq	r0, [r0], -r2
     bbc:	00710002 	rsbseq	r0, r1, r2
     bc0:	01020000 	tsteq	r2, r0
     bc4:	000d0efb 	strdeq	r0, [sp], -fp
     bc8:	01010101 	tsteq	r1, r1, lsl #2
     bcc:	01000000 	tsteq	r0, r0
     bd0:	73010000 	movwvc	r0, #4096	; 0x1000
     bd4:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     bd8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     bdc:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     be0:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     be4:	6d747300 	ldclvs	3, cr7, [r4]
     be8:	31663233 	cmncc	r6, r3, lsr r2
     bec:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     bf0:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
     bf4:	0000636e 	andeq	r6, r0, lr, ror #6
     bf8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     bfc:	30316632 	eorscc	r6, r1, r2, lsr r6
     c00:	77705f78 	undefined
     c04:	00632e72 	rsbeq	r2, r3, r2, ror lr
     c08:	73000001 	movwvc	r0, #1	; 0x1
     c0c:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     c10:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     c14:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     c18:	00682e65 	rsbeq	r2, r8, r5, ror #28
     c1c:	73000002 	movwvc	r0, #2	; 0x2
     c20:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     c24:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     c28:	70616d5f 	rsbvc	r6, r1, pc, asr sp
     c2c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     c30:	00000000 	andeq	r0, r0, r0
     c34:	4ab80205 	bmi	fee01450 <SCS_BASE+0x1edf3450>
     c38:	d1030800 	tstle	r3, r0, lsl #16
     c3c:	2f160100 	svccs	0x00160100
     c40:	164a0b03 	strbne	r0, [sl], -r3, lsl #22
     c44:	4a14032f 	bmi	501908 <__Stack_Size+0x501508>
     c48:	23313118 	teqcs	r1, #6	; 0x6
     c4c:	4a0b0321 	bmi	2c18d8 <__Stack_Size+0x2c14d8>
     c50:	d8032f16 	stmdale	r3, {r1, r2, r4, r8, r9, sl, fp, sp}
     c54:	03184a00 	tsteq	r8, #0	; 0x0
     c58:	0d03660b 	stceq	6, cr6, [r3, #-44]
     c5c:	0359164a 	cmpeq	r9, #77594624	; 0x4a00000
     c60:	1e143c43 	cdpne	12, 1, cr3, cr4, cr3, {2}
     c64:	3f221e22 	svccc	0x00221e22
     c68:	032f934d 	teqeq	pc, #872415233	; 0x34000001
     c6c:	031a4a49 	tsteq	sl, #299008	; 0x49000
     c70:	03282078 	teqeq	r8, #120	; 0x78
     c74:	0b032078 	bleq	c8e5c <__Stack_Size+0xc8a5c>
     c78:	23233120 	teqcs	r3, #8	; 0x8
     c7c:	233f1d69 	teqcs	pc, #6720	; 0x1a40
     c80:	f5033041 	undefined instruction 0xf5033041
     c84:	67214a7e 	undefined
     c88:	0001024b 	andeq	r0, r1, fp, asr #4
     c8c:	01b40101 	undefined instruction 0x01b40101
     c90:	00020000 	andeq	r0, r2, r0
     c94:	00000084 	andeq	r0, r0, r4, lsl #1
     c98:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     c9c:	0101000d 	tsteq	r1, sp
     ca0:	00000101 	andeq	r0, r0, r1, lsl #2
     ca4:	00000100 	andeq	r0, r0, r0, lsl #2
     ca8:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
     cac:	31663233 	cmncc	r6, r3, lsr r2
     cb0:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     cb4:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
     cb8:	73006372 	movwvc	r6, #882	; 0x372
     cbc:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     cc0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     cc4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     cc8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     ccc:	74730000 	ldrbtvc	r0, [r3]
     cd0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     cd4:	5f783031 	svcpl	0x00783031
     cd8:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
     cdc:	00010063 	andeq	r0, r1, r3, rrx
     ce0:	6d747300 	ldclvs	3, cr7, [r4]
     ce4:	31663233 	cmncc	r6, r3, lsr r2
     ce8:	745f7830 	ldrbvc	r7, [pc], #2096	; cf0 <__Stack_Size+0x8f0>
     cec:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     cf0:	00020068 	andeq	r0, r2, r8, rrx
     cf4:	6d747300 	ldclvs	3, cr7, [r4]
     cf8:	31663233 	cmncc	r6, r3, lsr r2
     cfc:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]
     d00:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
     d04:	00000200 	andeq	r0, r0, r0, lsl #4
     d08:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     d0c:	30316632 	eorscc	r6, r1, r2, lsr r6
     d10:	63725f78 	cmnvs	r2, #480	; 0x1e0
     d14:	00682e63 	rsbeq	r2, r8, r3, ror #28
     d18:	00000002 	andeq	r0, r0, r2
     d1c:	98020500 	stmdals	r2, {r8, sl}
     d20:	0308004b 	movweq	r0, #32843	; 0x804b
     d24:	140100fc 	strne	r0, [r1], #-252
     d28:	4d695b5b 	fstmdbxmi	r9!, {d21-d65}
     d2c:	11032f4d 	tstne	r3, sp, asr #30
     d30:	03261866 	teqeq	r6, #6684672	; 0x660000
     d34:	4d4d2e7a 	stclmi	14, cr2, [sp, #-488]
     d38:	0350415c 	cmpeq	r0, #23	; 0x17
     d3c:	03213c0c 	teqeq	r1, #3072	; 0xc00
     d40:	032006a3 	teqeq	r0, #170917888	; 0xa300000
     d44:	032079dd 	teqeq	r0, #3620864	; 0x374000
     d48:	032006a3 	teqeq	r0, #170917888	; 0xa300000
     d4c:	2f2079e5 	svccs	0x002079e5
     d50:	9a03212d 	bls	c920c <__Stack_Size+0xc8e0c>
     d54:	f3035806 	vsub.i8	d5, d3, d6
     d58:	0c035879 	stceq	8, cr5, [r3], {121}
     d5c:	3131184a 	teqcc	r1, sl, asr #16
     d60:	0d032131 	stfeqs	f2, [r3, #-196]
     d64:	032f163c 	teqeq	pc, #62914560	; 0x3c00000
     d68:	34194a14 	ldrcc	r4, [r9], #-2580
     d6c:	0c03214d 	stfeqs	f2, [r3], {77}
     d70:	032f163c 	teqeq	pc, #62914560	; 0x3c00000
     d74:	31184a0e 	tstcc	r8, lr, lsl #20
     d78:	03212331 	teqeq	r1, #-1006632960	; 0xc4000000
     d7c:	4b134a0e 	blmi	4d35bc <__Stack_Size+0x4d31bc>
     d80:	184a1503 	stmdane	sl, {r0, r1, r8, sl, ip}^
     d84:	21233131 	teqcs	r3, r1, lsr r1
     d88:	184a1103 	stmdane	sl, {r0, r1, r8, ip}^
     d8c:	21233131 	teqcs	r3, r1, lsr r1
     d90:	184a1103 	stmdane	sl, {r0, r1, r8, ip}^
     d94:	21313131 	teqcs	r1, r1, lsr r1
     d98:	173c1303 	ldrne	r1, [ip, -r3, lsl #6]!
     d9c:	035a5d23 	cmpeq	sl, #2240	; 0x8c0
     da0:	2f163c10 	svccs	0x00163c10
     da4:	184a1003 	stmdane	sl, {r0, r1, ip}^
     da8:	21233131 	teqcs	r3, r1, lsr r1
     dac:	184a0f03 	stmdane	sl, {r0, r1, r8, r9, sl, fp}^
     db0:	207a0334 	rsbscs	r0, sl, r4, lsr r3
     db4:	032a2723 	teqeq	sl, #9175040	; 0x8c0000
     db8:	03343c09 	teqeq	r4, #2304	; 0x900
     dbc:	2f164a0c 	svccs	0x00164a0c
     dc0:	174a1103 	strbne	r1, [sl, -r3, lsl #2]
     dc4:	4a0d034b 	bmi	341af8 <__Stack_Size+0x3416f8>
     dc8:	0b032f16 	bleq	cca28 <__Stack_Size+0xcc628>
     dcc:	241c164a 	ldrcs	r1, [ip], #-1610
     dd0:	660c0322 	strvs	r0, [ip], -r2, lsr #6
     dd4:	30224c21 	eorcc	r4, r2, r1, lsr #24
     dd8:	7869273a 	stmdavc	r9!, {r1, r3, r4, r5, r8, r9, sl, sp}^
     ddc:	7a03267a 	bvc	ca7cc <__Stack_Size+0xca3cc>
     de0:	1b253420 	blne	94de68 <__Stack_Size+0x94da68>
     de4:	69417733 	stmdbvs	r1, {r0, r1, r4, r5, r8, r9, sl, ip, sp, lr}^
     de8:	78033641 	stmdavc	r3, {r0, r6, r9, sl, ip, sp}
     dec:	67413f20 	strbvs	r3, [r1, -r0, lsr #30]
     df0:	17901503 	ldrne	r1, [r0, r3, lsl #10]
     df4:	035a5c22 	cmpeq	sl, #8704	; 0x2200
     df8:	22173c14 	andscs	r3, r7, #5120	; 0x1400
     dfc:	15035a5c 	strne	r5, [r3, #-2652]
     e00:	5c22173c 	stcpl	7, cr1, [r2], #-240
     e04:	3c13035a 	ldccc	3, cr0, [r3], {90}
     e08:	5a5c2217 	bpl	170966c <__Stack_Size+0x170926c>
     e0c:	173c1403 	ldrne	r1, [ip, -r3, lsl #8]!
     e10:	035a5c22 	cmpeq	sl, #8704	; 0x2200
     e14:	2f163c0b 	svccs	0x00163c0b
     e18:	164a0b03 	strbne	r0, [sl], -r3, lsl #22
     e1c:	4a10032f 	bmi	401ae0 <__Stack_Size+0x4016e0>
     e20:	16032f17 	undefined
     e24:	0109034a 	tsteq	r9, sl, asr #6
     e28:	30923022 	addscc	r3, r2, r2, lsr #32
     e2c:	82110394 	andshi	r0, r1, #1342177282	; 0x50000002
     e30:	143c0d03 	ldrtne	r0, [ip], #-3331
     e34:	3c110359 	ldccc	3, cr0, [r1], {89}
     e38:	660b0319 	undefined
     e3c:	184a1103 	stmdane	sl, {r0, r1, r8, ip}^
     e40:	0004022f 	andeq	r0, r4, pc, lsr #4
     e44:	00b90101 	adcseq	r0, r9, r1, lsl #2
     e48:	00020000 	andeq	r0, r2, r0
     e4c:	00000075 	andeq	r0, r0, r5, ror r0
     e50:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     e54:	0101000d 	tsteq	r1, sp
     e58:	00000101 	andeq	r0, r0, r1, lsl #2
     e5c:	00000100 	andeq	r0, r0, r0, lsl #2
     e60:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
     e64:	31663233 	cmncc	r6, r3, lsr r2
     e68:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     e6c:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
     e70:	73006372 	movwvc	r6, #882	; 0x372
     e74:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     e78:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     e7c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     e80:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     e84:	74730000 	ldrbtvc	r0, [r3]
     e88:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     e8c:	5f783031 	svcpl	0x00783031
     e90:	74737973 	ldrbtvc	r7, [r3], #-2419
     e94:	2e6b6369 	cdpcs	3, 6, cr6, cr11, cr9, {3}
     e98:	00010063 	andeq	r0, r1, r3, rrx
     e9c:	6d747300 	ldclvs	3, cr7, [r4]
     ea0:	31663233 	cmncc	r6, r3, lsr r2
     ea4:	745f7830 	ldrbvc	r7, [pc], #2096	; eac <__Stack_Size+0xaac>
     ea8:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     eac:	00020068 	andeq	r0, r2, r8, rrx
     eb0:	6d747300 	ldclvs	3, cr7, [r4]
     eb4:	31663233 	cmncc	r6, r3, lsr r2
     eb8:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]
     ebc:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
     ec0:	00000200 	andeq	r0, r0, r0, lsl #4
     ec4:	02050000 	andeq	r0, r5, #0	; 0x0
     ec8:	08004f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, lr}
     ecc:	16012b03 	strne	r2, [r1], -r3, lsl #22
     ed0:	035a4e30 	cmpeq	sl, #768	; 0x300
     ed4:	2f163c0b 	svccs	0x00163c0b
     ed8:	164a0e03 	strbne	r0, [sl], -r3, lsl #28
     edc:	6a3e4c30 	bvs	f93fa4 <__Stack_Size+0xf93ba4>
     ee0:	4a0b033e 	bmi	2c1be0 <__Stack_Size+0x2c17e0>
     ee4:	5a5c2216 	bpl	1709744 <__Stack_Size+0x1709344>
     ee8:	133c0a03 	teqne	ip, #12288	; 0x3000
     eec:	4a0e032f 	bmi	381bb0 <__Stack_Size+0x3817b0>
     ef0:	03010a03 	movweq	r0, #6659	; 0x1a03
     ef4:	0a032e76 	beq	cc8d4 <__Stack_Size+0xcc4d4>
     ef8:	03782220 	cmneq	r8, #2	; 0x2
     efc:	0402580c 	streq	r5, [r2], #-2060
     f00:	eb010100 	bl	41308 <__Stack_Size+0x40f08>
     f04:	02000005 	andeq	r0, r0, #5	; 0x5
     f08:	00008400 	andeq	r8, r0, r0, lsl #8
     f0c:	fb010200 	blx	41716 <__Stack_Size+0x41316>
     f10:	01000d0e 	tsteq	r0, lr, lsl #26
     f14:	00010101 	andeq	r0, r1, r1, lsl #2
     f18:	00010000 	andeq	r0, r1, r0
     f1c:	74730100 	ldrbtvc	r0, [r3], #-256
     f20:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     f24:	5f783031 	svcpl	0x00783031
     f28:	2f62696c 	svccs	0x0062696c
     f2c:	00637273 	rsbeq	r7, r3, r3, ror r2
     f30:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     f34:	30316632 	eorscc	r6, r1, r2, lsr r6
     f38:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     f3c:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
     f40:	73000063 	movwvc	r0, #99	; 0x63
     f44:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     f48:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     f4c:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!
     f50:	0100632e 	tsteq	r0, lr, lsr #6
     f54:	74730000 	ldrbtvc	r0, [r3]
     f58:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     f5c:	5f783031 	svcpl	0x00783031
     f60:	65707974 	ldrbvs	r7, [r0, #-2420]!
     f64:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     f68:	74730000 	ldrbtvc	r0, [r3]
     f6c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     f70:	5f783031 	svcpl	0x00783031
     f74:	2e70616d 	rpwcssz	f6, f0, #5.0
     f78:	00020068 	andeq	r0, r2, r8, rrx
     f7c:	6d747300 	ldclvs	3, cr7, [r4]
     f80:	31663233 	cmncc	r6, r3, lsr r2
     f84:	745f7830 	ldrbvc	r7, [pc], #2096	; f8c <__Stack_Size+0xb8c>
     f88:	682e6d69 	stmdavs	lr!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}
     f8c:	00000200 	andeq	r0, r0, r0, lsl #4
     f90:	02050000 	andeq	r0, r5, #0	; 0x0
     f94:	08004fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, lr}
     f98:	0101c603 	tsteq	r1, r3, lsl #12
     f9c:	20790319 	rsbscs	r0, r9, r9, lsl r3
     fa0:	78033d27 	stmdavc	r3, {r0, r1, r2, r5, r8, sl, fp, ip, sp}
     fa4:	283f2858 	ldmdacs	pc!, {r3, r4, r6, fp, sp}
     fa8:	23207803 	teqcs	r0, #196608	; 0x30000
     fac:	03207203 	teqeq	r0, #805306368	; 0x30000000
     fb0:	3e23200e 	cdpcc	0, 2, cr2, cr3, cr14, {0}
     fb4:	0f033ea1 	svceq	0x00033ea1
     fb8:	010a0366 	tsteq	sl, r6, ror #6
     fbc:	03207603 	teqeq	r0, #3145728	; 0x300000
     fc0:	235b200a 	cmpcs	fp, #10	; 0xa
     fc4:	03207003 	teqeq	r0, #3	; 0x3
     fc8:	03232010 	teqeq	r3, #16	; 0x10
     fcc:	7403200c 	strvc	r2, [r3], #-12
     fd0:	200c032e 	andcs	r0, ip, lr, lsr #6
     fd4:	231d312b 	tstcs	sp, #-1073741814	; 0xc000000a
     fd8:	0331261d 	teqeq	r1, #30408704	; 0x1d00000
     fdc:	0c032e74 	stceq	14, cr2, [r3], {116}
     fe0:	5903222e 	stmdbpl	r3, {r1, r2, r3, r5, r9, sp}
     fe4:	20270366 	eorcs	r0, r7, r6, ror #6
     fe8:	034a5903 	movteq	r5, #43267	; 0xa903
     fec:	4d282027 	stcmi	0, cr2, [r8, #-156]!
     ff0:	4d233f2b 	stcmi	15, cr3, [r3, #-172]!
     ff4:	47352a32 	undefined
     ff8:	54033131 	strpl	r3, [r3], #-305
     ffc:	2c034d2e 	stccs	13, cr4, [r3], {46}
    1000:	21232320 	teqcs	r3, r0, lsr #6
    1004:	03740f03 	cmneq	r4, #12	; 0xc
    1008:	7603010a 	strvc	r0, [r3], -sl, lsl #2
    100c:	200a0320 	andcs	r0, sl, r0, lsr #6
    1010:	0c03235b 	stceq	3, cr2, [r3], {91}
    1014:	2e740320 	cdpcs	3, 7, cr0, cr4, cr0, {1}
    1018:	20090323 	andcs	r0, r9, r3, lsr #6
    101c:	03207703 	teqeq	r0, #786432	; 0xc0000
    1020:	231d200c 	tstcs	sp, #12	; 0xc
    1024:	3f231d31 	svccc	0x00231d31
    1028:	03207403 	teqeq	r0, #50331648	; 0x3000000
    102c:	0322200c 	teqeq	r2, #12	; 0xc
    1030:	27036659 	smlsdcs	r3, r9, r6, r6
    1034:	4a590320 	bmi	1641cbc <__Stack_Size+0x16418bc>
    1038:	282e2703 	stmdacs	lr!, {r0, r1, r8, r9, sl, sp}
    103c:	313f2b4d 	teqcc	pc, sp, asr #22
    1040:	4d2b5f4d 	stcmi	15, cr5, [fp, #-308]!
    1044:	03232b31 	teqeq	r3, #50176	; 0xc400
    1048:	034d3c54 	movteq	r3, #56404	; 0xdc54
    104c:	23233c2d 	teqcs	r3, #11520	; 0x2d00
    1050:	740f0321 	strvc	r0, [pc], #801	; 1058 <__Stack_Size+0xc58>
    1054:	03010a03 	movweq	r0, #6659	; 0x1a03
    1058:	0a032076 	beq	c9238 <__Stack_Size+0xc8e38>
    105c:	03235b20 	teqeq	r3, #32768	; 0x8000
    1060:	7403200c 	strvc	r2, [r3], #-12
    1064:	0903232e 	stmdbeq	r3, {r1, r2, r3, r5, r8, r9, sp}
    1068:	20770320 	rsbscs	r0, r7, r0, lsr #6
    106c:	1d200c03 	stcne	12, cr0, [r0, #-12]!
    1070:	231d3123 	tstcs	sp, #-1073741816	; 0xc0000008
    1074:	2074033f 	rsbscs	r0, r4, pc, lsr r3
    1078:	22200c03 	eorcs	r0, r0, #768	; 0x300
    107c:	03665903 	cmneq	r6, #49152	; 0xc000
    1080:	59032027 	stmdbpl	r3, {r0, r1, r2, r5, sp}
    1084:	2e27034a 	cdpcs	3, 2, cr0, cr7, cr10, {2}
    1088:	3f2b4d28 	svccc	0x002b4d28
    108c:	2b5f4d31 	blcs	17d4558 <__Stack_Size+0x17d4158>
    1090:	232b314d 	teqcs	fp, #1073741843	; 0x40000013
    1094:	4d3c5403 	cfldrsmi	mvf5, [ip, #-12]!
    1098:	23202d03 	teqcs	r0, #192	; 0xc0
    109c:	0f032123 	svceq	0x00032123
    10a0:	010a0374 	tsteq	sl, r4, ror r3
    10a4:	03207603 	teqeq	r0, #3145728	; 0x300000
    10a8:	035b200a 	cmpeq	fp, #10	; 0xa
    10ac:	0d032073 	stceq	0, cr2, [r3, #-460]
    10b0:	12033120 	andne	r3, r3, #8	; 0x8
    10b4:	206e0320 	rsbcs	r0, lr, r0, lsr #6
    10b8:	7a032631 	bvc	ca984 <__Stack_Size+0xca584>
    10bc:	20120320 	andscs	r0, r2, r0, lsr #6
    10c0:	26207a03 	strtcs	r7, [r0], -r3, lsl #20
    10c4:	03251b30 	teqeq	r5, #49152	; 0xc000
    10c8:	27039059 	smlsdcs	r3, r9, r0, r9
    10cc:	1d31252e 	cfldr32ne	mvfx2, [r1, #-184]!
    10d0:	4a670323 	bmi	19c1d64 <__Stack_Size+0x19c1964>
    10d4:	17033f4d 	strne	r3, [r3, -sp, asr #30]
    10d8:	66033120 	strvs	r3, [r3], -r0, lsr #2
    10dc:	1d314d20 	ldcne	13, cr4, [r1, #-128]!
    10e0:	3c170323 	ldccc	3, cr0, [r7], {35}
    10e4:	740f0321 	strvc	r0, [pc], #801	; 10ec <__Stack_Size+0xcec>
    10e8:	03010903 	movweq	r0, #6403	; 0x1903
    10ec:	03202077 	teqeq	r0, #119	; 0x77
    10f0:	a0032e09 	andge	r2, r3, r9, lsl #28
    10f4:	e3032013 	movw	r2, #12307	; 0x3013
    10f8:	9d03206c 	stcls	0, cr2, [r3, #-432]
    10fc:	e3032013 	movw	r2, #12307	; 0x3013
    1100:	9d034a6c 	fstsls	s8, [r3, #-432]
    1104:	21223c13 	teqcs	r2, r3, lsl ip
    1108:	312b4d24 	teqcc	fp, r4, lsr #26
    110c:	2a21231d 	bcs	849d88 <__Stack_Size+0x849988>
    1110:	03212332 	teqeq	r1, #-939524096	; 0xc8000000
    1114:	03207cef 	teqeq	r0, #61184	; 0xef00
    1118:	03206fea 	teqeq	r0, #936	; 0x3a8
    111c:	5b201096 	blpl	80537c <__Stack_Size+0x804f7c>
    1120:	4a6fe903 	bmi	1bfb534 <__Stack_Size+0x1bfb134>
    1124:	2e13c403 	cfmulscs	mvf12, mvf3, mvf3
    1128:	206cbf03 	rsbcs	fp, ip, r3, lsl #30
    112c:	2e13c103 	mnfcss	f4, f3
    1130:	4a6cbf03 	bmi	1b30d44 <__Stack_Size+0x1b30944>
    1134:	2e13c103 	mnfcss	f4, f3
    1138:	42242122 	eormi	r2, r4, #-2147483640	; 0x80000008
    113c:	262e7a03 	strtcs	r7, [lr], -r3, lsl #20
    1140:	251b331b 	ldrcs	r3, [fp, #-795]
    1144:	241c322a 	ldrcs	r3, [ip], #-554
    1148:	db032131 	blle	c9614 <__Stack_Size+0xc9214>
    114c:	d803207c 	stmdale	r3, {r2, r3, r4, r5, r6, sp}
    1150:	a803206f 	stmdage	r3, {r0, r1, r2, r3, r5, r6, sp}
    1154:	035b2010 	cmpeq	fp, #16	; 0x10
    1158:	03746fd7 	cmneq	r4, #860	; 0x35c
    115c:	686613ea 	stmdavs	r6!, {r1, r3, r5, r6, r7, r8, r9, ip}^
    1160:	2a322521 	bcs	c8a5ec <__Stack_Size+0xc8a1ec>
    1164:	1c241c24 	stcne	12, cr1, [r4], #-144
    1168:	1c242a32 	stcne	10, cr2, [r4], #-200
    116c:	03213124 	teqeq	r1, #9	; 0x9
    1170:	03207cc8 	teqeq	r0, #51200	; 0xc800
    1174:	03206fc6 	teqeq	r0, #792	; 0x318
    1178:	5b2010ba 	blpl	805468 <__Stack_Size+0x805068>
    117c:	4a03d403 	bmi	f6190 <__Stack_Size+0xf5d90>
    1180:	40252168 	eormi	r2, r5, r8, ror #2
    1184:	321c242a 	andscc	r2, ip, #704643072	; 0x2a000000
    1188:	322a241c 	eorcc	r2, sl, #469762048	; 0x1c000000
    118c:	2131241c 	teqcs	r1, ip, lsl r4
    1190:	207cb503 	rsbscs	fp, ip, r3, lsl #10
    1194:	206fb403 	rsbcs	fp, pc, r3, lsl #8
    1198:	2010cc03 	andscs	ip, r0, r3, lsl #24
    119c:	6fb3035b 	svcvs	0x00b3035b
    11a0:	20100366 	andscs	r0, r0, r6, ror #6
    11a4:	032e1b03 	teqeq	lr, #3072	; 0xc00
    11a8:	0a032e6d 	beq	ccb64 <__Stack_Size+0xcc764>
    11ac:	20760320 	rsbscs	r0, r6, r0, lsr #6
    11b0:	034a0a03 	movteq	r0, #43523	; 0xaa03
    11b4:	cd036609 	stcgt	6, cr6, [r3, #-36]
    11b8:	21682e12 	cmncs	r8, r2, lsl lr
    11bc:	232b6924 	teqcs	fp, #589824	; 0x90000
    11c0:	3f21231d 	svccc	0x0021231d
    11c4:	7cef0321 	stclvc	3, cr0, [pc], #132
    11c8:	70bc0320 	adcsvc	r0, ip, r0, lsr #6
    11cc:	0fc40320 	svceq	0x00c40320
    11d0:	ad035b2e 	vstrge	d5, [r3, #-184]
    11d4:	21684a03 	cmncs	r8, r3, lsl #20
    11d8:	7a034224 	bvc	d1a70 <__Stack_Size+0xd1670>
    11dc:	331b262e 	tstcc	fp, #48234496	; 0x2e00000
    11e0:	322a251b 	eorcc	r2, sl, #113246208	; 0x6c00000
    11e4:	db032131 	blle	c96b0 <__Stack_Size+0xc92b0>
    11e8:	0369207c 	cmneq	r9, #124	; 0x7c
    11ec:	68660391 	stmdavs	r6!, {r0, r4, r7, r8, r9}^
    11f0:	03422421 	movteq	r2, #9249	; 0x2421
    11f4:	1b262e7a 	blne	98cbe4 <__Stack_Size+0x98c7e4>
    11f8:	2a251b33 	bcs	947ecc <__Stack_Size+0x947acc>
    11fc:	31241c32 	teqcc	r4, r2, lsr ip
    1200:	7cdb0321 	ldclvc	3, cr0, [fp], {33}
    1204:	70af0320 	adcvc	r0, pc, r0, lsr #6
    1208:	0fd10320 	svceq	0x00d10320
    120c:	e3035b2e 	movw	r5, #15150	; 0x3b2e
    1210:	21686602 	cmncs	r8, r2, lsl #12
    1214:	242a4024 	strtcs	r4, [sl], #-36
    1218:	241c321c 	ldrcs	r3, [ip], #-540
    121c:	2123242a 	teqcs	r3, sl, lsr #8
    1220:	207cef03 	rsbscs	lr, ip, r3, lsl #30
    1224:	70d00369 	sbcsvc	r0, r0, r9, ror #6
    1228:	2e0e034a 	cdpcs	3, 0, cr0, cr14, cr10, {2}
    122c:	f7010d03 	undefined instruction 0xf7010d03
    1230:	142e0b03 	strtne	r0, [lr], #-2819
    1234:	21213d3d 	teqcs	r1, sp, lsr sp
    1238:	2e0b032f 	cdpcs	3, 0, cr0, cr11, cr15, {1}
    123c:	21213d14 	teqcs	r1, r4, lsl sp
    1240:	21212121 	teqcs	r1, r1, lsr #2
    1244:	2e0b0321 	cdpcs	3, 0, cr0, cr11, cr1, {1}
    1248:	3d213d14 	stccc	13, cr3, [r1, #-80]!
    124c:	0b03213d 	bleq	c9748 <__Stack_Size+0xc9348>
    1250:	213d1420 	teqcs	sp, r0, lsr #8
    1254:	21212121 	teqcs	r1, r1, lsr #2
    1258:	200c0321 	andcs	r0, ip, r1, lsr #6
    125c:	685d2317 	ldmdavs	sp, {r0, r1, r2, r4, r8, r9, sp}^
    1260:	172e0c03 	strne	r0, [lr, -r3, lsl #24]!
    1264:	03686b23 	cmneq	r8, #35840	; 0x8c00
    1268:	23192017 	tstcs	r9, #23	; 0x17
    126c:	12035a5d 	andne	r5, r3, #380928	; 0x5d000
    1270:	03211920 	teqeq	r1, #524288	; 0x80000
    1274:	3d192017 	ldccc	0, cr2, [r9, #-92]
    1278:	19201503 	stmdbne	r0!, {r0, r1, r8, sl, ip}
    127c:	035a5d23 	cmpeq	sl, #2240	; 0x8c0
    1280:	6717200b 	ldrvs	r2, [r7, -fp]
    1284:	032e1003 	teqeq	lr, #3	; 0x3
    1288:	23010292 	movwcs	r0, #4754	; 0x1292
    128c:	ee03234d 	cdp	3, 0, cr2, cr3, cr13, {2}
    1290:	0359207d 	cmpeq	r9, #125	; 0x7d
    1294:	28202e16 	stmdacs	r0!, {r1, r2, r4, r9, sl, fp, sp}
    1298:	36207803 	strtcc	r7, [r0], -r3, lsl #16
    129c:	200fea03 	andcs	lr, pc, r3, lsl #20
    12a0:	34242168 	strtcc	r2, [r4], #-360
    12a4:	262e7a03 	strtcs	r7, [lr], -r3, lsl #20
    12a8:	26207a03 	strtcs	r7, [r0], -r3, lsl #20
    12ac:	322a331b 	eorcc	r3, sl, #1811939328	; 0x6c000000
    12b0:	4503242a 	strmi	r2, [r3, #-1066]
    12b4:	2421682e 	strtcs	r6, [r1], #-2094
    12b8:	1c242a40 	stcne	10, cr2, [r4], #-256
    12bc:	2a321c32 	bcs	c8838c <__Stack_Size+0xc87f8c>
    12c0:	03212324 	teqeq	r1, #-1879048192	; 0x90000000
    12c4:	2320729f 	teqcs	r0, #-268435447	; 0xf0000009
    12c8:	9a03314d 	bls	cd804 <__Stack_Size+0xcd404>
    12cc:	0359207e 	cmpeq	r9, #126	; 0x7e
    12d0:	df032e18 	svcle	0x00032e18
    12d4:	85340100 	ldrhi	r0, [r4, #-256]!
    12d8:	207fa503 	rsbscs	sl, pc, r3, lsl #10
    12dc:	21314e25 	teqcs	r1, r5, lsr #28
    12e0:	03201803 	teqeq	r0, #196608	; 0x30000
    12e4:	8534012d 	ldrhi	r0, [r4, #-301]!
    12e8:	59205503 	stmdbpl	r0!, {r0, r1, r8, sl, ip, lr}
    12ec:	032e1803 	teqeq	lr, #196608	; 0x30000
    12f0:	85340109 	ldrhi	r0, [r4, #-265]!
    12f4:	20110321 	andscs	r0, r1, r1, lsr #6
    12f8:	03212318 	teqeq	r1, #1610612736	; 0x60000000
    12fc:	23192e12 	tstcs	r9, #288	; 0x120
    1300:	0321234d 	teqeq	r1, #872415233	; 0x34000001
    1304:	231a2015 	tstcs	sl, #21	; 0x15
    1308:	0321234d 	teqeq	r1, #872415233	; 0x34000001
    130c:	0c03201c 	stceq	0, cr2, [r3], {28}
    1310:	2e740301 	cdpcs	3, 7, cr0, cr4, cr1, {0}
    1314:	23200f03 	teqcs	r0, #12	; 0xc
    1318:	33293327 	teqcc	r9, #-1677721600	; 0x9c000000
    131c:	32207703 	eorcc	r7, r0, #786432	; 0xc0000
    1320:	20770325 	rsbscs	r0, r7, r5, lsr #6
    1324:	77032532 	smladxvc	r3, r2, r5, r2
    1328:	03323320 	teqeq	r2, #-2147483648	; 0x80000000
    132c:	32322e78 	eorscc	r2, r2, #1920	; 0x780
    1330:	21232323 	teqcs	r3, r3, lsr #6
    1334:	192e1103 	stmdbne	lr!, {r0, r1, r8, ip}
    1338:	21234d23 	teqcs	r3, r3, lsr #26
    133c:	19201103 	stmdbne	r0!, {r0, r1, r8, ip}
    1340:	213f4d23 	teqcs	pc, r3, lsr #26
    1344:	19201103 	stmdbne	r0!, {r0, r1, r8, ip}
    1348:	21234d23 	teqcs	r3, r3, lsr #26
    134c:	18201103 	stmdane	r0!, {r0, r1, r8, ip}
    1350:	213f4d23 	teqcs	pc, r3, lsr #26
    1354:	17200d03 	strne	r0, [r0, -r3, lsl #26]!
    1358:	03685d23 	cmneq	r8, #2240	; 0x8c0
    135c:	23172e0c 	tstcs	r7, #192	; 0xc0
    1360:	0d03685d 	stceq	8, cr6, [r3, #-372]
    1364:	5d23172e 	stcpl	7, cr1, [r3, #-184]!
    1368:	2e0d0368 	cdpcs	3, 0, cr0, cr13, cr8, {3}
    136c:	685d2317 	ldmdavs	sp, {r0, r1, r2, r4, r8, r9, sp}^
    1370:	192e1003 	stmdbne	lr!, {r0, r1, ip}
    1374:	21234d23 	teqcs	r3, r3, lsr #26
    1378:	19201003 	stmdbne	r0!, {r0, r1, ip}
    137c:	213f4d23 	teqcs	pc, r3, lsr #26
    1380:	19201003 	stmdbne	r0!, {r0, r1, ip}
    1384:	21234d23 	teqcs	r3, r3, lsr #26
    1388:	19201003 	stmdbne	r0!, {r0, r1, ip}
    138c:	213f4d23 	teqcs	pc, r3, lsr #26
    1390:	1a200f03 	bne	804fa4 <__Stack_Size+0x804ba4>
    1394:	21234d23 	teqcs	r3, r3, lsr #26
    1398:	1a200f03 	bne	804fac <__Stack_Size+0x804bac>
    139c:	213f4d23 	teqcs	pc, r3, lsr #26
    13a0:	1a200f03 	bne	804fb4 <__Stack_Size+0x804bb4>
    13a4:	21234d23 	teqcs	r3, r3, lsr #26
    13a8:	1a200f03 	bne	804fbc <__Stack_Size+0x804bbc>
    13ac:	213f4d23 	teqcs	pc, r3, lsr #26
    13b0:	19200f03 	stmdbne	r0!, {r0, r1, r8, r9, sl, fp}
    13b4:	21234d23 	teqcs	r3, r3, lsr #26
    13b8:	19200f03 	stmdbne	r0!, {r0, r1, r8, r9, sl, fp}
    13bc:	213f3123 	teqcs	pc, r3, lsr #2
    13c0:	19200f03 	stmdbne	r0!, {r0, r1, r8, r9, sl, fp}
    13c4:	21234d23 	teqcs	r3, r3, lsr #26
    13c8:	19200f03 	stmdbne	r0!, {r0, r1, r8, r9, sl, fp}
    13cc:	213f3123 	teqcs	pc, r3, lsr #2
    13d0:	19200f03 	stmdbne	r0!, {r0, r1, r8, r9, sl, fp}
    13d4:	21234b23 	teqcs	r3, r3, lsr #22
    13d8:	19200e03 	stmdbne	r0!, {r0, r1, r9, sl, fp}
    13dc:	21234b23 	teqcs	r3, r3, lsr #22
    13e0:	19200f03 	stmdbne	r0!, {r0, r1, r8, r9, sl, fp}
    13e4:	213f4b23 	teqcs	pc, r3, lsr #22
    13e8:	19200e03 	stmdbne	r0!, {r0, r1, r9, sl, fp}
    13ec:	213f4b23 	teqcs	pc, r3, lsr #22
    13f0:	19200f03 	stmdbne	r0!, {r0, r1, r8, r9, sl, fp}
    13f4:	213f4b23 	teqcs	pc, r3, lsr #22
    13f8:	19200e03 	stmdbne	r0!, {r0, r1, r9, sl, fp}
    13fc:	213f4b23 	teqcs	pc, r3, lsr #22
    1400:	19200f03 	stmdbne	r0!, {r0, r1, r8, r9, sl, fp}
    1404:	213f4b23 	teqcs	pc, r3, lsr #22
    1408:	19201303 	stmdbne	r0!, {r0, r1, r8, r9, ip}
    140c:	4b851d31 	blmi	fe1488d8 <SCS_BASE+0x1e13a8d8>
    1410:	19201103 	stmdbne	r0!, {r0, r1, r8, ip}
    1414:	4b851d31 	blmi	fe1488e0 <SCS_BASE+0x1e13a8e0>
    1418:	19201d03 	stmdbne	r0!, {r0, r1, r8, sl, fp, ip}
    141c:	272e7903 	strcs	r7, [lr, -r3, lsl #18]!
    1420:	27207903 	strcs	r7, [r0, -r3, lsl #18]!
    1424:	8277033e 	rsbshi	r0, r7, #-134217728	; 0xf8000000
    1428:	93232227 	teqls	r3, #1879048194	; 0x70000002
    142c:	0368af5e 	cmneq	r8, #376	; 0x178
    1430:	23172e0c 	tstcs	r7, #192	; 0xc0
    1434:	0e03685d 	mcreq	8, 0, r6, cr3, cr13, {2}
    1438:	5d23172e 	stcpl	7, cr1, [r3, #-184]!
    143c:	2e0c0368 	cdpcs	3, 0, cr0, cr12, cr8, {3}
    1440:	685d2317 	ldmdavs	sp, {r0, r1, r2, r4, r8, r9, sp}^
    1444:	182e0e03 	stmdane	lr!, {r0, r1, r9, sl, fp}
    1448:	17034b69 	strne	r4, [r3, -r9, ror #22]
    144c:	4b69192e 	blmi	1a4790c <__Stack_Size+0x1a4750c>
    1450:	182e1103 	stmdane	lr!, {r0, r1, r8, ip}
    1454:	10034b69 	andne	r4, r3, r9, ror #22
    1458:	4b69182e 	blmi	1a47518 <__Stack_Size+0x1a47118>
    145c:	172e0b03 	strne	r0, [lr, -r3, lsl #22]!
    1460:	200b0321 	andcs	r0, fp, r1, lsr #6
    1464:	0c032117 	stfeqs	f2, [r3], {23}
    1468:	03211720 	teqeq	r1, #8388608	; 0x800000
    146c:	2117200c 	tstcs	r7, ip
    1470:	17200c03 	strne	r0, [r0, -r3, lsl #24]!
    1474:	200c0321 	andcs	r0, ip, r1, lsr #6
    1478:	12032f17 	andne	r2, r3, #92	; 0x5c
    147c:	4b69182e 	blmi	1a4753c <__Stack_Size+0x1a4713c>
    1480:	182e1203 	stmdane	lr!, {r0, r1, r9, ip}
    1484:	12036769 	andne	r6, r3, #27525120	; 0x1a40000
    1488:	4b69182e 	blmi	1a47548 <__Stack_Size+0x1a47148>
    148c:	182e1203 	stmdane	lr!, {r0, r1, r9, ip}
    1490:	10036769 	andne	r6, r3, r9, ror #14
    1494:	4b3f182e 	blmi	fc7554 <__Stack_Size+0xfc7154>
    1498:	17200a03 	strne	r0, [r0, -r3, lsl #20]!
    149c:	2e0b032f 	cdpcs	3, 0, cr0, cr11, cr15, {1}
    14a0:	0b032f17 	bleq	cd104 <__Stack_Size+0xccd04>
    14a4:	032f172e 	teqeq	pc, #12058624	; 0xb80000
    14a8:	3d172e0b 	ldccc	14, cr2, [r7, #-44]
    14ac:	17200a03 	strne	r0, [r0, -r3, lsl #20]!
    14b0:	2e0a032f 	cdpcs	3, 0, cr0, cr10, cr15, {1}
    14b4:	18032f17 	stmdane	r3, {r0, r1, r2, r4, r8, r9, sl, fp, sp}
    14b8:	09031a2e 	stmdbeq	r3, {r1, r2, r3, r5, r9, fp, ip}
    14bc:	20180358 	andscs	r0, r8, r8, asr r3
    14c0:	15034b18 	strne	r4, [r3, #-2840]
    14c4:	0109032e 	tsteq	r9, lr, lsr #6
    14c8:	09032222 	stmdbeq	r3, {r1, r5, r9, sp}
    14cc:	20150390 	mulscs	r5, r0, r3
    14d0:	b2034b18 	andlt	r4, r3, #24576	; 0x6000
    14d4:	1c242e69 	stcne	14, cr2, [r4], #-420
    14d8:	08241c24 	stmdaeq	r4!, {r2, r5, sl, fp, ip}
    14dc:	4b4059d9 	blmi	1017c48 <__Stack_Size+0x1017848>
    14e0:	4b324b32 	blmi	c941b0 <__Stack_Size+0xc93db0>
    14e4:	4b324b32 	blmi	c941b4 <__Stack_Size+0xc93db4>
    14e8:	595c4b32 	ldmdbpl	ip, {r1, r4, r5, r8, r9, fp, lr}^
    14ec:	0009025e 	andeq	r0, r9, lr, asr r2
    14f0:	01fa0101 	mvnseq	r0, r1, lsl #2
    14f4:	00020000 	andeq	r0, r2, r0
    14f8:	0000009b 	muleq	r0, fp, r0
    14fc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1500:	0101000d 	tsteq	r1, sp
    1504:	00000101 	andeq	r0, r0, r1, lsl #2
    1508:	00000100 	andeq	r0, r0, r0, lsl #2
    150c:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
    1510:	31663233 	cmncc	r6, r3, lsr r2
    1514:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    1518:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    151c:	73006372 	movwvc	r6, #882	; 0x372
    1520:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1524:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1528:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    152c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1530:	74730000 	ldrbtvc	r0, [r3]
    1534:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1538:	5f783031 	svcpl	0x00783031
    153c:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    1540:	00632e74 	rsbeq	r2, r3, r4, ror lr
    1544:	73000001 	movwvc	r0, #1	; 0x1
    1548:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    154c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1550:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1554:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1558:	73000002 	movwvc	r0, #2	; 0x2
    155c:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1560:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1564:	70616d5f 	rsbvc	r6, r1, pc, asr sp
    1568:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    156c:	74730000 	ldrbtvc	r0, [r3]
    1570:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1574:	5f783031 	svcpl	0x00783031
    1578:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    157c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1580:	73000002 	movwvc	r0, #2	; 0x2
    1584:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1588:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    158c:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    1590:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1594:	00000000 	andeq	r0, r0, r0
    1598:	5d680205 	sfmpl	f0, 2, [r8, #-20]!
    159c:	e8030800 	stmda	r3, {fp}
    15a0:	3d140101 	ldfccs	f0, [r4, #-4]
    15a4:	3d21213d 	stfccs	f2, [r1, #-244]!
    15a8:	2e0f033d 	mcrcs	3, 0, r0, cr15, cr13, {1}
    15ac:	03011803 	movweq	r1, #6147	; 0x1803
    15b0:	0d033c73 	stceq	12, cr3, [r3, #-460]
    15b4:	58750320 	ldmdapl	r5!, {r5, r8, r9}^
    15b8:	032e0b03 	teqeq	lr, #3072	; 0xc00
    15bc:	0b032e75 	bleq	ccf98 <__Stack_Size+0xccb98>
    15c0:	20750320 	rsbscs	r0, r5, r0, lsr #6
    15c4:	3d200b03 	fstmdbxcc	r0!, {d0}
    15c8:	14200b03 	strtne	r0, [r0], #-2819
    15cc:	2121213d 	teqcs	r1, sp, lsr r1
    15d0:	172e0e03 	strne	r0, [lr, -r3, lsl #28]!
    15d4:	03685d23 	cmneq	r8, #2240	; 0x8c0
    15d8:	0d032e1c 	stceq	14, cr2, [r3, #-112]
    15dc:	6e034101 	adfvss	f4, f3, f1
    15e0:	2012033c 	andscs	r0, r2, ip, lsr r3
    15e4:	2e6c0330 	mcrcs	3, 3, r0, cr12, cr0, {1}
    15e8:	22201403 	eorcs	r1, r0, #50331648	; 0x3000000
    15ec:	22323e30 	eorscs	r3, r2, #768	; 0x300
    15f0:	034c4022 	movteq	r4, #49186	; 0xc022
    15f4:	24183c13 	ldrcs	r3, [r8], #-3091
    15f8:	0d035a5e 	fstseq	s10, [r3, #-376]
    15fc:	4b681820 	blmi	1a07684 <__Stack_Size+0x1a07284>
    1600:	172e1003 	strne	r1, [lr, -r3]!
    1604:	0e034b67 	fnmacdeq	d4, d3, d23
    1608:	5d23172e 	stcpl	7, cr1, [r3, #-184]!
    160c:	2e110368 	cdpcs	3, 1, cr0, cr1, cr8, {3}
    1610:	034b6717 	movteq	r6, #46871	; 0xb717
    1614:	23172e0e 	tstcs	r7, #224	; 0xe0
    1618:	0d03685d 	stceq	8, cr6, [r3, #-372]
    161c:	033d182e 	teqeq	sp, #3014656	; 0x2e0000
    1620:	3d17200c 	ldccc	0, cr2, [r7, #-48]
    1624:	17200c03 	strne	r0, [r0, -r3, lsl #24]!
    1628:	200d0359 	andcs	r0, sp, r9, asr r3
    162c:	03593e17 	cmpeq	r9, #368	; 0x170
    1630:	4c172e0e 	ldcmi	14, cr2, [r7], {14}
    1634:	2e0e034b 	cdpcs	3, 0, cr0, cr14, cr11, {2}
    1638:	685d2317 	ldmdavs	sp, {r0, r1, r2, r4, r8, r9, sp}^
    163c:	172e0e03 	strne	r0, [lr, -r3, lsl #28]!
    1640:	03685d23 	cmneq	r8, #2240	; 0x8c0
    1644:	23172e0e 	tstcs	r7, #224	; 0xe0
    1648:	1003685d 	andne	r6, r3, sp, asr r8
    164c:	4b67172e 	blmi	19c730c <__Stack_Size+0x19c6f0c>
    1650:	172e0e03 	strne	r0, [lr, -r3, lsl #28]!
    1654:	03685d23 	cmneq	r8, #2240	; 0x8c0
    1658:	031a2e19 	tsteq	sl, #400	; 0x190
    165c:	23035809 	movwcs	r5, #14345	; 0x3809
    1660:	034b1820 	movteq	r1, #47136	; 0xb820
    1664:	0a032e1a 	beq	cced4 <__Stack_Size+0xccad4>
    1668:	305a4101 	subscc	r4, sl, r1, lsl #2
    166c:	3230242c 	eorscc	r2, r0, #738197504	; 0x2c000000
    1670:	03303d4f 	teqeq	r0, #5056	; 0x13c0
    1674:	23039e0a 	movwcs	r9, #15882	; 0x3e0a
    1678:	010b032e 	tsteq	fp, lr, lsr #6
    167c:	79a60375 	stmibvc	r6!, {r0, r2, r4, r5, r6, r8, r9}
    1680:	01150320 	tsteq	r5, r0, lsr #6
    1684:	03200903 	teqeq	r0, #49152	; 0xc000
    1688:	31512079 	cmpcc	r1, r9, ror r0
    168c:	03205f03 	teqeq	r0, #12	; 0xc
    1690:	5303202d 	movwpl	r2, #12333	; 0x302d
    1694:	202d0320 	eorcs	r0, sp, r0, lsr #6
    1698:	03207603 	teqeq	r0, #3145728	; 0x300000
    169c:	76032e0a 	strvc	r2, [r3], -sl, lsl #28
    16a0:	2e0a032e 	cdpcs	3, 0, cr0, cr10, cr14, {1}
    16a4:	03207603 	teqeq	r0, #3145728	; 0x300000
    16a8:	033f2e0a 	teqeq	pc, #160	; 0xa0
    16ac:	79032009 	stmdbvc	r3, {r0, r3, sp}
    16b0:	4a4e0320 	bmi	1382338 <__Stack_Size+0x1381f38>
    16b4:	03203903 	teqeq	r0, #49152	; 0xc000
    16b8:	39032047 	stmdbcc	r3, {r0, r1, r2, r6, sp}
    16bc:	20470320 	subcs	r0, r7, r0, lsr #6
    16c0:	03201203 	teqeq	r0, #805306368	; 0x30000000
    16c4:	033d202b 	teqeq	sp, #43	; 0x2b
    16c8:	7503200b 	strvc	r2, [r3, #-11]
    16cc:	24322220 	ldrtcs	r2, [r2], #-544
    16d0:	321c3283 	andscc	r3, ip, #805306376	; 0x30000008
    16d4:	fd034b93 	stc2	11, cr4, [r3, #-588]
    16d8:	1c24667e 	stcne	6, cr6, [r4], #-504
    16dc:	08241c24 	stmdaeq	r4!, {r2, r5, sl, fp, ip}
    16e0:	596a5923 	stmdbpl	sl!, {r0, r1, r5, r8, fp, ip, lr}^
    16e4:	59405940 	stmdbpl	r0, {r6, r8, fp, ip, lr}^
    16e8:	025e5940 	subseq	r5, lr, #1048576	; 0x100000
    16ec:	01010006 	tsteq	r1, r6
    16f0:	000000a0 	andeq	r0, r0, r0, lsr #1
    16f4:	00390002 	eorseq	r0, r9, r2
    16f8:	01020000 	tsteq	r2, r0
    16fc:	000d0efb 	strdeq	r0, [sp], -fp
    1700:	01010101 	tsteq	r1, r1, lsl #2
    1704:	01000000 	tsteq	r0, r0
    1708:	73010000 	movwvc	r0, #4096	; 0x1000
    170c:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1710:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1714:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1718:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    171c:	6f630000 	svcvs	0x00630000
    1720:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    1724:	6d5f336d 	ldclvs	3, cr3, [pc, #-436]
    1728:	6f726361 	svcvs	0x00726361
    172c:	0100732e 	tsteq	r0, lr, lsr #6
    1730:	00000000 	andeq	r0, r0, r0
    1734:	61240205 	teqvs	r4, r5, lsl #4
    1738:	34030800 	strcc	r0, [r3], #-2048
    173c:	0b032101 	bleq	c9b48 <__Stack_Size+0xc9748>
    1740:	0b032120 	bleq	c9bc8 <__Stack_Size+0xc97c8>
    1744:	0b032120 	bleq	c9bcc <__Stack_Size+0xc97cc>
    1748:	0b032f20 	bleq	cd3d0 <__Stack_Size+0xccfd0>
    174c:	0b032f20 	bleq	cd3d4 <__Stack_Size+0xccfd4>
    1750:	0b032f20 	bleq	cd3d8 <__Stack_Size+0xccfd8>
    1754:	0b032120 	bleq	c9bdc <__Stack_Size+0xc97dc>
    1758:	0b032f20 	bleq	cd3e0 <__Stack_Size+0xccfe0>
    175c:	032f2f20 	teqeq	pc, #128	; 0x80
    1760:	032f200a 	teqeq	pc, #10	; 0xa
    1764:	032f200b 	teqeq	pc, #11	; 0xb
    1768:	032f200b 	teqeq	pc, #11	; 0xb
    176c:	032f200b 	teqeq	pc, #11	; 0xb
    1770:	0321200a 	teqeq	r1, #10	; 0xa
    1774:	0321200b 	teqeq	r1, #11	; 0xb
    1778:	0321200b 	teqeq	r1, #11	; 0xb
    177c:	0321200b 	teqeq	r1, #11	; 0xb
    1780:	032f200b 	teqeq	pc, #11	; 0xb
    1784:	032f200b 	teqeq	pc, #11	; 0xb
    1788:	0321200a 	teqeq	r1, #10	; 0xa
    178c:	0221200b 	eoreq	r2, r1, #11	; 0xb
    1790:	01010001 	tsteq	r1, r1
    1794:	0000005a 	andeq	r0, r0, sl, asr r0
    1798:	003b0002 	eorseq	r0, fp, r2
    179c:	01020000 	tsteq	r2, r0
    17a0:	000d0efb 	strdeq	r0, [sp], -fp
    17a4:	01010101 	tsteq	r1, r1, lsl #2
    17a8:	01000000 	tsteq	r0, r0
    17ac:	73010000 	movwvc	r0, #4096	; 0x1000
    17b0:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    17b4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    17b8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    17bc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    17c0:	74730000 	ldrbtvc	r0, [r3]
    17c4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    17c8:	5f783031 	svcpl	0x00783031
    17cc:	74636576 	strbtvc	r6, [r3], #-1398
    17d0:	632e726f 	teqvs	lr, #-268435450	; 0xf0000006
    17d4:	00000100 	andeq	r0, r0, r0, lsl #2
    17d8:	02050000 	andeq	r0, r5, #0	; 0x0
    17dc:	08006194 	stmdaeq	r0, {r2, r4, r7, r8, sp, lr}
    17e0:	01019103 	tsteq	r1, r3, lsl #2
    17e4:	563e2758 	undefined
    17e8:	36482260 	strbcc	r2, [r8], -r0, ror #4
    17ec:	000e022f 	andeq	r0, lr, pc, lsr #4
    17f0:	00700101 	rsbseq	r0, r0, r1, lsl #2
    17f4:	00020000 	andeq	r0, r2, r0
    17f8:	00000057 	andeq	r0, r0, r7, asr r0
    17fc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1800:	0101000d 	tsteq	r1, sp
    1804:	00000101 	andeq	r0, r0, r1, lsl #2
    1808:	00000100 	andeq	r0, r0, r0, lsl #2
    180c:	2f2e2e01 	svccs	0x002e2e01
    1810:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1814:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1818:	2f2e2e2f 	svccs	0x002e2e2f
    181c:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    1820:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    1824:	656e2f30 	strbvs	r2, [lr, #-3888]!
    1828:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    182c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1830:	74732f63 	ldrbtvc	r2, [r3], #-3939
    1834:	62696c64 	rsbvs	r6, r9, #25600	; 0x6400
    1838:	74610000 	strbtvc	r0, [r1]
    183c:	74697865 	strbtvc	r7, [r9], #-2149
    1840:	0100632e 	tsteq	r0, lr, lsr #6
    1844:	74610000 	strbtvc	r0, [r1]
    1848:	74697865 	strbtvc	r7, [r9], #-2149
    184c:	0100682e 	tsteq	r0, lr, lsr #16
    1850:	00000000 	andeq	r0, r0, r0
    1854:	00000205 	andeq	r0, r0, r5, lsl #4
    1858:	3f030000 	svccc	0x00030000
    185c:	2f2d4b01 	svccs	0x002d4b01
    1860:	00060267 	andeq	r0, r6, r7, ror #4
    1864:	00eb0101 	rsceq	r0, fp, r1, lsl #2
    1868:	00020000 	andeq	r0, r2, r0
    186c:	000000d0 	ldrdeq	r0, [r0], -r0
    1870:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1874:	0101000d 	tsteq	r1, sp
    1878:	00000101 	andeq	r0, r0, r1, lsl #2
    187c:	00000100 	andeq	r0, r0, r0, lsl #2
    1880:	2f2e2e01 	svccs	0x002e2e01
    1884:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1888:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    188c:	2f2e2e2f 	svccs	0x002e2e2f
    1890:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    1894:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    1898:	656e2f30 	strbvs	r2, [lr, #-3888]!
    189c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    18a0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    18a4:	74732f63 	ldrbtvc	r2, [r3], #-3939
    18a8:	62696c64 	rsbvs	r6, r9, #25600	; 0x6400
    18ac:	2f3a6300 	svccs	0x003a6300
    18b0:	616e6977 	smcvs	59031
    18b4:	2f736d72 	svccs	0x00736d72
    18b8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    18bc:	63672f64 	cmnvs	r7, #400	; 0x190
    18c0:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    18c4:	2f302e33 	svccs	0x00302e33
    18c8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    18cc:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    18d0:	2f636269 	svccs	0x00636269
    18d4:	6c636e69 	stclvs	14, cr6, [r3], #-420
    18d8:	2f656475 	svccs	0x00656475
    18dc:	00737973 	rsbseq	r7, r3, r3, ror r9
    18e0:	772f3a63 	strvc	r3, [pc, -r3, ror #20]!
    18e4:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    18e8:	622f736d 	eorvs	r7, pc, #-1275068415	; 0xb4000001
    18ec:	646c6975 	strbtvs	r6, [ip], #-2421
    18f0:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    18f4:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    18f8:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    18fc:	692f6363 	stmdbvs	pc!, {r0, r1, r5, r6, r8, r9, sp, lr}
    1900:	756c636e 	strbvc	r6, [ip, #-878]!
    1904:	00006564 	andeq	r6, r0, r4, ror #10
    1908:	74697865 	strbtvc	r7, [r9], #-2149
    190c:	0100632e 	tsteq	r0, lr, lsr #6
    1910:	6f6c0000 	svcvs	0x006c0000
    1914:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    1918:	00000200 	andeq	r0, r0, r0, lsl #4
    191c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1920:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1924:	00000200 	andeq	r0, r0, r0, lsl #4
    1928:	64647473 	strbtvs	r7, [r4], #-1139
    192c:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    1930:	00000300 	andeq	r0, r0, r0, lsl #6
    1934:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    1938:	00682e74 	rsbeq	r2, r8, r4, ror lr
    193c:	00000002 	andeq	r0, r0, r2
    1940:	00020500 	andeq	r0, r2, r0, lsl #10
    1944:	03000000 	movweq	r0, #0	; 0x0
    1948:	2d13013b 	ldfcss	f0, [r3, #-236]
    194c:	4b83302f 	blmi	fe0cda10 <SCS_BASE+0x1e0bfa10>
    1950:	01000602 	tsteq	r0, r2, lsl #12
    1954:	0000d701 	andeq	sp, r0, r1, lsl #14
    1958:	d1000200 	tstle	r0, r0, lsl #4
    195c:	02000000 	andeq	r0, r0, #0	; 0x0
    1960:	0d0efb01 	vstreq	d15, [lr, #-4]
    1964:	01010100 	tsteq	r1, r0, lsl #2
    1968:	00000001 	andeq	r0, r0, r1
    196c:	01000001 	tsteq	r0, r1
    1970:	772f3a63 	strvc	r3, [pc, -r3, ror #20]!
    1974:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    1978:	622f736d 	eorvs	r7, pc, #-1275068415	; 0xb4000001
    197c:	646c6975 	strbtvs	r6, [ip], #-2421
    1980:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1984:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
    1988:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    198c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1990:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    1994:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}
    1998:	756c636e 	strbvc	r6, [ip, #-878]!
    199c:	732f6564 	teqvc	pc, #419430400	; 0x19000000
    19a0:	63007379 	movwvs	r7, #889	; 0x379
    19a4:	69772f3a 	ldmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
    19a8:	6d72616e 	ldfvse	f6, [r2, #-440]!
    19ac:	75622f73 	strbvc	r2, [r2, #-3955]!
    19b0:	2f646c69 	svccs	0x00646c69
    19b4:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    19b8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    19bc:	63672f64 	cmnvs	r7, #400	; 0x190
    19c0:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    19c4:	64756c63 	ldrbtvs	r6, [r5], #-3171
    19c8:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    19cc:	2f2e2e2f 	svccs	0x002e2e2f
    19d0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    19d4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    19d8:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    19dc:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
    19e0:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    19e4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    19e8:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    19ec:	722f6362 	eorvc	r6, pc, #-2013265919	; 0x88000001
    19f0:	746e6565 	strbtvc	r6, [lr], #-1381
    19f4:	6f6c0000 	svcvs	0x006c0000
    19f8:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    19fc:	00000100 	andeq	r0, r0, r0, lsl #2
    1a00:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1a04:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1a08:	00000100 	andeq	r0, r0, r0, lsl #2
    1a0c:	64647473 	strbtvs	r7, [r4], #-1139
    1a10:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    1a14:	00000200 	andeq	r0, r0, r0, lsl #4
    1a18:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    1a1c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1a20:	69000001 	stmdbvs	r0, {r0}
    1a24:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    1a28:	00632e65 	rsbeq	r2, r3, r5, ror #28
    1a2c:	00000003 	andeq	r0, r0, r3
    1a30:	000000a2 	andeq	r0, r0, r2, lsr #1
    1a34:	007a0002 	rsbseq	r0, sl, r2
    1a38:	01020000 	tsteq	r2, r0
    1a3c:	000d0efb 	strdeq	r0, [sp], -fp
    1a40:	01010101 	tsteq	r1, r1, lsl #2
    1a44:	01000000 	tsteq	r0, r0
    1a48:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1a4c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1a50:	2f2e2e2f 	svccs	0x002e2e2f
    1a54:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1a58:	63672f2e 	cmnvs	r7, #184	; 0xb8
    1a5c:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    1a60:	2f302e33 	svccs	0x00302e33
    1a64:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    1a68:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    1a6c:	2f636269 	svccs	0x00636269
    1a70:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
    1a74:	2f3a6300 	svccs	0x003a6300
    1a78:	616e6977 	smcvs	59031
    1a7c:	2f736d72 	svccs	0x00736d72
    1a80:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    1a84:	63672f64 	cmnvs	r7, #400	; 0x190
    1a88:	75622d63 	strbvc	r2, [r2, #-3427]!
    1a8c:	2f646c69 	svccs	0x00646c69
    1a90:	2f636367 	svccs	0x00636367
    1a94:	6c636e69 	stclvs	14, cr6, [r3], #-420
    1a98:	00656475 	rsbeq	r6, r5, r5, ror r4
    1a9c:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
    1aa0:	00632e74 	rsbeq	r2, r3, r4, ror lr
    1aa4:	73000001 	movwvc	r0, #1	; 0x1
    1aa8:	65646474 	strbvs	r6, [r4, #-1140]!
    1aac:	00682e66 	rsbeq	r2, r8, r6, ror #28
    1ab0:	00000002 	andeq	r0, r0, r2
    1ab4:	00020500 	andeq	r0, r2, r0, lsl #10
    1ab8:	03000000 	movweq	r0, #0	; 0x0
    1abc:	67320131 	undefined
    1ac0:	2f696567 	svccs	0x00696567
    1ac4:	32826503 	addcc	r6, r2, #12582912	; 0xc00000
    1ac8:	69656767 	stmdbvs	r5!, {r0, r1, r2, r5, r6, r8, r9, sl, sp, lr}^
    1acc:	65676730 	strbvs	r6, [r7, #-1840]!
    1ad0:	000c0268 	andeq	r0, ip, r8, ror #4
    1ad4:	00d80101 	sbcseq	r0, r8, r1, lsl #2
    1ad8:	00020000 	andeq	r0, r2, r0
    1adc:	0000007e 	andeq	r0, r0, lr, ror r0
    1ae0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1ae4:	0101000d 	tsteq	r1, sp
    1ae8:	00000101 	andeq	r0, r0, r1, lsl #2
    1aec:	00000100 	andeq	r0, r0, r0, lsl #2
    1af0:	2f2e2e01 	svccs	0x002e2e01
    1af4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1af8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1afc:	2f2e2e2f 	svccs	0x002e2e2f
    1b00:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    1b04:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    1b08:	656e2f30 	strbvs	r2, [lr, #-3888]!
    1b0c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1b10:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1b14:	74732f63 	ldrbtvc	r2, [r3], #-3939
    1b18:	676e6972 	undefined
    1b1c:	2f3a6300 	svccs	0x003a6300
    1b20:	616e6977 	smcvs	59031
    1b24:	2f736d72 	svccs	0x00736d72
    1b28:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    1b2c:	63672f64 	cmnvs	r7, #400	; 0x190
    1b30:	75622d63 	strbvc	r2, [r2, #-3427]!
    1b34:	2f646c69 	svccs	0x00646c69
    1b38:	2f636367 	svccs	0x00636367
    1b3c:	6c636e69 	stclvs	14, cr6, [r3], #-420
    1b40:	00656475 	rsbeq	r6, r5, r5, ror r4
    1b44:	6d656d00 	stclvs	13, cr6, [r5]
    1b48:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
    1b4c:	00010063 	andeq	r0, r1, r3, rrx
    1b50:	64747300 	ldrbtvs	r7, [r4], #-768
    1b54:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    1b58:	00020068 	andeq	r0, r2, r8, rrx
    1b5c:	05000000 	streq	r0, [r0]
    1b60:	00000002 	andeq	r0, r0, r2
    1b64:	012e0300 	teqeq	lr, r0, lsl #6
    1b68:	03011203 	movweq	r1, #4611	; 0x1203
    1b6c:	0b032e6e 	bleq	cd52c <__Stack_Size+0xcd12c>
    1b70:	2e75032e 	cdpcs	3, 7, cr0, cr5, cr14, {1}
    1b74:	312e0f03 	teqcc	lr, r3, lsl #30
    1b78:	03661303 	cmneq	r6, #201326592	; 0xc000000
    1b7c:	032f2e76 	teqeq	pc, #1888	; 0x760
    1b80:	036c2e09 	cmneq	ip, #144	; 0x90
    1b84:	2f302e7a 	svccs	0x00302e7a
    1b88:	56032f2f 	strpl	r2, [r3], -pc, lsr #30
    1b8c:	2e25032e 	cdpcs	3, 2, cr0, cr5, cr14, {1}
    1b90:	032e5b03 	teqeq	lr, #3072	; 0xc00
    1b94:	5203822e 	andpl	r8, r3, #-536870910	; 0xe0000002
    1b98:	2e2e032e 	cdpcs	3, 2, cr0, cr14, cr14, {1}
    1b9c:	032e7703 	teqeq	lr, #786432	; 0xc0000
    1ba0:	03482e0b 	movteq	r2, #36363	; 0x8e0b
    1ba4:	34036652 	strcc	r6, [r3], #-1618
    1ba8:	4884319e 	stmmi	r4, {r1, r2, r3, r4, r7, r8, ip, sp}
    1bac:	00060251 	andeq	r0, r6, r1, asr r2
    1bb0:	01230101 	teqeq	r3, r1, lsl #2
    1bb4:	00020000 	andeq	r0, r2, r0
    1bb8:	000000e0 	andeq	r0, r0, r0, ror #1
    1bbc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1bc0:	0101000d 	tsteq	r1, sp
    1bc4:	00000101 	andeq	r0, r0, r1, lsl #2
    1bc8:	00000100 	andeq	r0, r0, r0, lsl #2
    1bcc:	2f2e2e01 	svccs	0x002e2e01
    1bd0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1bd4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1bd8:	2f2e2e2f 	svccs	0x002e2e2f
    1bdc:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    1be0:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    1be4:	656e2f30 	strbvs	r2, [lr, #-3888]!
    1be8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1bec:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1bf0:	74732f63 	ldrbtvc	r2, [r3], #-3939
    1bf4:	62696c64 	rsbvs	r6, r9, #25600	; 0x6400
    1bf8:	2f3a6300 	svccs	0x003a6300
    1bfc:	616e6977 	smcvs	59031
    1c00:	2f736d72 	svccs	0x00736d72
    1c04:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    1c08:	63672f64 	cmnvs	r7, #400	; 0x190
    1c0c:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    1c10:	2f302e33 	svccs	0x00302e33
    1c14:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    1c18:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    1c1c:	2f636269 	svccs	0x00636269
    1c20:	6c636e69 	stclvs	14, cr6, [r3], #-420
    1c24:	2f656475 	svccs	0x00656475
    1c28:	00737973 	rsbseq	r7, r3, r3, ror r9
    1c2c:	772f3a63 	strvc	r3, [pc, -r3, ror #20]!
    1c30:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    1c34:	622f736d 	eorvs	r7, pc, #-1275068415	; 0xb4000001
    1c38:	646c6975 	strbtvs	r6, [ip], #-2421
    1c3c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1c40:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    1c44:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    1c48:	692f6363 	stmdbvs	pc!, {r0, r1, r5, r6, r8, r9, sp, lr}
    1c4c:	756c636e 	strbvc	r6, [ip, #-878]!
    1c50:	00006564 	andeq	r6, r0, r4, ror #10
    1c54:	74615f5f 	strbtvc	r5, [r1], #-3935
    1c58:	74697865 	strbtvc	r7, [r9], #-2149
    1c5c:	0100632e 	tsteq	r0, lr, lsr #6
    1c60:	6f6c0000 	svcvs	0x006c0000
    1c64:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    1c68:	00000200 	andeq	r0, r0, r0, lsl #4
    1c6c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1c70:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1c74:	00000200 	andeq	r0, r0, r0, lsl #4
    1c78:	64647473 	strbtvs	r7, [r4], #-1139
    1c7c:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    1c80:	00000300 	andeq	r0, r0, r0, lsl #6
    1c84:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    1c88:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1c8c:	61000002 	tstvs	r0, r2
    1c90:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1c94:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1c98:	00000001 	andeq	r0, r0, r1
    1c9c:	00020500 	andeq	r0, r2, r0, lsl #10
    1ca0:	03000000 	movweq	r0, #0	; 0x0
    1ca4:	0a030116 	beq	c2104 <__Stack_Size+0xc1d04>
    1ca8:	2e760301 	cdpcs	3, 7, cr0, cr6, cr1, {0}
    1cac:	4b2e0a03 	blmi	b844c0 <__Stack_Size+0xb840c0>
    1cb0:	2e74032f 	cdpcs	3, 7, cr0, cr4, cr15, {1}
    1cb4:	2d2e0d03 	stccs	13, cr0, [lr, #-12]!
    1cb8:	2e73032f 	cdpcs	3, 7, cr0, cr3, cr15, {1}
    1cbc:	03660d03 	cmneq	r6, #192	; 0xc0
    1cc0:	1b034a17 	blne	d4524 <__Stack_Size+0xd4124>
    1cc4:	7603a34a 	strvc	sl, [r3], -sl, asr #6
    1cc8:	2f2b4c4a 	svccs	0x002b4c4a
    1ccc:	2f2b322d 	svccs	0x002b322d
    1cd0:	312d2c30 	teqcc	sp, r0, lsr ip
    1cd4:	01000602 	tsteq	r0, r2, lsl #12
    1cd8:	00011b01 	andeq	r1, r1, r1, lsl #22
    1cdc:	d9000200 	stmdble	r0, {r9}
    1ce0:	02000000 	andeq	r0, r0, #0	; 0x0
    1ce4:	0d0efb01 	vstreq	d15, [lr, #-4]
    1ce8:	01010100 	tsteq	r1, r0, lsl #2
    1cec:	00000001 	andeq	r0, r0, r1
    1cf0:	01000001 	tsteq	r0, r1
    1cf4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1cf8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1cfc:	2f2e2e2f 	svccs	0x002e2e2f
    1d00:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
    1d04:	342d6363 	strtcc	r6, [sp], #-867
    1d08:	302e332e 	eorcc	r3, lr, lr, lsr #6
    1d0c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1d10:	2f62696c 	svccs	0x0062696c
    1d14:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    1d18:	6474732f 	ldrbtvs	r7, [r4], #-815
    1d1c:	0062696c 	rsbeq	r6, r2, ip, ror #18
    1d20:	772f3a63 	strvc	r3, [pc, -r3, ror #20]!
    1d24:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    1d28:	622f736d 	eorvs	r7, pc, #-1275068415	; 0xb4000001
    1d2c:	646c6975 	strbtvs	r6, [ip], #-2421
    1d30:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1d34:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
    1d38:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    1d3c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1d40:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    1d44:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}
    1d48:	756c636e 	strbvc	r6, [ip, #-878]!
    1d4c:	732f6564 	teqvc	pc, #419430400	; 0x19000000
    1d50:	63007379 	movwvs	r7, #889	; 0x379
    1d54:	69772f3a 	ldmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
    1d58:	6d72616e 	ldfvse	f6, [r2, #-440]!
    1d5c:	75622f73 	strbvc	r2, [r2, #-3955]!
    1d60:	2f646c69 	svccs	0x00646c69
    1d64:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    1d68:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    1d6c:	63672f64 	cmnvs	r7, #400	; 0x190
    1d70:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    1d74:	64756c63 	ldrbtvs	r6, [r5], #-3171
    1d78:	5f000065 	svcpl	0x00000065
    1d7c:	6c61635f 	stclvs	3, cr6, [r1], #-380
    1d80:	74615f6c 	strbtvc	r5, [r1], #-3948
    1d84:	74697865 	strbtvc	r7, [r9], #-2149
    1d88:	0100632e 	tsteq	r0, lr, lsr #6
    1d8c:	6f6c0000 	svcvs	0x006c0000
    1d90:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    1d94:	00000200 	andeq	r0, r0, r0, lsl #4
    1d98:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1d9c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1da0:	00000200 	andeq	r0, r0, r0, lsl #4
    1da4:	64647473 	strbtvs	r7, [r4], #-1139
    1da8:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    1dac:	00000300 	andeq	r0, r0, r0, lsl #6
    1db0:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    1db4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1db8:	00000002 	andeq	r0, r0, r2
    1dbc:	00020500 	andeq	r0, r2, r0, lsl #10
    1dc0:	03000000 	movweq	r0, #0	; 0x0
    1dc4:	0a030111 	beq	c2210 <__Stack_Size+0xc1e10>
    1dc8:	4a76032e 	bmi	1d82a88 <__Stack_Size+0x1d82688>
    1dcc:	4a2c034a 	bmi	b02afc <__Stack_Size+0xb026fc>
    1dd0:	032e7703 	teqeq	lr, #786432	; 0xc0000
    1dd4:	c1512e69 	cmpgt	r1, r9, ror #28
    1dd8:	039e7903 	orrseq	r7, lr, #49152	; 0xc000
    1ddc:	4f03663e 	svcmi	0x0003663e
    1de0:	4b2f2d66 	blmi	bcd380 <__Stack_Size+0xbccf80>
    1de4:	63503130 	cmpvs	r0, #12	; 0xc
    1de8:	89673031 	stmdbhi	r7!, {r0, r4, r5, ip, sp}^
    1dec:	039e7703 	orrseq	r7, lr, #786432	; 0xc0000
    1df0:	02d14a09 	sbcseq	r4, r1, #36864	; 0x9000
    1df4:	0101000a 	tsteq	r1, sl
    1df8:	00000045 	andeq	r0, r0, r5, asr #32
    1dfc:	001f0002 	andseq	r0, pc, r2
    1e00:	01020000 	tsteq	r2, r0
    1e04:	000d0efb 	strdeq	r0, [sp], -fp
    1e08:	01010101 	tsteq	r1, r1, lsl #2
    1e0c:	01000000 	tsteq	r0, r0
    1e10:	00010000 	andeq	r0, r1, r0
    1e14:	6e747263 	cdpvs	2, 7, cr7, cr4, cr3, {3}
    1e18:	6d73612e 	ldfvse	f6, [r3, #-184]!
    1e1c:	00000000 	andeq	r0, r0, r0
    1e20:	02050000 	andeq	r0, r5, #0	; 0x0
    1e24:	00000000 	andeq	r0, r0, r0
    1e28:	0100ce03 	tsteq	r0, r3, lsl #28
    1e2c:	01000602 	tsteq	r0, r2, lsl #12
    1e30:	02050001 	andeq	r0, r5, #1	; 0x1
    1e34:	00000000 	andeq	r0, r0, r0
    1e38:	0100d203 	tsteq	r0, r3, lsl #4
    1e3c:	01000602 	tsteq	r0, r2, lsl #12
    1e40:	Address 0x00001e40 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 	undefined instruction 0xffffffff
       8:	7c010001 	stcvc	0, cr0, [r1], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000000c 	andeq	r0, r0, ip
      14:	00000000 	andeq	r0, r0, r0
      18:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
      1c:	00000016 	andeq	r0, r0, r6, lsl r0
      20:	0000000c 	andeq	r0, r0, ip
      24:	00000000 	andeq	r0, r0, r0
      28:	0800314c 	stmdaeq	r0, {r2, r3, r6, r8, ip, sp}
      2c:	00000016 	andeq	r0, r0, r6, lsl r0
      30:	0000000c 	andeq	r0, r0, ip
      34:	00000000 	andeq	r0, r0, r0
      38:	08003164 	stmdaeq	r0, {r2, r5, r6, r8, ip, sp}
      3c:	00000038 	andeq	r0, r0, r8, lsr r0
      40:	0000000c 	andeq	r0, r0, ip
      44:	00000000 	andeq	r0, r0, r0
      48:	0800319c 	stmdaeq	r0, {r2, r3, r4, r7, r8, ip, sp}
      4c:	00000014 	andeq	r0, r0, r4, lsl r0
      50:	0000000c 	andeq	r0, r0, ip
      54:	00000000 	andeq	r0, r0, r0
      58:	080031b0 	stmdaeq	r0, {r4, r5, r7, r8, ip, sp}
      5c:	00000018 	andeq	r0, r0, r8, lsl r0
      60:	0000000c 	andeq	r0, r0, ip
      64:	00000000 	andeq	r0, r0, r0
      68:	080031c8 	stmdaeq	r0, {r3, r6, r7, r8, ip, sp}
      6c:	00000018 	andeq	r0, r0, r8, lsl r0
      70:	0000000c 	andeq	r0, r0, ip
      74:	00000000 	andeq	r0, r0, r0
      78:	080031e0 	stmdaeq	r0, {r5, r6, r7, r8, ip, sp}
      7c:	00000030 	andeq	r0, r0, r0, lsr r0
      80:	0000000c 	andeq	r0, r0, ip
      84:	00000000 	andeq	r0, r0, r0
      88:	08003210 	stmdaeq	r0, {r4, r9, ip, sp}
      8c:	0000000c 	andeq	r0, r0, ip
      90:	0000000c 	andeq	r0, r0, ip
      94:	00000000 	andeq	r0, r0, r0
      98:	0800321c 	stmdaeq	r0, {r2, r3, r4, r9, ip, sp}
      9c:	00000014 	andeq	r0, r0, r4, lsl r0
      a0:	00000018 	andeq	r0, r0, r8, lsl r0
      a4:	00000000 	andeq	r0, r0, r0
      a8:	08003230 	stmdaeq	r0, {r4, r5, r9, ip, sp}
      ac:	00000038 	andeq	r0, r0, r8, lsr r0
      b0:	440c0e42 	strmi	r0, [ip], #-3650
      b4:	018e100e 	orreq	r1, lr, lr
      b8:	03840285 	orreq	r0, r4, #1342177288	; 0x50000008
      bc:	00000014 	andeq	r0, r0, r4, lsl r0
      c0:	00000000 	andeq	r0, r0, r0
      c4:	08003268 	stmdaeq	r0, {r3, r5, r6, r9, ip, sp}
      c8:	00000040 	andeq	r0, r0, r0, asr #32
      cc:	44040e42 	strmi	r0, [r4], #-3650
      d0:	018e080e 	orreq	r0, lr, lr, lsl #16
      d4:	00000014 	andeq	r0, r0, r4, lsl r0
      d8:	00000000 	andeq	r0, r0, r0
      dc:	080032a8 	stmdaeq	r0, {r3, r5, r7, r9, ip, sp}
      e0:	00000020 	andeq	r0, r0, r0, lsr #32
      e4:	44040e42 	strmi	r0, [r4], #-3650
      e8:	018e080e 	orreq	r0, lr, lr, lsl #16
      ec:	00000014 	andeq	r0, r0, r4, lsl r0
      f0:	00000000 	andeq	r0, r0, r0
      f4:	080032c8 	stmdaeq	r0, {r3, r6, r7, r9, ip, sp}
      f8:	00000044 	andeq	r0, r0, r4, asr #32
      fc:	8e080e42 	cdphi	14, 0, cr0, cr8, cr2, {2}
     100:	00028401 	andeq	r8, r2, r1, lsl #8
     104:	00000014 	andeq	r0, r0, r4, lsl r0
     108:	00000000 	andeq	r0, r0, r0
     10c:	0800330c 	stmdaeq	r0, {r2, r3, r8, r9, ip, sp}
     110:	00000014 	andeq	r0, r0, r4, lsl r0
     114:	44040e42 	strmi	r0, [r4], #-3650
     118:	018e080e 	orreq	r0, lr, lr, lsl #16
     11c:	00000014 	andeq	r0, r0, r4, lsl r0
     120:	00000000 	andeq	r0, r0, r0
     124:	08003320 	stmdaeq	r0, {r5, r8, r9, ip, sp}
     128:	0000002c 	andeq	r0, r0, ip, lsr #32
     12c:	8e080e42 	cdphi	14, 0, cr0, cr8, cr2, {2}
     130:	00028401 	andeq	r8, r2, r1, lsl #8
     134:	00000014 	andeq	r0, r0, r4, lsl r0
     138:	00000000 	andeq	r0, r0, r0
     13c:	0800334c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip, sp}
     140:	00000054 	andeq	r0, r0, r4, asr r0
     144:	46040e42 	strmi	r0, [r4], -r2, asr #28
     148:	018e080e 	orreq	r0, lr, lr, lsl #16
     14c:	00000014 	andeq	r0, r0, r4, lsl r0
     150:	00000000 	andeq	r0, r0, r0
     154:	080033a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, sp}
     158:	00000016 	andeq	r0, r0, r6, lsl r0
     15c:	46040e42 	strmi	r0, [r4], -r2, asr #28
     160:	018e080e 	orreq	r0, lr, lr, lsl #16
     164:	0000001c 	andeq	r0, r0, ip, lsl r0
     168:	00000000 	andeq	r0, r0, r0
     16c:	080033b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, ip, sp}
     170:	00000090 	muleq	r0, r0, r0
     174:	42100e42 	andsmi	r0, r0, #1056	; 0x420
     178:	018e300e 	orreq	r3, lr, lr
     17c:	03850286 	orreq	r0, r5, #1610612744	; 0x60000008
     180:	00000484 	andeq	r0, r0, r4, lsl #9
     184:	0000001c 	andeq	r0, r0, ip, lsl r0
     188:	00000000 	andeq	r0, r0, r0
     18c:	08003448 	stmdaeq	r0, {r3, r6, sl, ip, sp}
     190:	0000008c 	andeq	r0, r0, ip, lsl #1
     194:	42100e42 	andsmi	r0, r0, #1056	; 0x420
     198:	018e200e 	orreq	r2, lr, lr
     19c:	03850286 	orreq	r0, r5, #1610612744	; 0x60000008
     1a0:	00000484 	andeq	r0, r0, r4, lsl #9
     1a4:	00000014 	andeq	r0, r0, r4, lsl r0
     1a8:	00000000 	andeq	r0, r0, r0
     1ac:	080034d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, ip, sp}
     1b0:	00000010 	andeq	r0, r0, r0, lsl r0
     1b4:	44040e42 	strmi	r0, [r4], #-3650
     1b8:	018e080e 	orreq	r0, lr, lr, lsl #16
     1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     1c0:	00000000 	andeq	r0, r0, r0
     1c4:	080034e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip, sp}
     1c8:	00000088 	andeq	r0, r0, r8, lsl #1
     1cc:	42100e42 	andsmi	r0, r0, #1056	; 0x420
     1d0:	018e180e 	orreq	r1, lr, lr, lsl #16
     1d4:	03850286 	orreq	r0, r5, #1610612744	; 0x60000008
     1d8:	00000484 	andeq	r0, r0, r4, lsl #9
     1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
     1e0:	00000000 	andeq	r0, r0, r0
     1e4:	0800356c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, ip, sp}
     1e8:	0000006a 	andeq	r0, r0, sl, rrx
     1ec:	46100e42 	ldrmi	r0, [r0], -r2, asr #28
     1f0:	018e180e 	orreq	r1, lr, lr, lsl #16
     1f4:	03850286 	orreq	r0, r5, #1610612744	; 0x60000008
     1f8:	00000484 	andeq	r0, r0, r4, lsl #9
     1fc:	00000014 	andeq	r0, r0, r4, lsl r0
     200:	00000000 	andeq	r0, r0, r0
     204:	080035d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, ip, sp}
     208:	00000084 	andeq	r0, r0, r4, lsl #1
     20c:	42040e42 	andmi	r0, r4, #1056	; 0x420
     210:	018e080e 	orreq	r0, lr, lr, lsl #16
     214:	00000018 	andeq	r0, r0, r8, lsl r0
     218:	00000000 	andeq	r0, r0, r0
     21c:	0800365c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, ip, sp}
     220:	000001a8 	andeq	r0, r0, r8, lsr #3
     224:	8e100e42 	cdphi	14, 1, cr0, cr0, cr2, {2}
     228:	85028601 	strhi	r8, [r2, #-1537]
     22c:	00048403 	andeq	r8, r4, r3, lsl #8
     230:	0000001c 	andeq	r0, r0, ip, lsl r0
     234:	00000000 	andeq	r0, r0, r0
     238:	08003804 	stmdaeq	r0, {r2, fp, ip, sp}
     23c:	00000034 	andeq	r0, r0, r4, lsr r0
     240:	8e140e42 	cdphi	14, 1, cr0, cr4, cr2, {2}
     244:	86028701 	strhi	r8, [r2], -r1, lsl #14
     248:	84048503 	strhi	r8, [r4], #-1283
     24c:	180e4e05 	stmdane	lr, {r0, r2, r9, sl, fp, lr}
     250:	00000018 	andeq	r0, r0, r8, lsl r0
     254:	00000000 	andeq	r0, r0, r0
     258:	08003838 	stmdaeq	r0, {r3, r4, r5, fp, ip, sp}
     25c:	00000068 	andeq	r0, r0, r8, rrx
     260:	8e100e42 	cdphi	14, 1, cr0, cr0, cr2, {2}
     264:	85028601 	strhi	r8, [r2, #-1537]
     268:	00048403 	andeq	r8, r4, r3, lsl #8
     26c:	00000018 	andeq	r0, r0, r8, lsl r0
     270:	00000000 	andeq	r0, r0, r0
     274:	080038a0 	stmdaeq	r0, {r5, r7, fp, ip, sp}
     278:	00000118 	andeq	r0, r0, r8, lsl r1
     27c:	8e100e42 	cdphi	14, 1, cr0, cr0, cr2, {2}
     280:	85028601 	strhi	r8, [r2, #-1537]
     284:	00048403 	andeq	r8, r4, r3, lsl #8
     288:	0000000c 	.word	0x0000000c
     28c:	ffffffff 	.word	0xffffffff
     290:	7c010001 	.word	0x7c010001
     294:	000d0c0e 	.word	0x000d0c0e
     298:	0000000c 	.word	0x0000000c
     29c:	00000288 	.word	0x00000288
     2a0:	080039b8 	.word	0x080039b8
     2a4:	00000002 	.word	0x00000002
     2a8:	0000000c 	.word	0x0000000c
     2ac:	00000288 	.word	0x00000288
     2b0:	080039bc 	.word	0x080039bc
     2b4:	00000002 	.word	0x00000002
     2b8:	0000000c 	.word	0x0000000c
     2bc:	00000288 	.word	0x00000288
     2c0:	080039c0 	.word	0x080039c0
     2c4:	00000002 	.word	0x00000002
     2c8:	0000000c 	.word	0x0000000c
     2cc:	00000288 	.word	0x00000288
     2d0:	080039c4 	.word	0x080039c4
     2d4:	00000002 	.word	0x00000002
     2d8:	0000000c 	.word	0x0000000c
     2dc:	00000288 	.word	0x00000288
     2e0:	080039c8 	.word	0x080039c8
     2e4:	00000002 	.word	0x00000002
     2e8:	0000000c 	.word	0x0000000c
     2ec:	00000288 	.word	0x00000288
     2f0:	080039cc 	.word	0x080039cc
     2f4:	00000002 	.word	0x00000002
     2f8:	0000000c 	.word	0x0000000c
     2fc:	00000288 	.word	0x00000288
     300:	080039d0 	.word	0x080039d0
     304:	00000002 	.word	0x00000002
     308:	0000000c 	.word	0x0000000c
     30c:	00000288 	.word	0x00000288
     310:	080039d4 	.word	0x080039d4
     314:	00000002 	.word	0x00000002
     318:	0000000c 	.word	0x0000000c
     31c:	00000288 	.word	0x00000288
     320:	080039d8 	.word	0x080039d8
     324:	00000002 	.word	0x00000002
     328:	0000000c 	.word	0x0000000c
     32c:	00000288 	.word	0x00000288
     330:	080039dc 	.word	0x080039dc
     334:	00000002 	.word	0x00000002
     338:	0000000c 	.word	0x0000000c
     33c:	00000288 	.word	0x00000288
     340:	080039e0 	.word	0x080039e0
     344:	00000002 	.word	0x00000002
     348:	0000000c 	.word	0x0000000c
     34c:	00000288 	.word	0x00000288
     350:	080039e4 	.word	0x080039e4
     354:	00000002 	.word	0x00000002
     358:	0000000c 	.word	0x0000000c
     35c:	00000288 	.word	0x00000288
     360:	080039e8 	.word	0x080039e8
     364:	00000002 	.word	0x00000002
     368:	0000000c 	.word	0x0000000c
     36c:	00000288 	.word	0x00000288
     370:	080039ec 	.word	0x080039ec
     374:	00000002 	.word	0x00000002
     378:	0000000c 	.word	0x0000000c
     37c:	00000288 	.word	0x00000288
     380:	080039f0 	.word	0x080039f0
     384:	00000002 	.word	0x00000002
     388:	0000000c 	.word	0x0000000c
     38c:	00000288 	.word	0x00000288
     390:	080039f4 	.word	0x080039f4
     394:	00000002 	.word	0x00000002
     398:	0000000c 	.word	0x0000000c
     39c:	00000288 	.word	0x00000288
     3a0:	080039f8 	.word	0x080039f8
     3a4:	00000002 	.word	0x00000002
     3a8:	0000000c 	.word	0x0000000c
     3ac:	00000288 	.word	0x00000288
     3b0:	080039fc 	.word	0x080039fc
     3b4:	00000002 	.word	0x00000002
     3b8:	0000000c 	.word	0x0000000c
     3bc:	00000288 	.word	0x00000288
     3c0:	08003a00 	.word	0x08003a00
     3c4:	00000002 	.word	0x00000002
     3c8:	0000000c 	.word	0x0000000c
     3cc:	00000288 	.word	0x00000288
     3d0:	08003a04 	.word	0x08003a04
     3d4:	00000002 	.word	0x00000002
     3d8:	0000000c 	.word	0x0000000c
     3dc:	00000288 	.word	0x00000288
     3e0:	08003a08 	.word	0x08003a08
     3e4:	00000002 	.word	0x00000002
     3e8:	0000000c 	.word	0x0000000c
     3ec:	00000288 	.word	0x00000288
     3f0:	08003a0c 	.word	0x08003a0c
     3f4:	00000002 	.word	0x00000002
     3f8:	0000000c 	.word	0x0000000c
     3fc:	00000288 	.word	0x00000288
     400:	08003a10 	.word	0x08003a10
     404:	00000002 	.word	0x00000002
     408:	0000000c 	.word	0x0000000c
     40c:	00000288 	.word	0x00000288
     410:	08003a14 	.word	0x08003a14
     414:	00000002 	.word	0x00000002
     418:	0000000c 	.word	0x0000000c
     41c:	00000288 	.word	0x00000288
     420:	08003a18 	.word	0x08003a18
     424:	0002      	.short	0x0002
     426:	00          	.byte	0x00
     427:	00          	.byte	0x00
     428:	0000000c 	.word	0x0000000c
     42c:	00000288 	.word	0x00000288
     430:	08003a1c 	.word	0x08003a1c
     434:	00000002 	.word	0x00000002
     438:	0000000c 	.word	0x0000000c
     43c:	00000288 	.word	0x00000288
     440:	08003a20 	.word	0x08003a20
     444:	00000002 	.word	0x00000002
     448:	0000000c 	.word	0x0000000c
     44c:	00000288 	.word	0x00000288
     450:	08003a24 	.word	0x08003a24
     454:	00000002 	.word	0x00000002
     458:	0000000c 	.word	0x0000000c
     45c:	00000288 	.word	0x00000288
     460:	08003a28 	.word	0x08003a28
     464:	00000002 	.word	0x00000002
     468:	0000000c 	.word	0x0000000c
     46c:	00000288 	.word	0x00000288
     470:	08003a2c 	.word	0x08003a2c
     474:	00000002 	.word	0x00000002
     478:	0000000c 	.word	0x0000000c
     47c:	00000288 	.word	0x00000288
     480:	08003a30 	.word	0x08003a30
     484:	00000002 	.word	0x00000002
     488:	0000000c 	.word	0x0000000c
     48c:	00000288 	.word	0x00000288
     490:	08003a34 	.word	0x08003a34
     494:	00000002 	.word	0x00000002
     498:	0000000c 	.word	0x0000000c
     49c:	00000288 	.word	0x00000288
     4a0:	08003a38 	.word	0x08003a38
     4a4:	00000002 	.word	0x00000002
     4a8:	0000000c 	.word	0x0000000c
     4ac:	00000288 	.word	0x00000288
     4b0:	08003a3c 	.word	0x08003a3c
     4b4:	00000002 	.word	0x00000002
     4b8:	0000000c 	.word	0x0000000c
     4bc:	00000288 	.word	0x00000288
     4c0:	08003a40 	.word	0x08003a40
     4c4:	00000002 	.word	0x00000002
     4c8:	0000000c 	.word	0x0000000c
     4cc:	00000288 	.word	0x00000288
     4d0:	3a44      	.short	0x3a44
     4d2:	00          	.byte	0x00
     4d3:	08          	.byte	0x08
     4d4:	00000002 	.word	0x00000002
     4d8:	0000000c 	.word	0x0000000c
     4dc:	00000288 	.word	0x00000288
     4e0:	08003a48 	.word	0x08003a48
     4e4:	00000002 	.word	0x00000002
     4e8:	0000000c 	.word	0x0000000c
     4ec:	00000288 	.word	0x00000288
     4f0:	08003a4c 	.word	0x08003a4c
     4f4:	00000002 	.word	0x00000002
     4f8:	0000000c 	.word	0x0000000c
     4fc:	00000288 	.word	0x00000288
     500:	08003a50 	.word	0x08003a50
     504:	00000002 	.word	0x00000002
     508:	0000000c 	.word	0x0000000c
     50c:	00000288 	.word	0x00000288
     510:	08003a54 	.word	0x08003a54
     514:	00000002 	.word	0x00000002
     518:	0000000c 	.word	0x0000000c
     51c:	00000288 	.word	0x00000288
     520:	08003a58 	.word	0x08003a58
     524:	00000002 	.word	0x00000002
     528:	0000000c 	.word	0x0000000c
     52c:	00000288 	.word	0x00000288
     530:	08003a5c 	.word	0x08003a5c
     534:	00000002 	.word	0x00000002
     538:	0000000c 	.word	0x0000000c
     53c:	00000288 	.word	0x00000288
     540:	08003a60 	.word	0x08003a60
     544:	00000002 	.word	0x00000002
     548:	0000000c 	.word	0x0000000c
     54c:	00000288 	.word	0x00000288
     550:	08003a64 	.word	0x08003a64
     554:	00000002 	.word	0x00000002
     558:	0000000c 	.word	0x0000000c
     55c:	00000288 	.word	0x00000288
     560:	08003a68 	.word	0x08003a68
     564:	00000002 	.word	0x00000002
     568:	0000000c 	.word	0x0000000c
     56c:	00000288 	.word	0x00000288
     570:	08003a6c 	.word	0x08003a6c
     574:	00000002 	.word	0x00000002
     578:	0000000c 	.word	0x0000000c
     57c:	00000288 	.word	0x00000288
     580:	08003a70 	.word	0x08003a70
     584:	00000002 	.word	0x00000002
     588:	0000000c 	.word	0x0000000c
     58c:	00000288 	.word	0x00000288
     590:	08003a74 	.word	0x08003a74
     594:	00000002 	.word	0x00000002
     598:	0000000c 	.word	0x0000000c
     59c:	00000288 	.word	0x00000288
     5a0:	08003a78 	.word	0x08003a78
     5a4:	00000002 	.word	0x00000002
     5a8:	0000000c 	.word	0x0000000c
     5ac:	00000288 	.word	0x00000288
     5b0:	08003a7c 	.word	0x08003a7c
     5b4:	00000002 	.word	0x00000002
     5b8:	0000000c 	.word	0x0000000c
     5bc:	00000288 	.word	0x00000288
     5c0:	08003a80 	.word	0x08003a80
     5c4:	00000002 	.word	0x00000002
     5c8:	0000000c 	.word	0x0000000c
     5cc:	00000288 	.word	0x00000288
     5d0:	08003a84 	.word	0x08003a84
     5d4:	00000002 	.word	0x00000002
     5d8:	0000000c 	.word	0x0000000c
     5dc:	00000288 	.word	0x00000288
     5e0:	08003a88 	.word	0x08003a88
     5e4:	00000002 	.word	0x00000002
     5e8:	0000000c 	.word	0x0000000c
     5ec:	00000288 	.word	0x00000288
     5f0:	08003a8c 	.word	0x08003a8c
     5f4:	00000002 	.word	0x00000002
     5f8:	0000000c 	.word	0x0000000c
     5fc:	00000288 	.word	0x00000288
     600:	08003a90 	.word	0x08003a90
     604:	00000002 	.word	0x00000002
     608:	0000000c 	.word	0x0000000c
     60c:	00000288 	.word	0x00000288
     610:	08003a94 	.word	0x08003a94
     614:	00000002 	.word	0x00000002
     618:	0000000c 	.word	0x0000000c
     61c:	00000288 	.word	0x00000288
     620:	08003a98 	.word	0x08003a98
     624:	00000002 	.word	0x00000002
     628:	0000000c 	.word	0x0000000c
     62c:	00000288 	.word	0x00000288
     630:	08003a9c 	.word	0x08003a9c
     634:	00000002 	.word	0x00000002
     638:	0000000c 	.word	0x0000000c
     63c:	00000288 	.word	0x00000288
     640:	08003aa0 	.word	0x08003aa0
     644:	00000002 	.word	0x00000002
     648:	0000000c 	.word	0x0000000c
     64c:	00000288 	.word	0x00000288
     650:	08003aa4 	.word	0x08003aa4
     654:	00000002 	.word	0x00000002
     658:	0000000c 	.word	0x0000000c
     65c:	00000288 	.word	0x00000288
     660:	08003aa8 	.word	0x08003aa8
     664:	00000002 	.word	0x00000002
     668:	0000000c 	.word	0x0000000c
     66c:	00000288 	.word	0x00000288
     670:	08003aac 	.word	0x08003aac
     674:	00000002 	.word	0x00000002
     678:	0000000c 	.word	0x0000000c
     67c:	00000288 	.word	0x00000288
     680:	08003ab0 	.word	0x08003ab0
     684:	00000002 	.word	0x00000002
     688:	0000000c 	.word	0x0000000c
     68c:	00000288 	.word	0x00000288
     690:	08003ab4 	.word	0x08003ab4
     694:	00000002 	.word	0x00000002
     698:	0000000c 	.word	0x0000000c
     69c:	00000288 	.word	0x00000288
     6a0:	08003ab8 	.word	0x08003ab8
     6a4:	00000002 	.word	0x00000002
     6a8:	00000014 	.word	0x00000014
     6ac:	00000288 	.word	0x00000288
     6b0:	08003abc 	.word	0x08003abc
     6b4:	0000000c 	.word	0x0000000c
     6b8:	42040e42 	.word	0x42040e42
     6bc:	018e080e 	.word	0x018e080e
     6c0:	00000014 	.word	0x00000014
     6c4:	00000288 	.word	0x00000288
     6c8:	08003ac8 	.word	0x08003ac8
     6cc:	0000000c 	.word	0x0000000c
     6d0:	42040e42 	.word	0x42040e42
     6d4:	018e080e 	.word	0x018e080e
     6d8:	00000014 	.word	0x00000014
     6dc:	00000288 	.word	0x00000288
     6e0:	08003ad4 	.word	0x08003ad4
     6e4:	0000000c 	.word	0x0000000c
     6e8:	42040e42 	.word	0x42040e42
     6ec:	018e080e 	.word	0x018e080e
     6f0:	00000014 	.word	0x00000014
     6f4:	00000288 	.word	0x00000288
     6f8:	08003ae0 	.word	0x08003ae0
     6fc:	0000000c 	.word	0x0000000c
     700:	42040e42 	.word	0x42040e42
     704:	018e080e 	.word	0x018e080e
     708:	0000000c 	.word	0x0000000c
     70c:	ffffffff 	.word	0xffffffff
     710:	7c010001 	.word	0x7c010001
     714:	000d0c0e 	.word	0x000d0c0e
     718:	00000014 	.word	0x00000014
     71c:	00000708 	.word	0x00000708
     720:	08003aec 	.word	0x08003aec
     724:	0000000c 	.word	0x0000000c
     728:	42040e42 	.word	0x42040e42
     72c:	018e080e 	.word	0x018e080e
     730:	00000014 	.word	0x00000014
     734:	00000708 	.word	0x00000708
     738:	08003af8 	.word	0x08003af8
     73c:	00000014 	.word	0x00000014
     740:	46040e42 	.word	0x46040e42
     744:	018e080e 	.word	0x018e080e
     748:	00000018 	.word	0x00000018
     74c:	00000708 	.word	0x00000708
     750:	08003b0c 	.word	0x08003b0c
     754:	00000026 	.word	0x00000026
     758:	8e100e42 	.word	0x8e100e42
     75c:	85028601 	.word	0x85028601
     760:	00048403 	.word	0x00048403
     764:	00000018 	.word	0x00000018
     768:	00000708 	.word	0x00000708
     76c:	08003b34 	.word	0x08003b34
     770:	0000001c 	.word	0x0000001c
     774:	8e100e42 	.word	0x8e100e42
     778:	85028601 	.word	0x85028601
     77c:	00048403 	.word	0x00048403
     780:	00000014 	.word	0x00000014
     784:	00000708 	.word	0x00000708
     788:	08003b50 	.word	0x08003b50
     78c:	0000000c 	.word	0x0000000c
     790:	42040e42 	.word	0x42040e42
     794:	018e080e 	.word	0x018e080e
     798:	00000014 	.word	0x00000014
     79c:	00000708 	.word	0x00000708
     7a0:	08003b5c 	.word	0x08003b5c
     7a4:	0000000c 	.word	0x0000000c
     7a8:	42040e42 	.word	0x42040e42
     7ac:	018e080e 	.word	0x018e080e
     7b0:	00000014 	.word	0x00000014
     7b4:	00000708 	.word	0x00000708
     7b8:	08003b68 	.word	0x08003b68
     7bc:	00000010 	.word	0x00000010
     7c0:	44040e42 	.word	0x44040e42
     7c4:	018e080e 	.word	0x018e080e
     7c8:	0000000c 	.word	0x0000000c
     7cc:	ffffffff 	.word	0xffffffff
     7d0:	7c010001 	.word	0x7c010001
     7d4:	000d0c0e 	.word	0x000d0c0e
     7d8:	0000000c 	.word	0x0000000c
     7dc:	000007c8 	.word	0x000007c8
     7e0:	08003b78 	.word	0x08003b78
     7e4:	0000000c 	.word	0x0000000c
     7e8:	0000000c 	.word	0x0000000c
     7ec:	000007c8 	.word	0x000007c8
     7f0:	08003b84 	.word	0x08003b84
     7f4:	0000000c 	.word	0x0000000c
     7f8:	0000000c 	.word	0x0000000c
     7fc:	000007c8 	.word	0x000007c8
     800:	08003b90 	.word	0x08003b90
     804:	0000000c 	.word	0x0000000c
     808:	0000000c 	.word	0x0000000c
     80c:	000007c8 	.word	0x000007c8
     810:	08003b9c 	.word	0x08003b9c
     814:	0000000c 	.word	0x0000000c
     818:	0000000c 	.word	0x0000000c
     81c:	000007c8 	.word	0x000007c8
     820:	08003ba8 	.word	0x08003ba8
     824:	0000000c 	.word	0x0000000c
     828:	0000000c 	.word	0x0000000c
     82c:	000007c8 	.word	0x000007c8
     830:	08003bb4 	.word	0x08003bb4
     834:	00000014 	.word	0x00000014
     838:	0000000c 	.word	0x0000000c
     83c:	000007c8 	.word	0x000007c8
     840:	08003bc8 	.word	0x08003bc8
     844:	0000000c 	.word	0x0000000c
     848:	0000000c 	.word	0x0000000c
     84c:	000007c8 	.word	0x000007c8
     850:	08003bd4 	.word	0x08003bd4
     854:	0000000c 	.word	0x0000000c
     858:	0000000c 	.word	0x0000000c
     85c:	000007c8 	.word	0x000007c8
     860:	08003be0 	.word	0x08003be0
     864:	00000008 	.word	0x00000008
     868:	0000000c 	.word	0x0000000c
     86c:	000007c8 	.word	0x000007c8
     870:	08003be8 	.word	0x08003be8
     874:	00000004 	.word	0x00000004
     878:	0000000c 	.word	0x0000000c
     87c:	000007c8 	.word	0x000007c8
     880:	08003bec 	.word	0x08003bec
     884:	00000008 	.word	0x00000008
     888:	00000018 	.word	0x00000018
     88c:	000007c8 	.word	0x000007c8
     890:	08003bf4 	.word	0x08003bf4
     894:	00000168 	.word	0x00000168
     898:	440c0e42 	.word	0x440c0e42
     89c:	018e100e 	.word	0x018e100e
     8a0:	03840285 	.word	0x03840285
     8a4:	00000018 	.word	0x00000018
     8a8:	000007c8 	.word	0x000007c8
     8ac:	08003d5c 	.word	0x08003d5c
     8b0:	000000c4 	.word	0x000000c4
     8b4:	440c0e42 	.word	0x440c0e42
     8b8:	018e100e 	.word	0x018e100e
     8bc:	03840285 	.word	0x03840285
     8c0:	00000014 	.word	0x00000014
     8c4:	000007c8 	.word	0x000007c8
     8c8:	08003e20 	.word	0x08003e20
     8cc:	00000020 	.word	0x00000020
     8d0:	8e080e42 	.word	0x8e080e42
     8d4:	00028401 	.word	0x00028401
     8d8:	00000014 	.word	0x00000014
     8dc:	000007c8 	.word	0x000007c8
     8e0:	08003e40 	.word	0x08003e40
     8e4:	00000038 	.word	0x00000038
     8e8:	44040e42 	.word	0x44040e42
     8ec:	018e080e 	.word	0x018e080e
     8f0:	00000014 	.word	0x00000014
     8f4:	000007c8 	.word	0x000007c8
     8f8:	08003e78 	.word	0x08003e78
     8fc:	0000003c 	.word	0x0000003c
     900:	44040e42 	.word	0x44040e42
     904:	018e080e 	.word	0x018e080e
     908:	00000014 	.word	0x00000014
     90c:	000007c8 	.word	0x000007c8
     910:	08003eb4 	.word	0x08003eb4
     914:	00000030 	.word	0x00000030
     918:	44040e42 	.word	0x44040e42
     91c:	018e080e 	.word	0x018e080e
     920:	00000014 	.word	0x00000014
     924:	000007c8 	.word	0x000007c8
     928:	08003ee4 	.word	0x08003ee4
     92c:	00000038 	.word	0x00000038
     930:	44040e42 	.word	0x44040e42
     934:	018e080e 	.word	0x018e080e
     938:	00000014 	.word	0x00000014
     93c:	000007c8 	.word	0x000007c8
     940:	08003f1c 	.word	0x08003f1c
     944:	00000028 	.word	0x00000028
     948:	44040e42 	.word	0x44040e42
     94c:	018e080e 	.word	0x018e080e
     950:	00000014 	.word	0x00000014
     954:	000007c8 	.word	0x000007c8
     958:	08003f44 	.word	0x08003f44
     95c:	0000000c 	.word	0x0000000c
     960:	42040e42 	.word	0x42040e42
     964:	018e080e 	.word	0x018e080e
     968:	00000014 	.word	0x00000014
     96c:	000007c8 	.word	0x000007c8
     970:	08003f50 	.word	0x08003f50
     974:	00000034 	.word	0x00000034
     978:	4a040e42 	.word	0x4a040e42
     97c:	018e080e 	.word	0x018e080e
     980:	0000000c 	.word	0x0000000c
     984:	ffffffff 	.word	0xffffffff
     988:	7c010001 	.word	0x7c010001
     98c:	000d0c0e 	.word	0x000d0c0e
     990:	0000000c 	.word	0x0000000c
     994:	00000980 	.word	0x00000980
     998:	08003f84 	.word	0x08003f84
     99c:	00000018 	.word	0x00000018
     9a0:	0000000c 	.word	0x0000000c
     9a4:	00000980 	.word	0x00000980
     9a8:	08003f9c 	.word	0x08003f9c
     9ac:	00000018 	.word	0x00000018
     9b0:	0000000c 	.word	0x0000000c
     9b4:	00000980 	.word	0x00000980
     9b8:	08003fb4 	.word	0x08003fb4
     9bc:	00000018 	.word	0x00000018
     9c0:	0000000c 	.word	0x0000000c
     9c4:	00000980 	.word	0x00000980
     9c8:	08003fcc 	.word	0x08003fcc
     9cc:	00000018 	.word	0x00000018
     9d0:	0000000c 	.word	0x0000000c
     9d4:	00000980 	.word	0x00000980
     9d8:	08003fe4 	.word	0x08003fe4
     9dc:	00000010 	.word	0x00000010
     9e0:	0000000c 	.word	0x0000000c
     9e4:	00000980 	.word	0x00000980
     9e8:	08003ff4 	.word	0x08003ff4
     9ec:	0000000c 	.word	0x0000000c
     9f0:	0000000c 	.word	0x0000000c
     9f4:	00000980 	.word	0x00000980
     9f8:	08004000 	.word	0x08004000
     9fc:	0000000c 	.word	0x0000000c
     a00:	0000000c 	.word	0x0000000c
     a04:	00000980 	.word	0x00000980
     a08:	0800400c 	.word	0x0800400c
     a0c:	00000010 	.word	0x00000010
     a10:	0000000c 	.word	0x0000000c
     a14:	00000980 	.word	0x00000980
     a18:	0800401c 	.word	0x0800401c
     a1c:	00000010 	.word	0x00000010
     a20:	0000000c 	.word	0x0000000c
     a24:	00000980 	.word	0x00000980
     a28:	0800402c 	.word	0x0800402c
     a2c:	0000001c 	.word	0x0000001c
     a30:	0000000c 	.word	0x0000000c
     a34:	00000980 	.word	0x00000980
     a38:	08004048 	.word	0x08004048
     a3c:	00000020 	.word	0x00000020
     a40:	0000000c 	.word	0x0000000c
     a44:	00000980 	.word	0x00000980
     a48:	08004068 	.word	0x08004068
     a4c:	0000000c 	.word	0x0000000c
     a50:	0000000c 	.word	0x0000000c
     a54:	00000980 	.word	0x00000980
     a58:	08004074 	.word	0x08004074
     a5c:	0000002c 	.word	0x0000002c
     a60:	00000018 	.word	0x00000018
     a64:	00000980 	.word	0x00000980
     a68:	080040a0 	.word	0x080040a0
     a6c:	00000094 	.word	0x00000094
     a70:	44080e42 	.word	0x44080e42
     a74:	018e100e 	.word	0x018e100e
     a78:	00000284 	.word	0x00000284
     a7c:	0000001c 	.word	0x0000001c
     a80:	00000980 	.word	0x00000980
     a84:	08004134 	.word	0x08004134
     a88:	0000005c 	.word	0x0000005c
     a8c:	8e140e42 	.word	0x8e140e42
     a90:	86028701 	.word	0x86028701
     a94:	84048503 	.word	0x84048503
     a98:	180e4605 	.word	0x180e4605
     a9c:	00000018 	.word	0x00000018
     aa0:	00000980 	.word	0x00000980
     aa4:	08004190 	.word	0x08004190
     aa8:	0000009c 	.word	0x0000009c
     aac:	8e0c0e42 	.word	0x8e0c0e42
     ab0:	84028501 	.word	0x84028501
     ab4:	100e4403 	.word	0x100e4403
     ab8:	00000014 	.word	0x00000014
     abc:	00000980 	.word	0x00000980
     ac0:	0800422c 	.word	0x0800422c
     ac4:	000000c0 	.word	0x000000c0
     ac8:	8e080e42 	.word	0x8e080e42
     acc:	00028401 	.word	0x00028401
     ad0:	00000018 	.word	0x00000018
     ad4:	00000980 	.word	0x00000980
     ad8:	080042ec 	.word	0x080042ec
     adc:	00000044 	.word	0x00000044
     ae0:	8e100e42 	.word	0x8e100e42
     ae4:	85028601 	.word	0x85028601
     ae8:	00048403 	.word	0x00048403
     aec:	00000018 	.word	0x00000018
     af0:	00000980 	.word	0x00000980
     af4:	08004330 	.word	0x08004330
     af8:	00000038 	.word	0x00000038
     afc:	8e100e42 	.word	0x8e100e42
     b00:	85028601 	.word	0x85028601
     b04:	00048403 	.word	0x00048403
     b08:	00000018 	.word	0x00000018
     b0c:	00000980 	.word	0x00000980
     b10:	08004368 	.word	0x08004368
     b14:	00000048 	.word	0x00000048
     b18:	8e100e42 	.word	0x8e100e42
     b1c:	85028601 	.word	0x85028601
     b20:	00048403 	.word	0x00048403
     b24:	00000014 	.word	0x00000014
     b28:	00000980 	.word	0x00000980
     b2c:	080043b0 	.word	0x080043b0
     b30:	00000078 	.word	0x00000078
     b34:	8e080e42 	.word	0x8e080e42
     b38:	00028401 	.word	0x00028401
     b3c:	00000014 	.word	0x00000014
     b40:	00000980 	.word	0x00000980
     b44:	08004428 	.word	0x08004428
     b48:	0000003c 	.word	0x0000003c
     b4c:	8e080e42 	.word	0x8e080e42
     b50:	00028401 	.word	0x00028401
     b54:	00000018 	.word	0x00000018
     b58:	00000980 	.word	0x00000980
     b5c:	08004464 	.word	0x08004464
     b60:	00000048 	.word	0x00000048
     b64:	8e0c0e42 	.word	0x8e0c0e42
     b68:	84028501 	.word	0x84028501
     b6c:	100e4403 	.word	0x100e4403
     b70:	0000000c 	.word	0x0000000c
     b74:	ffffffff 	.word	0xffffffff
     b78:	7c010001 	.word	0x7c010001
     b7c:	000d0c0e 	.word	0x000d0c0e
     b80:	0000001c 	.word	0x0000001c
     b84:	00000b70 	.word	0x00000b70
     b88:	080044ac 	.word	0x080044ac
     b8c:	000000a6 	.word	0x000000a6
     b90:	8e140e42 	.word	0x8e140e42
     b94:	86028701 	.word	0x86028701
     b98:	84048503 	.word	0x84048503
     b9c:	200e5a05 	.word	0x200e5a05
     ba0:	0000000c 	.word	0x0000000c
     ba4:	00000b70 	.word	0x00000b70
     ba8:	08004554 	.word	0x08004554
     bac:	00000010 	.word	0x00000010
     bb0:	0000000c 	.word	0x0000000c
     bb4:	00000b70 	.word	0x00000b70
     bb8:	08004564 	.word	0x08004564
     bbc:	0000000c 	.word	0x0000000c
     bc0:	0000000c 	.word	0x0000000c
     bc4:	00000b70 	.word	0x00000b70
     bc8:	08004570 	.word	0x08004570
     bcc:	00000006 	.word	0x00000006
     bd0:	0000000c 	.word	0x0000000c
     bd4:	00000b70 	.word	0x00000b70
     bd8:	08004578 	.word	0x08004578
     bdc:	0000000c 	.word	0x0000000c
     be0:	0000000c 	.word	0x0000000c
     be4:	00000b70 	.word	0x00000b70
     be8:	08004584 	.word	0x08004584
     bec:	00000006 	.word	0x00000006
     bf0:	0000000c 	.word	0x0000000c
     bf4:	00000b70 	.word	0x00000b70
     bf8:	0800458c 	.word	0x0800458c
     bfc:	00000004 	.word	0x00000004
     c00:	0000000c 	.word	0x0000000c
     c04:	00000b70 	.word	0x00000b70
     c08:	08004590 	.word	0x08004590
     c0c:	00000004 	.word	0x00000004
     c10:	0000000c 	.word	0x0000000c
     c14:	00000b70 	.word	0x00000b70
     c18:	08004594 	.word	0x08004594
     c1c:	0000000a 	.word	0x0000000a
     c20:	0000000c 	.word	0x0000000c
     c24:	00000b70 	.word	0x00000b70
     c28:	080045a0 	.word	0x080045a0
     c2c:	00000004 	.word	0x00000004
     c30:	0000000c 	.word	0x0000000c
     c34:	00000b70 	.word	0x00000b70
     c38:	080045a4 	.word	0x080045a4
     c3c:	00000010 	.word	0x00000010
     c40:	0000000c 	.word	0x0000000c
     c44:	00000b70 	.word	0x00000b70
     c48:	080045b4 	.word	0x080045b4
     c4c:	00000020 	.word	0x00000020
     c50:	0000000c 	.word	0x0000000c
     c54:	00000b70 	.word	0x00000b70
     c58:	080045d4 	.word	0x080045d4
     c5c:	0000000c 	.word	0x0000000c
     c60:	00000018 	.word	0x00000018
     c64:	00000b70 	.word	0x00000b70
     c68:	080045e0 	.word	0x080045e0
     c6c:	00000060 	.word	0x00000060
     c70:	8e0c0e42 	.word	0x8e0c0e42
     c74:	84028501 	.word	0x84028501
     c78:	00000003 	.word	0x00000003
     c7c:	00000014 	.word	0x00000014
     c80:	00000b70 	.word	0x00000b70
     c84:	08004640 	.word	0x08004640
     c88:	00000034 	.word	0x00000034
     c8c:	8e080e42 	.word	0x8e080e42
     c90:	00028401 	.word	0x00028401
     c94:	00000014 	.word	0x00000014
     c98:	00000b70 	.word	0x00000b70
     c9c:	08004674 	.word	0x08004674
     ca0:	00000018 	.word	0x00000018
     ca4:	46040e42 	.word	0x46040e42
     ca8:	018e080e 	.word	0x018e080e
     cac:	00000014 	.word	0x00000014
     cb0:	00000b70 	.word	0x00000b70
     cb4:	0800468c 	.word	0x0800468c
     cb8:	000000a8 	.word	0x000000a8
     cbc:	44040e42 	.word	0x44040e42
     cc0:	018e100e 	.word	0x018e100e
     cc4:	0000000c 	.word	0x0000000c
     cc8:	ffffffff 	.word	0xffffffff
     ccc:	7c010001 	.word	0x7c010001
     cd0:	000d0c0e 	.word	0x000d0c0e
     cd4:	0000000c 	.word	0x0000000c
     cd8:	00000cc4 	.word	0x00000cc4
     cdc:	08004734 	.word	0x08004734
     ce0:	00000034 	.word	0x00000034
     ce4:	0000000c 	.word	0x0000000c
     ce8:	00000cc4 	.word	0x00000cc4
     cec:	08004768 	.word	0x08004768
     cf0:	00000030 	.word	0x00000030
     cf4:	0000000c 	.word	0x0000000c
     cf8:	00000cc4 	.word	0x00000cc4
     cfc:	08004798 	.word	0x08004798
     d00:	00000014 	.word	0x00000014
     d04:	00000018 	.word	0x00000018
     d08:	00000cc4 	.word	0x00000cc4
     d0c:	080047ac 	.word	0x080047ac
     d10:	0000007c 	.word	0x0000007c
     d14:	8e0c0e42 	.word	0x8e0c0e42
     d18:	84028501 	.word	0x84028501
     d1c:	00000003 	.word	0x00000003
     d20:	0000000c 	.word	0x0000000c
     d24:	00000cc4 	.word	0x00000cc4
     d28:	08004828 	.word	0x08004828
     d2c:	0000000c 	.word	0x0000000c
     d30:	0000000c 	.word	0x0000000c
     d34:	00000cc4 	.word	0x00000cc4
     d38:	08004834 	.word	0x08004834
     d3c:	00000018 	.word	0x00000018
     d40:	0000000c 	.word	0x0000000c
     d44:	00000cc4 	.word	0x00000cc4
     d48:	0800484c 	.word	0x0800484c
     d4c:	00000024 	.word	0x00000024
     d50:	0000000c 	.word	0x0000000c
     d54:	00000cc4 	.word	0x00000cc4
     d58:	08004870 	.word	0x08004870
     d5c:	0000000c 	.word	0x0000000c
     d60:	0000000c 	.word	0x0000000c
     d64:	00000cc4 	.word	0x00000cc4
     d68:	0800487c 	.word	0x0800487c
     d6c:	00000018 	.word	0x00000018
     d70:	0000000c 	.word	0x0000000c
     d74:	00000cc4 	.word	0x00000cc4
     d78:	08004894 	.word	0x08004894
     d7c:	00000010 	.word	0x00000010
     d80:	0000000c 	.word	0x0000000c
     d84:	00000cc4 	.word	0x00000cc4
     d88:	080048a4 	.word	0x080048a4
     d8c:	00000024 	.word	0x00000024
     d90:	0000000c 	.word	0x0000000c
     d94:	00000cc4 	.word	0x00000cc4
     d98:	080048c8 	.word	0x080048c8
     d9c:	0000000c 	.word	0x0000000c
     da0:	0000000c 	.word	0x0000000c
     da4:	00000cc4 	.word	0x00000cc4
     da8:	080048d4 	.word	0x080048d4
     dac:	00000014 	.word	0x00000014
     db0:	0000000c 	.word	0x0000000c
     db4:	00000cc4 	.word	0x00000cc4
     db8:	080048e8 	.word	0x080048e8
     dbc:	00000010 	.word	0x00000010
     dc0:	0000000c 	.word	0x0000000c
     dc4:	00000cc4 	.word	0x00000cc4
     dc8:	080048f8 	.word	0x080048f8
     dcc:	00000010 	.word	0x00000010
     dd0:	0000000c 	.word	0x0000000c
     dd4:	00000cc4 	.word	0x00000cc4
     dd8:	08004908 	.word	0x08004908
     ddc:	0000001c 	.word	0x0000001c
     de0:	0000000c 	.word	0x0000000c
     de4:	00000cc4 	.word	0x00000cc4
     de8:	08004924 	.word	0x08004924
     dec:	00000028 	.word	0x00000028
     df0:	00000014 	.word	0x00000014
     df4:	00000cc4 	.word	0x00000cc4
     df8:	0800494c 	.word	0x0800494c
     dfc:	00000058 	.word	0x00000058
     e00:	8e080e42 	.word	0x8e080e42
     e04:	00028401 	.word	0x00028401
     e08:	0000000c 	.word	0x0000000c
     e0c:	00000cc4 	.word	0x00000cc4
     e10:	080049a4 	.word	0x080049a4
     e14:	00000020 	.word	0x00000020
     e18:	0000000c 	.word	0x0000000c
     e1c:	00000cc4 	.word	0x00000cc4
     e20:	080049c4 	.word	0x080049c4
     e24:	00000018 	.word	0x00000018
     e28:	0000000c 	.word	0x0000000c
     e2c:	00000cc4 	.word	0x00000cc4
     e30:	080049dc 	.word	0x080049dc
     e34:	00000018 	.word	0x00000018
     e38:	0000000c 	.word	0x0000000c
     e3c:	00000cc4 	.word	0x00000cc4
     e40:	080049f4 	.word	0x080049f4
     e44:	00000020 	.word	0x00000020
     e48:	0000000c 	.word	0x0000000c
     e4c:	00000cc4 	.word	0x00000cc4
     e50:	08004a14 	.word	0x08004a14
     e54:	00000044 	.word	0x00000044
     e58:	0000000c 	.word	0x0000000c
     e5c:	00000cc4 	.word	0x00000cc4
     e60:	08004a58 	.word	0x08004a58
     e64:	00000014 	.word	0x00000014
     e68:	00000014 	.word	0x00000014
     e6c:	00000cc4 	.word	0x00000cc4
     e70:	08004a6c 	.word	0x08004a6c
     e74:	0000000c 	.word	0x0000000c
     e78:	42040e42 	.word	0x42040e42
     e7c:	018e080e 	.word	0x018e080e
     e80:	00000014 	.word	0x00000014
     e84:	00000cc4 	.word	0x00000cc4
     e88:	08004a78 	.word	0x08004a78
     e8c:	0000000e 	.word	0x0000000e
     e90:	44040e42 	.word	0x44040e42
     e94:	018e080e 	.word	0x018e080e
     e98:	00000014 	.word	0x00000014
     e9c:	00000cc4 	.word	0x00000cc4
     ea0:	08004a88 	.word	0x08004a88
     ea4:	0000000c 	.word	0x0000000c
     ea8:	42040e42 	.word	0x42040e42
     eac:	018e080e 	.word	0x018e080e
     eb0:	00000014 	.word	0x00000014
     eb4:	00000cc4 	.word	0x00000cc4
     eb8:	08004a94 	.word	0x08004a94
     ebc:	0000000c 	.word	0x0000000c
     ec0:	42040e42 	.word	0x42040e42
     ec4:	018e080e 	.word	0x018e080e
     ec8:	00000014 	.word	0x00000014
     ecc:	00000cc4 	.word	0x00000cc4
     ed0:	08004aa0 	.word	0x08004aa0
     ed4:	0000000c 	.word	0x0000000c
     ed8:	42040e42 	.word	0x42040e42
     edc:	018e080e 	.word	0x018e080e
     ee0:	00000014 	.word	0x00000014
     ee4:	00000cc4 	.word	0x00000cc4
     ee8:	08004aac 	.word	0x08004aac
     eec:	0000000c 	.word	0x0000000c
     ef0:	42040e42 	.word	0x42040e42
     ef4:	018e080e 	.word	0x018e080e
     ef8:	0000000c 	.word	0x0000000c
     efc:	ffffffff 	.word	0xffffffff
     f00:	7c010001 	.word	0x7c010001
     f04:	000d0c0e 	.word	0x000d0c0e
     f08:	0000000c 	.word	0x0000000c
     f0c:	00000ef8 	.word	0x00000ef8
     f10:	08004ab8 	.word	0x08004ab8
     f14:	0000000c 	.word	0x0000000c
     f18:	0000000c 	.word	0x0000000c
     f1c:	00000ef8 	.word	0x00000ef8
     f20:	08004ac4 	.word	0x08004ac4
     f24:	0000000c 	.word	0x0000000c
     f28:	0000000c 	.word	0x0000000c
     f2c:	00000ef8 	.word	0x00000ef8
     f30:	08004ad0 	.word	0x08004ad0
     f34:	00000014 	.word	0x00000014
     f38:	0000000c 	.word	0x0000000c
     f3c:	00000ef8 	.word	0x00000ef8
     f40:	08004ae4 	.word	0x08004ae4
     f44:	0000000c 	.word	0x0000000c
     f48:	0000000c 	.word	0x0000000c
     f4c:	00000ef8 	.word	0x00000ef8
     f50:	08004af0 	.word	0x08004af0
     f54:	00000014 	.word	0x00000014
     f58:	0000000c 	.word	0x0000000c
     f5c:	00000ef8 	.word	0x00000ef8
     f60:	08004b04 	.word	0x08004b04
     f64:	00000010 	.word	0x00000010
     f68:	00000014 	.word	0x00000014
     f6c:	00000ef8 	.word	0x00000ef8
     f70:	08004b14 	.word	0x08004b14
     f74:	00000034 	.word	0x00000034
     f78:	44040e44 	.word	0x44040e44
     f7c:	018e080e 	.word	0x018e080e
     f80:	00000014 	.word	0x00000014
     f84:	00000ef8 	.word	0x00000ef8
     f88:	08004b48 	.word	0x08004b48
     f8c:	00000038 	.word	0x00000038
     f90:	44040e44 	.word	0x44040e44
     f94:	018e080e 	.word	0x018e080e
     f98:	00000014 	.word	0x00000014
     f9c:	00000ef8 	.word	0x00000ef8
     fa0:	08004b80 	.word	0x08004b80
     fa4:	00000018 	.word	0x00000018
     fa8:	8e080e42 	.word	0x8e080e42
     fac:	00028401 	.word	0x00028401
     fb0:	0000000c 	.word	0x0000000c
     fb4:	ffffffff 	.word	0xffffffff
     fb8:	7c010001 	.word	0x7c010001
     fbc:	000d0c0e 	.word	0x000d0c0e
     fc0:	0000000c 	.word	0x0000000c
     fc4:	00000fb0 	.word	0x00000fb0
     fc8:	08004b98 	.word	0x08004b98
     fcc:	00000040 	.word	0x00000040
     fd0:	0000000c 	.word	0x0000000c
     fd4:	00000fb0 	.word	0x00000fb0
     fd8:	08004bd8 	.word	0x08004bd8
     fdc:	00000034 	.word	0x00000034
     fe0:	00000010 	.word	0x00000010
     fe4:	00000fb0 	.word	0x00000fb0
     fe8:	08004c0c 	.word	0x08004c0c
     fec:	00000030 	.word	0x00000030
     ff0:	00080e42 	.word	0x00080e42
     ff4:	0000000c 	.word	0x0000000c
     ff8:	00000fb0 	.word	0x00000fb0
     ffc:	08004c3c 	.word	0x08004c3c
    1000:	00000014 	.word	0x00000014
    1004:	0000000c 	.word	0x0000000c
    1008:	00000fb0 	.word	0x00000fb0
    100c:	08004c50 	.word	0x08004c50
    1010:	0000000c 	.word	0x0000000c
    1014:	0000000c 	.word	0x0000000c
    1018:	00000fb0 	.word	0x00000fb0
    101c:	08004c5c 	.word	0x08004c5c
    1020:	00000014 	.word	0x00000014
    1024:	0000000c 	.word	0x0000000c
    1028:	00000fb0 	.word	0x00000fb0
    102c:	08004c70 	.word	0x08004c70
    1030:	0000000c 	.word	0x0000000c
    1034:	0000000c 	.word	0x0000000c
    1038:	00000fb0 	.word	0x00000fb0
    103c:	08004c7c 	.word	0x08004c7c
    1040:	00000014 	.word	0x00000014
    1044:	0000000c 	.word	0x0000000c
    1048:	00000fb0 	.word	0x00000fb0
    104c:	08004c90 	.word	0x08004c90
    1050:	00000010 	.word	0x00000010
    1054:	0000000c 	.word	0x0000000c
    1058:	00000fb0 	.word	0x00000fb0
    105c:	08004ca0 	.word	0x08004ca0
    1060:	00000014 	.word	0x00000014
    1064:	0000000c 	.word	0x0000000c
    1068:	00000fb0 	.word	0x00000fb0
    106c:	08004cb4 	.word	0x08004cb4
    1070:	00000014 	.word	0x00000014
    1074:	0000000c 	.word	0x0000000c
    1078:	00000fb0 	.word	0x00000fb0
    107c:	08004cc8 	.word	0x08004cc8
    1080:	00000014 	.word	0x00000014
    1084:	0000000c 	.word	0x0000000c
    1088:	00000fb0 	.word	0x00000fb0
    108c:	08004cdc 	.word	0x08004cdc
    1090:	0000001c 	.word	0x0000001c
    1094:	0000000c 	.word	0x0000000c
    1098:	00000fb0 	.word	0x00000fb0
    109c:	08004cf8 	.word	0x08004cf8
    10a0:	0000000c 	.word	0x0000000c
    10a4:	0000000c 	.word	0x0000000c
    10a8:	00000fb0 	.word	0x00000fb0
    10ac:	08004d04 	.word	0x08004d04
    10b0:	00000014 	.word	0x00000014
    10b4:	0000000c 	.word	0x0000000c
    10b8:	00000fb0 	.word	0x00000fb0
    10bc:	08004d18 	.word	0x08004d18
    10c0:	00000020 	.word	0x00000020
    10c4:	0000000c 	.word	0x0000000c
    10c8:	00000fb0 	.word	0x00000fb0
    10cc:	08004d38 	.word	0x08004d38
    10d0:	0000000c 	.word	0x0000000c
    10d4:	0000000c 	.word	0x0000000c
    10d8:	00000fb0 	.word	0x00000fb0
    10dc:	08004d44 	.word	0x08004d44
    10e0:	00000010 	.word	0x00000010
    10e4:	0000000c 	.word	0x0000000c
    10e8:	00000fb0 	.word	0x00000fb0
    10ec:	08004d54 	.word	0x08004d54
    10f0:	0000000c 	.word	0x0000000c
    10f4:	0000000c 	.word	0x0000000c
    10f8:	00000fb0 	.word	0x00000fb0
    10fc:	08004d60 	.word	0x08004d60
    1100:	000000b8 	.word	0x000000b8
    1104:	0000000c 	.word	0x0000000c
    1108:	00000fb0 	.word	0x00000fb0
    110c:	08004e18 	.word	0x08004e18
    1110:	0000001c 	.word	0x0000001c
    1114:	0000000c 	.word	0x0000000c
    1118:	00000fb0 	.word	0x00000fb0
    111c:	08004e34 	.word	0x08004e34
    1120:	0000001c 	.word	0x0000001c
    1124:	0000000c 	.word	0x0000000c
    1128:	00000fb0 	.word	0x00000fb0
    112c:	08004e50 	.word	0x08004e50
    1130:	0000001c 	.word	0x0000001c
    1134:	0000000c 	.word	0x0000000c
    1138:	00000fb0 	.word	0x00000fb0
    113c:	08004e6c 	.word	0x08004e6c
    1140:	0000001c 	.word	0x0000001c
    1144:	0000000c 	.word	0x0000000c
    1148:	00000fb0 	.word	0x00000fb0
    114c:	08004e88 	.word	0x08004e88
    1150:	0000001c 	.word	0x0000001c
    1154:	0000000c 	.word	0x0000000c
    1158:	00000fb0 	.word	0x00000fb0
    115c:	08004ea4 	.word	0x08004ea4
    1160:	0000000c 	.word	0x0000000c
    1164:	0000000c 	.word	0x0000000c
    1168:	00000fb0 	.word	0x00000fb0
    116c:	08004eb0 	.word	0x08004eb0
    1170:	0000000c 	.word	0x0000000c
    1174:	0000000c 	.word	0x0000000c
    1178:	00000fb0 	.word	0x00000fb0
    117c:	08004ebc 	.word	0x08004ebc
    1180:	0000000c 	.word	0x0000000c
    1184:	0000000c 	.word	0x0000000c
    1188:	00000fb0 	.word	0x00000fb0
    118c:	08004ec8 	.word	0x08004ec8
    1190:	00000044 	.word	0x00000044
    1194:	0000000c 	.word	0x0000000c
    1198:	00000fb0 	.word	0x00000fb0
    119c:	08004f0c 	.word	0x08004f0c
    11a0:	00000010 	.word	0x00000010
    11a4:	0000000c 	.word	0x0000000c
    11a8:	00000fb0 	.word	0x00000fb0
    11ac:	08004f1c 	.word	0x08004f1c
    11b0:	00000014 	.word	0x00000014
    11b4:	0000000c 	.word	0x0000000c
    11b8:	00000fb0 	.word	0x00000fb0
    11bc:	08004f30 	.word	0x08004f30
    11c0:	0000000c 	.word	0x0000000c
    11c4:	0000000c 	.word	0x0000000c
    11c8:	ffffffff 	.word	0xffffffff
    11cc:	7c010001 	.word	0x7c010001
    11d0:	000d0c0e 	.word	0x000d0c0e
    11d4:	0000000c 	.word	0x0000000c
    11d8:	000011c4 	.word	0x000011c4
    11dc:	08004f3c 	.word	0x08004f3c
    11e0:	0000001c 	.word	0x0000001c
    11e4:	0000000c 	.word	0x0000000c
    11e8:	000011c4 	.word	0x000011c4
    11ec:	08004f58 	.word	0x08004f58
    11f0:	0000000c 	.word	0x0000000c
    11f4:	0000000c 	.word	0x0000000c
    11f8:	000011c4 	.word	0x000011c4
    11fc:	08004f64 	.word	0x08004f64
    1200:	0000002c 	.word	0x0000002c
    1204:	0000000c 	.word	0x0000000c
    1208:	000011c4 	.word	0x000011c4
    120c:	08004f90 	.word	0x08004f90
    1210:	0000001c 	.word	0x0000001c
    1214:	0000000c 	.word	0x0000000c
    1218:	000011c4 	.word	0x000011c4
    121c:	08004fac 	.word	0x08004fac
    1220:	0000000c 	.word	0x0000000c
    1224:	0000000c 	.word	0x0000000c
    1228:	000011c4 	.word	0x000011c4
    122c:	08004fb8 	.word	0x08004fb8
    1230:	00000028 	.word	0x00000028
    1234:	0000000c 	.word	0x0000000c
    1238:	ffffffff 	.word	0xffffffff
    123c:	7c010001 	.word	0x7c010001
    1240:	000d0c0e 	.word	0x000d0c0e
    1244:	00000010 	.word	0x00000010
    1248:	00001234 	.word	0x00001234
    124c:	08004fe0 	.word	0x08004fe0
    1250:	00000054 	.word	0x00000054
    1254:	00080e44 	.word	0x00080e44
    1258:	0000001c 	.word	0x0000001c
    125c:	00001234 	.word	0x00001234
    1260:	08005034 	.word	0x08005034
    1264:	000000b0 	.word	0x000000b0
    1268:	8e140e54 	.word	0x8e140e54
    126c:	86028701 	.word	0x86028701
    1270:	84048503 	.word	0x84048503
    1274:	200e7605 	.word	0x200e7605
    1278:	00000020 	.word	0x00000020
    127c:	00001234 	.word	0x00001234
    1280:	080050e4 	.word	0x080050e4
    1284:	000000b8 	.word	0x000000b8
    1288:	8e140e44 	.word	0x8e140e44
    128c:	86028701 	.word	0x86028701
    1290:	84048503 	.word	0x84048503
    1294:	0e400205 	.word	0x0e400205
    1298:	00000020 	.word	0x00000020
    129c:	00000020 	.word	0x00000020
    12a0:	00001234 	.word	0x00001234
    12a4:	0800519c 	.word	0x0800519c
    12a8:	000000b4 	.word	0x000000b4
    12ac:	8e140e44 	.word	0x8e140e44
    12b0:	86028701 	.word	0x86028701
    12b4:	84048503 	.word	0x84048503
    12b8:	0e400205 	.word	0x0e400205
    12bc:	00000020 	.word	0x00000020
    12c0:	0000001c 	.word	0x0000001c
    12c4:	00001234 	.word	0x00001234
    12c8:	08005250 	.word	0x08005250
    12cc:	00000094 	.word	0x00000094
    12d0:	4e140e44 	.word	0x4e140e44
    12d4:	018e280e 	.word	0x018e280e
    12d8:	03860287 	.word	0x03860287
    12dc:	05840485 	.word	0x05840485
    12e0:	00000018 	.word	0x00000018
    12e4:	00001234 	.word	0x00001234
    12e8:	080052e4 	.word	0x080052e4
    12ec:	0000016c 	.word	0x0000016c
    12f0:	8e0c0e44 	.word	0x8e0c0e44
    12f4:	84028501 	.word	0x84028501
    12f8:	00000003 	.word	0x00000003
    12fc:	0000001c 	.word	0x0000001c
    1300:	00001234 	.word	0x00001234
    1304:	08005450 	.word	0x08005450
    1308:	0000015a 	.word	0x0000015a
    130c:	8e140e44 	.word	0x8e140e44
    1310:	86028701 	.word	0x86028701
    1314:	84048503 	.word	0x84048503
    1318:	00000005 	.word	0x00000005
    131c:	0000000c 	.word	0x0000000c
    1320:	00001234 	.word	0x00001234
    1324:	080055ac 	.word	0x080055ac
    1328:	00000022 	.word	0x00000022
    132c:	0000000c 	.word	0x0000000c
    1330:	00001234 	.word	0x00001234
    1334:	080055d0 	.word	0x080055d0
    1338:	00000016 	.word	0x00000016
    133c:	0000000c 	.word	0x0000000c
    1340:	00001234 	.word	0x00001234
    1344:	080055e8 	.word	0x080055e8
    1348:	00000016 	.word	0x00000016
    134c:	0000000c 	.word	0x0000000c
    1350:	00001234 	.word	0x00001234
    1354:	08005600 	.word	0x08005600
    1358:	00000018 	.word	0x00000018
    135c:	0000000c 	.word	0x0000000c
    1360:	00001234 	.word	0x00001234
    1364:	5618      	.short	0x5618
    1366:	0800      	.short	0x0800
    1368:	00000014 	.word	0x00000014
    136c:	0000000c 	.word	0x0000000c
    1370:	00001234 	.word	0x00001234
    1374:	0800562c 	.word	0x0800562c
    1378:	0000001a 	.word	0x0000001a
    137c:	0000000c 	.word	0x0000000c
    1380:	00001234 	.word	0x00001234
    1384:	08005648 	.word	0x08005648
    1388:	0000001c 	.word	0x0000001c
    138c:	0000000c 	.word	0x0000000c
    1390:	00001234 	.word	0x00001234
    1394:	08005664 	.word	0x08005664
    1398:	00000018 	.word	0x00000018
    139c:	0000000c 	.word	0x0000000c
    13a0:	00001234 	.word	0x00001234
    13a4:	0800567c 	.word	0x0800567c
    13a8:	00000004 	.word	0x00000004
    13ac:	0000000c 	.word	0x0000000c
    13b0:	00001234 	.word	0x00001234
    13b4:	08005680 	.word	0x08005680
    13b8:	00000008 	.word	0x00000008
    13bc:	0000000c 	.word	0x0000000c
    13c0:	00001234 	.word	0x00001234
    13c4:	08005688 	.word	0x08005688
    13c8:	00000018 	.word	0x00000018
    13cc:	0000000c 	.word	0x0000000c
    13d0:	00001234 	.word	0x00001234
    13d4:	080056a0 	.word	0x080056a0
    13d8:	0000000e 	.word	0x0000000e
    13dc:	0000000c 	.word	0x0000000c
    13e0:	00001234 	.word	0x00001234
    13e4:	080056b0 	.word	0x080056b0
    13e8:	0000001a 	.word	0x0000001a
    13ec:	00000014 	.word	0x00000014
    13f0:	00001234 	.word	0x00001234
    13f4:	080056cc 	.word	0x080056cc
    13f8:	00000092 	.word	0x00000092
    13fc:	8e080e42 	.word	0x8e080e42
    1400:	00028401 	.word	0x00028401
    1404:	0000000c 	.word	0x0000000c
    1408:	00001234 	.word	0x00001234
    140c:	08005760 	.word	0x08005760
    1410:	00000028 	.word	0x00000028
    1414:	0000000c 	.word	0x0000000c
    1418:	00001234 	.word	0x00001234
    141c:	08005788 	.word	0x08005788
    1420:	00000022 	.word	0x00000022
    1424:	0000000c 	.word	0x0000000c
    1428:	00001234 	.word	0x00001234
    142c:	080057ac 	.word	0x080057ac
    1430:	00000018 	.word	0x00000018
    1434:	0000000c 	.word	0x0000000c
    1438:	00001234 	.word	0x00001234
    143c:	080057c4 	.word	0x080057c4
    1440:	00000006 	.word	0x00000006
    1444:	0000000c 	.word	0x0000000c
    1448:	00001234 	.word	0x00001234
    144c:	080057cc 	.word	0x080057cc
    1450:	00000010 	.word	0x00000010
    1454:	0000000c 	.word	0x0000000c
    1458:	00001234 	.word	0x00001234
    145c:	080057dc 	.word	0x080057dc
    1460:	00000010 	.word	0x00000010
    1464:	00000018 	.word	0x00000018
    1468:	00001234 	.word	0x00001234
    146c:	080057ec 	.word	0x080057ec
    1470:	00000046 	.word	0x00000046
    1474:	8e0c0e46 	.word	0x8e0c0e46
    1478:	84028501 	.word	0x84028501
    147c:	00000003 	.word	0x00000003
    1480:	0000000c 	.word	0x0000000c
    1484:	00001234 	.word	0x00001234
    1488:	08005834 	.word	0x08005834
    148c:	00000010 	.word	0x00000010
    1490:	0000000c 	.word	0x0000000c
    1494:	00001234 	.word	0x00001234
    1498:	08005844 	.word	0x08005844
    149c:	00000014 	.word	0x00000014
    14a0:	0000000c 	.word	0x0000000c
    14a4:	00001234 	.word	0x00001234
    14a8:	08005858 	.word	0x08005858
    14ac:	00000010 	.word	0x00000010
    14b0:	0000000c 	.word	0x0000000c
    14b4:	00001234 	.word	0x00001234
    14b8:	08005868 	.word	0x08005868
    14bc:	00000014 	.word	0x00000014
    14c0:	0000000c 	.word	0x0000000c
    14c4:	00001234 	.word	0x00001234
    14c8:	0800587c 	.word	0x0800587c
    14cc:	0000001a 	.word	0x0000001a
    14d0:	0000000c 	.word	0x0000000c
    14d4:	00001234 	.word	0x00001234
    14d8:	08005898 	.word	0x08005898
    14dc:	0000001a 	.word	0x0000001a
    14e0:	0000000c 	.word	0x0000000c
    14e4:	00001234 	.word	0x00001234
    14e8:	080058b4 	.word	0x080058b4
    14ec:	0000001a 	.word	0x0000001a
    14f0:	0000000c 	.word	0x0000000c
    14f4:	00001234 	.word	0x00001234
    14f8:	080058d0 	.word	0x080058d0
    14fc:	0000001a 	.word	0x0000001a
    1500:	0000000c 	.word	0x0000000c
    1504:	00001234 	.word	0x00001234
    1508:	080058ec 	.word	0x080058ec
    150c:	00000010 	.word	0x00000010
    1510:	0000000c 	.word	0x0000000c
    1514:	00001234 	.word	0x00001234
    1518:	080058fc 	.word	0x080058fc
    151c:	00000014 	.word	0x00000014
    1520:	0000000c 	.word	0x0000000c
    1524:	00001234 	.word	0x00001234
    1528:	08005910 	.word	0x08005910
    152c:	00000010 	.word	0x00000010
    1530:	0000000c 	.word	0x0000000c
    1534:	00001234 	.word	0x00001234
    1538:	08005920 	.word	0x08005920
    153c:	00000014 	.word	0x00000014
    1540:	0000000c 	.word	0x0000000c
    1544:	00001234 	.word	0x00001234
    1548:	08005934 	.word	0x08005934
    154c:	00000010 	.word	0x00000010
    1550:	0000000c 	.word	0x0000000c
    1554:	00001234 	.word	0x00001234
    1558:	08005944 	.word	0x08005944
    155c:	00000014 	.word	0x00000014
    1560:	0000000c 	.word	0x0000000c
    1564:	00001234 	.word	0x00001234
    1568:	08005958 	.word	0x08005958
    156c:	00000010 	.word	0x00000010
    1570:	0000000c 	.word	0x0000000c
    1574:	00001234 	.word	0x00001234
    1578:	08005968 	.word	0x08005968
    157c:	00000014 	.word	0x00000014
    1580:	0000000c 	.word	0x0000000c
    1584:	00001234 	.word	0x00001234
    1588:	0800597c 	.word	0x0800597c
    158c:	00000010 	.word	0x00000010
    1590:	0000000c 	.word	0x0000000c
    1594:	00001234 	.word	0x00001234
    1598:	0800598c 	.word	0x0800598c
    159c:	00000010 	.word	0x00000010
    15a0:	0000000c 	.word	0x0000000c
    15a4:	00001234 	.word	0x00001234
    15a8:	0800599c 	.word	0x0800599c
    15ac:	00000010 	.word	0x00000010
    15b0:	0000000c 	.word	0x0000000c
    15b4:	00001234 	.word	0x00001234
    15b8:	080059ac 	.word	0x080059ac
    15bc:	00000010 	.word	0x00000010
    15c0:	0000000c 	.word	0x0000000c
    15c4:	00001234 	.word	0x00001234
    15c8:	080059bc 	.word	0x080059bc
    15cc:	00000010 	.word	0x00000010
    15d0:	0000000c 	.word	0x0000000c
    15d4:	00001234 	.word	0x00001234
    15d8:	080059cc 	.word	0x080059cc
    15dc:	00000010 	.word	0x00000010
    15e0:	0000000c 	.word	0x0000000c
    15e4:	00001234 	.word	0x00001234
    15e8:	080059dc 	.word	0x080059dc
    15ec:	00000014 	.word	0x00000014
    15f0:	0000000c 	.word	0x0000000c
    15f4:	00001234 	.word	0x00001234
    15f8:	080059f0 	.word	0x080059f0
    15fc:	00000014 	.word	0x00000014
    1600:	0000000c 	.word	0x0000000c
    1604:	00001234 	.word	0x00001234
    1608:	08005a04 	.word	0x08005a04
    160c:	00000014 	.word	0x00000014
    1610:	0000000c 	.word	0x0000000c
    1614:	00001234 	.word	0x00001234
    1618:	08005a18 	.word	0x08005a18
    161c:	00000014 	.word	0x00000014
    1620:	0000000c 	.word	0x0000000c
    1624:	00001234 	.word	0x00001234
    1628:	08005a2c 	.word	0x08005a2c
    162c:	00000014 	.word	0x00000014
    1630:	0000000c 	.word	0x0000000c
    1634:	00001234 	.word	0x00001234
    1638:	08005a40 	.word	0x08005a40
    163c:	00000020 	.word	0x00000020
    1640:	0000000c 	.word	0x0000000c
    1644:	00001234 	.word	0x00001234
    1648:	08005a60 	.word	0x08005a60
    164c:	00000020 	.word	0x00000020
    1650:	00000010 	.word	0x00000010
    1654:	00001234 	.word	0x00001234
    1658:	08005a80 	.word	0x08005a80
    165c:	00000068 	.word	0x00000068
    1660:	00080e4a 	.word	0x00080e4a
    1664:	0000000c 	.word	0x0000000c
    1668:	00001234 	.word	0x00001234
    166c:	08005ae8 	.word	0x08005ae8
    1670:	0000001a 	.word	0x0000001a
    1674:	0000000c 	.word	0x0000000c
    1678:	00001234 	.word	0x00001234
    167c:	08005b04 	.word	0x08005b04
    1680:	0000001a 	.word	0x0000001a
    1684:	0000000c 	.word	0x0000000c
    1688:	00001234 	.word	0x00001234
    168c:	08005b20 	.word	0x08005b20
    1690:	0000001a 	.word	0x0000001a
    1694:	0000000c 	.word	0x0000000c
    1698:	00001234 	.word	0x00001234
    169c:	08005b3c 	.word	0x08005b3c
    16a0:	00000016 	.word	0x00000016
    16a4:	0000000c 	.word	0x0000000c
    16a8:	00001234 	.word	0x00001234
    16ac:	08005b54 	.word	0x08005b54
    16b0:	00000016 	.word	0x00000016
    16b4:	0000000c 	.word	0x0000000c
    16b8:	00001234 	.word	0x00001234
    16bc:	08005b6c 	.word	0x08005b6c
    16c0:	00000016 	.word	0x00000016
    16c4:	0000000c 	.word	0x0000000c
    16c8:	00001234 	.word	0x00001234
    16cc:	08005b84 	.word	0x08005b84
    16d0:	00000016 	.word	0x00000016
    16d4:	0000000c 	.word	0x0000000c
    16d8:	00001234 	.word	0x00001234
    16dc:	08005b9c 	.word	0x08005b9c
    16e0:	00000004 	.word	0x00000004
    16e4:	0000000c 	.word	0x0000000c
    16e8:	00001234 	.word	0x00001234
    16ec:	08005ba0 	.word	0x08005ba0
    16f0:	00000004 	.word	0x00000004
    16f4:	0000000c 	.word	0x0000000c
    16f8:	00001234 	.word	0x00001234
    16fc:	08005ba4 	.word	0x08005ba4
    1700:	00000004 	.word	0x00000004
    1704:	0000000c 	.word	0x0000000c
    1708:	00001234 	.word	0x00001234
    170c:	08005ba8 	.word	0x08005ba8
    1710:	00000004 	.word	0x00000004
    1714:	0000000c 	.word	0x0000000c
    1718:	00001234 	.word	0x00001234
    171c:	08005bac 	.word	0x08005bac
    1720:	00000004 	.word	0x00000004
    1724:	0000000c 	.word	0x0000000c
    1728:	00001234 	.word	0x00001234
    172c:	08005bb0 	.word	0x08005bb0
    1730:	00000006 	.word	0x00000006
    1734:	0000000c 	.word	0x0000000c
    1738:	00001234 	.word	0x00001234
    173c:	08005bb8 	.word	0x08005bb8
    1740:	16          	.byte	0x16
    1741:	00          	.byte	0x00
    1742:	0000      	.short	0x0000
    1744:	0000000c 	.word	0x0000000c
    1748:	00001234 	.word	0x00001234
    174c:	08005bd0 	.word	0x08005bd0
    1750:	0000001a 	.word	0x0000001a
    1754:	0000000c 	.word	0x0000000c
    1758:	00001234 	.word	0x00001234
    175c:	08005bec 	.word	0x08005bec
    1760:	00000016 	.word	0x00000016
    1764:	0000000c 	.word	0x0000000c
    1768:	00001234 	.word	0x00001234
    176c:	08005c04 	.word	0x08005c04
    1770:	0000001a 	.word	0x0000001a
    1774:	0000000c 	.word	0x0000000c
    1778:	00001234 	.word	0x00001234
    177c:	08005c20 	.word	0x08005c20
    1780:	00000010 	.word	0x00000010
    1784:	0000000c 	.word	0x0000000c
    1788:	00001234 	.word	0x00001234
    178c:	08005c30 	.word	0x08005c30
    1790:	00000006 	.word	0x00000006
    1794:	0000000c 	.word	0x0000000c
    1798:	00001234 	.word	0x00001234
    179c:	08005c38 	.word	0x08005c38
    17a0:	00000006 	.word	0x00000006
    17a4:	0000000c 	.word	0x0000000c
    17a8:	00001234 	.word	0x00001234
    17ac:	08005c40 	.word	0x08005c40
    17b0:	00000006 	.word	0x00000006
    17b4:	0000000c 	.word	0x0000000c
    17b8:	00001234 	.word	0x00001234
    17bc:	08005c48 	.word	0x08005c48
    17c0:	00000008 	.word	0x00000008
    17c4:	0000000c 	.word	0x0000000c
    17c8:	00001234 	.word	0x00001234
    17cc:	08005c50 	.word	0x08005c50
    17d0:	00000006 	.word	0x00000006
    17d4:	0000000c 	.word	0x0000000c
    17d8:	00001234 	.word	0x00001234
    17dc:	08005c58 	.word	0x08005c58
    17e0:	00000006 	.word	0x00000006
    17e4:	0000000c 	.word	0x0000000c
    17e8:	00001234 	.word	0x00001234
    17ec:	08005c60 	.word	0x08005c60
    17f0:	0000000c 	.word	0x0000000c
    17f4:	0000000c 	.word	0x0000000c
    17f8:	00001234 	.word	0x00001234
    17fc:	08005c6c 	.word	0x08005c6c
    1800:	0000000a 	.word	0x0000000a
    1804:	0000000c 	.word	0x0000000c
    1808:	00001234 	.word	0x00001234
    180c:	08005c78 	.word	0x08005c78
    1810:	00000018 	.word	0x00000018
    1814:	0000000c 	.word	0x0000000c
    1818:	00001234 	.word	0x00001234
    181c:	08005c90 	.word	0x08005c90
    1820:	0000000a 	.word	0x0000000a
    1824:	00000014 	.word	0x00000014
    1828:	00001234 	.word	0x00001234
    182c:	08005c9c 	.word	0x08005c9c
    1830:	000000cc 	.word	0x000000cc
    1834:	44040e42 	.word	0x44040e42
    1838:	018e100e 	.word	0x018e100e
    183c:	0000000c 	.word	0x0000000c
    1840:	ffffffff 	.word	0xffffffff
    1844:	7c010001 	.word	0x7c010001
    1848:	000d0c0e 	.word	0x000d0c0e
    184c:	0000000c 	.word	0x0000000c
    1850:	0000183c 	.word	0x0000183c
    1854:	08005d68 	.word	0x08005d68
    1858:	0000001e 	.word	0x0000001e
    185c:	0000000c 	.word	0x0000000c
    1860:	0000183c 	.word	0x0000183c
    1864:	08005d88 	.word	0x08005d88
    1868:	00000028 	.word	0x00000028
    186c:	0000000c 	.word	0x0000000c
    1870:	0000183c 	.word	0x0000183c
    1874:	08005db0 	.word	0x08005db0
    1878:	0000000e 	.word	0x0000000e
    187c:	0000000c 	.word	0x0000000c
    1880:	0000183c 	.word	0x0000183c
    1884:	08005dc0 	.word	0x08005dc0
    1888:	0000001a 	.word	0x0000001a
    188c:	00000010 	.word	0x00000010
    1890:	0000183c 	.word	0x0000183c
    1894:	08005ddc 	.word	0x08005ddc
    1898:	0000003e 	.word	0x0000003e
    189c:	00080e4e 	.word	0x00080e4e
    18a0:	0000000c 	.word	0x0000000c
    18a4:	0000183c 	.word	0x0000183c
    18a8:	08005e1c 	.word	0x08005e1c
    18ac:	00000018 	.word	0x00000018
    18b0:	0000000c 	.word	0x0000000c
    18b4:	0000183c 	.word	0x0000183c
    18b8:	08005e34 	.word	0x08005e34
    18bc:	00000016 	.word	0x00000016
    18c0:	0000000c 	.word	0x0000000c
    18c4:	0000183c 	.word	0x0000183c
    18c8:	08005e4c 	.word	0x08005e4c
    18cc:	00000016 	.word	0x00000016
    18d0:	0000000c 	.word	0x0000000c
    18d4:	0000183c 	.word	0x0000183c
    18d8:	08005e64 	.word	0x08005e64
    18dc:	0000001a 	.word	0x0000001a
    18e0:	0000000c 	.word	0x0000000c
    18e4:	0000183c 	.word	0x0000183c
    18e8:	08005e80 	.word	0x08005e80
    18ec:	00000016 	.word	0x00000016
    18f0:	0000000c 	.word	0x0000000c
    18f4:	0000183c 	.word	0x0000183c
    18f8:	08005e98 	.word	0x08005e98
    18fc:	0000001a 	.word	0x0000001a
    1900:	0000000c 	.word	0x0000000c
    1904:	0000183c 	.word	0x0000183c
    1908:	08005eb4 	.word	0x08005eb4
    190c:	00000008 	.word	0x00000008
    1910:	0000000c 	.word	0x0000000c
    1914:	0000183c 	.word	0x0000183c
    1918:	08005ebc 	.word	0x08005ebc
    191c:	00000008 	.word	0x00000008
    1920:	0000000c 	.word	0x0000000c
    1924:	0000183c 	.word	0x0000183c
    1928:	08005ec4 	.word	0x08005ec4
    192c:	0000000c 	.word	0x0000000c
    1930:	0000000c 	.word	0x0000000c
    1934:	0000183c 	.word	0x0000183c
    1938:	08005ed0 	.word	0x08005ed0
    193c:	00000012 	.word	0x00000012
    1940:	0000000c 	.word	0x0000000c
    1944:	0000183c 	.word	0x0000183c
    1948:	08005ee4 	.word	0x08005ee4
    194c:	00000012 	.word	0x00000012
    1950:	0000000c 	.word	0x0000000c
    1954:	0000183c 	.word	0x0000183c
    1958:	08005ef8 	.word	0x08005ef8
    195c:	0000001a 	.word	0x0000001a
    1960:	0000000c 	.word	0x0000000c
    1964:	0000183c 	.word	0x0000183c
    1968:	08005f14 	.word	0x08005f14
    196c:	0000001a 	.word	0x0000001a
    1970:	0000000c 	.word	0x0000000c
    1974:	0000183c 	.word	0x0000183c
    1978:	08005f30 	.word	0x08005f30
    197c:	0000001a 	.word	0x0000001a
    1980:	0000000c 	.word	0x0000000c
    1984:	0000183c 	.word	0x0000183c
    1988:	08005f4c 	.word	0x08005f4c
    198c:	00000016 	.word	0x00000016
    1990:	0000000c 	.word	0x0000000c
    1994:	0000183c 	.word	0x0000183c
    1998:	08005f64 	.word	0x08005f64
    199c:	0000001a 	.word	0x0000001a
    19a0:	0000000c 	.word	0x0000000c
    19a4:	0000183c 	.word	0x0000183c
    19a8:	08005f80 	.word	0x08005f80
    19ac:	0000000c 	.word	0x0000000c
    19b0:	0000000c 	.word	0x0000000c
    19b4:	0000183c 	.word	0x0000183c
    19b8:	08005f8c 	.word	0x08005f8c
    19bc:	0000000a 	.word	0x0000000a
    19c0:	0000000c 	.word	0x0000000c
    19c4:	0000183c 	.word	0x0000183c
    19c8:	08005f98 	.word	0x08005f98
    19cc:	0000004a 	.word	0x0000004a
    19d0:	0000000c 	.word	0x0000000c
    19d4:	0000183c 	.word	0x0000183c
    19d8:	08005fe4 	.word	0x08005fe4
    19dc:	00000010 	.word	0x00000010
    19e0:	0000001c 	.word	0x0000001c
    19e4:	0000183c 	.word	0x0000183c
    19e8:	08005ff4 	.word	0x08005ff4
    19ec:	0000009c 	.word	0x0000009c
    19f0:	8e100e54 	.word	0x8e100e54
    19f4:	85028601 	.word	0x85028601
    19f8:	6c048403 	.word	0x6c048403
    19fc:	0000300e 	.word	0x0000300e
    1a00:	00000014 	.word	0x00000014
    1a04:	0000183c 	.word	0x0000183c
    1a08:	08006090 	.word	0x08006090
    1a0c:	00000094 	.word	0x00000094
    1a10:	44040e42 	.word	0x44040e42
    1a14:	018e100e 	.word	0x018e100e
    1a18:	0000000c 	.word	0x0000000c
    1a1c:	ffffffff 	.word	0xffffffff
    1a20:	7c010001 	.word	0x7c010001
    1a24:	000d0c0e 	.word	0x000d0c0e
    1a28:	00000018 	.word	0x00000018
    1a2c:	00001a18 	.word	0x00001a18
    1a30:	08006194 	.word	0x08006194
    1a34:	00000054 	.word	0x00000054
    1a38:	000d0946 	.word	0x000d0946
    1a3c:	8e080e44 	.word	0x8e080e44
    1a40:	00028d01 	.word	0x00028d01
    1a44:	0000000c 	.word	0x0000000c
    1a48:	ffffffff 	.word	0xffffffff
    1a4c:	7c010001 	.word	0x7c010001
    1a50:	000d0c0e 	.word	0x000d0c0e
    1a54:	00000014 	.word	0x00000014
    1a58:	00001a44 	.word	0x00001a44
    1a5c:	00000000 	.word	0x00000000
    1a60:	00000028 	.word	0x00000028
    1a64:	4c040e44 	.word	0x4c040e44
    1a68:	018e080e 	.word	0x018e080e
    1a6c:	0000000c 	.word	0x0000000c
    1a70:	ffffffff 	.word	0xffffffff
    1a74:	7c010001 	.word	0x7c010001
    1a78:	000d0c0e 	.word	0x000d0c0e
    1a7c:	0000000c 	.word	0x0000000c
    1a80:	00001a6c 	.word	0x00001a6c
    1a84:	00000000 	.word	0x00000000
    1a88:	00000030 	.word	0x00000030
    1a8c:	0000000c 	.word	0x0000000c
    1a90:	ffffffff 	.word	0xffffffff
    1a94:	7c010001 	.word	0x7c010001
    1a98:	000d0c0e 	.word	0x000d0c0e
    1a9c:	00000018 	.word	0x00000018
    1aa0:	00001a8c 	.word	0x00001a8c
    1aa4:	00000000 	.word	0x00000000
    1aa8:	00000048 	.word	0x00000048
    1aac:	8e100e44 	.word	0x8e100e44
    1ab0:	85028601 	.word	0x85028601
    1ab4:	00048403 	.word	0x00048403
    1ab8:	00000018 	.word	0x00000018
    1abc:	00001a8c 	.word	0x00001a8c
    1ac0:	00000000 	.word	0x00000000
    1ac4:	00000080 	.word	0x00000080
    1ac8:	8e100e44 	.word	0x8e100e44
    1acc:	85028601 	.word	0x85028601
    1ad0:	00048403 	.word	0x00048403
    1ad4:	0000000c 	.word	0x0000000c
    1ad8:	ffffffff 	.word	0xffffffff
    1adc:	7c010001 	.word	0x7c010001
    1ae0:	000d0c0e 	.word	0x000d0c0e
    1ae4:	00000014 	.word	0x00000014
    1ae8:	00001ad4 	.word	0x00001ad4
    1aec:	00000000 	.word	0x00000000
    1af0:	000000d0 	.word	0x000000d0
    1af4:	85080e48 	.word	0x85080e48
    1af8:	00028401 	.word	0x00028401
    1afc:	0000000c 	.word	0x0000000c
    1b00:	ffffffff 	.word	0xffffffff
    1b04:	7c010001 	.word	0x7c010001
    1b08:	000d0c0e 	.word	0x000d0c0e
    1b0c:	0000001c 	.word	0x0000001c
    1b10:	00001afc 	.word	0x00001afc
    1b14:	00000000 	.word	0x00000000
    1b18:	0000009c 	.word	0x0000009c
    1b1c:	88140e48 	.word	0x88140e48
    1b20:	86028701 	.word	0x86028701
    1b24:	84048503 	.word	0x84048503
    1b28:	00000005 	.word	0x00000005
    1b2c:	0000000c 	.word	0x0000000c
    1b30:	ffffffff 	.word	0xffffffff
    1b34:	7c010001 	.word	0x7c010001
    1b38:	000d0c0e 	.word	0x000d0c0e
    1b3c:	00000024 	.word	0x00000024
    1b40:	00001b2c 	.word	0x00001b2c
    1b44:	00000000 	.word	0x00000000
    1b48:	0000010c 	.word	0x0000010c
    1b4c:	8e240e44 	.word	0x8e240e44
    1b50:	8a028b01 	.word	0x8a028b01
    1b54:	88048903 	.word	0x88048903
    1b58:	86068705 	.word	0x86068705
    1b5c:	84088507 	.word	0x84088507
    1b60:	300e4c09 	.word	0x300e4c09

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4f495047 	svcmi	0x00495047
       4:	646f4d5f 	strbtvs	r4, [pc], #3423	; c <_Minimum_Stack_Size-0xf4>
       8:	754f5f65 	strbvc	r5, [pc, #-3941]	; fffff0ab <SCS_BASE+0x1fff10ab>
       c:	50505f74 	subspl	r5, r0, r4, ror pc
      10:	52524500 	subspl	r4, r2, #0	; 0x0
      14:	5300524f 	movwpl	r5, #591	; 0x24f
      18:	74726174 	ldrbtvc	r6, [r2], #-372
      1c:	656d6954 	strbvs	r6, [sp, #-2388]!
      20:	4d495400 	cfstrdmi	mvd5, [r9]
      24:	6572505f 	ldrbvs	r5, [r2, #-95]!
      28:	6c616373 	stclvs	3, cr6, [r1], #-460
      2c:	42007265 	andmi	r7, r0, #1342177286	; 0x50000006
      30:	00525253 	subseq	r5, r2, r3, asr r2
      34:	61656c43 	cmnvs	r5, r3, asr #24
      38:	66754272 	undefined
      3c:	32726566 	rsbscc	r6, r2, #427819008	; 0x19800000
      40:	54003635 	strpl	r3, [r0], #-1589
      44:	4f5f4d49 	svcmi	0x005f4d49
      48:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
      4c:	70795474 	rsbsvc	r5, r9, r4, ror r4
      50:	66654465 	strbtvs	r4, [r5], -r5, ror #8
      54:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      58:	6f4d5f4f 	svcvs	0x004d5f4f
      5c:	62006564 	andvs	r6, r0, #419430400	; 0x19000000
      60:	69766f4d 	ldmdbvs	r6!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
      64:	0031676e 	eorseq	r6, r1, lr, ror #14
      68:	766f4d62 	strbtvc	r4, [pc], -r2, ror #26
      6c:	32676e69 	rsbcc	r6, r7, #1680	; 0x690
      70:	4d495400 	cfstrdmi	mvd5, [r9]
      74:	50434f5f 	subpl	r4, r3, pc, asr pc
      78:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
      7c:	00797469 	rsbseq	r7, r9, r9, ror #8
      80:	766f4d62 	strbtvc	r4, [pc], -r2, ror #26
      84:	34676e69 	strbtcc	r6, [r7], #-3689
      88:	6f4d6200 	svcvs	0x004d6200
      8c:	676e6976 	undefined
      90:	50470035 	subpl	r0, r7, r5, lsr r0
      94:	505f4f49 	subspl	r4, pc, r9, asr #30
      98:	70006e69 	andvc	r6, r0, r9, ror #28
      9c:	6974736f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
      a0:	00316e6f 	eorseq	r6, r1, pc, ror #28
      a4:	64756162 	ldrbtvs	r6, [r5], #-354
      a8:	65746172 	ldrbvs	r6, [r4, #-370]!
      ac:	736f7000 	cmnvc	pc, #0	; 0x0
      b0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
      b4:	6f700033 	svcvs	0x00700033
      b8:	6f697473 	svcvs	0x00697473
      bc:	7000346e 	andvc	r3, r0, lr, ror #8
      c0:	6974736f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
      c4:	00356e6f 	eorseq	r6, r5, pc, ror #28
      c8:	74736f70 	ldrbtvc	r6, [r3], #-3952
      cc:	366e6f69 	strbtcc	r6, [lr], -r9, ror #30
      d0:	6e754600 	cdpvs	6, 7, cr4, cr5, cr0, {0}
      d4:	6f697463 	svcvs	0x00697463
      d8:	536c616e 	cmnpl	ip, #-2147483621	; 0x8000001b
      dc:	65746174 	ldrbvs	r6, [r4, #-372]!
      e0:	75614200 	strbvc	r4, [r1, #-512]!
      e4:	74617264 	strbtvc	r7, [r1], #-612
      e8:	58445f65 	stmdapl	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
      ec:	7245004c 	subvc	r0, r5, #76	; 0x4c
      f0:	53726f72 	cmnpl	r2, #456	; 0x1c8
      f4:	75746174 	ldrbvc	r6, [r4, #-372]!
      f8:	6f430073 	svcvs	0x00430073
      fc:	6f72746e 	svcvs	0x0072746e
     100:	746f4d6c 	strbtvc	r4, [pc], #3436	; 108 <_Minimum_Stack_Size+0x8>
     104:	6200726f 	andvs	r7, r0, #-268435450	; 0xf0000006
     108:	44647854 	strbtmi	r7, [r4], #-2132
     10c:	00617461 	rsbeq	r7, r1, r1, ror #8
     110:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     114:	6f575f54 	svcvs	0x00575f54
     118:	654c6472 	strbvs	r6, [ip, #-1138]
     11c:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     120:	4d495400 	cfstrdmi	mvd5, [r9]
     124:	7265505f 	rsbvc	r5, r5, #95	; 0x5f
     128:	00646f69 	rsbeq	r6, r4, r9, ror #30
     12c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     130:	74535f54 	ldrbvc	r5, [r3], #-3924
     134:	6942706f 	stmdbvs	r2, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
     138:	54007374 	strpl	r7, [r0], #-884
     13c:	4f5f4d49 	svcmi	0x005f4d49
     140:	6c644943 	stclvs	9, cr4, [r4], #-268
     144:	61745365 	cmnvs	r4, r5, ror #6
     148:	43006574 	movwmi	r6, #1396	; 0x574
     14c:	5f315243 	svcpl	0x00315243
     150:	006c6156 	rsbeq	r6, ip, r6, asr r1
     154:	756f6853 	strbvc	r6, [pc, #-2131]!	; fffff909 <SCS_BASE+0x1fff1909>
     158:	7265646c 	rsbvc	r6, r5, #1811939328	; 0x6c000000
     15c:	6c6c6f52 	stclvs	15, cr6, [ip], #-328
     160:	47003473 	smlsdxmi	r0, r3, r4, r3
     164:	5f4f4950 	svcpl	0x004f4950
     168:	65657053 	strbvs	r7, [r5, #-83]!
     16c:	4d325f64 	ldcmi	15, cr5, [r2, #-400]!
     170:	47007a48 	strmi	r7, [r0, -r8, asr #20]
     174:	00525054 	subseq	r5, r2, r4, asr r0
     178:	50706267 	rsbspl	r6, r0, r7, ror #4
     17c:	656b6361 	strbvs	r6, [fp, #-865]!
     180:	74614474 	strbtvc	r4, [r1], #-1140
     184:	66754261 	ldrbtvs	r4, [r5], -r1, ror #4
     188:	00726566 	rsbseq	r6, r2, r6, ror #10
     18c:	5f4d4954 	svcpl	0x004d4954
     190:	736c7550 	cmnvc	ip, #335544320	; 0x14000000
     194:	53550065 	cmppl	r5, #101	; 0x65
     198:	5f545241 	svcpl	0x00545241
     19c:	64756142 	ldrbtvs	r6, [r5], #-322
     1a0:	65746152 	ldrbvs	r6, [r4, #-338]!
     1a4:	4d495400 	cfstrdmi	mvd5, [r9]
     1a8:	6f6c435f 	svcvs	0x006c435f
     1ac:	69446b63 	stmdbvs	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
     1b0:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     1b4:	54006e6f 	strpl	r6, [r0], #-3695
     1b8:	4f5f4d49 	svcmi	0x005f4d49
     1bc:	75707475 	ldrbvc	r7, [r0, #-1141]!
     1c0:	61745374 	cmnvs	r4, r4, ror r3
     1c4:	42006574 	andmi	r6, r0, #486539264	; 0x1d000000
     1c8:	00525444 	subseq	r5, r2, r4, asr #8
     1cc:	69736f70 	ldmdbvs	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     1d0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1d4:	776f6c5f 	undefined
     1d8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     1dc:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     1e0:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     1e4:	65446570 	strbvs	r6, [r4, #-1392]
     1e8:	43430066 	movtmi	r0, #12390	; 0x3066
     1ec:	43003152 	movwmi	r3, #338	; 0x152
     1f0:	00325243 	eorseq	r5, r2, r3, asr #4
     1f4:	33524343 	cmpcc	r2, #201326593	; 0xc000001
     1f8:	52434300 	subpl	r4, r3, #0	; 0x0
     1fc:	43430034 	movtmi	r0, #12340	; 0x3034
     200:	0031524d 	eorseq	r5, r1, sp, asr #4
     204:	524d4343 	subpl	r4, sp, #201326593	; 0xc000001
     208:	50470032 	subpl	r0, r7, r2, lsr r0
     20c:	535f4f49 	cmppl	pc, #292	; 0x124
     210:	64656570 	strbtvs	r6, [r5], #-1392
     214:	4d30315f 	ldfmis	f3, [r0, #-380]!
     218:	54007a48 	strpl	r7, [r0], #-2632
     21c:	79424478 	stmdbvc	r2, {r3, r4, r5, r6, sl, lr}^
     220:	505f6574 	subspl	r6, pc, r4, ror r5
     224:	61630043 	cmnvs	r3, r3, asr #32
     228:	72757470 	rsbsvc	r7, r5, #1879048192	; 0x70000000
     22c:	50410065 	subpl	r0, r1, r5, rrx
     230:	72732f50 	rsbsvc	r2, r3, #320	; 0x140
     234:	616d2f63 	cmnvs	sp, r3, ror #30
     238:	632e6e69 	teqvs	lr, #1680	; 0x690
     23c:	44785200 	ldrbtmi	r5, [r8], #-512
     240:	746e4930 	strbtvc	r4, [lr], #-2352
     244:	75727265 	ldrbvc	r7, [r2, #-613]!
     248:	47007470 	smlsdxmi	r0, r0, r4, r7
     24c:	5f4f4950 	svcpl	0x004f4950
     250:	65646f4d 	strbvs	r6, [r4, #-3917]!
     254:	4450495f 	ldrbmi	r4, [r0], #-2399
     258:	44785200 	ldrbtmi	r5, [r8], #-512
     25c:	65747942 	ldrbvs	r7, [r4, #-2370]!
     260:	4c58445f 	cfldrdmi	mvd4, [r8], {95}
     264:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     268:	6f4d5f4f 	svcvs	0x004d5f4f
     26c:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^
     270:	54005550 	strpl	r5, [r0], #-1360
     274:	79424478 	stmdbvc	r2, {r3, r4, r5, r6, sl, lr}^
     278:	445f6574 	ldrbmi	r6, [pc], #1396	; 280 <_Minimum_Stack_Size+0x180>
     27c:	47004c58 	smlsdmi	r0, r8, ip, r4
     280:	5f4f4950 	svcpl	0x004f4950
     284:	65646f4d 	strbvs	r6, [r4, #-3917]!
     288:	74754f5f 	ldrbtvc	r4, [r5], #-3935
     28c:	00444f5f 	subeq	r4, r4, pc, asr pc
     290:	6d317767 	ldcvs	7, cr7, [r1, #-412]!
     294:	756f4373 	strbvc	r4, [pc, #-883]!	; ffffff29 <SCS_BASE+0x1fff1f29>
     298:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     29c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     2a0:	52495f43 	subpl	r5, r9, #268	; 0x10c
     2a4:	61684351 	cmnvs	r8, r1, asr r3
     2a8:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     2ac:	00646d43 	rsbeq	r6, r4, r3, asr #26
     2b0:	52454944 	subpl	r4, r5, #1114112	; 0x110000
     2b4:	6f4d6200 	svcvs	0x004d6200
     2b8:	676e6976 	undefined
     2bc:	77670033 	undefined
     2c0:	696d6954 	stmdbvs	sp!, {r2, r4, r6, r8, fp, sp, lr}^
     2c4:	6544676e 	strbvs	r6, [r4, #-1902]
     2c8:	0079616c 	rsbseq	r6, r9, ip, ror #2
     2cc:	766f4d62 	strbtvc	r4, [pc], -r2, ror #26
     2d0:	36676e69 	strbtcc	r6, [r7], -r9, ror #28
     2d4:	4d495400 	cfstrdmi	mvd5, [r9]
     2d8:	49434f5f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     2dc:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     2e0:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
     2e4:	65727574 	ldrbvs	r7, [r2, #-1396]!
     2e8:	75727000 	ldrbvc	r7, [r2]!
     2ec:	416e6566 	cmnmi	lr, r6, ror #10
     2f0:	6e61666e 	cdpvs	6, 6, cr6, cr1, cr14, {3}
     2f4:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
     2f8:	65525f4d 	ldrbvs	r5, [r2, #-3917]
     2fc:	69746570 	ldmdbvs	r4!, {r4, r5, r6, r8, sl, sp, lr}^
     300:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     304:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     308:	00726574 	rsbseq	r6, r2, r4, ror r5
     30c:	5f4d4954 	svcpl	0x004d4954
     310:	504e434f 	subpl	r4, lr, pc, asr #6
     314:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
     318:	00797469 	rsbseq	r7, r9, r9, ror #8
     31c:	6c65446d 	cfstrdvs	mvd4, [r5], #-436
     320:	55007961 	strpl	r7, [r0, #-2401]
     324:	54524153 	ldrbpl	r4, [r2], #-339
     328:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     32c:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
     330:	75746375 	ldrbvc	r6, [r4, #-885]!
     334:	43006572 	movwmi	r6, #1394	; 0x572
     338:	00524543 	subseq	r4, r2, r3, asr #10
     33c:	64756142 	ldrbtvs	r6, [r5], #-322
     340:	65746172 	ldrbvs	r6, [r4, #-370]!
     344:	0043505f 	subeq	r5, r3, pc, asr r0
     348:	43435553 	movtmi	r5, #13651	; 0x3553
     34c:	00535345 	subseq	r5, r3, r5, asr #6
     350:	4349564e 	movtmi	r5, #38478	; 0x964e
     354:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     358:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
     35c:	75746375 	ldrbvc	r6, [r4, #-885]!
     360:	44006572 	strmi	r6, [r0], #-1394
     364:	42415349 	submi	r5, r1, #603979777	; 0x24000001
     368:	7700454c 	strvc	r4, [r0, -ip, asr #10]
     36c:	31747265 	cmncc	r4, r5, ror #4
     370:	65770035 	ldrbvs	r0, [r7, #-53]!
     374:	36317472 	undefined
     378:	65684300 	strbvs	r4, [r8, #-768]!
     37c:	654e6b63 	strbvs	r6, [lr, #-2915]
     380:	72724177 	rsbsvc	r4, r2, #-1073741795	; 0xc000001d
     384:	00657669 	rsbeq	r7, r5, r9, ror #12
     388:	5f4d4954 	svcpl	0x004d4954
     38c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     390:	4d726574 	cfldr64mi	mvdx6, [r2, #-464]!
     394:	0065646f 	rsbeq	r6, r5, pc, ror #8
     398:	61506267 	cmpvs	r0, r7, ror #4
     39c:	74656b63 	strbtvc	r6, [r5], #-2915
     3a0:	64616552 	strbtvs	r6, [r1], #-1362
     3a4:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
     3a8:	00726574 	rsbseq	r6, r2, r4, ror r5
     3ac:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     3b0:	6f4d5f54 	svcvs	0x004d5f54
     3b4:	55006564 	strpl	r6, [r0, #-1380]
     3b8:	54524153 	ldrbpl	r4, [r2], #-339
     3bc:	6f435f31 	svcvs	0x00435f31
     3c0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     3c4:	74617275 	strbtvc	r7, [r1], #-629
     3c8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     3cc:	6f746f4d 	svcvs	0x00746f4d
     3d0:	426e6572 	rsbmi	r6, lr, #478150656	; 0x1c800000
     3d4:	67657765 	strbvs	r7, [r5, -r5, ror #14]!
     3d8:	53006e65 	movwpl	r6, #3685	; 0xe65
     3dc:	0052434d 	subseq	r4, r2, sp, asr #6
     3e0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     3e4:	61485f54 	cmpvs	r8, r4, asr pc
     3e8:	61776472 	cmnvs	r7, r2, ror r4
     3ec:	6c466572 	cfstr64vs	mvdx6, [r6], {114}
     3f0:	6f43776f 	svcvs	0x0043776f
     3f4:	6f72746e 	svcvs	0x0072746e
     3f8:	7852006c 	ldmdavc	r2, {r2, r3, r5, r6}^
     3fc:	6e493144 	dvfvsem	f3, f1, f4
     400:	72726574 	rsbsvc	r6, r2, #486539264	; 0x1d000000
     404:	00747075 	rsbseq	r7, r4, r5, ror r0
     408:	656d6954 	strbvs	r6, [sp, #-2388]!
     40c:	746e4972 	strbtvc	r4, [lr], #-2418
     410:	75727265 	ldrbvc	r7, [r2, #-613]!
     414:	315f7470 	cmpcc	pc, r0, ror r4
     418:	5300736d 	movwpl	r7, #877	; 0x36d
     41c:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     420:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
     424:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     428:	61727567 	cmnvs	r2, r7, ror #10
     42c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     430:	5c3a4300 	ldcpl	3, cr4, [sl]
     434:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     438:	736f5c73 	cmnvc	pc, #29440	; 0x7300
     43c:	5c616d61 	stclpl	13, cr6, [r1], #-388
     440:	6b736544 	blvs	1cd9958 <__Stack_Size+0x1cd9558>
     444:	5c706f74 	ldclpl	15, cr6, [r0], #-464
     448:	5f6a6148 	svcpl	0x006a6148
     44c:	646d6148 	strbtvs	r6, [sp], #-328
     450:	734f5f69 	movtvc	r5, #65385	; 0xff69
     454:	5f616d61 	svcpl	0x00616d61
     458:	68636142 	stmdavs	r3!, {r1, r6, r8, sp, lr}^
     45c:	726f6c65 	rsbvc	r6, pc, #25856	; 0x6500
     460:	65627261 	strbvs	r7, [r2, #-609]!
     464:	325f7469 	subscc	r7, pc, #1761607680	; 0x69000000
     468:	5f343230 	svcpl	0x00343230
     46c:	65746144 	ldrbvs	r6, [r4, #-324]!
     470:	625c6e69 	subsvs	r6, ip, #1680	; 0x690
     474:	6f6c6f69 	svcvs	0x006c6f69
     478:	69466469 	stmdbvs	r6, {r0, r3, r5, r6, sl, sp, lr}^
     47c:	61776d72 	cmnvs	r7, r2, ror sp
     480:	77006572 	smlsdxvc	r0, r2, r5, r6
     484:	31747265 	cmncc	r4, r5, ror #4
     488:	72657700 	rsbvc	r7, r5, #0	; 0x0
     48c:	50003274 	andpl	r3, r0, r4, ror r2
     490:	0054524f 	subseq	r5, r4, pc, asr #4
     494:	52706267 	rsbspl	r6, r0, #1879048198	; 0x70000006
     498:	746e4978 	strbtvc	r4, [lr], #-2424
     49c:	75727265 	ldrbvc	r7, [r2, #-613]!
     4a0:	75427470 	strbvc	r7, [r2, #-1136]
     4a4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     4a8:	43435200 	movtmi	r5, #12800	; 0x3200
     4ac:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     4b0:	75676966 	strbvc	r6, [r7, #-2406]!
     4b4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     4b8:	52006e6f 	andpl	r6, r0, #1776	; 0x6f0
     4bc:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     4c0:	44646576 	strbtmi	r6, [r4], #-1398
     4c4:	00617461 	rsbeq	r7, r1, r1, ror #8
     4c8:	5f4d4954 	svcpl	0x004d4954
     4cc:	494e434f 	stmdbmi	lr, {r0, r1, r2, r3, r6, r8, r9, lr}^
     4d0:	53656c64 	cmnpl	r5, #25600	; 0x6400
     4d4:	65746174 	ldrbvs	r6, [r4, #-372]!
     4d8:	736f7000 	cmnvc	pc, #0	; 0x0
     4dc:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     4e0:	50470032 	subpl	r0, r7, r2, lsr r0
     4e4:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^
     4e8:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     4ec:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
     4f0:	65727574 	ldrbvs	r7, [r2, #-1396]!
     4f4:	65546200 	ldrbvs	r6, [r4, #-512]
     4f8:	4e00706d 	cdpmi	0, 0, cr7, cr0, cr13, {3}
     4fc:	5f434956 	svcpl	0x00434956
     500:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
     504:	6e6e6168 	powvsez	f6, f6, #0.0
     508:	47006c65 	strmi	r6, [r0, -r5, ror #24]
     50c:	5f4f4950 	svcpl	0x004f4950
     510:	65646f4d 	strbvs	r6, [r4, #-3917]!
     514:	5f46415f 	svcpl	0x0046415f
     518:	5400444f 	strpl	r4, [r0], #-1103
     51c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     520:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     524:	75676966 	strbvc	r6, [r7, #-2406]!
     528:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     52c:	4d006e6f 	stcmi	14, cr6, [r0, #-444]
     530:	726f746f 	rsbvc	r7, pc, #1862270976	; 0x6f000000
     534:	696d694c 	stmdbvs	sp!, {r2, r3, r6, r8, fp, sp, lr}^
     538:	47007374 	smlsdxmi	r0, r4, r3, r7
     53c:	4320554e 	teqmi	r0, #327155712	; 0x13800000
     540:	332e3420 	teqcc	lr, #536870912	; 0x20000000
     544:	4700302e 	strmi	r3, [r0, -lr, lsr #32]
     548:	534f4950 	movtpl	r4, #63824	; 0xf950
     54c:	64656570 	strbtvs	r6, [r5], #-1392
     550:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     554:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     558:	4d495400 	cfstrdmi	mvd5, [r9]
     55c:	4d434f5f 	stclmi	15, cr4, [r3, #-380]
     560:	0065646f 	rsbeq	r6, r5, pc, ror #8
     564:	4f495047 	svcmi	0x00495047
     568:	646f4d5f 	strbtvs	r4, [pc], #3423	; 570 <__Stack_Size+0x170>
     56c:	49415f65 	stmdbmi	r1, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     570:	4552004e 	ldrbmi	r0, [r2, #-78]
     574:	56524553 	undefined
     578:	00304445 	eorseq	r4, r0, r5, asr #8
     57c:	45534552 	ldrbmi	r4, [r3, #-1362]
     580:	44455652 	strbmi	r5, [r5], #-1618
     584:	45520031 	ldrbmi	r0, [r2, #-49]
     588:	56524553 	undefined
     58c:	00324445 	eorseq	r4, r2, r5, asr #8
     590:	45534552 	ldrbmi	r4, [r3, #-1362]
     594:	44455652 	strbmi	r5, [r5], #-1618
     598:	45520033 	ldrbmi	r0, [r2, #-51]
     59c:	56524553 	undefined
     5a0:	00344445 	eorseq	r4, r4, r5, asr #8
     5a4:	45534552 	ldrbmi	r4, [r3, #-1362]
     5a8:	44455652 	strbmi	r5, [r5], #-1618
     5ac:	45520035 	ldrbmi	r0, [r2, #-53]
     5b0:	56524553 	undefined
     5b4:	00364445 	eorseq	r4, r6, r5, asr #8
     5b8:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     5bc:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
     5c0:	45520074 	ldrbmi	r0, [r2, #-116]
     5c4:	56524553 	undefined
     5c8:	00384445 	eorseq	r4, r8, r5, asr #8
     5cc:	45534552 	ldrbmi	r4, [r3, #-1362]
     5d0:	44455652 	strbmi	r5, [r5], #-1618
     5d4:	68530039 	ldmdavs	r3, {r0, r3, r4, r5}^
     5d8:	646c756f 	strbtvs	r7, [ip], #-1391
     5dc:	69507265 	ldmdbvs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}^
     5e0:	65686374 	strbvs	r6, [r8, #-884]!
     5e4:	53003173 	movwpl	r3, #371	; 0x173
     5e8:	6c756f68 	ldclvs	15, cr6, [r5], #-416
     5ec:	50726564 	rsbspl	r6, r2, r4, ror #10
     5f0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     5f4:	00327365 	eorseq	r7, r2, r5, ror #6
     5f8:	4f495047 	svcmi	0x00495047
     5fc:	646f4d5f 	strbtvs	r4, [pc], #3423	; 604 <__Stack_Size+0x204>
     600:	46415f65 	strbmi	r5, [r1], -r5, ror #30
     604:	0050505f 	subseq	r5, r0, pc, asr r0
     608:	52414d44 	subpl	r4, r1, #4352	; 0x1100
     60c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     610:	70535f4f 	subsvc	r5, r3, pc, asr #30
     614:	00646565 	rsbeq	r6, r4, r5, ror #10
     618:	63656843 	cmnvs	r5, #4390912	; 0x430000
     61c:	6d69546b 	cfstrdvs	mvd5, [r9, #-428]!
     620:	74754f65 	ldrbtvc	r4, [r5], #-3941
     624:	6d657400 	cfstrdvs	mvd7, [r5]
     628:	69440070 	stmdbvs	r4, {r4, r5, r6}^
     62c:	6c626173 	stfvse	f6, [r2], #-460
     630:	41535565 	cmpmi	r3, r5, ror #10
     634:	00315452 	eorseq	r5, r1, r2, asr r4
     638:	66757270 	undefined
     63c:	6e456e65 	cdpvs	14, 4, cr6, cr5, cr5, {3}
     640:	45006564 	strmi	r6, [r0, #-1380]
     644:	6f626c6c 	svcvs	0x00626c6c
     648:	6c6f5277 	sfmvs	f5, 2, [pc], #-476
     64c:	0035736c 	eorseq	r7, r5, ip, ror #6
     650:	626c6c45 	rsbvs	r6, ip, #17664	; 0x4500
     654:	6f52776f 	svcvs	0x0052776f
     658:	36736c6c 	ldrbtcc	r6, [r3], -ip, ror #24
     65c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     660:	646f4d4f 	strbtvs	r4, [pc], #3407	; 668 <__Stack_Size+0x268>
     664:	79545f65 	ldmdbvc	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     668:	65446570 	strbvs	r6, [r4, #-1392]
     66c:	74530066 	ldrbvc	r0, [r3], #-102
     670:	44747261 	ldrbtmi	r7, [r4], #-609
     674:	6f637369 	svcvs	0x00637369
     678:	00746e75 	rsbseq	r6, r4, r5, ror lr
     67c:	5f4d4954 	svcpl	0x004d4954
     680:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     684:	534e7475 	movtpl	r7, #58485	; 0xe475
     688:	65746174 	ldrbvs	r6, [r4, #-372]!
     68c:	414e4500 	cmpmi	lr, r0, lsl #10
     690:	00454c42 	subeq	r4, r5, r2, asr #24
     694:	5f4d4954 	svcpl	0x004d4954
     698:	656d6954 	strbvs	r6, [sp, #-2388]!
     69c:	65736142 	ldrbvs	r6, [r3, #-322]!
     6a0:	75727453 	ldrbvc	r7, [r2, #-1107]!
     6a4:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
     6a8:	68530065 	ldmdavs	r3, {r0, r2, r5, r6}^
     6ac:	646c756f 	strbtvs	r7, [ip], #-1391
     6b0:	6f527265 	svcvs	0x00527265
     6b4:	33736c6c 	cmncc	r3, #27648	; 0x6c00
     6b8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     6bc:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     6c0:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     6c4:	65446570 	strbvs	r6, [r4, #-1392]
     6c8:	6e750066 	cdpvs	0, 7, cr0, cr5, cr6, {3}
     6cc:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     6d0:	63206465 	teqvs	r0, #1694498816	; 0x65000000
     6d4:	00726168 	rsbseq	r6, r2, r8, ror #2
     6d8:	4f495047 	svcmi	0x00495047
     6dc:	6570535f 	ldrbvs	r5, [r0, #-863]!
     6e0:	355f6465 	ldrbcc	r6, [pc, #-1125]	; 283 <_Minimum_Stack_Size+0x183>
     6e4:	7a484d30 	bvc	1213bac <__Stack_Size+0x12137ac>
     6e8:	41535500 	cmpmi	r3, r0, lsl #10
     6ec:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
     6f0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     6f4:	61727567 	cmnvs	r2, r7, ror #10
     6f8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     6fc:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     700:	6f435f43 	svcvs	0x00435f43
     704:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     708:	74617275 	strbtvc	r7, [r1], #-629
     70c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     710:	45534552 	ldrbmi	r4, [r3, #-1362]
     714:	44455652 	strbmi	r5, [r5], #-1618
     718:	52003031 	andpl	r3, r0, #49	; 0x31
     71c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     720:	31444556 	cmpcc	r4, r6, asr r5
     724:	45520031 	ldrbmi	r0, [r2, #-49]
     728:	56524553 	undefined
     72c:	32314445 	eorscc	r4, r1, #1157627904	; 0x45000000
     730:	53455200 	movtpl	r5, #20992	; 0x5200
     734:	45565245 	ldrbmi	r5, [r6, #-581]
     738:	00333144 	eorseq	r3, r3, r4, asr #2
     73c:	45534552 	ldrbmi	r4, [r3, #-1362]
     740:	44455652 	strbmi	r5, [r5], #-1618
     744:	52003431 	andpl	r3, r0, #822083584	; 0x31000000
     748:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     74c:	31444556 	cmpcc	r4, r6, asr r5
     750:	45520035 	ldrbmi	r0, [r2, #-53]
     754:	56524553 	undefined
     758:	36314445 	ldrtcc	r4, [r1], -r5, asr #8
     75c:	53455200 	movtpl	r5, #20992	; 0x5200
     760:	45565245 	ldrbmi	r5, [r6, #-581]
     764:	00373144 	eorseq	r3, r7, r4, asr #2
     768:	45534552 	ldrbmi	r4, [r3, #-1362]
     76c:	44455652 	strbmi	r5, [r5], #-1618
     770:	52003831 	andpl	r3, r0, #3211264	; 0x310000
     774:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     778:	31444556 	cmpcc	r4, r6, asr r5
     77c:	50470039 	subpl	r0, r7, r9, lsr r0
     780:	435f4f49 	cmpmi	pc, #292	; 0x124
     784:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     788:	61727567 	cmnvs	r2, r7, ror #10
     78c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     790:	41535500 	cmpmi	r3, r0, lsl #10
     794:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^
     798:	5474696e 	ldrbtpl	r6, [r4], #-2414
     79c:	44657079 	strbtmi	r7, [r5], #-121
     7a0:	52006665 	andpl	r6, r0, #105906176	; 0x6500000
     7a4:	79424478 	stmdbvc	r2, {r3, r4, r5, r6, sl, lr}^
     7a8:	505f6574 	subspl	r6, pc, r4, ror r5
     7ac:	564e0043 	strbpl	r0, [lr], -r3, asr #32
     7b0:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^
     7b4:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     7b8:	656e6e61 	strbvs	r6, [lr, #-3681]!
     7bc:	6275536c 	rsbsvs	r5, r5, #-1342177279	; 0xb0000001
     7c0:	6f697250 	svcvs	0x00697250
     7c4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     7c8:	736f7000 	cmnvc	pc, #0	; 0x0
     7cc:	6f697469 	svcvs	0x00697469
     7d0:	69685f6e 	stmdbvs	r8!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     7d4:	55006867 	strpl	r6, [r0, #-2151]
     7d8:	54524153 	ldrbpl	r4, [r2], #-339
     7dc:	7261505f 	rsbvc	r5, r1, #95	; 0x5f
     7e0:	00797469 	rsbseq	r7, r9, r9, ror #8
     7e4:	53495f5f 	movtpl	r5, #40799	; 0x9f5f
     7e8:	45445f52 	strbmi	r5, [r4, #-3922]
     7ec:	0059414c 	subseq	r4, r9, ip, asr #2
     7f0:	5f4d4954 	svcpl	0x004d4954
     7f4:	656d6954 	strbvs	r6, [sp, #-2388]!
     7f8:	65736142 	ldrbvs	r6, [r3, #-322]!
     7fc:	74696e49 	strbtvc	r6, [r9], #-3657
     800:	65707954 	ldrbvs	r7, [r0, #-2388]!
     804:	00666544 	rsbeq	r6, r6, r4, asr #10
     808:	78526267 	ldmdavc	r2, {r0, r1, r2, r5, r6, r9, sp, lr}^
     80c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     810:	65527265 	ldrbvs	r7, [r2, #-613]
     814:	6f506461 	svcvs	0x00506461
     818:	65746e69 	ldrbvs	r6, [r4, #-3689]!
     81c:	68730072 	ldmdavs	r3!, {r1, r4, r5, r6}^
     820:	2074726f 	rsbscs	r7, r4, pc, ror #4
     824:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     828:	64656e67 	strbtvs	r6, [r5], #-3687
     82c:	746e6920 	strbtvc	r6, [lr], #-2336
     830:	50626700 	rsbpl	r6, r2, r0, lsl #14
     834:	656b6361 	strbvs	r6, [fp, #-865]!
     838:	69725774 	ldmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, ip, lr}^
     83c:	6f506574 	svcvs	0x00506574
     840:	65746e69 	ldrbvs	r6, [r4, #-3689]!
     844:	616d0072 	smcvs	53250
     848:	4e006e69 	cdpmi	14, 0, cr6, cr0, cr9, {3}
     84c:	5f434956 	svcpl	0x00434956
     850:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
     854:	6e6e6168 	powvsez	f6, f6, #0.0
     858:	72506c65 	subsvc	r6, r0, #25856	; 0x6500
     85c:	706d6565 	rsbvc	r6, sp, r5, ror #10
     860:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     864:	6f697250 	svcvs	0x00697250
     868:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     86c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     870:	6f4d5f4f 	svcvs	0x004d5f4f
     874:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^
     878:	4c465f4e 	mcrrmi	15, 4, r5, r6, cr14
     87c:	4954414f 	ldmdbmi	r4, {r0, r1, r2, r3, r6, r8, lr}^
     880:	5200474e 	andpl	r4, r0, #20447232	; 0x1380000
     884:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     888:	37444556 	smlsldcc	r4, r4, r6, r5
     88c:	746f6d00 	strbtvc	r6, [pc], #3328	; 894 <__Stack_Size+0x494>
     890:	695f726f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
     894:	6e007364 	cdpvs	3, 0, cr7, cr0, cr4, {3}
     898:	656d6954 	strbvs	r6, [sp, #-2388]!
     89c:	52626700 	rsbpl	r6, r2, #0	; 0x0
     8a0:	66754278 	undefined
     8a4:	57726566 	ldrbpl	r6, [r2, -r6, ror #10]!
     8a8:	65746972 	ldrbvs	r6, [r4, #-2418]!
     8ac:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
     8b0:	00726574 	rsbseq	r6, r2, r4, ror r5
     8b4:	53455348 	movtpl	r5, #21320	; 0x5348
     8b8:	74726174 	ldrbtvc	r6, [r2], #-372
     8bc:	74537055 	ldrbvc	r7, [r3], #-85
     8c0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     8c4:	4b434c00 	blmi	10d38cc <__Stack_Size+0x10d34cc>
     8c8:	75420052 	strbvc	r0, [r2, #-82]
     8cc:	75614673 	strbvc	r4, [r1, #-1651]!
     8d0:	7845746c 	stmdavc	r5, {r2, r3, r5, r6, sl, ip, sp, lr}^
     8d4:	74706563 	ldrbtvc	r6, [r0], #-1379
     8d8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     8dc:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     8e0:	52495f32 	subpl	r5, r9, #200	; 0xc8
     8e4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     8e8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     8ec:	414d4400 	cmpmi	sp, r0, lsl #8
     8f0:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     8f4:	656e6e61 	strbvs	r6, [lr, #-3681]!
     8f8:	495f326c 	ldmdbmi	pc, {r2, r3, r5, r6, r9, ip, sp}^
     8fc:	61485152 	cmpvs	r8, r2, asr r1
     900:	656c646e 	strbvs	r6, [ip, #-1134]!
     904:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     908:	425f314d 	subsmi	r3, pc, #1073741843	; 0x40000013
     90c:	495f4b52 	ldmdbmi	pc, {r1, r4, r6, r8, r9, fp, lr}^
     910:	61485152 	cmpvs	r8, r2, asr r1
     914:	656c646e 	strbvs	r6, [ip, #-1134]!
     918:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     91c:	5f304954 	svcpl	0x00304954
     920:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     924:	6c646e61 	stclvs	14, cr6, [r4], #-388
     928:	50007265 	andpl	r7, r0, r5, ror #4
     92c:	495f4456 	ldmdbmi	pc, {r1, r2, r4, r6, sl, lr}^
     930:	61485152 	cmpvs	r8, r2, asr r1
     934:	656c646e 	strbvs	r6, [ip, #-1134]!
     938:	61480072 	cmpvs	r8, r2, ror r0
     93c:	61466472 	cmpvs	r6, r2, ror r4
     940:	45746c75 	ldrbmi	r6, [r4, #-3189]!
     944:	70656378 	rsbvc	r6, r5, r8, ror r3
     948:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     94c:	43444100 	movtmi	r4, #16640	; 0x4100
     950:	5f325f31 	svcpl	0x00325f31
     954:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     958:	6c646e61 	stclvs	14, cr6, [r4], #-388
     95c:	54007265 	strpl	r7, [r0], #-613
     960:	45504d41 	ldrbmi	r4, [r0, #-3393]
     964:	52495f52 	subpl	r5, r9, #328	; 0x148
     968:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     96c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     970:	4d495400 	cfstrdmi	mvd5, [r9]
     974:	52545f38 	subspl	r5, r4, #224	; 0xe0
     978:	4f435f47 	svcmi	0x00435f47
     97c:	52495f4d 	subpl	r5, r9, #308	; 0x134
     980:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     984:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     988:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     98c:	3158525f 	cmpcc	r8, pc, asr r2
     990:	5152495f 	cmppl	r2, pc, asr r9
     994:	646e6148 	strbtvs	r6, [lr], #-328
     998:	0072656c 	rsbseq	r6, r2, ip, ror #10
     99c:	54737953 	ldrbtpl	r7, [r3], #-2387
     9a0:	486b6369 	stmdami	fp!, {r0, r3, r5, r6, r8, r9, sp, lr}^
     9a4:	6c646e61 	stclvs	14, cr6, [r4], #-388
     9a8:	44007265 	strmi	r7, [r0], #-613
     9ac:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
     9b0:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
     9b4:	00726f74 	rsbseq	r6, r2, r4, ror pc
     9b8:	31414d44 	cmpcc	r1, r4, asr #26
     9bc:	6168435f 	cmnvs	r8, pc, asr r3
     9c0:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     9c4:	52495f33 	subpl	r5, r9, #204	; 0xcc
     9c8:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     9cc:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     9d0:	4d495400 	cfstrdmi	mvd5, [r9]
     9d4:	50555f31 	subspl	r5, r5, r1, lsr pc
     9d8:	5152495f 	cmppl	r2, pc, asr r9
     9dc:	646e6148 	strbtvs	r6, [lr], #-328
     9e0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     9e4:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     9e8:	5f50555f 	svcpl	0x0050555f
     9ec:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     9f0:	6c646e61 	stclvs	14, cr6, [r4], #-388
     9f4:	54007265 	strpl	r7, [r0], #-613
     9f8:	5f314d49 	svcpl	0x00314d49
     9fc:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^
     a00:	61485152 	cmpvs	r8, r2, asr r1
     a04:	656c646e 	strbvs	r6, [ip, #-1134]!
     a08:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     a0c:	435f384d 	cmpmi	pc, #5046272	; 0x4d0000
     a10:	52495f43 	subpl	r5, r9, #268	; 0x10c
     a14:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     a18:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     a1c:	414d4400 	cmpmi	sp, r0, lsl #8
     a20:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     a24:	656e6e61 	strbvs	r6, [lr, #-3681]!
     a28:	495f346c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp}^
     a2c:	61485152 	cmpvs	r8, r2, asr r1
     a30:	656c646e 	strbvs	r6, [ip, #-1134]!
     a34:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     a38:	35314954 	ldrcc	r4, [r1, #-2388]!
     a3c:	5f30315f 	svcpl	0x0030315f
     a40:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     a44:	6c646e61 	stclvs	14, cr6, [r4], #-388
     a48:	55007265 	strpl	r7, [r0, #-613]
     a4c:	54524153 	ldrbpl	r4, [r2], #-339
     a50:	52495f33 	subpl	r5, r9, #204	; 0xcc
     a54:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     a58:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     a5c:	414d4400 	cmpmi	sp, r0, lsl #8
     a60:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     a64:	656e6e61 	strbvs	r6, [lr, #-3681]!
     a68:	495f316c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, ip, sp}^
     a6c:	61485152 	cmpvs	r8, r2, asr r1
     a70:	656c646e 	strbvs	r6, [ip, #-1134]!
     a74:	56530072 	undefined
     a78:	6e614843 	cdpvs	8, 6, cr4, cr1, cr3, {2}
     a7c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     a80:	43444100 	movtmi	r4, #16640	; 0x4100
     a84:	52495f33 	subpl	r5, r9, #204	; 0xcc
     a88:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     a8c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     a90:	43545200 	cmpmi	r4, #0	; 0x0
     a94:	5152495f 	cmppl	r2, pc, asr r9
     a98:	646e6148 	strbtvs	r6, [lr], #-328
     a9c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     aa0:	354d4954 	strbcc	r4, [sp, #-2388]
     aa4:	5152495f 	cmppl	r2, pc, asr r9
     aa8:	646e6148 	strbtvs	r6, [lr], #-328
     aac:	0072656c 	rsbseq	r6, r2, ip, ror #10
     ab0:	32414d44 	subcc	r4, r1, #4352	; 0x1100
     ab4:	6168435f 	cmnvs	r8, pc, asr r3
     ab8:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     abc:	5f355f34 	svcpl	0x00355f34
     ac0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     ac4:	6c646e61 	stclvs	14, cr6, [r4], #-388
     ac8:	54007265 	strpl	r7, [r0], #-613
     acc:	5f324d49 	svcpl	0x00324d49
     ad0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     ad4:	6c646e61 	stclvs	14, cr6, [r4], #-388
     ad8:	4d007265 	sfmmi	f7, 4, [r0, #-404]
     adc:	614d6d65 	cmpvs	sp, r5, ror #26
     ae0:	6567616e 	strbvs	r6, [r7, #-366]!
     ae4:	65637845 	strbvs	r7, [r3, #-2117]!
     ae8:	6f697470 	svcvs	0x00697470
     aec:	4d4e006e 	stclmi	0, cr0, [lr, #-440]
     af0:	63784549 	cmnvs	r8, #306184192	; 0x12400000
     af4:	69747065 	ldmdbvs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
     af8:	45006e6f 	strmi	r6, [r0, #-3695]
     afc:	33495458 	movtcc	r5, #37976	; 0x9458
     b00:	5152495f 	cmppl	r2, pc, asr r9
     b04:	646e6148 	strbtvs	r6, [lr], #-328
     b08:	0072656c 	rsbseq	r6, r2, ip, ror #10
     b0c:	32414d44 	subcc	r4, r1, #4352	; 0x1100
     b10:	6168435f 	cmnvs	r8, pc, asr r3
     b14:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     b18:	52495f33 	subpl	r5, r9, #204	; 0xcc
     b1c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     b20:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     b24:	42535500 	subsmi	r5, r3, #0	; 0x0
     b28:	656b6157 	strbvs	r6, [fp, #-343]!
     b2c:	495f7055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, sp, lr}^
     b30:	61485152 	cmpvs	r8, r2, asr r1
     b34:	656c646e 	strbvs	r6, [ip, #-1134]!
     b38:	44530072 	ldrbmi	r0, [r3], #-114
     b3c:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^
     b40:	61485152 	cmpvs	r8, r2, asr r1
     b44:	656c646e 	strbvs	r6, [ip, #-1134]!
     b48:	4c460072 	mcrrmi	0, 7, r0, r6, cr2
     b4c:	5f485341 	svcpl	0x00485341
     b50:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     b54:	6c646e61 	stclvs	14, cr6, [r4], #-388
     b58:	55007265 	strpl	r7, [r0, #-613]
     b5c:	65676173 	strbvs	r6, [r7, #-371]!
     b60:	6c756146 	ldfvse	f6, [r5], #-280
     b64:	63784574 	cmnvs	r8, #486539264	; 0x1d000000
     b68:	69747065 	ldmdbvs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
     b6c:	49006e6f 	stmdbmi	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
     b70:	5f314332 	svcpl	0x00314332
     b74:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^
     b78:	61485152 	cmpvs	r8, r2, asr r1
     b7c:	656c646e 	strbvs	r6, [ip, #-1134]!
     b80:	54520072 	ldrbpl	r0, [r2], #-114
     b84:	616c4143 	cmnvs	ip, r3, asr #2
     b88:	495f6d72 	ldmdbmi	pc, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
     b8c:	61485152 	cmpvs	r8, r2, asr r1
     b90:	656c646e 	strbvs	r6, [ip, #-1134]!
     b94:	4d440072 	stclmi	0, cr0, [r4, #-456]
     b98:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     b9c:	6e6e6168 	powvsez	f6, f6, #0.0
     ba0:	5f366c65 	svcpl	0x00366c65
     ba4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     ba8:	6c646e61 	stclvs	14, cr6, [r4], #-388
     bac:	53007265 	movwpl	r7, #613	; 0x265
     bb0:	5f334950 	svcpl	0x00334950
     bb4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     bb8:	6c646e61 	stclvs	14, cr6, [r4], #-388
     bbc:	54007265 	strpl	r7, [r0], #-613
     bc0:	5f334d49 	svcpl	0x00334d49
     bc4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     bc8:	6c646e61 	stclvs	14, cr6, [r4], #-388
     bcc:	43007265 	movwmi	r7, #613	; 0x265
     bd0:	535f4e41 	cmppl	pc, #1040	; 0x410
     bd4:	495f4543 	ldmdbmi	pc, {r0, r1, r6, r8, sl, lr}^
     bd8:	61485152 	cmpvs	r8, r2, asr r1
     bdc:	656c646e 	strbvs	r6, [ip, #-1134]!
     be0:	53460072 	movtpl	r0, #24690	; 0x6072
     be4:	495f434d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, lr}^
     be8:	61485152 	cmpvs	r8, r2, asr r1
     bec:	656c646e 	strbvs	r6, [ip, #-1134]!
     bf0:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     bf4:	5f314954 	svcpl	0x00314954
     bf8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     bfc:	6c646e61 	stclvs	14, cr6, [r4], #-388
     c00:	44007265 	strmi	r7, [r0], #-613
     c04:	5f32414d 	svcpl	0x0032414d
     c08:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     c0c:	316c656e 	cmncc	ip, lr, ror #10
     c10:	5152495f 	cmppl	r2, pc, asr r9
     c14:	646e6148 	strbtvs	r6, [lr], #-328
     c18:	0072656c 	rsbseq	r6, r2, ip, ror #10
     c1c:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     c20:	5f56455f 	svcpl	0x0056455f
     c24:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     c28:	6c646e61 	stclvs	14, cr6, [r4], #-388
     c2c:	49007265 	stmdbmi	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     c30:	5f324332 	svcpl	0x00324332
     c34:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^
     c38:	61485152 	cmpvs	r8, r2, asr r1
     c3c:	656c646e 	strbvs	r6, [ip, #-1134]!
     c40:	53550072 	cmppl	r5, #114	; 0x72
     c44:	31545241 	cmpcc	r4, r1, asr #4
     c48:	5152495f 	cmppl	r2, pc, asr r9
     c4c:	646e6148 	strbtvs	r6, [lr], #-328
     c50:	0072656c 	rsbseq	r6, r2, ip, ror #10
     c54:	5f425355 	svcpl	0x00425355
     c58:	435f504c 	cmpmi	pc, #76	; 0x4c
     c5c:	525f4e41 	subspl	r4, pc, #1040	; 0x410
     c60:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^
     c64:	61485152 	cmpvs	r8, r2, asr r1
     c68:	656c646e 	strbvs	r6, [ip, #-1134]!
     c6c:	53550072 	cmppl	r5, #114	; 0x72
     c70:	50485f42 	subpl	r5, r8, r2, asr #30
     c74:	4e41435f 	mcrmi	3, 2, r4, cr1, cr15, {2}
     c78:	5f58545f 	svcpl	0x0058545f
     c7c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     c80:	6c646e61 	stclvs	14, cr6, [r4], #-388
     c84:	49007265 	stmdbmi	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     c88:	5f314332 	svcpl	0x00314332
     c8c:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^
     c90:	61485152 	cmpvs	r8, r2, asr r1
     c94:	656c646e 	strbvs	r6, [ip, #-1134]!
     c98:	50530072 	subspl	r0, r3, r2, ror r0
     c9c:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^
     ca0:	61485152 	cmpvs	r8, r2, asr r1
     ca4:	656c646e 	strbvs	r6, [ip, #-1134]!
     ca8:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     cac:	425f384d 	subsmi	r3, pc, #5046272	; 0x4d0000
     cb0:	495f4b52 	ldmdbmi	pc, {r1, r4, r6, r8, r9, fp, lr}^
     cb4:	61485152 	cmpvs	r8, r2, asr r1
     cb8:	656c646e 	strbvs	r6, [ip, #-1134]!
     cbc:	4d440072 	stclmi	0, cr0, [r4, #-456]
     cc0:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     cc4:	6e6e6168 	powvsez	f6, f6, #0.0
     cc8:	5f326c65 	svcpl	0x00326c65
     ccc:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     cd0:	6c646e61 	stclvs	14, cr6, [r4], #-388
     cd4:	55007265 	strpl	r7, [r0, #-613]
     cd8:	34545241 	ldrbcc	r5, [r4], #-577
     cdc:	5152495f 	cmppl	r2, pc, asr r9
     ce0:	646e6148 	strbtvs	r6, [lr], #-328
     ce4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     ce8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     cec:	495f3254 	ldmdbmi	pc, {r2, r4, r6, r9, ip, sp}^
     cf0:	61485152 	cmpvs	r8, r2, asr r1
     cf4:	656c646e 	strbvs	r6, [ip, #-1134]!
     cf8:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     cfc:	495f344d 	ldmdbmi	pc, {r0, r2, r3, r6, sl, ip, sp}^
     d00:	61485152 	cmpvs	r8, r2, asr r1
     d04:	656c646e 	strbvs	r6, [ip, #-1134]!
     d08:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     d0c:	545f314d 	ldrbpl	r3, [pc], #333	; d14 <__Stack_Size+0x914>
     d10:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     d14:	495f4d4f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r8, sl, fp, lr}^
     d18:	61485152 	cmpvs	r8, r2, asr r1
     d1c:	656c646e 	strbvs	r6, [ip, #-1134]!
     d20:	43520072 	cmpmi	r2, #114	; 0x72
     d24:	52495f43 	subpl	r5, r9, #268	; 0x10c
     d28:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     d2c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     d30:	4d495400 	cfstrdmi	mvd5, [r9]
     d34:	52495f37 	subpl	r5, r9, #220	; 0xdc
     d38:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     d3c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     d40:	44575700 	ldrbmi	r5, [r7], #-1792
     d44:	52495f47 	subpl	r5, r9, #284	; 0x11c
     d48:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     d4c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     d50:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
     d54:	52495f32 	subpl	r5, r9, #200	; 0xc8
     d58:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     d5c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     d60:	54584500 	ldrbpl	r4, [r8], #-1280
     d64:	495f3449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, sp}^
     d68:	61485152 	cmpvs	r8, r2, asr r1
     d6c:	656c646e 	strbvs	r6, [ip, #-1134]!
     d70:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     d74:	5f394954 	svcpl	0x00394954
     d78:	52495f35 	subpl	r5, r9, #212	; 0xd4
     d7c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     d80:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     d84:	6e655000 	cdpvs	0, 6, cr5, cr5, cr0, {0}
     d88:	43565364 	cmpmi	r6, #-1879048191	; 0x90000001
     d8c:	4d495400 	cfstrdmi	mvd5, [r9]
     d90:	52495f36 	subpl	r5, r9, #216	; 0xd8
     d94:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     d98:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     d9c:	50504100 	subspl	r4, r0, r0, lsl #2
     da0:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     da4:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!
     da8:	31663233 	cmncc	r6, r3, lsr r2
     dac:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^
     db0:	00632e74 	rsbeq	r2, r3, r4, ror lr
     db4:	31414d44 	cmpcc	r1, r4, asr #26
     db8:	6168435f 	cmnvs	r8, pc, asr r3
     dbc:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     dc0:	52495f37 	subpl	r5, r9, #220	; 0xdc
     dc4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     dc8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     dcc:	52415500 	subpl	r5, r1, #0	; 0x0
     dd0:	495f3554 	ldmdbmi	pc, {r2, r4, r6, r8, sl, ip, sp}^
     dd4:	61485152 	cmpvs	r8, r2, asr r1
     dd8:	656c646e 	strbvs	r6, [ip, #-1134]!
     ddc:	4d440072 	stclmi	0, cr0, [r4, #-456]
     de0:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     de4:	6e6e6168 	powvsez	f6, f6, #0.0
     de8:	5f356c65 	svcpl	0x00356c65
     dec:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     df0:	6c646e61 	stclvs	14, cr6, [r4], #-388
     df4:	64007265 	strvs	r7, [r0], #-613
     df8:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
     dfc:	745f6c61 	ldrbvc	r6, [pc], #3169	; e04 <__Stack_Size+0xa04>
     e00:	6f656d69 	svcvs	0x00656d69
     e04:	64007475 	strvs	r7, [r0], #-1141
     e08:	6e497665 	cdpvs	6, 4, cr7, cr9, cr5, {3}
     e0c:	00786564 	rsbseq	r6, r8, r4, ror #10
     e10:	63615070 	cmnvs	r1, #112	; 0x70
     e14:	0074656b 	rsbseq	r6, r4, fp, ror #10
     e18:	5f6c7864 	svcpl	0x006c7864
     e1c:	5f6c6168 	svcpl	0x006c6168
     e20:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
     e24:	6c786400 	cfldrdvs	mvd6, [r8]
     e28:	6c61685f 	stclvs	8, cr6, [r1], #-380
     e2c:	7465735f 	strbtvc	r7, [r5], #-863
     e30:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!
     e34:	74756f65 	ldrbtvc	r6, [r5], #-3941
     e38:	6c786400 	cfldrdvs	mvd6, [r8]
     e3c:	6c61685f 	stclvs	8, cr6, [r1], #-380
     e40:	6f6c635f 	svcvs	0x006c635f
     e44:	64006573 	strvs	r6, [r0], #-1395
     e48:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
     e4c:	725f6c61 	subsvc	r6, pc, #24832	; 0x6100
     e50:	50410078 	subpl	r0, r1, r8, ror r0
     e54:	72732f50 	rsbsvc	r2, r3, #320	; 0x140
     e58:	78642f63 	stmdavc	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
     e5c:	61685f6c 	cmnvs	r8, ip, ror #30
     e60:	00632e6c 	rsbeq	r2, r3, ip, ror #28
     e64:	5f6c7864 	svcpl	0x006c7864
     e68:	5f6c6168 	svcpl	0x006c6168
     e6c:	61656c63 	cmnvs	r5, r3, ror #24
     e70:	78640072 	stmdavc	r4!, {r1, r4, r5, r6}^
     e74:	61685f6c 	cmnvs	r8, ip, ror #30
     e78:	78745f6c 	ldmdavc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     e7c:	6d756e00 	ldclvs	14, cr6, [r5]
     e80:	6b636150 	blvs	18d93c8 <__Stack_Size+0x18d8fc8>
     e84:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
     e88:	63526d75 	cmpvs	r2, #7488	; 0x1d40
     e8c:	74794276 	ldrbtvc	r4, [r9], #-630
     e90:	62670065 	rsbvs	r0, r7, #101	; 0x65
     e94:	61507852 	cmpvs	r0, r2, asr r8
     e98:	74656b63 	strbtvc	r6, [r5], #-2915
     e9c:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     ea0:	64006874 	strvs	r6, [r0], #-2164
     ea4:	735f6c78 	cmpvc	pc, #30720	; 0x7800
     ea8:	745f7465 	ldrbvc	r7, [pc], #1125	; eb0 <__Stack_Size+0xab0>
     eac:	63617078 	cmnvs	r1, #120	; 0x78
     eb0:	5f74656b 	svcpl	0x0074656b
     eb4:	74736e69 	ldrbtvc	r6, [r3], #-3689
     eb8:	74637572 	strbtvc	r7, [r3], #-1394
     ebc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     ec0:	5f6c7864 	svcpl	0x006c7864
     ec4:	705f7874 	subsvc	r7, pc, r4, ror r8
     ec8:	656b6361 	strbvs	r6, [fp, #-865]!
     ecc:	78640074 	stmdavc	r4!, {r2, r4, r5, r6}^
     ed0:	69705f6c 	ldmdbvs	r0!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     ed4:	6400676e 	strvs	r6, [r0], #-1902
     ed8:	695f6c78 	ldmdbvs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
     edc:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     ee0:	7a696c61 	bvc	1a5c06c <__Stack_Size+0x1a5bc6c>
     ee4:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
     ee8:	65725f6c 	ldrbvs	r5, [r2, #-3948]!
     eec:	775f6461 	ldrbvc	r6, [pc, -r1, ror #8]
     ef0:	0064726f 	rsbeq	r7, r4, pc, ror #4
     ef4:	6f436267 	svcvs	0x00436267
     ef8:	74536d6d 	ldrbvc	r6, [r3], #-3437
     efc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     f00:	6c786400 	cfldrdvs	mvd6, [r8]
     f04:	7465675f 	strbtvc	r6, [r5], #-1887
     f08:	7078725f 	rsbsvc	r7, r8, pc, asr r2
     f0c:	656b6361 	strbvs	r6, [fp, #-865]!
     f10:	656c5f74 	strbvs	r5, [ip, #-3956]!
     f14:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     f18:	6c786400 	cfldrdvs	mvd6, [r8]
     f1c:	7465675f 	strbtvc	r6, [r5], #-1887
     f20:	6769685f 	undefined
     f24:	74796268 	ldrbtvc	r6, [r9], #-616
     f28:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
     f2c:	65725f6c 	ldrbvs	r5, [r2, #-3948]!
     f30:	625f6461 	subsvs	r6, pc, #1627389952	; 0x61000000
     f34:	00657479 	rsbeq	r7, r5, r9, ror r4
     f38:	5f6c7864 	svcpl	0x006c7864
     f3c:	5f746573 	svcpl	0x00746573
     f40:	61707874 	cmnvs	r0, r4, ror r8
     f44:	74656b63 	strbtvc	r6, [r5], #-2915
     f48:	7261705f 	rsbvc	r7, r1, #95	; 0x5f
     f4c:	74656d61 	strbtvc	r6, [r5], #-3425
     f50:	64007265 	strvs	r7, [r0], #-613
     f54:	675f6c78 	undefined
     f58:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}
     f5c:	7962776f 	stmdbvc	r2!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
     f60:	64006574 	strvs	r6, [r0], #-1396
     f64:	725f6c78 	subsvc	r6, pc, #30720	; 0x7800
     f68:	61705f78 	cmnvs	r0, r8, ror pc
     f6c:	74656b63 	strbtvc	r6, [r5], #-2915
     f70:	65686300 	strbvs	r6, [r8, #-768]!
     f74:	75736b63 	ldrbvc	r6, [r3, #-2915]!
     f78:	7864006d 	stmdavc	r4!, {r0, r2, r3, r5, r6}^
     f7c:	65675f6c 	strbvs	r5, [r7, #-3948]!
     f80:	78725f74 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     f84:	6b636170 	blvs	18d954c <__Stack_Size+0x18d914c>
     f88:	655f7465 	ldrbvs	r7, [pc, #-1125]	; b2b <__Stack_Size+0x72b>
     f8c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     f90:	6c786400 	cfldrdvs	mvd6, [r8]
     f94:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     f98:	775f6574 	undefined
     f9c:	0064726f 	rsbeq	r7, r4, pc, ror #4
     fa0:	2f505041 	svccs	0x00505041
     fa4:	2f637273 	svccs	0x00637273
     fa8:	616e7964 	cmnvs	lr, r4, ror #18
     fac:	6578696d 	ldrbvs	r6, [r8, #-2413]!
     fb0:	00632e6c 	rsbeq	r2, r3, ip, ror #28
     fb4:	6c616552 	cfstr64vs	mvdx6, [r1], #-328
     fb8:	754e7854 	strbvc	r7, [lr, #-2132]
     fbc:	7479426d 	ldrbtvc	r4, [r9], #-621
     fc0:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
     fc4:	65735f6c 	ldrbvs	r5, [r3, #-3948]!
     fc8:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     fcc:	6b636170 	blvs	18d9594 <__Stack_Size+0x18d9194>
     fd0:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}
     fd4:	74676e65 	strbtvc	r6, [r7], #-3685
     fd8:	78640068 	stmdavc	r4!, {r3, r5, r6}^
     fdc:	65735f6c 	ldrbvs	r5, [r3, #-3948]!
     fe0:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     fe4:	6b636170 	blvs	18d95ac <__Stack_Size+0x18d91ac>
     fe8:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^
     fec:	78640064 	stmdavc	r4!, {r2, r5, r6}^
     ff0:	72775f6c 	rsbsvc	r5, r7, #432	; 0x1b0
     ff4:	5f657469 	svcpl	0x00657469
     ff8:	65747962 	ldrbvs	r7, [r4, #-2402]!
     ffc:	53626700 	cmnpl	r2, #0	; 0x0
    1000:	75746174 	ldrbvc	r6, [r4, #-372]!
    1004:	63615073 	cmnvs	r1, #115	; 0x73
    1008:	0074656b 	rsbseq	r6, r4, fp, ror #10
    100c:	5f6c7864 	svcpl	0x006c7864
    1010:	5f746567 	svcpl	0x00746567
    1014:	75736572 	ldrbvc	r6, [r3, #-1394]!
    1018:	6700746c 	strvs	r7, [r0, -ip, ror #8]
    101c:	73754269 	cmnvc	r5, #-1879048186	; 0x90000006
    1020:	6e697355 	mcrvs	3, 3, r7, cr9, cr5, {2}
    1024:	78640067 	stmdavc	r4!, {r0, r1, r2, r5, r6}^
    1028:	78745f6c 	ldmdavc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    102c:	705f7872 	subsvc	r7, pc, r2, ror r8
    1030:	656b6361 	strbvs	r6, [fp, #-865]!
    1034:	78640074 	stmdavc	r4!, {r2, r4, r5, r6}^
    1038:	616d5f6c 	cmnvs	sp, ip, ror #30
    103c:	6f77656b 	svcvs	0x0077656b
    1040:	64006472 	strvs	r6, [r0], #-1138
    1044:	675f6c78 	undefined
    1048:	725f7465 	subsvc	r7, pc, #1694498816	; 0x65000000
    104c:	63617078 	cmnvs	r1, #120	; 0x78
    1050:	5f74656b 	svcpl	0x0074656b
    1054:	61726170 	cmnvs	r2, r0, ror r1
    1058:	6574656d 	ldrbvs	r6, [r4, #-1389]!
    105c:	62670072 	rsbvs	r0, r7, #114	; 0x72
    1060:	65477852 	strbvs	r7, [r7, #-2130]
    1064:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    1068:	00687467 	rsbeq	r7, r8, r7, ror #8
    106c:	62727265 	rsbsvs	r7, r2, #1342177286	; 0x50000006
    1070:	6e007469 	cdpvs	4, 0, cr7, cr0, cr9, {3}
    1074:	64616552 	strbtvs	r6, [r1], #-1362
    1078:	646e6900 	strbtvs	r6, [lr], #-2304
    107c:	67007865 	strvs	r7, [r0, -r5, ror #16]
    1080:	736e4962 	cmnvc	lr, #1605632	; 0x188000
    1084:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    1088:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    108c:	6b636150 	blvs	18d95d4 <__Stack_Size+0x18d91d4>
    1090:	62007465 	andvs	r7, r0, #1694498816	; 0x65000000
    1094:	6e647561 	cdpvs	5, 6, cr7, cr4, cr1, {3}
    1098:	64006d75 	strvs	r6, [r0], #-3445
    109c:	745f6c78 	ldrbvc	r6, [pc], #3192	; 10a4 <__Stack_Size+0xca4>
    10a0:	696d7265 	stmdbvs	sp!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    10a4:	6574616e 	ldrbvs	r6, [r4, #-366]!
    10a8:	414c4600 	cmpmi	ip, r0, lsl #12
    10ac:	495f4853 	ldmdbmi	pc, {r0, r1, r4, r6, fp, lr}^
    10b0:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    10b4:	00676966 	rsbeq	r6, r7, r6, ror #18
    10b8:	495f424f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r9, lr}^
    10bc:	00474457 	subeq	r4, r7, r7, asr r4
    10c0:	32505257 	subscc	r5, r0, #1879048197	; 0x70000005
    10c4:	7461445f 	strbtvc	r4, [r1], #-1119
    10c8:	424f0061 	submi	r0, pc, #97	; 0x61
    10cc:	4f54535f 	svcmi	0x0054535f
    10d0:	4c460050 	mcrrmi	0, 5, r0, r6, cr0
    10d4:	5f485341 	svcpl	0x00485341
    10d8:	73617245 	cmnvc	r1, #1342177284	; 0x50000004
    10dc:	74704f65 	ldrbtvc	r4, [r0], #-3941
    10e0:	426e6f69 	rsbmi	r6, lr, #420	; 0x1a4
    10e4:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    10e8:	61657200 	cmnvs	r5, r0, lsl #4
    10ec:	74756f64 	ldrbtvc	r6, [r5], #-3940
    10f0:	74617473 	strbtvc	r7, [r1], #-1139
    10f4:	46007375 	undefined
    10f8:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    10fc:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
    1100:	575f524f 	ldrbpl	r5, [pc, -pc, asr #4]
    1104:	46005052 	undefined
    1108:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    110c:	6172455f 	cmnvs	r2, pc, asr r5
    1110:	61506573 	cmpvs	r0, r3, ror r5
    1114:	46006567 	strmi	r6, [r0], -r7, ror #10
    1118:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    111c:	74614c5f 	strbtvc	r4, [r1], #-3167
    1120:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1124:	414c4600 	cmpmi	ip, r0, lsl #12
    1128:	475f4853 	undefined
    112c:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
    1130:	74656665 	strbtvc	r6, [r5], #-1637
    1134:	75426863 	strbvc	r6, [r2, #-2147]
    1138:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    113c:	74617453 	strbtvc	r7, [r1], #-1107
    1140:	64007375 	strvs	r7, [r0], #-885
    1144:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    1148:	50525700 	subspl	r5, r2, r0, lsl #14
    114c:	4c460052 	mcrrmi	0, 5, r0, r6, cr2
    1150:	5f485341 	svcpl	0x00485341
    1154:	6f6c6e55 	svcvs	0x006c6e55
    1158:	46006b63 	strmi	r6, [r0], -r3, ror #22
    115c:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1160:	6172455f 	cmnvs	r2, pc, asr r5
    1164:	6c416573 	cfstr64vs	mvdx6, [r1], {115}
    1168:	6761506c 	strbvs	r5, [r1, -ip, rrx]!
    116c:	46007365 	strmi	r7, [r0], -r5, ror #6
    1170:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1174:	6174535f 	cmnvs	r4, pc, asr r3
    1178:	00737574 	rsbseq	r7, r3, r4, ror r5
    117c:	5377654e 	cmnpl	r7, #327155712	; 0x13800000
    1180:	65746174 	ldrbvs	r6, [r4, #-372]!
    1184:	50525700 	subspl	r5, r2, r0, lsl #14
    1188:	52570030 	subspl	r0, r7, #48	; 0x30
    118c:	57003150 	smlsdpl	r0, r0, r1, r3
    1190:	00325052 	eorseq	r5, r2, r2, asr r0
    1194:	33505257 	cmpcc	r0, #1879048197	; 0x70000005
    1198:	414c4600 	cmpmi	ip, r0, lsl #12
    119c:	475f4853 	undefined
    11a0:	72577465 	subsvc	r7, r7, #1694498816	; 0x65000000
    11a4:	50657469 	rsbpl	r7, r5, r9, ror #8
    11a8:	65746f72 	ldrbvs	r6, [r4, #-3954]!
    11ac:	6f697463 	svcvs	0x00697463
    11b0:	74704f6e 	ldrbtvc	r4, [r0], #-3950
    11b4:	426e6f69 	rsbmi	r6, lr, #420	; 0x1a4
    11b8:	00657479 	rsbeq	r7, r5, r9, ror r4
    11bc:	4b54504f 	blmi	1515300 <__Stack_Size+0x1514f00>
    11c0:	00525945 	subseq	r5, r2, r5, asr #18
    11c4:	53414c46 	movtpl	r4, #7238	; 0x1c46
    11c8:	73555f48 	cmpvc	r5, #288	; 0x120
    11cc:	704f7265 	subvc	r7, pc, r5, ror #4
    11d0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    11d4:	65747942 	ldrbvs	r7, [r4, #-2370]!
    11d8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    11dc:	46006769 	strmi	r6, [r0], -r9, ror #14
    11e0:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    11e4:	6165525f 	cmnvs	r5, pc, asr r2
    11e8:	74754f64 	ldrbtvc	r4, [r5], #-3940
    11ec:	746f7250 	strbtvc	r7, [pc], #592	; 11f4 <__Stack_Size+0xdf4>
    11f0:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    11f4:	66006e6f 	strvs	r6, [r0], -pc, ror #28
    11f8:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
    11fc:	74617473 	strbtvc	r7, [r1], #-1139
    1200:	62007375 	andvs	r7, r0, #-738197503	; 0xd4000001
    1204:	74737469 	ldrbtvc	r7, [r3], #-1129
    1208:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    120c:	67615000 	strbvs	r5, [r1, -r0]!
    1210:	64415f65 	strbvs	r5, [r1], #-3941
    1214:	73657264 	cmnvc	r5, #1073741830	; 0x40000006
    1218:	4c460073 	mcrrmi	0, 7, r0, r6, cr3
    121c:	5f485341 	svcpl	0x00485341
    1220:	4f525245 	svcmi	0x00525245
    1224:	47505f52 	undefined
    1228:	414c4600 	cmpmi	ip, r0, lsl #12
    122c:	4c5f4853 	mrrcmi	8, 5, r4, pc, cr3
    1230:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1234:	33505257 	cmpcc	r0, #1879048197	; 0x70000005
    1238:	7461445f 	strbtvc	r4, [r1], #-1119
    123c:	74730061 	ldrbtvc	r0, [r3], #-97
    1240:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1244:	5f783031 	svcpl	0x00783031
    1248:	2f62696c 	svccs	0x0062696c
    124c:	2f637273 	svccs	0x00637273
    1250:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1254:	30316632 	eorscc	r6, r1, r2, lsr r6
    1258:	6c665f78 	stclvs	15, cr5, [r6], #-480
    125c:	2e687361 	cdpcs	3, 6, cr7, cr8, cr1, {3}
    1260:	4c460063 	mcrrmi	0, 6, r0, r6, cr3
    1264:	5f485341 	svcpl	0x00485341
    1268:	66657250 	undefined
    126c:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1270:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1274:	6d437265 	sfmvs	f7, 2, [r3, #-404]
    1278:	4c460064 	mcrrmi	0, 6, r0, r6, cr4
    127c:	5f485341 	svcpl	0x00485341
    1280:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1284:	5367616c 	cmnpl	r7, #27	; 0x1b
    1288:	75746174 	ldrbvc	r6, [r4, #-372]!
    128c:	4c460073 	mcrrmi	0, 7, r0, r6, cr3
    1290:	5f485341 	svcpl	0x00485341
    1294:	61656c43 	cmnvs	r5, r3, asr #24
    1298:	616c4672 	smcvs	50274
    129c:	4c460067 	mcrrmi	0, 6, r0, r6, cr7
    12a0:	5f485341 	svcpl	0x00485341
    12a4:	504d4f43 	subpl	r4, sp, r3, asr #30
    12a8:	4554454c 	ldrbmi	r4, [r4, #-1356]
    12ac:	414c4600 	cmpmi	ip, r0, lsl #12
    12b0:	425f4853 	subsmi	r4, pc, #5439488	; 0x530000
    12b4:	00595355 	subseq	r5, r9, r5, asr r3
    12b8:	31505257 	cmpcc	r0, r7, asr r2
    12bc:	7461445f 	strbtvc	r4, [r1], #-1119
    12c0:	4c460061 	mcrrmi	0, 6, r0, r6, cr1
    12c4:	5f485341 	svcpl	0x00485341
    12c8:	454d4954 	strbmi	r4, [sp, #-2388]
    12cc:	0054554f 	subseq	r5, r4, pc, asr #10
    12d0:	656d6954 	strbvs	r6, [sp, #-2388]!
    12d4:	0074756f 	rsbseq	r7, r4, pc, ror #10
    12d8:	53414c46 	movtpl	r4, #7238	; 0x1c46
    12dc:	65475f48 	strbvs	r5, [r7, #-3912]
    12e0:	61655274 	smcvs	21796
    12e4:	74754f64 	ldrbtvc	r4, [r5], #-3940
    12e8:	746f7250 	strbtvc	r7, [pc], #592	; 12f0 <__Stack_Size+0xef0>
    12ec:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    12f0:	74536e6f 	ldrbvc	r6, [r3], #-3695
    12f4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    12f8:	5f424f00 	svcpl	0x00424f00
    12fc:	42445453 	submi	r5, r4, #1392508928	; 0x53000000
    1300:	52570059 	subspl	r0, r7, #89	; 0x59
    1304:	445f3050 	ldrbmi	r3, [pc], #80	; 130c <__Stack_Size+0xf0c>
    1308:	00617461 	rsbeq	r7, r1, r1, ror #8
    130c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1310:	61485f48 	cmpvs	r8, r8, asr #30
    1314:	7943666c 	stmdbvc	r3, {r2, r3, r5, r6, r9, sl, sp, lr}^
    1318:	41656c63 	cmnmi	r5, r3, ror #24
    131c:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
    1320:	4c460073 	mcrrmi	0, 7, r0, r6, cr3
    1324:	5f485341 	svcpl	0x00485341
    1328:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    132c:	75746174 	ldrbvc	r6, [r4, #-372]!
    1330:	4c460073 	mcrrmi	0, 7, r0, r6, cr3
    1334:	5f485341 	svcpl	0x00485341
    1338:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    133c:	7257656c 	subsvc	r6, r7, #452984832	; 0x1b000000
    1340:	50657469 	rsbpl	r7, r5, r9, ror #8
    1344:	65746f72 	ldrbvs	r6, [r4, #-3954]!
    1348:	6f697463 	svcvs	0x00697463
    134c:	4c46006e 	mcrrmi	0, 6, r0, r6, cr14
    1350:	5f485341 	svcpl	0x00485341
    1354:	4c746553 	cfldr64mi	mvdx6, [r4], #-332
    1358:	6e657461 	cdpvs	4, 6, cr7, cr5, cr1, {3}
    135c:	46007963 	strmi	r7, [r0], -r3, ror #18
    1360:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1364:	6c61485f 	stclvs	8, cr4, [r1], #-380
    1368:	63794366 	cmnvs	r9, #-1744830463	; 0x98000001
    136c:	6341656c 	movtvs	r6, #5484	; 0x156c
    1370:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    1374:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1378:	53414c46 	movtpl	r4, #7238	; 0x1c46
    137c:	72505f48 	subsvc	r5, r0, #288	; 0x120
    1380:	6172676f 	cmnvs	r2, pc, ror #14
    1384:	74704f6d 	ldrbtvc	r4, [r0], #-3949
    1388:	426e6f69 	rsbmi	r6, lr, #420	; 0x1a4
    138c:	44657479 	strbtmi	r7, [r5], #-1145
    1390:	00617461 	rsbeq	r7, r1, r1, ror #8
    1394:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1398:	65475f48 	strbvs	r5, [r7, #-3912]
    139c:	65735574 	ldrbvs	r5, [r3, #-1396]!
    13a0:	74704f72 	ldrbtvc	r4, [r0], #-3954
    13a4:	426e6f69 	rsbmi	r6, lr, #420	; 0x1a4
    13a8:	00657479 	rsbeq	r7, r5, r9, ror r4
    13ac:	53414c46 	movtpl	r4, #7238	; 0x1c46
    13b0:	72505f48 	subsvc	r5, r0, #288	; 0x120
    13b4:	6172676f 	cmnvs	r2, pc, ror #14
    13b8:	6c61486d 	stclvs	8, cr4, [r1], #-436
    13bc:	726f5766 	rsbvc	r5, pc, #26738688	; 0x1980000
    13c0:	4c460064 	mcrrmi	0, 6, r0, r6, cr4
    13c4:	5f485341 	svcpl	0x00485341
    13c8:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    13cc:	45535500 	ldrbmi	r5, [r3, #-1280]
    13d0:	61440052 	qdaddvs	r0, r2, r4
    13d4:	00306174 	eorseq	r6, r0, r4, ror r1
    13d8:	61746144 	cmnvs	r4, r4, asr #2
    13dc:	4c460031 	mcrrmi	0, 3, r0, r6, cr1
    13e0:	5f485341 	svcpl	0x00485341
    13e4:	65676150 	strbvs	r6, [r7, #-336]!
    13e8:	4c460073 	mcrrmi	0, 7, r0, r6, cr3
    13ec:	5f485341 	svcpl	0x00485341
    13f0:	46005449 	strmi	r5, [r0], -r9, asr #8
    13f4:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    13f8:	6f72505f 	svcvs	0x0072505f
    13fc:	6d617267 	sfmvs	f7, 2, [r1, #-412]!
    1400:	64726f57 	ldrbtvs	r6, [r2], #-3927
    1404:	53455200 	movtpl	r5, #20992	; 0x5200
    1408:	45565245 	ldrbmi	r5, [r6, #-581]
    140c:	4c460044 	mcrrmi	0, 4, r0, r6, cr4
    1410:	5f485341 	svcpl	0x00485341
    1414:	74696157 	strbtvc	r6, [r9], #-343
    1418:	4c726f46 	ldclmi	15, cr6, [r2], #-280
    141c:	4f747361 	svcmi	0x00747361
    1420:	61726570 	cmnvs	r2, r0, ror r5
    1424:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1428:	414c4600 	cmpmi	ip, r0, lsl #12
    142c:	505f4853 	subspl	r4, pc, r3, asr r8
    1430:	65666572 	strbvs	r6, [r6, #-1394]!
    1434:	42686374 	rsbmi	r6, r8, #-805306367	; 0xd0000001
    1438:	65666675 	strbvs	r6, [r6, #-1653]!
    143c:	50470072 	subpl	r0, r7, r2, ror r0
    1440:	545f4f49 	ldrbpl	r4, [pc], #3913	; 1448 <__Stack_Size+0x1048>
    1444:	44657079 	strbtmi	r7, [r5], #-121
    1448:	70006665 	andvc	r6, r0, r5, ror #12
    144c:	6f706e69 	svcvs	0x00706e69
    1450:	69420073 	stmdbvs	r2, {r0, r1, r4, r5, r6}^
    1454:	45535f74 	ldrbmi	r5, [r3, #-3956]
    1458:	50470054 	subpl	r0, r7, r4, asr r0
    145c:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1460:	4f646165 	svcmi	0x00646165
    1464:	75707475 	ldrbvc	r7, [r0, #-1141]!
    1468:	74614474 	strbtvc	r4, [r1], #-1140
    146c:	50470061 	subpl	r0, r7, r1, rrx
    1470:	455f4f49 	ldrbmi	r4, [pc, #-3913]	; 52f <__Stack_Size+0x12f>
    1474:	746e6576 	strbtvc	r6, [lr], #-1398
    1478:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    147c:	6d437475 	cfstrdvs	mvd7, [r3, #-468]
    1480:	50470064 	subpl	r0, r7, r4, rrx
    1484:	535f4f49 	cmppl	pc, #292	; 0x124
    1488:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    148c:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    1490:	69420074 	stmdbvs	r2, {r2, r4, r5, r6}^
    1494:	6c615674 	stclvs	6, cr5, [r1], #-464
    1498:	74694200 	strbtvc	r4, [r9], #-512
    149c:	5345525f 	movtpl	r5, #21087	; 0x525f
    14a0:	47005445 	strmi	r5, [r0, -r5, asr #8]
    14a4:	5f4f4950 	svcpl	0x004f4950
    14a8:	74697257 	strbtvc	r7, [r9], #-599
    14ac:	74694265 	strbtvc	r4, [r9], #-613
    14b0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    14b4:	65535f4f 	ldrbvs	r5, [r3, #-3919]
    14b8:	74694274 	strbtvc	r4, [r9], #-628
    14bc:	50470073 	subpl	r0, r7, r3, ror r0
    14c0:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^
    14c4:	0074696e 	rsbseq	r6, r4, lr, ror #18
    14c8:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    14cc:	73005243 	movwvc	r5, #579	; 0x243
    14d0:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    14d4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    14d8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    14dc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    14e0:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!
    14e4:	31663233 	cmncc	r6, r3, lsr r2
    14e8:	675f7830 	smmlarvs	pc, r0, r8, r7
    14ec:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
    14f0:	69700063 	ldmdbvs	r0!, {r0, r1, r5, r6}^
    14f4:	73616d6e 	cmnvc	r1, #7040	; 0x1b80
    14f8:	5047006b 	subpl	r0, r7, fp, rrx
    14fc:	505f4f49 	subspl	r4, pc, r9, asr #30
    1500:	5374726f 	cmnpl	r4, #-268435450	; 0xf0000006
    1504:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1508:	50470065 	subpl	r0, r7, r5, rrx
    150c:	445f4f49 	ldrbmi	r4, [pc], #3913	; 1514 <__Stack_Size+0x1114>
    1510:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1514:	50470074 	subpl	r0, r7, r4, ror r0
    1518:	455f4f49 	ldrbmi	r4, [pc, #-3913]	; 5d7 <__Stack_Size+0x1d7>
    151c:	746e6576 	strbtvc	r6, [lr], #-1398
    1520:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    1524:	6f437475 	svcvs	0x00437475
    1528:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    152c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1530:	65525f4f 	ldrbvs	r5, [r2, #-3919]
    1534:	0070616d 	rsbseq	r6, r0, sp, ror #2
    1538:	4f495047 	svcmi	0x00495047
    153c:	6165525f 	cmnvs	r5, pc, asr r2
    1540:	706e4964 	rsbvc	r4, lr, r4, ror #18
    1544:	61447475 	cmpvs	r4, r5, ror r4
    1548:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
    154c:	6d740074 	ldclvs	0, cr0, [r4, #-464]!
    1550:	67657270 	undefined
    1554:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1558:	65525f4f 	ldrbvs	r5, [r2, #-3919]
    155c:	42746573 	rsbsmi	r6, r4, #482344960	; 0x1cc00000
    1560:	00737469 	rsbseq	r7, r3, r9, ror #8
    1564:	74726f50 	ldrbtvc	r6, [r2], #-3920
    1568:	006c6156 	rsbeq	r6, ip, r6, asr r1
    156c:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    1570:	6d746e65 	ldclvs	14, cr6, [r4, #-404]!
    1574:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1578:	4f495047 	svcmi	0x00495047
    157c:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    1580:	616d6552 	cmnvs	sp, r2, asr r5
    1584:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    1588:	00676966 	rsbeq	r6, r7, r6, ror #18
    158c:	4f495047 	svcmi	0x00495047
    1590:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    1594:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1598:	47006563 	strmi	r6, [r0, -r3, ror #10]
    159c:	5f4f4950 	svcpl	0x004f4950
    15a0:	64616552 	strbtvs	r6, [r1], #-1362
    15a4:	75706e49 	ldrbvc	r6, [r0, #-3657]!
    15a8:	74614474 	strbtvc	r4, [r1], #-1140
    15ac:	6d740061 	ldclvs	0, cr0, [r4, #-388]!
    15b0:	73616d70 	cmnvc	r1, #7168	; 0x1c00
    15b4:	5047006b 	subpl	r0, r7, fp, rrx
    15b8:	505f4f49 	subspl	r4, pc, r9, asr #30
    15bc:	6f4c6e69 	svcvs	0x004c6e69
    15c0:	6f436b63 	svcvs	0x00436b63
    15c4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    15c8:	72756300 	rsbsvc	r6, r5, #0	; 0x0
    15cc:	746e6572 	strbtvc	r6, [lr], #-1394
    15d0:	006e6970 	rsbeq	r6, lr, r0, ror r9
    15d4:	4f495047 	svcmi	0x00495047
    15d8:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    15dc:	74006574 	strvc	r6, [r0], #-1396
    15e0:	0031706d 	eorseq	r7, r1, sp, rrx
    15e4:	4f495047 	svcmi	0x00495047
    15e8:	5458455f 	ldrbpl	r4, [r8], #-1375
    15ec:	6e694c49 	cdpvs	12, 6, cr4, cr9, cr9, {2}
    15f0:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    15f4:	00676966 	rsbeq	r6, r7, r6, ror #18
    15f8:	41746942 	cmnmi	r4, r2, asr #18
    15fc:	6f697463 	svcvs	0x00697463
    1600:	414d006e 	cmpmi	sp, lr, rrx
    1604:	47005250 	smlsdmi	r0, r0, r2, r5
    1608:	784f4950 	stmdavc	pc, {r4, r6, r8, fp, lr}^
    160c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1610:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
    1614:	74537469 	ldrbvc	r7, [r3], #-1129
    1618:	74637572 	strbtvc	r7, [r3], #-1394
    161c:	43564500 	cmpmi	r6, #0	; 0x0
    1620:	50470052 	subpl	r0, r7, r2, asr r0
    1624:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1628:	4f646165 	svcmi	0x00646165
    162c:	75707475 	ldrbvc	r7, [r0, #-1141]!
    1630:	74614474 	strbtvc	r4, [r1], #-1140
    1634:	74694261 	strbtvc	r4, [r9], #-609
    1638:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    163c:	46415f4f 	strbmi	r5, [r1], -pc, asr #30
    1640:	65444f49 	strbvs	r4, [r4, #-3913]
    1644:	74696e49 	strbtvc	r6, [r9], #-3657
    1648:	42414900 	submi	r4, r1, #0	; 0x0
    164c:	564e0052 	undefined
    1650:	435f4349 	cmpmi	pc, #603979777	; 0x24000001
    1654:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    1658:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    165c:	6e6e6168 	powvsez	f6, f6, #0.0
    1660:	65506c65 	ldrbvs	r6, [r0, #-3173]
    1664:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1668:	74694267 	strbtvc	r4, [r9], #-615
    166c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1670:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    1674:	74537469 	ldrbvc	r7, [r3], #-1129
    1678:	74637572 	strbtvc	r7, [r3], #-1394
    167c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1680:	65475f43 	strbvs	r5, [r7, #-3907]
    1684:	72754374 	rsbsvc	r4, r5, #-805306367	; 0xd0000001
    1688:	746e6572 	strbtvc	r6, [lr], #-1394
    168c:	646e6550 	strbtvs	r6, [lr], #-1360
    1690:	49676e69 	stmdbmi	r7!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    1694:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    1698:	656e6e61 	strbvs	r6, [lr, #-3681]!
    169c:	564e006c 	strbpl	r0, [lr], -ip, rrx
    16a0:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    16a4:	61467465 	cmpvs	r6, r5, ror #8
    16a8:	41746c75 	cmnmi	r4, r5, ror ip
    16ac:	65726464 	ldrbvs	r6, [r2, #-1124]!
    16b0:	53007373 	movwpl	r7, #883	; 0x373
    16b4:	65747379 	ldrbvs	r7, [r4, #-889]!
    16b8:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    16bc:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    16c0:	50627553 	rsbpl	r7, r2, r3, asr r5
    16c4:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    16c8:	00797469 	rsbseq	r7, r9, r9, ror #8
    16cc:	4349564e 	movtmi	r5, #38478	; 0x964e
    16d0:	5445535f 	strbpl	r5, [r5], #-863
    16d4:	4d495250 	sfmmi	f5, 2, [r9, #-320]
    16d8:	004b5341 	subeq	r5, fp, r1, asr #6
    16dc:	4349564e 	movtmi	r5, #38478	; 0x964e
    16e0:	6e65475f 	mcrvs	7, 3, r4, cr5, cr15, {2}
    16e4:	74617265 	strbtvc	r7, [r1], #-613
    16e8:	73795365 	cmnvc	r9, #-1811939327	; 0x94000001
    16ec:	526d6574 	rsbpl	r6, sp, #486539264	; 0x1d000000
    16f0:	74657365 	strbtvc	r7, [r5], #-869
    16f4:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    16f8:	00657270 	rsbeq	r7, r5, r0, ror r2
    16fc:	4349564e 	movtmi	r5, #38478	; 0x964e
    1700:	5345525f 	movtpl	r5, #21087	; 0x525f
    1704:	52505445 	subspl	r5, r0, #1157627904	; 0x45000000
    1708:	53414d49 	movtpl	r4, #7497	; 0x1d49
    170c:	6166004b 	cmnvs	r6, fp, asr #32
    1710:	61746c75 	cmnvs	r4, r5, ror ip
    1714:	65726464 	ldrbvs	r6, [r2, #-1124]!
    1718:	4e007373 	mcrmi	3, 0, r7, cr0, cr3, {3}
    171c:	5f434956 	svcpl	0x00434956
    1720:	74737953 	ldrbtvc	r7, [r3], #-2387
    1724:	61486d65 	cmpvs	r8, r5, ror #26
    1728:	656c646e 	strbvs	r6, [ip, #-1134]!
    172c:	69725072 	ldmdbvs	r2!, {r1, r4, r5, r6, ip, lr}^
    1730:	7469726f 	strbtvc	r7, [r9], #-623
    1734:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    1738:	00676966 	rsbeq	r6, r7, r6, ror #18
    173c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1740:	30316632 	eorscc	r6, r1, r2, lsr r6
    1744:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1748:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    174c:	74732f63 	ldrbtvc	r2, [r3], #-3939
    1750:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1754:	5f783031 	svcpl	0x00783031
    1758:	6369766e 	cmnvs	r9, #115343360	; 0x6e00000
    175c:	4e00632e 	cdpmi	3, 0, cr6, cr0, cr14, {1}
    1760:	5f434956 	svcpl	0x00434956
    1764:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1768:	44495550 	strbmi	r5, [r9], #-1360
    176c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1770:	72505f43 	subsvc	r5, r0, #268	; 0x10c
    1774:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1778:	72477974 	subvc	r7, r7, #1900544	; 0x1d0000
    177c:	0070756f 	rsbseq	r7, r0, pc, ror #10
    1780:	4349564e 	movtmi	r5, #38478	; 0x964e
    1784:	5345525f 	movtpl	r5, #21087	; 0x525f
    1788:	41465445 	cmpmi	r6, r5, asr #8
    178c:	4d544c55 	ldclmi	12, cr4, [r4, #-340]
    1790:	004b5341 	subeq	r5, fp, r1, asr #6
    1794:	4349564e 	movtmi	r5, #38478	; 0x964e
    1798:	7465475f 	strbtvc	r4, [r5], #-1887
    179c:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    17a0:	41746e65 	cmnmi	r4, r5, ror #28
    17a4:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    17a8:	6e614865 	cdpvs	8, 6, cr4, cr1, cr5, {3}
    17ac:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    17b0:	73795300 	cmnvc	r9, #0	; 0x0
    17b4:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    17b8:	6c646e61 	stclvs	14, cr6, [r4], #-388
    17bc:	49007265 	stmdbmi	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    17c0:	00525343 	subseq	r5, r2, r3, asr #6
    17c4:	52455352 	subpl	r5, r5, #1207959553	; 0x48000001
    17c8:	31444556 	cmpcc	r4, r6, asr r5
    17cc:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    17d0:	65475f43 	strbvs	r5, [r7, #-3907]
    17d4:	6172656e 	cmnvs	r2, lr, ror #10
    17d8:	6f436574 	svcvs	0x00436574
    17dc:	65526572 	ldrbvs	r6, [r2, #-1394]
    17e0:	00746573 	rsbseq	r6, r4, r3, ror r5
    17e4:	4349564e 	movtmi	r5, #38478	; 0x964e
    17e8:	7465475f 	strbtvc	r4, [r5], #-1887
    17ec:	74737953 	ldrbtvc	r7, [r3], #-2387
    17f0:	61486d65 	cmpvs	r8, r5, ror #26
    17f4:	656c646e 	strbvs	r6, [ip, #-1134]!
    17f8:	74634172 	strbtvc	r4, [r3], #-370
    17fc:	42657669 	rsbmi	r7, r5, #110100480	; 0x6900000
    1800:	74537469 	ldrbvc	r7, [r3], #-1129
    1804:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1808:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    180c:	41425f43 	cmpmi	r2, r3, asr #30
    1810:	52504553 	subspl	r4, r0, #348127232	; 0x14c00000
    1814:	4e4f4349 	cdpmi	3, 4, cr4, cr15, cr9, {2}
    1818:	00474946 	subeq	r4, r7, r6, asr #18
    181c:	52414642 	subpl	r4, r1, #69206016	; 0x4200000
    1820:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1824:	65535f43 	ldrbvs	r5, [r3, #-3907]
    1828:	51524974 	cmppl	r2, r4, ror r9
    182c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1830:	506c656e 	rsbpl	r6, ip, lr, ror #10
    1834:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1838:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    183c:	6d740074 	ldclvs	0, cr0, [r4, #-464]!
    1840:	736f7070 	cmnvc	pc, #112	; 0x70
    1844:	53464300 	movtpl	r4, #25344	; 0x6300
    1848:	564e0052 	undefined
    184c:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1850:	79537465 	ldmdbvc	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1854:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    1858:	646e6148 	strbtvs	r6, [lr], #-328
    185c:	5072656c 	rsbspl	r6, r2, ip, ror #10
    1860:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1864:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1868:	49410074 	stmdbmi	r1, {r2, r4, r5, r6}^
    186c:	00524352 	subseq	r4, r2, r2, asr r3
    1870:	4349564e 	movtmi	r5, #38478	; 0x964e
    1874:	7465535f 	strbtvc	r5, [r5], #-863
    1878:	74636556 	strbtvc	r6, [r3], #-1366
    187c:	6154726f 	cmpvs	r4, pc, ror #4
    1880:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1884:	52504349 	subspl	r4, r0, #603979777	; 0x24000001
    1888:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    188c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    1890:	53007469 	movwpl	r7, #1129	; 0x469
    1894:	00525048 	subseq	r5, r2, r8, asr #32
    1898:	53434853 	movtpl	r4, #14419	; 0x3853
    189c:	564e0052 	undefined
    18a0:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    18a4:	41427465 	cmpmi	r2, r5, ror #8
    18a8:	52504553 	subspl	r4, r0, #348127232	; 0x14c00000
    18ac:	4d4d0049 	stclmi	0, cr0, [sp, #-292]
    18b0:	00524146 	subseq	r4, r2, r6, asr #2
    18b4:	73706d74 	cmnvc	r0, #7424	; 0x1d00
    18b8:	4e006275 	mcrmi	2, 0, r6, cr0, cr5, {3}
    18bc:	5f434956 	svcpl	0x00434956
    18c0:	74737953 	ldrbtvc	r7, [r3], #-2387
    18c4:	61486d65 	cmpvs	r8, r5, ror #26
    18c8:	656c646e 	strbvs	r6, [ip, #-1134]!
    18cc:	6e6f4372 	mcrvs	3, 3, r4, cr15, cr2, {3}
    18d0:	00676966 	rsbeq	r6, r7, r6, ror #18
    18d4:	4349564e 	movtmi	r5, #38478	; 0x964e
    18d8:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    18dc:	4c6d6574 	cfstr64mi	mvdx6, [sp], #-464
    18e0:	6e6f4350 	mcrvs	3, 3, r4, cr15, cr0, {2}
    18e4:	00676966 	rsbeq	r6, r7, r6, ror #18
    18e8:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    18ec:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
    18f0:	5f434956 	svcpl	0x00434956
    18f4:	75727453 	ldrbvc	r7, [r2, #-1107]!
    18f8:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    18fc:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    1900:	00524543 	subseq	r4, r2, r3, asr #10
    1904:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    1908:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    190c:	00797469 	rsbseq	r7, r9, r9, ror #8
    1910:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
    1914:	50534900 	subspl	r4, r3, r0, lsl #18
    1918:	46440052 	undefined
    191c:	48005253 	stmdami	r0, {r0, r1, r4, r6, r9, ip, lr}
    1920:	00525346 	subseq	r5, r2, r6, asr #6
    1924:	4349564e 	movtmi	r5, #38478	; 0x964e
    1928:	5445535f 	strbpl	r5, [r5], #-863
    192c:	4c554146 	ldfmie	f4, [r5], {70}
    1930:	53414d54 	movtpl	r4, #7508	; 0x1d54
    1934:	4641004b 	strbmi	r0, [r1], -fp, asr #32
    1938:	49005253 	stmdbmi	r0, {r0, r1, r4, r6, r9, ip, lr}
    193c:	00524553 	subseq	r4, r2, r3, asr r5
    1940:	4349564e 	movtmi	r5, #38478	; 0x964e
    1944:	7465475f 	strbtvc	r4, [r5], #-1887
    1948:	6c756146 	ldfvse	f6, [r5], #-280
    194c:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
    1950:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    1954:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1958:	00736563 	rsbseq	r6, r3, r3, ror #10
    195c:	32706d74 	rsbscc	r6, r0, #7424	; 0x1d00
    1960:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1964:	65475f43 	strbvs	r5, [r7, #-3907]
    1968:	73795374 	cmnvc	r9, #-805306367	; 0xd0000001
    196c:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1970:	6c646e61 	stclvs	14, cr6, [r4], #-388
    1974:	65507265 	ldrbvs	r7, [r0, #-613]
    1978:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    197c:	74694267 	strbtvc	r4, [r9], #-615
    1980:	74617453 	strbtvc	r7, [r1], #-1107
    1984:	4e007375 	mcrmi	3, 0, r7, cr0, cr5, {3}
    1988:	5f434956 	svcpl	0x00434956
    198c:	61656c43 	cmnvs	r5, r3, asr #24
    1990:	73795372 	cmnvc	r9, #-939524095	; 0xc8000001
    1994:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1998:	6c646e61 	stclvs	14, cr6, [r4], #-388
    199c:	65507265 	ldrbvs	r7, [r0, #-613]
    19a0:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    19a4:	74694267 	strbtvc	r4, [r9], #-615
    19a8:	75616600 	strbvc	r6, [r1, #-1536]!
    19ac:	6f73746c 	svcvs	0x0073746c
    19b0:	65637275 	strbvs	r7, [r3, #-629]!
    19b4:	79530073 	ldmdbvc	r3, {r0, r1, r4, r5, r6}^
    19b8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    19bc:	646e6148 	strbtvs	r6, [lr], #-328
    19c0:	5072656c 	rsbspl	r6, r2, ip, ror #10
    19c4:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!
    19c8:	6f697470 	svcvs	0x00697470
    19cc:	6972506e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, lr}^
    19d0:	7469726f 	strbtvc	r7, [r9], #-623
    19d4:	564e0079 	undefined
    19d8:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    19dc:	52497465 	subpl	r7, r9, #1694498816	; 0x65000000
    19e0:	61684351 	cmnvs	r8, r1, asr r3
    19e4:	6c656e6e 	stclvs	14, cr6, [r5], #-440
    19e8:	646e6550 	strbtvs	r6, [lr], #-1360
    19ec:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    19f0:	74537469 	ldrbvc	r7, [r3], #-1129
    19f4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    19f8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    19fc:	43535f43 	cmpmi	r3, #268	; 0x10c
    1a00:	49654442 	stmdbmi	r5!, {r1, r6, sl, lr}^
    1a04:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1a08:	5077654e 	rsbspl	r6, r7, lr, asr #10
    1a0c:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1a10:	00797469 	rsbseq	r7, r9, r9, ror #8
    1a14:	4349564e 	movtmi	r5, #38478	; 0x964e
    1a18:	6365565f 	cmnvs	r5, #99614720	; 0x5f00000
    1a1c:	62615474 	rsbvs	r5, r1, #1946157056	; 0x74000000
    1a20:	74636100 	strbtvc	r6, [r3], #-256
    1a24:	69657669 	stmdbvs	r5!, {r0, r3, r5, r6, r9, sl, ip, sp, lr}^
    1a28:	74737172 	ldrbtvc	r7, [r3], #-370
    1a2c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1a30:	6e616800 	cdpvs	8, 6, cr6, cr1, cr0, {0}
    1a34:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    1a38:	6b73616d 	blvs	1cd9ff4 <__Stack_Size+0x1cd9bf4>
    1a3c:	776f4c00 	strbvc	r4, [pc, -r0, lsl #24]!
    1a40:	65776f50 	ldrbvs	r6, [r7, #-3920]!
    1a44:	646f4d72 	strbtvs	r4, [pc], #3442	; 1a4c <__Stack_Size+0x164c>
    1a48:	564e0065 	strbpl	r0, [lr], -r5, rrx
    1a4c:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1a50:	52497465 	subpl	r7, r9, #1694498816	; 0x65000000
    1a54:	61684351 	cmnvs	r8, r1, asr r3
    1a58:	6c656e6e 	stclvs	14, cr6, [r5], #-440
    1a5c:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    1a60:	69426576 	stmdbvs	r2, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    1a64:	61745374 	cmnvs	r4, r4, ror r3
    1a68:	00737574 	rsbseq	r7, r3, r4, ror r5
    1a6c:	4349564e 	movtmi	r5, #38478	; 0x964e
    1a70:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1a74:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1a78:	4349564e 	movtmi	r5, #38478	; 0x964e
    1a7c:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
    1a80:	7469726f 	strbtvc	r7, [r9], #-623
    1a84:	6f724779 	svcvs	0x00724779
    1a88:	6f437075 	svcvs	0x00437075
    1a8c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1a90:	6e657000 	cdpvs	0, 6, cr7, cr5, cr0, {0}
    1a94:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1a98:	73717269 	cmnvc	r1, #-1879048186	; 0x90000006
    1a9c:	75746174 	ldrbvc	r6, [r4, #-372]!
    1aa0:	57500073 	undefined
    1aa4:	6e455f52 	mcrvs	15, 2, r5, cr5, cr2, {2}
    1aa8:	53726574 	cmnpl	r2, #486539264	; 0x1d000000
    1aac:	444e4154 	strbmi	r4, [lr], #-340
    1ab0:	6f4d5942 	svcvs	0x004d5942
    1ab4:	50006564 	andpl	r6, r0, r4, ror #10
    1ab8:	435f5257 	cmpmi	pc, #1879048197	; 0x70000005
    1abc:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    1ac0:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1ac4:	52575000 	subspl	r5, r7, #0	; 0x0
    1ac8:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1acc:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1ad0:	5f525750 	svcpl	0x00525750
    1ad4:	75676552 	strbvc	r6, [r7, #-1362]!
    1ad8:	6f74616c 	svcvs	0x0074616c
    1adc:	57500072 	undefined
    1ae0:	56505f52 	usubaddxpl	r5, r0, r2
    1ae4:	76654c44 	strbtvc	r4, [r5], -r4, asr #24
    1ae8:	50006c65 	andpl	r6, r0, r5, ror #24
    1aec:	465f5257 	undefined
    1af0:	0047414c 	subeq	r4, r7, ip, asr #2
    1af4:	5f525750 	svcpl	0x00525750
    1af8:	43445650 	movtmi	r5, #18000	; 0x4650
    1afc:	7300646d 	movwvc	r6, #1133	; 0x46d
    1b00:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1b04:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1b08:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1b0c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1b10:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!
    1b14:	31663233 	cmncc	r6, r3, lsr r2
    1b18:	705f7830 	subsvc	r7, pc, r0, lsr r8
    1b1c:	632e7277 	teqvs	lr, #1879048199	; 0x70000007
    1b20:	52575000 	subspl	r5, r7, #0	; 0x0
    1b24:	4456505f 	ldrbmi	r5, [r6], #-95
    1b28:	6576654c 	ldrbvs	r6, [r6, #-1356]!
    1b2c:	6e6f436c 	cdpvs	3, 6, cr4, cr15, cr12, {3}
    1b30:	00676966 	rsbeq	r6, r7, r6, ror #18
    1b34:	5f525750 	svcpl	0x00525750
    1b38:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1b3c:	5367616c 	cmnpl	r7, #27	; 0x1b
    1b40:	75746174 	ldrbvc	r6, [r4, #-372]!
    1b44:	57500073 	undefined
    1b48:	6e455f52 	mcrvs	15, 2, r5, cr5, cr2, {2}
    1b4c:	53726574 	cmnpl	r2, #486539264	; 0x1d000000
    1b50:	4d504f54 	ldclmi	15, cr4, [r0, #-336]
    1b54:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1b58:	5f525750 	svcpl	0x00525750
    1b5c:	504f5453 	subpl	r5, pc, r3, asr r4
    1b60:	72746e45 	rsbsvc	r6, r4, #1104	; 0x450
    1b64:	57500079 	undefined
    1b68:	61425f52 	cmpvs	r2, r2, asr pc
    1b6c:	70756b63 	rsbsvc	r6, r5, r3, ror #22
    1b70:	65636341 	strbvs	r6, [r3, #-833]!
    1b74:	6d437373 	stclvs	3, cr7, [r3, #-460]
    1b78:	57500064 	ldrbpl	r0, [r0, -r4, rrx]
    1b7c:	61575f52 	cmpvs	r7, r2, asr pc
    1b80:	7055656b 	subsvc	r6, r5, fp, ror #10
    1b84:	436e6950 	cmnmi	lr, #1310720	; 0x140000
    1b88:	4100646d 	tstmi	r0, sp, ror #8
    1b8c:	52314250 	eorspl	r4, r1, #5	; 0x5
    1b90:	00525453 	subseq	r5, r2, r3, asr r4
    1b94:	5f434352 	svcpl	0x00434352
    1b98:	4b4c4348 	blmi	13128c0 <__Stack_Size+0x13124c0>
    1b9c:	43435200 	movtmi	r5, #12800	; 0x3200
    1ba0:	4344415f 	movtmi	r4, #16735	; 0x415f
    1ba4:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    1ba8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1bac:	43520067 	cmpmi	r2, #103	; 0x67
    1bb0:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    1bb4:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1bb8:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    1bbc:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1bc0:	00746942 	rsbseq	r6, r4, r2, asr #18
    1bc4:	5f434352 	svcpl	0x00434352
    1bc8:	32425041 	subcc	r5, r2, #65	; 0x41
    1bcc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1bd0:	65526870 	ldrbvs	r6, [r2, #-2160]
    1bd4:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1bd8:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1bdc:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3
    1be0:	52004553 	andpl	r4, r0, #348127232	; 0x14c00000
    1be4:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    1be8:	54497465 	strbpl	r7, [r9], #-1125
    1bec:	74617453 	strbtvc	r7, [r1], #-1107
    1bf0:	42007375 	andmi	r7, r0, #-738197503	; 0xd4000001
    1bf4:	00524344 	subseq	r4, r2, r4, asr #6
    1bf8:	5f434352 	svcpl	0x00434352
    1bfc:	32425041 	subcc	r5, r2, #65	; 0x41
    1c00:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1c04:	52006870 	andpl	r6, r0, #7340032	; 0x700000
    1c08:	505f4343 	subspl	r4, pc, r3, asr #6
    1c0c:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
    1c10:	43435200 	movtmi	r5, #12800	; 0x3200
    1c14:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1c18:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1c1c:	5f434352 	svcpl	0x00434352
    1c20:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1c24:	7954736b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}^
    1c28:	65446570 	strbvs	r6, [r4, #-1392]
    1c2c:	43520066 	cmpmi	r2, #102	; 0x66
    1c30:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    1c34:	6c754d4c 	ldclvs	13, cr4, [r5], #-304
    1c38:	43435200 	movtmi	r5, #12800	; 0x3200
    1c3c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1c40:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1c44:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    1c48:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    1c4c:	4300646d 	movwmi	r6, #1133	; 0x46d
    1c50:	00524746 	subseq	r4, r2, r6, asr #14
    1c54:	4b4c4348 	blmi	131297c <__Stack_Size+0x131257c>
    1c58:	6572465f 	ldrbvs	r4, [r2, #-1631]!
    1c5c:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    1c60:	41007963 	tstmi	r0, r3, ror #18
    1c64:	45314250 	ldrmi	r4, [r1, #-592]!
    1c68:	7000524e 	andvc	r5, r0, lr, asr #4
    1c6c:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1c70:	43435200 	movtmi	r5, #12800	; 0x3200
    1c74:	4f434d5f 	svcmi	0x00434d5f
    1c78:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1c7c:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1c80:	445f4343 	ldrbmi	r4, [pc], #835	; 1c88 <__Stack_Size+0x1888>
    1c84:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1c88:	43520074 	cmpmi	r2, #116	; 0x74
    1c8c:	61575f43 	cmpvs	r7, r3, asr #30
    1c90:	6f467469 	svcvs	0x00467469
    1c94:	45534872 	ldrbmi	r4, [r3, #-2162]
    1c98:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    1c9c:	00705574 	rsbseq	r5, r0, r4, ror r5
    1ca0:	5f434352 	svcpl	0x00434352
    1ca4:	43435452 	movtmi	r5, #13394	; 0x3452
    1ca8:	6f534b4c 	svcvs	0x00534b4c
    1cac:	65637275 	strbvs	r7, [r3, #-629]!
    1cb0:	43435200 	movtmi	r5, #12800	; 0x3200
    1cb4:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1cb8:	72655031 	rsbvc	r5, r5, #49	; 0x31
    1cbc:	52687069 	rsbpl	r7, r8, #105	; 0x69
    1cc0:	74657365 	strbtvc	r7, [r5], #-869
    1cc4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1cc8:	5f434352 	svcpl	0x00434352
    1ccc:	434c4c50 	movtmi	r4, #52304	; 0xcc50
    1cd0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1cd4:	6c700067 	ldclvs	0, cr0, [r0], #-412
    1cd8:	6c756d6c 	ldclvs	13, cr6, [r5], #-432
    1cdc:	4352006c 	cmpmi	r2, #108	; 0x6c
    1ce0:	53555f43 	cmppl	r5, #268	; 0x10c
    1ce4:	4b4c4342 	blmi	13129f4 <__Stack_Size+0x13125f4>
    1ce8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1cec:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1cf0:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3
    1cf4:	6d434953 	stclvs	9, cr4, [r3, #-332]
    1cf8:	43520064 	cmpmi	r2, #100	; 0x64
    1cfc:	65475f43 	strbvs	r5, [r7, #-3907]
    1d00:	53595374 	cmppl	r9, #-805306367	; 0xd0000001
    1d04:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    1d08:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1d0c:	50410065 	subpl	r0, r1, r5, rrx
    1d10:	53523242 	cmppl	r2, #536870916	; 0x20000004
    1d14:	52005254 	andpl	r5, r0, #1073741829	; 0x40000005
    1d18:	415f4343 	cmpmi	pc, r3, asr #6
    1d1c:	50314250 	eorspl	r4, r1, r0, asr r2
    1d20:	70697265 	rsbvc	r7, r9, r5, ror #4
    1d24:	6c700068 	ldclvs	0, cr0, [r0], #-416
    1d28:	756f736c 	strbvc	r7, [pc, #-876]!	; 19c4 <__Stack_Size+0x15c4>
    1d2c:	00656372 	rsbeq	r6, r5, r2, ror r3
    1d30:	45424841 	strbmi	r4, [r2, #-2113]
    1d34:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
    1d38:	505f4343 	subspl	r4, pc, r3, asr #6
    1d3c:	314b4c43 	cmpcc	fp, r3, asr #24
    1d40:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1d44:	73006769 	movwvc	r6, #1897	; 0x769
    1d48:	75746174 	ldrbvc	r6, [r4, #-372]!
    1d4c:	67657273 	undefined
    1d50:	43435200 	movtmi	r5, #12800	; 0x3200
    1d54:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1d58:	72655031 	rsbvc	r5, r5, #49	; 0x31
    1d5c:	43687069 	cmnmi	r8, #105	; 0x69
    1d60:	6b636f6c 	blvs	18ddb18 <__Stack_Size+0x18dd718>
    1d64:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1d68:	32425041 	subcc	r5, r2, #65	; 0x41
    1d6c:	00524e45 	subseq	r4, r2, r5, asr #28
    1d70:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    1d74:	43705574 	cmnmi	r0, #486539264	; 0x1d000000
    1d78:	746e756f 	strbtvc	r7, [lr], #-1391
    1d7c:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
    1d80:	425f4343 	subsmi	r4, pc, #201326593	; 0xc000001
    1d84:	756b6361 	strbvc	r6, [fp, #-865]!
    1d88:	73655270 	cmnvc	r5, #7	; 0x7
    1d8c:	6d437465 	cfstrdvs	mvd7, [r3, #-404]
    1d90:	43520064 	cmpmi	r2, #100	; 0x64
    1d94:	64415f43 	strbvs	r5, [r1], #-3907
    1d98:	7473756a 	ldrbtvc	r7, [r3], #-1386
    1d9c:	43495348 	movtmi	r5, #37704	; 0x9348
    1da0:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
    1da4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1da8:	61566e6f 	cmpvs	r6, pc, ror #28
    1dac:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1db0:	43434441 	movtmi	r4, #13377	; 0x3441
    1db4:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
    1db8:	75716572 	ldrbvc	r6, [r1, #-1394]!
    1dbc:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1dc0:	43435200 	movtmi	r5, #12800	; 0x3200
    1dc4:	414c465f 	cmpmi	ip, pc, asr r6
    1dc8:	43520047 	cmpmi	r2, #71	; 0x47
    1dcc:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    1dd0:	756f534c 	strbvc	r5, [pc, #-844]!	; 1a8c <__Stack_Size+0x168c>
    1dd4:	00656372 	rsbeq	r6, r5, r2, ror r3
    1dd8:	5f434352 	svcpl	0x00434352
    1ddc:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1de0:	6f434b4c 	svcvs	0x00434b4c
    1de4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1de8:	43435200 	movtmi	r5, #12800	; 0x3200
    1dec:	7465475f 	strbtvc	r4, [r5], #-1887
    1df0:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1df4:	74617453 	strbtvc	r7, [r1], #-1107
    1df8:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
    1dfc:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
    1e00:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
    1e04:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1e08:	00676966 	rsbeq	r6, r7, r6, ror #18
    1e0c:	5f434352 	svcpl	0x00434352
    1e10:	43425355 	movtmi	r5, #9045	; 0x2355
    1e14:	6f534b4c 	svcvs	0x00534b4c
    1e18:	65637275 	strbvs	r7, [r3, #-629]!
    1e1c:	43435200 	movtmi	r5, #12800	; 0x3200
    1e20:	656c435f 	strbvs	r4, [ip, #-863]!
    1e24:	6c467261 	sfmvs	f7, 2, [r6], {97}
    1e28:	52006761 	andpl	r6, r0, #25427968	; 0x1840000
    1e2c:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    1e30:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    1e34:	5348004b 	movtpl	r0, #32843	; 0x804b
    1e38:	61745345 	cmnvs	r4, r5, asr #6
    1e3c:	00737574 	rsbseq	r7, r3, r4, ror r5
    1e40:	5f434352 	svcpl	0x00434352
    1e44:	43455348 	movtmi	r5, #21320	; 0x5348
    1e48:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1e4c:	59530067 	ldmdbpl	r3, {r0, r1, r2, r5, r6}^
    1e50:	4b4c4353 	blmi	1312ba4 <__Stack_Size+0x13127a4>
    1e54:	6572465f 	ldrbvs	r4, [r2, #-1631]!
    1e58:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    1e5c:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
    1e60:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    1e64:	6b636f6c 	blvs	18ddc1c <__Stack_Size+0x18dd81c>
    1e68:	43500073 	cmpmi	r0, #115	; 0x73
    1e6c:	5f324b4c 	svcpl	0x00324b4c
    1e70:	71657246 	cmnvc	r5, r6, asr #4
    1e74:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    1e78:	43520079 	cmpmi	r2, #121	; 0x79
    1e7c:	54495f43 	strbpl	r5, [r9], #-3907
    1e80:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1e84:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1e88:	415f4343 	cmpmi	pc, r3, asr #6
    1e8c:	50324250 	eorspl	r4, r2, r0, asr r2
    1e90:	70697265 	rsbvc	r7, r9, r5, ror #4
    1e94:	6f6c4368 	svcvs	0x006c4368
    1e98:	6d436b63 	vstrvs	d22, [r3, #-396]
    1e9c:	43520064 	cmpmi	r2, #100	; 0x64
    1ea0:	53485f43 	movtpl	r5, #36675	; 0x8f43
    1ea4:	43520045 	cmpmi	r2, #69	; 0x45
    1ea8:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1eac:	4b4c4353 	blmi	1312c00 <__Stack_Size+0x1312800>
    1eb0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1eb4:	50006563 	andpl	r6, r0, r3, ror #10
    1eb8:	314b4c43 	cmpcc	fp, r3, asr #24
    1ebc:	6572465f 	ldrbvs	r4, [r2, #-1631]!
    1ec0:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    1ec4:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
    1ec8:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3
    1ecc:	6f434553 	svcvs	0x00434553
    1ed0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1ed4:	42504100 	subsmi	r4, r0, #0	; 0x0
    1ed8:	50424841 	subpl	r4, r2, r1, asr #16
    1edc:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1ee0:	6c626154 	stfvse	f6, [r2], #-336
    1ee4:	43520065 	cmpmi	r2, #101	; 0x65
    1ee8:	65475f43 	strbvs	r5, [r7, #-3907]
    1eec:	6f6c4374 	svcvs	0x006c4374
    1ef0:	46736b63 	ldrbtmi	r6, [r3], -r3, ror #22
    1ef4:	00716572 	rsbseq	r6, r1, r2, ror r5
    1ef8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1efc:	30316632 	eorscc	r6, r1, r2, lsr r6
    1f00:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1f04:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    1f08:	74732f63 	ldrbtvc	r2, [r3], #-3939
    1f0c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1f10:	5f783031 	svcpl	0x00783031
    1f14:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    1f18:	43520063 	cmpmi	r2, #99	; 0x63
    1f1c:	54525f43 	ldrbpl	r5, [r2], #-3907
    1f20:	4b4c4343 	blmi	1312c34 <__Stack_Size+0x1312834>
    1f24:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1f28:	5f434352 	svcpl	0x00434352
    1f2c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1f30:	6365536b 	cmnvs	r5, #-1409286143	; 0xac000001
    1f34:	74697275 	strbtvc	r7, [r9], #-629
    1f38:	73795379 	cmnvc	r9, #-469762047	; 0xe4000001
    1f3c:	436d6574 	cmnmi	sp, #486539264	; 0x1d000000
    1f40:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1f44:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^
    1f48:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    1f4c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1f50:	43520067 	cmpmi	r2, #103	; 0x67
    1f54:	53485f43 	movtpl	r5, #36675	; 0x8f43
    1f58:	646d4349 	strbtvs	r4, [sp], #-841
    1f5c:	43435200 	movtmi	r5, #12800	; 0x3200
    1f60:	4f434d5f 	svcmi	0x00434d5f
    1f64:	43435200 	movtmi	r5, #12800	; 0x3200
    1f68:	0054495f 	subseq	r4, r4, pc, asr r9
    1f6c:	5f434352 	svcpl	0x00434352
    1f70:	50424841 	subpl	r4, r2, r1, asr #16
    1f74:	70697265 	rsbvc	r7, r9, r5, ror #4
    1f78:	43520068 	cmpmi	r2, #104	; 0x68
    1f7c:	43505f43 	cmpmi	r0, #268	; 0x10c
    1f80:	43324b4c 	teqmi	r2, #77824	; 0x13000
    1f84:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1f88:	44410067 	strbmi	r0, [r1], #-103
    1f8c:	65725043 	ldrbvs	r5, [r2, #-67]!
    1f90:	61546373 	cmpvs	r4, r3, ror r3
    1f94:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1f98:	54737953 	ldrbtpl	r7, [r3], #-2387
    1f9c:	5f6b6369 	svcpl	0x006b6369
    1fa0:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1fa4:	746e756f 	strbtvc	r7, [lr], #-1391
    1fa8:	53007265 	movwpl	r7, #613	; 0x265
    1fac:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1fb0:	535f6b63 	cmppl	pc, #101376	; 0x18c00
    1fb4:	65527465 	ldrbvs	r7, [r2, #-1125]
    1fb8:	64616f6c 	strbtvs	r6, [r1], #-3948
    1fbc:	73795300 	cmnvc	r9, #0	; 0x0
    1fc0:	6b636954 	blvs	18dc518 <__Stack_Size+0x18dc118>
    1fc4:	7465475f 	strbtvc	r4, [r5], #-1887
    1fc8:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1fcc:	74617453 	strbtvc	r7, [r1], #-1107
    1fd0:	53007375 	movwpl	r7, #885	; 0x375
    1fd4:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1fd8:	465f6b63 	ldrbmi	r6, [pc], -r3, ror #22
    1fdc:	0047414c 	subeq	r4, r7, ip, asr #2
    1fe0:	494c4143 	stmdbmi	ip, {r0, r1, r6, r8, lr}^
    1fe4:	74730042 	ldrbtvc	r0, [r3], #-66
    1fe8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1fec:	5f783031 	svcpl	0x00783031
    1ff0:	2f62696c 	svccs	0x0062696c
    1ff4:	2f637273 	svccs	0x00637273
    1ff8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1ffc:	30316632 	eorscc	r6, r1, r2, lsr r6
    2000:	79735f78 	ldmdbvc	r3!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2004:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
    2008:	00632e6b 	rsbeq	r2, r3, fp, ror #28
    200c:	4c525443 	cfldrdmi	mvd5, [r2], {67}
    2010:	73795300 	cmnvc	r9, #0	; 0x0
    2014:	6b636954 	blvs	18dc56c <__Stack_Size+0x18dc16c>
    2018:	756f435f 	strbvc	r4, [pc, #-863]!	; 1cc1 <__Stack_Size+0x18c1>
    201c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2020:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2024:	54737953 	ldrbtpl	r7, [r3], #-2387
    2028:	5f6b6369 	svcpl	0x006b6369
    202c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    2030:	00726574 	rsbseq	r6, r2, r4, ror r5
    2034:	54737953 	ldrbtpl	r7, [r3], #-2387
    2038:	5f6b6369 	svcpl	0x006b6369
    203c:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    2040:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2044:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    2048:	00676966 	rsbeq	r6, r7, r6, ror #18
    204c:	44414f4c 	strbmi	r4, [r1], #-3916
    2050:	73795300 	cmnvc	r9, #0	; 0x0
    2054:	6b636954 	blvs	18dc5ac <__Stack_Size+0x18dc1ac>
    2058:	4b4c435f 	blmi	1312ddc <__Stack_Size+0x13129dc>
    205c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2060:	53006563 	movwpl	r6, #1379	; 0x563
    2064:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    2068:	495f6b63 	ldmdbmi	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    206c:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    2070:	00676966 	rsbeq	r6, r7, r6, ror #18
    2074:	5f4d4954 	svcpl	0x004d4954
    2078:	4634434f 	ldrtmi	r4, [r4], -pc, asr #6
    207c:	43747361 	cmnmi	r4, #-2080374783	; 0x84000001
    2080:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2084:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2088:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    208c:	6c6f5031 	stclvs	0, cr5, [pc], #-196
    2090:	74697261 	strbtvc	r7, [r9], #-609
    2094:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    2098:	00676966 	rsbeq	r6, r7, r6, ror #18
    209c:	5f4d4954 	svcpl	0x004d4954
    20a0:	74534349 	ldrbvc	r4, [r3], #-841
    20a4:	74637572 	strbtvc	r7, [r3], #-1394
    20a8:	74696e49 	strbtvc	r6, [r9], #-3657
    20ac:	4d495400 	cfstrdmi	mvd5, [r9]
    20b0:	34434f5f 	strbcc	r4, [r3], #-3935
    20b4:	6c657250 	sfmvs	f7, 2, [r5], #-320
    20b8:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    20bc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    20c0:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    20c4:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    20c8:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!
    20cc:	65726170 	ldrbvs	r6, [r2, #-368]!
    20d0:	49540031 	ldmdbmi	r4, {r0, r4, r5}^
    20d4:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    20d8:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!
    20dc:	65726170 	ldrbvs	r6, [r2, #-368]!
    20e0:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
    20e4:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    20e8:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!
    20ec:	65726170 	ldrbvs	r6, [r2, #-368]!
    20f0:	49540034 	ldmdbmi	r4, {r2, r4, r5}^
    20f4:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    20f8:	6f504e33 	svcvs	0x00504e33
    20fc:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2100:	6f437974 	svcvs	0x00437974
    2104:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2108:	4d495400 	cfstrdmi	mvd5, [r9]
    210c:	50434f5f 	subpl	r4, r3, pc, asr pc
    2110:	6f6c6572 	svcvs	0x006c6572
    2114:	54006461 	strpl	r6, [r0], #-1121
    2118:	4f5f4d49 	svcmi	0x005f4d49
    211c:	72503343 	subsvc	r3, r0, #201326593	; 0xc000001
    2120:	616f6c65 	cmnvs	pc, r5, ror #24
    2124:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    2128:	00676966 	rsbeq	r6, r7, r6, ror #18
    212c:	5f4d4954 	svcpl	0x004d4954
    2130:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    2134:	5367616c 	cmnpl	r7, #27	; 0x1b
    2138:	75746174 	ldrbvc	r6, [r4, #-372]!
    213c:	49540073 	ldmdbmi	r4, {r0, r1, r4, r5, r6}^
    2140:	6f435f32 	svcvs	0x00435f32
    2144:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2148:	4d495400 	cfstrdmi	mvd5, [r9]
    214c:	46434f5f 	undefined
    2150:	00747361 	rsbseq	r7, r4, r1, ror #6
    2154:	5f4d4954 	svcpl	0x004d4954
    2158:	00444b43 	subeq	r4, r4, r3, asr #22
    215c:	5f4d4954 	svcpl	0x004d4954
    2160:	6e494349 	cdpvs	3, 4, cr4, cr9, cr9, {2}
    2164:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2168:	65446570 	strbvs	r6, [r4, #-1392]
    216c:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    2170:	6e495f4d 	cdpvs	15, 4, cr5, cr9, cr13, {2}
    2174:	54747570 	ldrbtpl	r7, [r4], #-1392
    2178:	67676972 	undefined
    217c:	6f537265 	svcvs	0x00537265
    2180:	65637275 	strbvs	r7, [r3, #-629]!
    2184:	4d495400 	cfstrdmi	mvd5, [r9]
    2188:	414d445f 	cmpmi	sp, pc, asr r4
    218c:	65736142 	ldrbvs	r6, [r3, #-322]!
    2190:	4d495400 	cfstrdmi	mvd5, [r9]
    2194:	7478455f 	ldrbtvc	r4, [r8], #-1375
    2198:	50475254 	subpl	r5, r7, r4, asr r2
    219c:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    21a0:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    21a4:	4d495400 	cfstrdmi	mvd5, [r9]
    21a8:	7843435f 	stmdavc	r3, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    21ac:	646d434e 	strbtvs	r4, [sp], #-846
    21b0:	65746900 	ldrbvs	r6, [r4, #-2304]!
    21b4:	6c62616e 	stfvse	f6, [r2], #-440
    21b8:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    21bc:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    21c0:	65725032 	ldrbvs	r5, [r2, #-50]!
    21c4:	64616f6c 	strbtvs	r6, [r1], #-3948
    21c8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    21cc:	54006769 	strpl	r6, [r0], #-1897
    21d0:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    21d4:	6563726f 	strbvs	r7, [r3, #-623]!
    21d8:	32434f64 	subcc	r4, r3, #400	; 0x190
    21dc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    21e0:	54006769 	strpl	r6, [r0], #-1897
    21e4:	4f5f4d49 	svcmi	0x005f4d49
    21e8:	72745343 	rsbsvc	r5, r4, #201326593	; 0xc000001
    21ec:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    21f0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    21f4:	5f4d4954 	svcpl	0x004d4954
    21f8:	61647055 	qdsubvs	r7, r5, r4
    21fc:	65526574 	ldrbvs	r6, [r2, #-1396]
    2200:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    2204:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    2208:	00676966 	rsbeq	r6, r7, r6, ror #18
    220c:	5f4d4954 	svcpl	0x004d4954
    2210:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    2214:	54007469 	strpl	r7, [r0], #-1129
    2218:	535f4d49 	cmppl	pc, #4672	; 0x1240
    221c:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2220:	44434374 	strbmi	r4, [r3], #-884
    2224:	5400414d 	strpl	r4, [r0], #-333
    2228:	4f5f4d49 	svcmi	0x005f4d49
    222c:	646f4d50 	strbtvs	r4, [pc], #3408	; 2234 <__Stack_Size+0x1e34>
    2230:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2234:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2238:	696e4931 	stmdbvs	lr!, {r0, r4, r5, r8, fp, lr}^
    223c:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2240:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2244:	65725031 	ldrbvs	r5, [r2, #-49]!
    2248:	64616f6c 	strbtvs	r6, [r1], #-3948
    224c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2250:	54006769 	strpl	r6, [r0], #-1897
    2254:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^
    2258:	6f503143 	svcvs	0x00503143
    225c:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2260:	54007974 	strpl	r7, [r0], #-2420
    2264:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    2268:	61437465 	cmpvs	r3, r5, ror #8
    226c:	72757470 	rsbsvc	r7, r5, #1879048192	; 0x70000000
    2270:	74003165 	strvc	r3, [r0], #-357
    2274:	6d73706d 	ldclvs	0, cr7, [r3, #-436]!
    2278:	54007263 	strpl	r7, [r0], #-611
    227c:	4f5f4d49 	svcmi	0x005f4d49
    2280:	61463343 	cmpvs	r6, r3, asr #6
    2284:	6f437473 	svcvs	0x00437473
    2288:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    228c:	4d495400 	cfstrdmi	mvd5, [r9]
    2290:	49540078 	ldmdbmi	r4, {r3, r4, r5, r6}^
    2294:	6f465f4d 	svcvs	0x00465f4d
    2298:	64656372 	strbtvs	r6, [r5], #-882
    229c:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    22a0:	54006e6f 	strpl	r6, [r0], #-3695
    22a4:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^
    22a8:	6f503243 	svcvs	0x00503243
    22ac:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    22b0:	54007974 	strpl	r7, [r0], #-2420
    22b4:	535f4d49 	cmppl	pc, #4672	; 0x1240
    22b8:	43497465 	movtmi	r7, #37989	; 0x9465
    22bc:	65725034 	ldrbvs	r5, [r2, #-52]!
    22c0:	6c616373 	stclvs	3, cr6, [r1], #-460
    22c4:	54007265 	strpl	r7, [r0], #-613
    22c8:	535f4d49 	cmppl	pc, #4672	; 0x1240
    22cc:	6576616c 	ldrbvs	r6, [r6, #-364]!
    22d0:	65646f4d 	strbvs	r6, [r4, #-3917]!
    22d4:	4d495400 	cfstrdmi	mvd5, [r9]
    22d8:	53534f5f 	cmppl	r3, #380	; 0x17c
    22dc:	61745349 	cmnvs	r4, r9, asr #6
    22e0:	74006574 	strvc	r6, [r0], #-1396
    22e4:	7263706d 	rsbvc	r7, r3, #109	; 0x6d
    22e8:	49540031 	ldmdbmi	r4, {r0, r4, r5}^
    22ec:	79545f4d 	ldmdbvc	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    22f0:	65446570 	strbvs	r6, [r4, #-1392]
    22f4:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    22f8:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    22fc:	696e4932 	stmdbvs	lr!, {r1, r4, r5, r8, fp, lr}^
    2300:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2304:	54455f4d 	strbpl	r5, [r5], #-3917
    2308:	6f6c4352 	svcvs	0x006c4352
    230c:	6f4d6b63 	svcvs	0x004d6b63
    2310:	43326564 	teqmi	r2, #419430400	; 0x19000000
    2314:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2318:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    231c:	6f435f31 	svcvs	0x00435f31
    2320:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2324:	4d495400 	cfstrdmi	mvd5, [r9]
    2328:	7465475f 	strbtvc	r4, [r5], #-1887
    232c:	74706143 	ldrbtvc	r6, [r0], #-323
    2330:	32657275 	rsbcc	r7, r5, #1342177287	; 0x50000007
    2334:	4d495400 	cfstrdmi	mvd5, [r9]
    2338:	7465475f 	strbtvc	r4, [r5], #-1887
    233c:	74706143 	ldrbtvc	r6, [r0], #-323
    2340:	33657275 	cmncc	r5, #1342177287	; 0x50000007
    2344:	4d495400 	cfstrdmi	mvd5, [r9]
    2348:	7465475f 	strbtvc	r4, [r5], #-1887
    234c:	74706143 	ldrbtvc	r6, [r0], #-323
    2350:	34657275 	strbtcc	r7, [r5], #-629
    2354:	4d495400 	cfstrdmi	mvd5, [r9]
    2358:	414d445f 	cmpmi	sp, pc, asr r4
    235c:	73727542 	cmnvc	r2, #276824064	; 0x10800000
    2360:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    2364:	00687467 	rsbeq	r7, r8, r7, ror #8
    2368:	5f4d4954 	svcpl	0x004d4954
    236c:	61656c43 	cmnvs	r5, r3, asr #24
    2370:	616c4672 	smcvs	50274
    2374:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2378:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    237c:	4f726165 	svcmi	0x00726165
    2380:	65523443 	ldrbvs	r3, [r2, #-1091]
    2384:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    2388:	54495f4d 	strbpl	r5, [r9], #-3917
    238c:	78457852 	stmdavc	r5, {r1, r4, r6, fp, ip, sp, lr}^
    2390:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2394:	6c436c61 	mcrrvs	12, 6, r6, r3, cr1
    2398:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    239c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    23a0:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    23a4:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    23a8:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    23ac:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    23b0:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    23b4:	00746942 	rsbseq	r6, r4, r2, asr #18
    23b8:	5f4d4954 	svcpl	0x004d4954
    23bc:	43414d44 	movtmi	r4, #7492	; 0x1d44
    23c0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    23c4:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    23c8:	52415f4d 	subpl	r5, r1, #308	; 0x134
    23cc:	65725052 	ldrbvs	r5, [r2, #-82]!
    23d0:	64616f6c 	strbtvs	r6, [r1], #-3948
    23d4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    23d8:	73006769 	movwvc	r6, #1897	; 0x769
    23dc:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    23e0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    23e4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    23e8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    23ec:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!
    23f0:	31663233 	cmncc	r6, r3, lsr r2
    23f4:	745f7830 	ldrbvc	r7, [pc], #2096	; 23fc <__Stack_Size+0x1ffc>
    23f8:	632e6d69 	teqvs	lr, #6720	; 0x1a40
    23fc:	4d495400 	cfstrdmi	mvd5, [r9]
    2400:	5444425f 	strbpl	r4, [r4], #-607
    2404:	696e4952 	stmdbvs	lr!, {r1, r4, r6, r8, fp, lr}^
    2408:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
    240c:	00746375 	rsbseq	r6, r4, r5, ror r3
    2410:	63706d74 	cmnvs	r0, #7424	; 0x1d00
    2414:	00726563 	rsbseq	r6, r2, r3, ror #10
    2418:	5f4d4954 	svcpl	0x004d4954
    241c:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    2420:	6b636f6c 	blvs	18de1d8 <__Stack_Size+0x18dddd8>
    2424:	69766944 	ldmdbvs	r6!, {r2, r6, r8, fp, sp, lr}^
    2428:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
    242c:	4d495400 	cfstrdmi	mvd5, [r9]
    2430:	32434f5f 	subcc	r4, r3, #380	; 0x17c
    2434:	74736146 	ldrbtvc	r6, [r3], #-326
    2438:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    243c:	54006769 	strpl	r6, [r0], #-1897
    2440:	425f4d49 	subsmi	r4, pc, #4672	; 0x1240
    2444:	6b616572 	blvs	185ba14 <__Stack_Size+0x185b614>
    2448:	616c6f50 	cmnvs	ip, r0, asr pc
    244c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2450:	4d495400 	cfstrdmi	mvd5, [r9]
    2454:	6c65535f 	stclvs	3, cr5, [r5], #-380
    2458:	4f746365 	svcmi	0x00746365
    245c:	75707475 	ldrbvc	r7, [r0, #-1141]!
    2460:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    2464:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    2468:	4d495400 	cfstrdmi	mvd5, [r9]
    246c:	6d69545f 	cfstrdvs	mvd5, [r9, #-380]!
    2470:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
    2474:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    2478:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
    247c:	00746375 	rsbseq	r6, r4, r5, ror r3
    2480:	5f4d4954 	svcpl	0x004d4954
    2484:	656c6553 	strbvs	r6, [ip, #-1363]!
    2488:	434f7463 	movtmi	r7, #62563	; 0xf463
    248c:	54004d78 	strpl	r4, [r0], #-3448
    2490:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    2494:	0047414c 	subeq	r4, r7, ip, asr #2
    2498:	5f4d4954 	svcpl	0x004d4954
    249c:	4b434f4c 	blmi	10d61d4 <__Stack_Size+0x10d5dd4>
    24a0:	6576654c 	ldrbvs	r6, [r6, #-1356]!
    24a4:	4954006c 	ldmdbmi	r4, {r2, r3, r5, r6}^
    24a8:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    24ac:	756f4374 	strbvc	r4, [pc, #-884]!	; 2140 <__Stack_Size+0x1d40>
    24b0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    24b4:	4d495400 	cfstrdmi	mvd5, [r9]
    24b8:	414d445f 	cmpmi	sp, pc, asr r4
    24bc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    24c0:	54006563 	strpl	r6, [r0], #-1379
    24c4:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 1783 <__Stack_Size+0x1383>
    24c8:	646f636e 	strbtvs	r6, [pc], #878	; 24d0 <__Stack_Size+0x20d0>
    24cc:	6f4d7265 	svcvs	0x004d7265
    24d0:	54006564 	strpl	r6, [r0], #-1380
    24d4:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^
    24d8:	65725043 	ldrbvs	r5, [r2, #-67]!
    24dc:	6c616373 	stclvs	3, cr6, [r1], #-460
    24e0:	54007265 	strpl	r7, [r0], #-613
    24e4:	4f5f4d49 	svcmi	0x005f4d49
    24e8:	656c4343 	strbvs	r4, [ip, #-835]!
    24ec:	54007261 	strpl	r7, [r0], #-609
    24f0:	505f4d49 	subspl	r4, pc, r9, asr #26
    24f4:	65524353 	ldrbvs	r4, [r2, #-851]
    24f8:	64616f6c 	strbtvs	r6, [r1], #-3948
    24fc:	65646f4d 	strbvs	r6, [r4, #-3917]!
    2500:	4d495400 	cfstrdmi	mvd5, [r9]
    2504:	7843435f 	stmdavc	r3, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2508:	00646d43 	rsbeq	r6, r4, r3, asr #26
    250c:	5f4d4954 	svcpl	0x004d4954
    2510:	50746547 	rsbspl	r6, r4, r7, asr #10
    2514:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2518:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    251c:	74784500 	ldrbtvc	r4, [r8], #-1280
    2520:	46475254 	undefined
    2524:	65746c69 	ldrbvs	r6, [r4, #-3177]!
    2528:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    252c:	44425f4d 	strbmi	r5, [r2], #-3917
    2530:	6e495254 	mcrvs	2, 2, r5, cr9, cr4, {2}
    2534:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2538:	65446570 	strbvs	r6, [r4, #-1392]
    253c:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    2540:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    2544:	7463656c 	strbtvc	r6, [r3], #-1388
    2548:	6c6c6148 	stfvse	f6, [ip], #-288
    254c:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
    2550:	5400726f 	strpl	r7, [r0], #-623
    2554:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    2558:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    255c:	45657461 	strbmi	r7, [r5, #-1121]!
    2560:	746e6576 	strbtvc	r6, [lr], #-1398
    2564:	4d495400 	cfstrdmi	mvd5, [r9]
    2568:	7465535f 	strbtvc	r5, [r5], #-863
    256c:	50324349 	eorspl	r4, r2, r9, asr #6
    2570:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2574:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2578:	4d495400 	cfstrdmi	mvd5, [r9]
    257c:	7843435f 	stmdavc	r3, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2580:	4954004e 	ldmdbmi	r4, {r1, r2, r3, r6}^
    2584:	72425f4d 	subvc	r5, r2, #308	; 0x134
    2588:	006b6165 	rsbeq	r6, fp, r5, ror #2
    258c:	5f4d4954 	svcpl	0x004d4954
    2590:	45784954 	ldrbmi	r4, [r8, #-2388]!
    2594:	72657478 	rsbvc	r7, r5, #2013265920	; 0x78000000
    2598:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    259c:	6f534b4c 	svcvs	0x00534b4c
    25a0:	65637275 	strbvs	r7, [r3, #-629]!
    25a4:	4d495400 	cfstrdmi	mvd5, [r9]
    25a8:	6d69545f 	cfstrdvs	mvd5, [r9, #-380]!
    25ac:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
    25b0:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    25b4:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    25b8:	70555f4d 	subsvc	r5, r5, sp, asr #30
    25bc:	65746164 	ldrbvs	r6, [r4, #-356]!
    25c0:	61736944 	cmnvs	r3, r4, asr #18
    25c4:	43656c62 	cmnmi	r5, #25088	; 0x6200
    25c8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    25cc:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    25d0:	70555f4d 	subsvc	r5, r5, sp, asr #30
    25d4:	65746164 	ldrbvs	r6, [r4, #-356]!
    25d8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    25dc:	54006563 	strpl	r6, [r0], #-1379
    25e0:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^
    25e4:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
    25e8:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
    25ec:	00746375 	rsbseq	r6, r4, r5, ror r3
    25f0:	5f334954 	svcpl	0x00334954
    25f4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    25f8:	54006769 	strpl	r6, [r0], #-1897
    25fc:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 18bb <__Stack_Size+0x14bb>
    2600:	646f636e 	strbtvs	r6, [pc], #878	; 2608 <__Stack_Size+0x2208>
    2604:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
    2608:	66726574 	undefined
    260c:	43656361 	cmnmi	r5, #-2080374783	; 0x84000001
    2610:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2614:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2618:	6f435f4d 	svcvs	0x00435f4d
    261c:	65746e75 	ldrbvs	r6, [r4, #-3701]!
    2620:	646f4d72 	strbtvs	r4, [pc], #3442	; 2628 <__Stack_Size+0x2228>
    2624:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    2628:	00676966 	rsbeq	r6, r7, r6, ror #18
    262c:	5f4d4954 	svcpl	0x004d4954
    2630:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    2634:	61706d6f 	cmnvs	r0, pc, ror #26
    2638:	00336572 	eorseq	r6, r3, r2, ror r5
    263c:	5f4d4954 	svcpl	0x004d4954
    2640:	61656c43 	cmnvs	r5, r3, asr #24
    2644:	33434f72 	movtcc	r4, #16242	; 0x3f72
    2648:	00666552 	rsbeq	r6, r6, r2, asr r5
    264c:	5f4d4954 	svcpl	0x004d4954
    2650:	4934434f 	ldmdbmi	r4!, {r0, r1, r2, r3, r6, r8, r9, lr}
    2654:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2658:	5f4d4954 	svcpl	0x004d4954
    265c:	63726f46 	cmnvs	r2, #280	; 0x118
    2660:	434f6465 	movtmi	r6, #62565	; 0xf465
    2664:	6e6f4334 	mcrvs	3, 3, r4, cr15, cr4, {1}
    2668:	00676966 	rsbeq	r6, r7, r6, ror #18
    266c:	5f4d4954 	svcpl	0x004d4954
    2670:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2674:	746e756f 	strbtvc	r7, [lr], #-1391
    2678:	54007265 	strpl	r7, [r0], #-613
    267c:	4f5f4d49 	svcmi	0x005f4d49
    2680:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
    2684:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
    2688:	00746375 	rsbseq	r6, r4, r5, ror r3
    268c:	5f4d4954 	svcpl	0x004d4954
    2690:	656c6553 	strbvs	r6, [ip, #-1363]!
    2694:	6c537463 	cfldrdvs	mvd7, [r3], {99}
    2698:	4d657661 	stclmi	6, cr7, [r5, #-388]!
    269c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    26a0:	5f4d4954 	svcpl	0x004d4954
    26a4:	4631434f 	ldrtmi	r4, [r1], -pc, asr #6
    26a8:	43747361 	cmnmi	r4, #-2080374783	; 0x84000001
    26ac:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    26b0:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    26b4:	54455f4d 	strbpl	r5, [r5], #-3917
    26b8:	6e6f4352 	mcrvs	3, 3, r4, cr15, cr2, {2}
    26bc:	00676966 	rsbeq	r6, r7, r6, ror #18
    26c0:	5f4d4954 	svcpl	0x004d4954
    26c4:	4e31434f 	cdpmi	3, 3, cr4, cr1, cr15, {2}
    26c8:	616c6f50 	cmnvs	ip, r0, asr pc
    26cc:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    26d0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    26d4:	54006769 	strpl	r6, [r0], #-1897
    26d8:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^
    26dc:	43535043 	cmpmi	r3, #67	; 0x43
    26e0:	4d495400 	cfstrdmi	mvd5, [r9]
    26e4:	6576455f 	ldrbvs	r4, [r6, #-1375]!
    26e8:	6f53746e 	svcvs	0x0053746e
    26ec:	65637275 	strbvs	r7, [r3, #-629]!
    26f0:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    26f4:	726d6363 	rsbvc	r6, sp, #-1946157055	; 0x8c000001
    26f8:	6d740031 	ldclvs	0, cr0, [r4, #-196]!
    26fc:	6d636370 	stclvs	3, cr6, [r3, #-448]!
    2700:	54003272 	strpl	r3, [r0], #-626
    2704:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2708:	6e6e6168 	powvsez	f6, f6, #0.0
    270c:	54006c65 	strpl	r6, [r0], #-3173
    2710:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2714:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2718:	4d4f4374 	stclmi	3, cr4, [pc, #-464]
    271c:	4d495400 	cfstrdmi	mvd5, [r9]
    2720:	5043435f 	subpl	r4, r3, pc, asr r3
    2724:	6f6c6572 	svcvs	0x006c6572
    2728:	6f436461 	svcvs	0x00436461
    272c:	6f72746e 	svcvs	0x0072746e
    2730:	6369006c 	cmnvs	r9, #108	; 0x6c
    2734:	6f70706f 	svcvs	0x0070706f
    2738:	65746973 	ldrbvs	r6, [r4, #-2419]!
    273c:	656c6573 	strbvs	r6, [ip, #-1395]!
    2740:	6f697463 	svcvs	0x00697463
    2744:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    2748:	6e495f4d 	cdpvs	15, 4, cr5, cr9, cr13, {2}
    274c:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2750:	6c436c61 	mcrrvs	12, 6, r6, r3, cr1
    2754:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    2758:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    275c:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2760:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    2764:	31434974 	cmpcc	r3, r4, ror r9
    2768:	73657250 	cmnvc	r5, #5	; 0x5
    276c:	656c6163 	strbvs	r6, [ip, #-355]!
    2770:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    2774:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
    2778:	49540078 	ldmdbmi	r4, {r3, r4, r5, r6}^
    277c:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    2780:	33434974 	movtcc	r4, #14708	; 0x3974
    2784:	73657250 	cmnvc	r5, #5	; 0x5
    2788:	656c6163 	strbvs	r6, [ip, #-355]!
    278c:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    2790:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2794:	656c6553 	strbvs	r6, [ip, #-1363]!
    2798:	6f697463 	svcvs	0x00697463
    279c:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    27a0:	54455f4d 	strbpl	r5, [r5], #-3917
    27a4:	6f6c4352 	svcvs	0x006c4352
    27a8:	6f4d6b63 	svcvs	0x004d6b63
    27ac:	43316564 	teqmi	r1, #419430400	; 0x19000000
    27b0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    27b4:	6d740067 	ldclvs	0, cr0, [r4, #-412]!
    27b8:	6d636370 	stclvs	3, cr6, [r3, #-448]!
    27bc:	54007872 	strpl	r7, [r0], #-2162
    27c0:	535f4d49 	cmppl	pc, #4672	; 0x1240
    27c4:	63656c65 	cmnvs	r5, #25856	; 0x6500
    27c8:	656e4f74 	strbvs	r4, [lr, #-3956]!
    27cc:	736c7550 	cmnvc	ip, #335544320	; 0x14000000
    27d0:	646f4d65 	strbtvs	r4, [pc], #3429	; 27d8 <__Stack_Size+0x23d8>
    27d4:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    27d8:	52545f4d 	subspl	r5, r4, #308	; 0x134
    27dc:	6f534f47 	svcvs	0x00534f47
    27e0:	65637275 	strbvs	r7, [r3, #-629]!
    27e4:	4d495400 	cfstrdmi	mvd5, [r9]
    27e8:	53534f5f 	cmppl	r3, #380	; 0x17c
    27ec:	61745352 	cmnvs	r4, r2, asr r3
    27f0:	54006574 	strpl	r6, [r0], #-1396
    27f4:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^
    27f8:	6c6f5043 	stclvs	0, cr5, [pc], #-268
    27fc:	74697261 	strbtvc	r7, [r9], #-609
    2800:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    2804:	74435f4d 	strbvc	r5, [r3], #-3917
    2808:	57506c72 	undefined
    280c:	74754f4d 	ldrbtvc	r4, [r5], #-3917
    2810:	73747570 	cmnvc	r4, #469762048	; 0x1c000000
    2814:	6f636900 	svcvs	0x00636900
    2818:	736f7070 	cmnvc	pc, #112	; 0x70
    281c:	70657469 	rsbvc	r7, r5, r9, ror #8
    2820:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2824:	00797469 	rsbseq	r7, r9, r9, ror #8
    2828:	5f4d4954 	svcpl	0x004d4954
    282c:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    2830:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2834:	54006769 	strpl	r6, [r0], #-1897
    2838:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    283c:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    2840:	5232434f 	eorspl	r4, r2, #1006632961	; 0x3c000001
    2844:	54006665 	strpl	r6, [r0], #-1637
    2848:	545f4d49 	ldrbpl	r4, [pc], #3401	; 2850 <__Stack_Size+0x2450>
    284c:	78457849 	stmdavc	r5, {r0, r3, r6, fp, ip, sp, lr}^
    2850:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    2854:	6c436c61 	mcrrvs	12, 6, r6, r3, cr1
    2858:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    285c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2860:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2864:	614d5f4d 	cmpvs	sp, sp, asr #30
    2868:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    286c:	76616c53 	undefined
    2870:	646f4d65 	strbtvs	r4, [pc], #3429	; 2878 <__Stack_Size+0x2478>
    2874:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    2878:	75415f4d 	strbvc	r5, [r1, #-3917]
    287c:	616d6f74 	smcvs	55028
    2880:	4f636974 	svcmi	0x00636974
    2884:	75707475 	ldrbvc	r7, [r0, #-1141]!
    2888:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    288c:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    2890:	74754174 	ldrbtvc	r4, [r5], #-372
    2894:	6c65726f 	sfmvs	f7, 2, [r5], #-444
    2898:	0064616f 	rsbeq	r6, r4, pc, ror #2
    289c:	5f4d4954 	svcpl	0x004d4954
    28a0:	43414d44 	movtmi	r4, #7492	; 0x1d44
    28a4:	5400646d 	strpl	r6, [r0], #-1133
    28a8:	545f4d49 	ldrbpl	r4, [pc], #3401	; 28b0 <__Stack_Size+0x24b0>
    28ac:	42656d69 	rsbmi	r6, r5, #6720	; 0x1a40
    28b0:	53657361 	cmnpl	r5, #-2080374783	; 0x84000001
    28b4:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    28b8:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    28bc:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    28c0:	54495f4d 	strbpl	r5, [r9], #-3917
    28c4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    28c8:	54006769 	strpl	r6, [r0], #-1897
    28cc:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    28d0:	6563726f 	strbvs	r7, [r3, #-623]!
    28d4:	31434f64 	cmpcc	r3, r4, ror #30
    28d8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    28dc:	54006769 	strpl	r6, [r0], #-1897
    28e0:	435f3449 	cmpmi	pc, #1224736768	; 0x49000000
    28e4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    28e8:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    28ec:	65445f4d 	strbvs	r5, [r4, #-3917]
    28f0:	69546461 	ldmdbvs	r4, {r0, r5, r6, sl, sp, lr}^
    28f4:	5400656d 	strpl	r6, [r0], #-1389
    28f8:	4f5f4d49 	svcmi	0x005f4d49
    28fc:	6e493343 	cdpvs	3, 4, cr3, cr9, cr3, {2}
    2900:	54007469 	strpl	r7, [r0], #-1129
    2904:	4f5f4d49 	svcmi	0x005f4d49
    2908:	504e3243 	subpl	r3, lr, r3, asr #4
    290c:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2910:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    2914:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2918:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    291c:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2920:	6c6f5034 	stclvs	0, cr5, [pc], #-208
    2924:	74697261 	strbtvc	r7, [r9], #-609
    2928:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    292c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2930:	5f4d4954 	svcpl	0x004d4954
    2934:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    2938:	75727453 	ldrbvc	r7, [r2, #-1107]!
    293c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    2940:	54007469 	strpl	r7, [r0], #-1129
    2944:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2948:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    294c:	5231434f 	eorspl	r4, r1, #1006632961	; 0x3c000001
    2950:	54006665 	strpl	r6, [r0], #-1637
    2954:	4f5f4d49 	svcmi	0x005f4d49
    2958:	6f503343 	svcvs	0x00503343
    295c:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2960:	6f437974 	svcvs	0x00437974
    2964:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2968:	4d495400 	cfstrdmi	mvd5, [r9]
    296c:	7478455f 	ldrbtvc	r4, [r8], #-1375
    2970:	50475254 	subpl	r5, r7, r4, asr r2
    2974:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2978:	00797469 	rsbseq	r7, r9, r9, ror #8
    297c:	5f4d4954 	svcpl	0x004d4954
    2980:	494d5750 	stmdbmi	sp, {r4, r6, r8, r9, sl, ip, lr}^
    2984:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2988:	54006769 	strpl	r6, [r0], #-1897
    298c:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    2990:	54497465 	strbpl	r7, [r9], #-1125
    2994:	74617453 	strbtvc	r7, [r1], #-1107
    2998:	74007375 	strvc	r7, [r0], #-885
    299c:	7263706d 	rsbvc	r7, r3, #109	; 0x6d
    29a0:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
    29a4:	54495f4d 	strbpl	r5, [r9], #-3917
    29a8:	4d495400 	cfstrdmi	mvd5, [r9]
    29ac:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    29b0:	4f646563 	svcmi	0x00646563
    29b4:	6f433343 	svcvs	0x00433343
    29b8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    29bc:	4d495400 	cfstrdmi	mvd5, [r9]
    29c0:	646d435f 	strbtvs	r4, [sp], #-863
    29c4:	4d495400 	cfstrdmi	mvd5, [r9]
    29c8:	4943495f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    29cc:	0074696e 	rsbseq	r6, r4, lr, ror #18
    29d0:	5f4d4954 	svcpl	0x004d4954
    29d4:	69464349 	stmdbvs	r6, {r0, r3, r6, r8, r9, lr}^
    29d8:	7265746c 	rsbvc	r7, r5, #1811939328	; 0x6c000000
    29dc:	4d495400 	cfstrdmi	mvd5, [r9]
    29e0:	6c65535f 	stclvs	3, cr5, [r5], #-380
    29e4:	4d746365 	ldclmi	3, cr6, [r4, #-404]!
    29e8:	65747361 	ldrbvs	r7, [r4, #-865]!
    29ec:	616c5372 	smcvs	50482
    29f0:	6f4d6576 	svcvs	0x004d6576
    29f4:	54006564 	strpl	r6, [r0], #-1380
    29f8:	535f4d49 	cmppl	pc, #4672	; 0x1240
    29fc:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2a00:	706e4974 	rsbvc	r4, lr, r4, ror r9
    2a04:	72547475 	subsvc	r7, r4, #1962934272	; 0x75000000
    2a08:	65676769 	strbvs	r6, [r7, #-1897]!
    2a0c:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    2a10:	72505f4d 	subsvc	r5, r0, #308	; 0x134
    2a14:	61637365 	cmnvs	r3, r5, ror #6
    2a18:	4372656c 	cmnmi	r2, #452984832	; 0x1b000000
    2a1c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2a20:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2a24:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2a28:	6c6f5032 	stclvs	0, cr5, [pc], #-200
    2a2c:	74697261 	strbtvc	r7, [r9], #-609
    2a30:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    2a34:	00676966 	rsbeq	r6, r7, r6, ror #18
    2a38:	65746e69 	ldrbvs	r6, [r4, #-3689]!
    2a3c:	64726567 	ldrbtvs	r6, [r2], #-1383
    2a40:	64697669 	strbtvs	r7, [r9], #-1641
    2a44:	55007265 	strpl	r7, [r0, #-613]
    2a48:	54524153 	ldrbpl	r4, [r2], #-339
    2a4c:	4850435f 	ldmdami	r0, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2a50:	53550041 	cmppl	r5, #65	; 0x41
    2a54:	5f545241 	svcpl	0x00545241
    2a58:	50746553 	rsbspl	r6, r4, r3, asr r5
    2a5c:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2a60:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2a64:	41535500 	cmpmi	r3, r0, lsl #10
    2a68:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^
    2a6c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2a70:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2a74:	494c5f54 	stmdbmi	ip, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    2a78:	6572424e 	ldrbvs	r4, [r2, #-590]!
    2a7c:	65446b61 	strbvs	r6, [r4, #-2913]
    2a80:	74636574 	strbtvc	r6, [r3], #-1396
    2a84:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    2a88:	55006874 	strpl	r6, [r0, #-2164]
    2a8c:	54524153 	ldrbpl	r4, [r2], #-339
    2a90:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    2a94:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    2a98:	41535500 	cmpmi	r3, r0, lsl #10
    2a9c:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2aa0:	6b636f6c 	blvs	18de858 <__Stack_Size+0x18de458>
    2aa4:	74696e49 	strbtvc	r6, [r9], #-3657
    2aa8:	65707954 	ldrbvs	r7, [r0, #-2388]!
    2aac:	00666544 	rsbeq	r6, r6, r4, asr #10
    2ab0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2ab4:	6d435f54 	stclvs	15, cr5, [r3, #-336]
    2ab8:	53550064 	cmppl	r5, #100	; 0x64
    2abc:	5f545241 	svcpl	0x00545241
    2ac0:	646e6553 	strbtvs	r6, [lr], #-1363
    2ac4:	61746144 	cmnvs	r4, r4, asr #2
    2ac8:	41535500 	cmpmi	r3, r0, lsl #10
    2acc:	485f5452 	ldmdami	pc, {r1, r4, r6, sl, ip, lr}^
    2ad0:	44666c61 	strbtmi	r6, [r6], #-3169
    2ad4:	656c7075 	strbvs	r7, [ip, #-117]!
    2ad8:	646d4378 	strbtvs	r4, [sp], #-888
    2adc:	41535500 	cmpmi	r3, r0, lsl #10
    2ae0:	575f5452 	undefined
    2ae4:	55656b61 	strbpl	r6, [r5, #-2913]!
    2ae8:	53550070 	cmppl	r5, #112	; 0x70
    2aec:	5f545241 	svcpl	0x00545241
    2af0:	43414d44 	movtmi	r4, #7492	; 0x1d44
    2af4:	5500646d 	strpl	r6, [r0, #-1133]
    2af8:	54524153 	ldrbpl	r4, [r2], #-339
    2afc:	73614c5f 	cmnvc	r1, #24320	; 0x5f00
    2b00:	74694274 	strbtvc	r4, [r9], #-628
    2b04:	41535500 	cmpmi	r3, r0, lsl #10
    2b08:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^
    2b0c:	4d414472 	cfstrdmi	mvd4, [r1, #-456]
    2b10:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2b14:	63627061 	cmnvs	r2, #97	; 0x61
    2b18:	6b636f6c 	blvs	18de8d0 <__Stack_Size+0x18de4d0>
    2b1c:	41535500 	cmpmi	r3, r0, lsl #10
    2b20:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2b24:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    2b28:	65505449 	ldrbvs	r5, [r0, #-1097]
    2b2c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    2b30:	74694267 	strbtvc	r4, [r9], #-615
    2b34:	41535500 	cmpmi	r3, r0, lsl #10
    2b38:	475f5452 	undefined
    2b3c:	64726175 	ldrbtvs	r6, [r2], #-373
    2b40:	656d6954 	strbvs	r6, [sp, #-2388]!
    2b44:	41535500 	cmpmi	r3, r0, lsl #10
    2b48:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}
    2b4c:	72424e49 	subvc	r4, r2, #1168	; 0x490
    2b50:	446b6165 	strbtmi	r6, [fp], #-357
    2b54:	63657465 	cmnvs	r5, #1694498816	; 0x65000000
    2b58:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    2b5c:	43687467 	cmnmi	r8, #1728053248	; 0x67000000
    2b60:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2b64:	53550067 	cmppl	r5, #103	; 0x67
    2b68:	5f545241 	svcpl	0x00545241
    2b6c:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    2b70:	41535500 	cmpmi	r3, r0, lsl #10
    2b74:	445f5452 	ldrbmi	r5, [pc], #1106	; 2b7c <__Stack_Size+0x277c>
    2b78:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    2b7c:	53550074 	cmppl	r5, #116	; 0x74
    2b80:	5f545241 	svcpl	0x00545241
    2b84:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2b88:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    2b8c:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
    2b90:	00746375 	rsbseq	r6, r4, r5, ror r3
    2b94:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2b98:	4d445f54 	stclmi	15, cr5, [r4, #-336]
    2b9c:	71655241 	cmnvc	r5, r1, asr #4
    2ba0:	41535500 	cmpmi	r3, r0, lsl #10
    2ba4:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2ba8:	6b636f6c 	blvs	18de960 <__Stack_Size+0x18de560>
    2bac:	75727453 	ldrbvc	r7, [r2, #-1107]!
    2bb0:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    2bb4:	75007469 	strvc	r7, [r0, #-1129]
    2bb8:	74726173 	ldrbtvc	r6, [r2], #-371
    2bbc:	73616278 	cmnvc	r1, #-2147483641	; 0x80000007
    2bc0:	43520065 	cmpmi	r2, #101	; 0x65
    2bc4:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    2bc8:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    2bcc:	74617453 	strbtvc	r7, [r1], #-1107
    2bd0:	55007375 	strpl	r7, [r0, #-885]
    2bd4:	54524153 	ldrbpl	r4, [r2], #-339
    2bd8:	7465535f 	strbtvc	r5, [r5], #-863
    2bdc:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    2be0:	00737365 	rsbseq	r7, r3, r5, ror #6
    2be4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2be8:	65535f54 	ldrbvs	r5, [r3, #-3924]
    2bec:	61754774 	cmnvs	r5, r4, ror r7
    2bf0:	69546472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, sp, lr}^
    2bf4:	5500656d 	strpl	r6, [r0, #-1389]
    2bf8:	54524153 	ldrbpl	r4, [r2], #-339
    2bfc:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    2c00:	65724264 	ldrbvs	r4, [r2, #-612]!
    2c04:	55006b61 	strpl	r6, [r0, #-2913]
    2c08:	54524153 	ldrbpl	r4, [r2], #-339
    2c0c:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    2c10:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2c14:	53550067 	cmppl	r5, #103	; 0x67
    2c18:	78545241 	ldmdavc	r4, {r0, r6, r9, ip, lr}^
    2c1c:	41535500 	cmpmi	r3, r0, lsl #10
    2c20:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2c24:	7472616d 	ldrbtvc	r6, [r2], #-365
    2c28:	64726143 	ldrbtvs	r6, [r2], #-323
    2c2c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2c30:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2c34:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    2c38:	74537469 	ldrbvc	r7, [r3], #-1129
    2c3c:	74637572 	strbtvc	r7, [r3], #-1394
    2c40:	41535500 	cmpmi	r3, r0, lsl #10
    2c44:	415f5452 	cmpmi	pc, r2, asr r4
    2c48:	65726464 	ldrbvs	r6, [r2, #-1124]!
    2c4c:	62007373 	andvs	r7, r0, #-872415231	; 0xcc000001
    2c50:	6f707469 	svcvs	0x00707469
    2c54:	53550073 	cmppl	r5, #115	; 0x73
    2c58:	5f545241 	svcpl	0x00545241
    2c5c:	61656c43 	cmnvs	r5, r3, asr #24
    2c60:	616c4672 	smcvs	50274
    2c64:	53550067 	cmppl	r5, #103	; 0x67
    2c68:	5f545241 	svcpl	0x00545241
    2c6c:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    2c70:	61745354 	cmnvs	r4, r4, asr r3
    2c74:	00737574 	rsbseq	r7, r3, r4, ror r5
    2c78:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2c7c:	72495f54 	subvc	r5, r9, #336	; 0x150
    2c80:	6f434144 	svcvs	0x00434144
    2c84:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2c88:	41535500 	cmpmi	r3, r0, lsl #10
    2c8c:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2c90:	6b636f6c 	blvs	18dea48 <__Stack_Size+0x18de648>
    2c94:	41535500 	cmpmi	r3, r0, lsl #10
    2c98:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
    2c9c:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2ca0:	57726576 	undefined
    2ca4:	55656b61 	strbpl	r6, [r5, #-2913]!
    2ca8:	646d4370 	strbtvs	r4, [sp], #-880
    2cac:	41535500 	cmpmi	r3, r0, lsl #10
    2cb0:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^
    2cb4:	43414472 	movtmi	r4, #5234	; 0x1472
    2cb8:	5500646d 	strpl	r6, [r0, #-1133]
    2cbc:	54524153 	ldrbpl	r4, [r2], #-339
    2cc0:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    2cc4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2cc8:	63617266 	cmnvs	r1, #1610612742	; 0x60000006
    2ccc:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    2cd0:	69646c61 	stmdbvs	r4!, {r0, r5, r6, sl, fp, sp, lr}^
    2cd4:	65646976 	strbvs	r6, [r4, #-2422]!
    2cd8:	53550072 	cmppl	r5, #114	; 0x72
    2cdc:	5f545241 	svcpl	0x00545241
    2ce0:	72616d53 	rsbvc	r6, r1, #5312	; 0x14c0
    2ce4:	72614374 	rsbvc	r4, r1, #-805306367	; 0xd0000001
    2ce8:	43414e64 	movtmi	r4, #7780	; 0x1e64
    2cec:	646d434b 	strbtvs	r4, [sp], #-843
    2cf0:	41535500 	cmpmi	r3, r0, lsl #10
    2cf4:	475f5452 	undefined
    2cf8:	6c467465 	cfstrdvs	mvd7, [r6], {101}
    2cfc:	74536761 	ldrbvc	r6, [r3], #-1889
    2d00:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2d04:	41535500 	cmpmi	r3, r0, lsl #10
    2d08:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^
    2d0c:	53550054 	cmppl	r5, #84	; 0x54
    2d10:	5f545241 	svcpl	0x00545241
    2d14:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2d18:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    2d1c:	53550074 	cmppl	r5, #116	; 0x74
    2d20:	5f545241 	svcpl	0x00545241
    2d24:	656b6157 	strbvs	r6, [fp, #-343]!
    2d28:	6f437055 	svcvs	0x00437055
    2d2c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2d30:	41535500 	cmpmi	r3, r0, lsl #10
    2d34:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
    2d38:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2d3c:	61446576 	cmpvs	r4, r6, ror r5
    2d40:	55006174 	strpl	r6, [r0, #-372]
    2d44:	54524153 	ldrbpl	r4, [r2], #-339
    2d48:	6572505f 	ldrbvs	r5, [r2, #-95]!
    2d4c:	6c616373 	stclvs	3, cr6, [r1], #-460
    2d50:	55007265 	strpl	r7, [r0, #-613]
    2d54:	54524153 	ldrbpl	r4, [r2], #-339
    2d58:	4f50435f 	svcmi	0x0050435f
    2d5c:	7469004c 	strbtvc	r0, [r9], #-76
    2d60:	6b73616d 	blvs	1cdb31c <__Stack_Size+0x1cdaf1c>
    2d64:	6d747300 	ldclvs	3, cr7, [r4]
    2d68:	31663233 	cmncc	r6, r3, lsr r2
    2d6c:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    2d70:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    2d74:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    2d78:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    2d7c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2d80:	6173755f 	cmnvs	r3, pc, asr r5
    2d84:	632e7472 	teqvs	lr, #1912602624	; 0x72000000
    2d88:	61737500 	cmnvs	r3, r0, lsl #10
    2d8c:	65727472 	ldrbvs	r7, [r2, #-1138]!
    2d90:	53550067 	cmppl	r5, #103	; 0x67
    2d94:	5f545241 	svcpl	0x00545241
    2d98:	75727453 	ldrbvc	r7, [r2, #-1107]!
    2d9c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    2da0:	5f007469 	svcpl	0x00007469
    2da4:	61747365 	cmnvs	r4, r5, ror #6
    2da8:	5f006b63 	svcpl	0x00006b63
    2dac:	74616473 	strbtvc	r6, [r1], #-1139
    2db0:	65520061 	ldrbvs	r0, [r2, #-97]
    2db4:	5f746573 	svcpl	0x00746573
    2db8:	646e6148 	strbtvs	r6, [lr], #-328
    2dbc:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2dc0:	446c7570 	strbtmi	r7, [ip], #-1392
    2dc4:	00747365 	rsbseq	r7, r4, r5, ror #6
    2dc8:	6469735f 	strbtvs	r7, [r9], #-863
    2dcc:	00617461 	rsbeq	r7, r1, r1, ror #8
    2dd0:	7362655f 	cmnvc	r2, #398458880	; 0x17c00000
    2dd4:	655f0073 	ldrbvs	r0, [pc, #-115]	; 2d69 <__Stack_Size+0x2969>
    2dd8:	61746164 	cmnvs	r4, r4, ror #2
    2ddc:	6d747300 	ldclvs	3, cr7, [r4]
    2de0:	31663233 	cmncc	r6, r3, lsr r2
    2de4:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    2de8:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    2dec:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    2df0:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    2df4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2df8:	6365765f 	cmnvs	r5, #99614720	; 0x5f00000
    2dfc:	2e726f74 	mrccs	15, 3, r6, cr2, cr4, {3}
    2e00:	5f670063 	svcpl	0x00670063
    2e04:	566e6670 	undefined
    2e08:	6f746365 	svcvs	0x00746365
    2e0c:	70007372 	andvc	r7, r0, r2, ror r3
    2e10:	72536c75 	subsvc	r6, r3, #29952	; 0x7500
    2e14:	735f0063 	cmpvc	pc, #99	; 0x63
    2e18:	00737362 	rsbseq	r7, r3, r2, ror #6
    2e1c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
    2e20:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
    2e24:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
    2e28:	3a630074 	bcc	18c3000 <__Stack_Size+0x18c2c00>
    2e2c:	6e69775c 	mcrvs	7, 3, r7, cr9, cr12, {2}
    2e30:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    2e34:	6975625c 	ldmdbvs	r5!, {r2, r3, r4, r6, r9, sp, lr}^
    2e38:	675c646c 	ldrbvs	r6, [ip, -ip, ror #8]
    2e3c:	622d6363 	eorvs	r6, sp, #-1946157055	; 0x8c000001
    2e40:	646c6975 	strbtvs	r6, [ip], #-2421
    2e44:	6d72615c 	ldfvse	f6, [r2, #-368]!
    2e48:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    2e4c:	656e5c69 	strbvs	r5, [lr, #-3177]!
    2e50:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2e54:	62696c5c 	rsbvs	r6, r9, #23552	; 0x5c00
    2e58:	74735c63 	ldrbtvc	r5, [r3], #-3171
    2e5c:	62696c64 	rsbvs	r6, r9, #25600	; 0x6400
    2e60:	2f2e2e00 	svccs	0x002e2e00
    2e64:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2e68:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2e6c:	2f2e2e2f 	svccs	0x002e2e2f
    2e70:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    2e74:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    2e78:	656e2f30 	strbvs	r2, [lr, #-3888]!
    2e7c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2e80:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    2e84:	74732f63 	ldrbtvc	r2, [r3], #-3939
    2e88:	62696c64 	rsbvs	r6, r9, #25600	; 0x6400
    2e8c:	6574612f 	ldrbvs	r6, [r4, #-303]!
    2e90:	2e746978 	mrccs	9, 3, r6, cr4, cr8, {3}
    2e94:	6f6c0063 	svcvs	0x006c0063
    2e98:	6c20676e 	stcvs	7, cr6, [r0], #-440
    2e9c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
    2ea0:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
    2ea4:	64656e67 	strbtvs	r6, [r5], #-3687
    2ea8:	746e6920 	strbtvc	r6, [lr], #-2336
    2eac:	655f5f00 	ldrbvs	r5, [pc, #-3840]	; 1fb4 <__Stack_Size+0x1bb4>
    2eb0:	78635f74 	stmdavc	r3!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2eb4:	5f5f0061 	svcpl	0x005f0061
    2eb8:	6f5f7465 	svcvs	0x005f7465
    2ebc:	6978656e 	ldmdbvs	r8!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
    2ec0:	5f5f0074 	svcpl	0x005f0074
    2ec4:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    2ec8:	745f7469 	ldrbvc	r7, [pc], #1129	; 2ed0 <__Stack_Size+0x2ad0>
    2ecc:	73657079 	cmnvc	r5, #121	; 0x79
    2ed0:	655f5f00 	ldrbvs	r5, [pc, #-3840]	; 1fd8 <__Stack_Size+0x1bd8>
    2ed4:	74615f74 	strbtvc	r5, [r1], #-3956
    2ed8:	74697865 	strbtvc	r7, [r9], #-2149
    2edc:	73645f00 	cmnvc	r4, #0	; 0x0
    2ee0:	61685f6f 	cmnvs	r8, pc, ror #30
    2ee4:	656c646e 	strbvs	r6, [ip, #-1134]!
    2ee8:	2f2e2e00 	svccs	0x002e2e00
    2eec:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2ef0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2ef4:	2f2e2e2f 	svccs	0x002e2e2f
    2ef8:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    2efc:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    2f00:	656e2f30 	strbvs	r2, [lr, #-3888]!
    2f04:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2f08:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    2f0c:	74732f63 	ldrbtvc	r2, [r3], #-3939
    2f10:	62696c64 	rsbvs	r6, r9, #25600	; 0x6400
    2f14:	6978652f 	ldmdbvs	r8!, {r0, r1, r2, r3, r5, r8, sl, sp, lr}^
    2f18:	00632e74 	rsbeq	r2, r3, r4, ror lr
    2f1c:	7a69735f 	bvc	1a5fca0 <__Stack_Size+0x1a5f8a0>
    2f20:	725f0065 	subsvc	r0, pc, #101	; 0x65
    2f24:	34646e61 	strbtcc	r6, [r4], #-3681
    2f28:	655f0038 	ldrbvs	r0, [pc, #-56]	; 2ef8 <__Stack_Size+0x2af8>
    2f2c:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
    2f30:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2f34:	63775f00 	cmnvs	r7, #0	; 0x0
    2f38:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!
    2f3c:	74735f62 	ldrbtvc	r5, [r3], #-3938
    2f40:	00657461 	rsbeq	r7, r5, r1, ror #8
    2f44:	7363775f 	cmnvc	r3, #24903680	; 0x17c0000
    2f48:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!
    2f4c:	735f7362 	cmpvc	pc, #-2013265919	; 0x88000001
    2f50:	65746174 	ldrbvs	r6, [r4, #-372]!
    2f54:	626c5f00 	rsbvs	r5, ip, #0	; 0x0
    2f58:	7a697366 	bvc	1a5fcf8 <__Stack_Size+0x1a5f8f8>
    2f5c:	6d5f0065 	ldclvs	0, cr0, [pc, #-404]
    2f60:	6f747262 	svcvs	0x00747262
    2f64:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
    2f68:	65746174 	ldrbvs	r6, [r4, #-372]!
    2f6c:	63775f00 	cmnvs	r7, #0	; 0x0
    2f70:	626d6f74 	rsbvs	r6, sp, #464	; 0x1d0
    2f74:	6174735f 	cmnvs	r4, pc, asr r3
    2f78:	5f006574 	svcpl	0x00006574
    2f7c:	5f6d745f 	svcpl	0x006d745f
    2f80:	00636573 	rsbeq	r6, r3, r3, ror r5
    2f84:	7562755f 	strbvc	r7, [r2, #-1375]!
    2f88:	625f0066 	subsvs	r0, pc, #102	; 0x66
    2f8c:	00657361 	rsbeq	r7, r5, r1, ror #6
    2f90:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!
    2f94:	756f685f 	strbvc	r6, [pc, #-2143]!	; 273d <__Stack_Size+0x233d>
    2f98:	5f5f0072 	svcpl	0x005f0072
    2f9c:	5f006673 	svcpl	0x00006673
    2fa0:	655f6e6f 	ldrbvs	r6, [pc, #-3695]	; 2139 <__Stack_Size+0x1d39>
    2fa4:	5f746978 	svcpl	0x00746978
    2fa8:	73677261 	cmnvc	r7, #268435462	; 0x10000006
    2fac:	6f635f00 	svcvs	0x00635f00
    2fb0:	65696b6f 	strbvs	r6, [r9, #-2927]!
    2fb4:	735f5f00 	cmpvc	pc, #0	; 0x0
    2fb8:	65756c67 	ldrbvs	r6, [r5, #-3175]!
    2fbc:	6c665f00 	stclvs	15, cr5, [r6]
    2fc0:	00736761 	rsbseq	r6, r3, r1, ror #14
    2fc4:	5f73695f 	svcpl	0x0073695f
    2fc8:	00617863 	rsbeq	r7, r1, r3, ror #16
    2fcc:	6474735f 	ldrbtvs	r7, [r4], #-863
    2fd0:	5f006e69 	svcpl	0x00006e69
    2fd4:	736b6c62 	cmnvc	fp, #25088	; 0x6200
    2fd8:	00657a69 	rsbeq	r7, r5, r9, ror #20
    2fdc:	7476635f 	ldrbtvc	r6, [r6], #-863
    2fe0:	00667562 	rsbeq	r7, r6, r2, ror #10
    2fe4:	66666f5f 	uqsubaddxvs	r6, r6, pc
    2fe8:	00746573 	rsbseq	r6, r4, r3, ror r5
    2fec:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
    2ff0:	776f7472 	undefined
    2ff4:	735f7363 	cmpvc	pc, #-1946157055	; 0x8c000001
    2ff8:	65746174 	ldrbvs	r6, [r4, #-372]!
    2ffc:	626d5f00 	rsbvs	r5, sp, #0	; 0x0
    3000:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
    3004:	6174735f 	cmnvs	r4, pc, asr r3
    3008:	5f006574 	svcpl	0x00006574
    300c:	72616e66 	rsbvc	r6, r1, #1632	; 0x660
    3010:	5f007367 	svcpl	0x00007367
    3014:	00736e66 	rsbseq	r6, r3, r6, ror #28
    3018:	6769735f 	undefined
    301c:	665f006e 	ldrbvs	r0, [pc], -lr, rrx
    3020:	6b636f6c 	blvs	18dedd8 <__Stack_Size+0x18de9d8>
    3024:	5f00745f 	svcpl	0x0000745f
    3028:	65647473 	strbvs	r7, [r4, #-1139]!
    302c:	5f007272 	svcpl	0x00007272
    3030:	69676942 	stmdbvs	r7!, {r1, r6, r8, fp, sp, lr}^
    3034:	5f00746e 	svcpl	0x0000746e
    3038:	64616572 	strbtvs	r6, [r1], #-1394
    303c:	65725f00 	ldrbvs	r5, [r2, #-3840]!
    3040:	746c7573 	strbtvc	r7, [ip], #-1395
    3044:	5f006b5f 	svcpl	0x00006b5f
    3048:	006d745f 	rsbeq	r7, sp, pc, asr r4
    304c:	63775f5f 	cmnvs	r7, #380	; 0x17c
    3050:	5f006268 	svcpl	0x00006268
    3054:	6f647473 	svcvs	0x00647473
    3058:	5f007475 	svcpl	0x00007475
    305c:	6c747663 	ldclvs	6, cr7, [r4], #-396
    3060:	5f006e65 	svcpl	0x00006e65
    3064:	656c6966 	strbvs	r6, [ip, #-2406]!
    3068:	696e5f00 	stmdbvs	lr!, {r8, r9, sl, fp, ip, lr}^
    306c:	0073626f 	rsbseq	r6, r3, pc, ror #4
    3070:	6574615f 	ldrbvs	r6, [r4, #-351]!
    3074:	30746978 	rsbscc	r6, r4, r8, ror r9
    3078:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
    307c:	6c616e67 	stclvs	14, cr6, [r1], #-412
    3080:	6675625f 	undefined
    3084:	73615f00 	cmnvc	r1, #0	; 0x0
    3088:	6d697463 	cfstrdvs	mvd7, [r9, #-396]!
    308c:	75625f65 	strbvc	r5, [r2, #-3941]!
    3090:	5f5f0066 	svcpl	0x005f0066
    3094:	00686377 	rsbeq	r6, r8, r7, ror r3
    3098:	746e6977 	strbtvc	r6, [lr], #-2423
    309c:	5f00745f 	svcpl	0x0000745f
    30a0:	6b636f6c 	blvs	18dee58 <__Stack_Size+0x18dea58>
    30a4:	756d5f00 	strbvc	r5, [sp, #-3840]!
    30a8:	5f00746c 	svcpl	0x0000746c
    30ac:	74697277 	strbtvc	r7, [r9], #-631
    30b0:	5f5f0065 	svcpl	0x005f0065
    30b4:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    30b8:	00726165 	rsbseq	r6, r2, r5, ror #2
    30bc:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
    30c0:	5f006674 	svcpl	0x00006674
    30c4:	5f6d745f 	svcpl	0x006d745f
    30c8:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
    30cc:	64735f5f 	ldrbtvs	r5, [r3], #-3935
    30d0:	6e696469 	cdpvs	4, 6, cr6, cr9, cr9, {3}
    30d4:	5f007469 	svcpl	0x00007469
    30d8:	6d6d6167 	stfvse	f6, [sp, #-412]!
    30dc:	69735f61 	ldmdbvs	r3!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    30e0:	61676e67 	cmnvs	r7, r7, ror #28
    30e4:	665f006d 	ldrbvs	r0, [pc], -sp, rrx
    30e8:	6c656572 	cfstr64vs	mvdx6, [r5], #-456
    30ec:	00747369 	rsbseq	r7, r4, r9, ror #6
    30f0:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
    30f4:	45525f4b 	ldrbmi	r5, [r2, #-3915]
    30f8:	53525543 	cmppl	r2, #281018368	; 0x10c00000
    30fc:	5f455649 	svcpl	0x00455649
    3100:	6e5f0054 	mrcvs	0, 2, r0, cr15, cr4, {2}
    3104:	5f007765 	svcpl	0x00007765
    3108:	5f6d745f 	svcpl	0x006d745f
    310c:	79616479 	stmdbvc	r1!, {r0, r3, r4, r5, r6, sl, sp, lr}^
    3110:	735f5f00 	cmpvc	pc, #0	; 0x0
    3114:	00667562 	rsbeq	r7, r6, r2, ror #10
    3118:	626f695f 	rsbvs	r6, pc, #1556480	; 0x17c000
    311c:	5f5f0073 	svcpl	0x005f0073
    3120:	454c4946 	strbmi	r4, [ip, #-2374]
    3124:	626d5f00 	rsbvs	r5, sp, #0	; 0x0
    3128:	74617473 	strbtvc	r7, [r1], #-1139
    312c:	00745f65 	rsbseq	r5, r4, r5, ror #30
    3130:	46735f5f 	uhsubaddxmi	r5, r3, pc
    3134:	00454c49 	subeq	r4, r5, r9, asr #24
    3138:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
    313c:	656e5f64 	strbvs	r5, [lr, #-3940]!
    3140:	5f007478 	svcpl	0x00007478
    3144:	656c626d 	strbvs	r6, [ip, #-621]!
    3148:	74735f6e 	ldrbtvc	r5, [r3], #-3950
    314c:	00657461 	rsbeq	r7, r5, r1, ror #8
    3150:	636e695f 	cmnvs	lr, #1556480	; 0x17c000
    3154:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
    3158:	635f0064 	cmpvs	pc, #100	; 0x64
    315c:	65727275 	ldrbvs	r7, [r2, #-629]!
    3160:	6c5f746e 	cfldrdvs	mvd7, [pc], {110}
    3164:	6c61636f 	stclvs	3, cr6, [r1], #-444
    3168:	5f5f0065 	svcpl	0x005f0065
    316c:	61656c63 	cmnvs	r5, r3, ror #24
    3170:	0070756e 	rsbseq	r7, r0, lr, ror #10
    3174:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    3178:	00736477 	rsbseq	r6, r3, r7, ror r4
    317c:	6565725f 	strbvs	r7, [r5, #-607]!
    3180:	5f00746e 	svcpl	0x0000746e
    3184:	64656573 	strbtvs	r6, [r5], #-1395
    3188:	635f5f00 	cmpvs	pc, #0	; 0x0
    318c:	746e756f 	strbtvc	r7, [lr], #-1391
    3190:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
    3194:	65756c61 	ldrbvs	r6, [r5, #-3169]!
    3198:	65735f00 	ldrbvs	r5, [r3, #-3840]!
    319c:	5f006b65 	svcpl	0x00006b65
    31a0:	736f7066 	cmnvc	pc, #102	; 0x66
    31a4:	5f00745f 	svcpl	0x0000745f
    31a8:	6e727265 	cdpvs	2, 7, cr7, cr2, cr5, {3}
    31ac:	5f5f006f 	svcpl	0x005f006f
    31b0:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]
    31b4:	5f006e69 	svcpl	0x00006e69
    31b8:	74727473 	ldrbtvc	r7, [r2], #-1139
    31bc:	6c5f6b6f 	mrrcvs	11, 6, r6, pc, cr15
    31c0:	00747361 	rsbseq	r7, r4, r1, ror #6
    31c4:	746e665f 	strbtvc	r6, [lr], #-1631
    31c8:	73657079 	cmnvc	r5, #121	; 0x79
    31cc:	64615f00 	strbtvs	r5, [r1], #-3840
    31d0:	5f5f0064 	svcpl	0x005f0064
    31d4:	6e6f4c55 	mcrvs	12, 3, r4, cr15, cr5, {2}
    31d8:	675f0067 	ldrbvs	r0, [pc, -r7, rrx]
    31dc:	61647465 	cmnvs	r4, r5, ror #8
    31e0:	655f6574 	ldrbvs	r6, [pc, #-1396]	; 2c74 <__Stack_Size+0x2874>
    31e4:	5f007272 	svcpl	0x00007272
    31e8:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
    31ec:	695f6c61 	ldmdbvs	pc, {r0, r5, r6, sl, fp, sp, lr}^
    31f0:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    31f4:	74705f65 	ldrbtvc	r5, [r0], #-3941
    31f8:	635f0072 	cmpvs	pc, #114	; 0x72
    31fc:	65727275 	ldrbvs	r7, [r2, #-629]!
    3200:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
    3204:	67657461 	strbvs	r7, [r5, -r1, ror #8]!
    3208:	0079726f 	rsbseq	r7, r9, pc, ror #4
    320c:	65646f63 	strbvs	r6, [r4, #-3939]!
    3210:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
    3214:	64657375 	strbtvs	r7, [r5], #-885
    3218:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
    321c:	775f0064 	ldrbvc	r0, [pc, -r4, rrx]
    3220:	5f007364 	svcpl	0x00007364
    3224:	5f6d745f 	svcpl	0x006d745f
    3228:	79616477 	stmdbvc	r1!, {r0, r1, r2, r4, r5, r6, sl, sp, lr}^
    322c:	6c675f00 	stclvs	15, cr5, [r7]
    3230:	5f006575 	svcpl	0x00006575
    3234:	6c616d6e 	stclvs	13, cr6, [r1], #-440
    3238:	00636f6c 	rsbeq	r6, r3, ip, ror #30
    323c:	34366c5f 	ldrtcc	r6, [r6], #-3167
    3240:	75625f61 	strbvc	r5, [r2, #-3937]!
    3244:	735f0066 	cmpvc	pc, #102	; 0x66
    3248:	665f6769 	ldrbvs	r6, [pc], -r9, ror #14
    324c:	00636e75 	rsbeq	r6, r3, r5, ror lr
    3250:	75626e5f 	strbvc	r6, [r2, #-3679]!
    3254:	755f0066 	ldrbvc	r0, [pc, #-102]	; 31f6 <__Stack_Size+0x2df6>
    3258:	6573756e 	ldrbvs	r7, [r3, #-1390]!
    325c:	5f5f0064 	svcpl	0x005f0064
    3260:	695f6d74 	ldmdbvs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    3264:	74736473 	ldrbtvc	r6, [r3], #-1139
    3268:	6f6c5f00 	svcvs	0x006c5f00
    326c:	746c6163 	strbtvc	r6, [ip], #-355
    3270:	5f656d69 	svcpl	0x00656d69
    3274:	00667562 	rsbeq	r7, r6, r2, ror #10
    3278:	3834725f 	ldmdacc	r4!, {r0, r1, r2, r3, r4, r6, r9, ip, sp, lr}
    327c:	626d5f00 	rsbvs	r5, sp, #0	; 0x0
    3280:	63776f74 	cmnvs	r7, #464	; 0x1d0
    3284:	6174735f 	cmnvs	r4, pc, asr r3
    3288:	5f006574 	svcpl	0x00006574
    328c:	00733570 	rsbseq	r3, r3, r0, ror r5
    3290:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!
    3294:	61646d5f 	cmnvs	r4, pc, asr sp
    3298:	6d690079 	stclvs	0, cr0, [r9, #-484]!
    329c:	65727570 	ldrbvs	r7, [r2, #-1392]!
    32a0:	7461645f 	strbtvc	r6, [r1], #-1119
    32a4:	2e2e0061 	cdpcs	0, 2, cr0, cr14, cr1, {3}
    32a8:	2f2e2e2f 	svccs	0x002e2e2f
    32ac:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    32b0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    32b4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    32b8:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
    32bc:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    32c0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    32c4:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    32c8:	722f6362 	eorvc	r6, pc, #-2013265919	; 0x88000001
    32cc:	746e6565 	strbtvc	r6, [lr], #-1381
    32d0:	706d692f 	rsbvc	r6, sp, pc, lsr #18
    32d4:	2e657275 	mcrcs	2, 3, r7, cr5, cr5, {3}
    32d8:	3a630063 	bcc	18c346c <__Stack_Size+0x18c306c>
    32dc:	6e69775c 	mcrvs	7, 3, r7, cr9, cr12, {2}
    32e0:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    32e4:	6975625c 	ldmdbvs	r5!, {r2, r3, r4, r6, r9, sp, lr}^
    32e8:	675c646c 	ldrbvs	r6, [ip, -ip, ror #8]
    32ec:	622d6363 	eorvs	r6, sp, #-1946157055	; 0x8c000001
    32f0:	646c6975 	strbtvs	r6, [ip], #-2421
    32f4:	6d72615c 	ldfvse	f6, [r2, #-368]!
    32f8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    32fc:	656e5c69 	strbvs	r5, [lr, #-3177]!
    3300:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3304:	62696c5c 	rsbvs	r6, r9, #23552	; 0x5c00
    3308:	65725c63 	ldrbvs	r5, [r2, #-3171]!
    330c:	00746e65 	rsbseq	r6, r4, r5, ror #28
    3310:	69665f5f 	stmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    3314:	615f696e 	cmpvs	pc, lr, ror #18
    3318:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    331c:	6174735f 	cmnvs	r4, pc, asr r3
    3320:	73007472 	movwvc	r7, #1138	; 0x472
    3324:	5f657a69 	svcpl	0x00657a69
    3328:	5f5f0074 	svcpl	0x005f0074
    332c:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
    3330:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
    3334:	655f7961 	ldrbvs	r7, [pc, #-2401]	; 29db <__Stack_Size+0x25db>
    3338:	5f00646e 	svcpl	0x0000646e
    333c:	6572705f 	ldrbvs	r7, [r2, #-95]!
    3340:	74696e69 	strbtvc	r6, [r9], #-3689
    3344:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
    3348:	655f7961 	ldrbvs	r7, [pc, #-2401]	; 29ef <__Stack_Size+0x25ef>
    334c:	2e00646e 	cdpcs	4, 0, cr6, cr0, cr14, {3}
    3350:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3354:	2f2e2e2f 	svccs	0x002e2e2f
    3358:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    335c:	63672f2e 	cmnvs	r7, #184	; 0xb8
    3360:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    3364:	2f302e33 	svccs	0x00302e33
    3368:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    336c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    3370:	2f636269 	svccs	0x00636269
    3374:	6373696d 	cmnvs	r3, #1785856	; 0x1b4000
    3378:	696e692f 	stmdbvs	lr!, {r0, r1, r2, r3, r5, r8, fp, sp, lr}^
    337c:	00632e74 	rsbeq	r2, r3, r4, ror lr
    3380:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    3384:	615f7469 	cmpvs	pc, r9, ror #8
    3388:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    338c:	646e655f 	strbtvs	r6, [lr], #-1375
    3390:	6c5f5f00 	mrrcvs	15, 0, r5, pc, cr0
    3394:	5f636269 	svcpl	0x00636269
    3398:	74696e69 	strbtvc	r6, [r9], #-3689
    339c:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
    33a0:	63007961 	movwvs	r7, #2401	; 0x961
    33a4:	69775c3a 	ldmdbvs	r7!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    33a8:	6d72616e 	ldfvse	f6, [r2, #-440]!
    33ac:	75625c73 	strbvc	r5, [r2, #-3187]!
    33b0:	5c646c69 	stclpl	12, cr6, [r4], #-420
    33b4:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    33b8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    33bc:	72615c64 	rsbvc	r5, r1, #25600	; 0x6400
    33c0:	61652d6d 	cmnvs	r5, sp, ror #26
    33c4:	6e5c6962 	cdpvs	9, 5, cr6, cr12, cr2, {3}
    33c8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    33cc:	696c5c62 	stmdbvs	ip!, {r1, r5, r6, sl, fp, ip, lr}^
    33d0:	6d5c6362 	ldclvs	3, cr6, [ip, #-392]
    33d4:	00637369 	rsbeq	r7, r3, r9, ror #6
    33d8:	696c5f5f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    33dc:	665f6362 	ldrbvs	r6, [pc], -r2, ror #6
    33e0:	5f696e69 	svcpl	0x00696e69
    33e4:	61727261 	cmnvs	r2, r1, ror #4
    33e8:	5f5f0079 	svcpl	0x005f0079
    33ec:	69657270 	stmdbvs	r5!, {r4, r5, r6, r9, ip, sp, lr}^
    33f0:	5f74696e 	svcpl	0x0074696e
    33f4:	61727261 	cmnvs	r2, r1, ror #4
    33f8:	74735f79 	ldrbtvc	r5, [r3], #-3961
    33fc:	00747261 	rsbseq	r7, r4, r1, ror #4
    3400:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    3404:	615f7469 	cmpvs	pc, r9, ror #8
    3408:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    340c:	6174735f 	cmnvs	r4, pc, asr r3
    3410:	61007472 	tstvs	r0, r2, ror r4
    3414:	6e67696c 	cdpvs	9, 6, cr6, cr7, cr12, {3}
    3418:	615f6465 	cmpvs	pc, r5, ror #8
    341c:	00726464 	rsbseq	r6, r2, r4, ror #8
    3420:	775c3a63 	ldrbvc	r3, [ip, -r3, ror #20]
    3424:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    3428:	625c736d 	subsvs	r7, ip, #-1275068415	; 0xb4000001
    342c:	646c6975 	strbtvs	r6, [ip], #-2421
    3430:	6363675c 	cmnvs	r3, #24117248	; 0x1700000
    3434:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    3438:	615c646c 	cmpvs	ip, ip, ror #8
    343c:	652d6d72 	strvs	r6, [sp, #-3442]!
    3440:	5c696261 	sfmpl	f6, 2, [r9], #-388
    3444:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    3448:	6c5c6269 	lfmvs	f6, 2, [ip], {105}
    344c:	5c636269 	sfmpl	f6, 2, [r3], #-420
    3450:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3454:	2e00676e 	cdpcs	7, 0, cr6, cr0, cr14, {3}
    3458:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    345c:	2f2e2e2f 	svccs	0x002e2e2f
    3460:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3464:	63672f2e 	cmnvs	r7, #184	; 0xb8
    3468:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    346c:	2f302e33 	svccs	0x00302e33
    3470:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    3474:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    3478:	2f636269 	svccs	0x00636269
    347c:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3480:	6d2f676e 	stcvs	7, cr6, [pc, #-440]!
    3484:	65736d65 	ldrbvs	r6, [r3, #-3429]!
    3488:	00632e74 	rsbeq	r2, r3, r4, ror lr
    348c:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
    3490:	62007465 	andvs	r7, r0, #1694498816	; 0x65000000
    3494:	65666675 	strbvs	r6, [r6, #-1653]!
    3498:	2e2e0072 	mcrcs	0, 1, r0, cr14, cr2, {3}
    349c:	2f2e2e2f 	svccs	0x002e2e2f
    34a0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    34a4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    34a8:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    34ac:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
    34b0:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    34b4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    34b8:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    34bc:	732f6362 	teqvc	pc, #-2013265919	; 0x88000001
    34c0:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    34c4:	5f5f2f62 	svcpl	0x005f2f62
    34c8:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    34cc:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    34d0:	70797400 	rsbsvc	r7, r9, r0, lsl #8
    34d4:	5f5f0065 	svcpl	0x005f0065
    34d8:	69676572 	stmdbvs	r7!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    34dc:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    34e0:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    34e4:	6f727074 	svcvs	0x00727074
    34e8:	5f5f0063 	svcpl	0x005f0063
    34ec:	6c6c6163 	stfvse	f6, [ip], #-396
    34f0:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    34f4:	6f727074 	svcvs	0x00727074
    34f8:	2e007363 	cdpcs	3, 0, cr7, cr0, cr3, {3}
    34fc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3500:	2f2e2e2f 	svccs	0x002e2e2f
    3504:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3508:	63672f2e 	cmnvs	r7, #184	; 0xb8
    350c:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    3510:	2f302e33 	svccs	0x00302e33
    3514:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    3518:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    351c:	2f636269 	svccs	0x00636269
    3520:	6c647473 	cfstrdvs	mvd7, [r4], #-460
    3524:	5f2f6269 	svcpl	0x002f6269
    3528:	6c61635f 	stclvs	3, cr6, [r1], #-380
    352c:	74615f6c 	strbtvc	r5, [r1], #-3948
    3530:	74697865 	strbtvc	r7, [r9], #-2149
    3534:	6c00632e 	stcvs	3, cr6, [r0], {46}
    3538:	70747361 	rsbsvc	r7, r4, r1, ror #6
    353c:	73657200 	cmnvc	r5, #0	; 0x0
    3540:	74726174 	ldrbtvc	r6, [r2], #-372
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000000 	andeq	r0, r0, r0
       4:	00000008 	andeq	r0, r0, r8
       8:	0a500001 	beq	1400014 <__Stack_Size+0x13ffc14>
       c:	14000000 	strne	r0, [r0]
      10:	01000000 	tsteq	r0, r0
      14:	00005000 	andeq	r5, r0, r0
      18:	00000000 	andeq	r0, r0, r0
      1c:	00180000 	andseq	r0, r8, r0
      20:	00200000 	eoreq	r0, r0, r0
      24:	00010000 	andeq	r0, r1, r0
      28:	00002250 	andeq	r2, r0, r0, asr r2
      2c:	00002c00 	andeq	r2, r0, r0, lsl #24
      30:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      3c:	000000fc 	strdeq	r0, [r0], -ip
      40:	000000fe 	strdeq	r0, [r0], -lr
      44:	fe5d0001 	cdp2	0, 5, cr0, cr13, cr1, {0}
      48:	02000000 	andeq	r0, r0, #0	; 0x0
      4c:	02000001 	andeq	r0, r0, #1	; 0x1
      50:	020c7d00 	andeq	r7, ip, #0	; 0x0
      54:	34000001 	strcc	r0, [r0], #-1
      58:	02000001 	andeq	r0, r0, #1	; 0x1
      5c:	00107d00 	andseq	r7, r0, r0, lsl #26
      60:	00000000 	andeq	r0, r0, r0
      64:	34000000 	strcc	r0, [r0]
      68:	36000001 	strcc	r0, [r0], -r1
      6c:	01000001 	tsteq	r0, r1
      70:	01365d00 	teqeq	r6, r0, lsl #26
      74:	013a0000 	teqeq	sl, r0
      78:	00020000 	andeq	r0, r2, r0
      7c:	013a047d 	teqeq	sl, sp, ror r4
      80:	01740000 	cmneq	r4, r0
      84:	00020000 	andeq	r0, r2, r0
      88:	0000087d 	andeq	r0, r0, sp, ror r8
      8c:	00000000 	andeq	r0, r0, r0
      90:	01740000 	cmneq	r4, r0
      94:	01760000 	cmneq	r6, r0
      98:	00010000 	andeq	r0, r1, r0
      9c:	0001765d 	andeq	r7, r1, sp, asr r6
      a0:	00017a00 	andeq	r7, r1, r0, lsl #20
      a4:	7d000200 	sfmvc	f0, 4, [r0]
      a8:	00017a04 	andeq	r7, r1, r4, lsl #20
      ac:	00019400 	andeq	r9, r1, r0, lsl #8
      b0:	7d000200 	sfmvc	f0, 4, [r0]
      b4:	00000008 	andeq	r0, r0, r8
      b8:	00000000 	andeq	r0, r0, r0
      bc:	00017400 	andeq	r7, r1, r0, lsl #8
      c0:	00017800 	andeq	r7, r1, r0, lsl #16
      c4:	50000100 	andpl	r0, r0, r0, lsl #2
      c8:	00000178 	andeq	r0, r0, r8, ror r1
      cc:	00000180 	andeq	r0, r0, r0, lsl #3
      d0:	00510001 	subseq	r0, r1, r1
      d4:	00000000 	andeq	r0, r0, r0
      d8:	94000000 	strls	r0, [r0]
      dc:	96000001 	strls	r0, [r0], -r1
      e0:	01000001 	tsteq	r0, r1
      e4:	01965d00 	orrseq	r5, r6, r0, lsl #26
      e8:	01d80000 	bicseq	r0, r8, r0
      ec:	00020000 	andeq	r0, r2, r0
      f0:	0000087d 	andeq	r0, r0, sp, ror r8
      f4:	00000000 	andeq	r0, r0, r0
      f8:	01940000 	orrseq	r0, r4, r0
      fc:	019c0000 	orrseq	r0, ip, r0
     100:	00010000 	andeq	r0, r1, r0
     104:	00019c50 	andeq	r9, r1, r0, asr ip
     108:	0001d800 	andeq	sp, r1, r0, lsl #16
     10c:	54000100 	strpl	r0, [r0], #-256
	...
     118:	000001d8 	ldrdeq	r0, [r0], -r8
     11c:	000001da 	ldrdeq	r0, [r0], -sl
     120:	da5d0001 	ble	174012c <__Stack_Size+0x173fd2c>
     124:	de000001 	cdple	0, 0, cr0, cr0, cr1, {0}
     128:	02000001 	andeq	r0, r0, #1	; 0x1
     12c:	de047d00 	cdple	13, 0, cr7, cr4, cr0, {0}
     130:	ec000001 	stc	0, cr0, [r0], {1}
     134:	02000001 	andeq	r0, r0, #1	; 0x1
     138:	00087d00 	andeq	r7, r8, r0, lsl #26
     13c:	00000000 	andeq	r0, r0, r0
     140:	ec000000 	stc	0, cr0, [r0], {0}
     144:	ee000001 	cdp	0, 0, cr0, cr0, cr1, {0}
     148:	01000001 	tsteq	r0, r1
     14c:	01ee5d00 	mvneq	r5, r0, lsl #26
     150:	02180000 	andseq	r0, r8, #0	; 0x0
     154:	00020000 	andeq	r0, r2, r0
     158:	0000087d 	andeq	r0, r0, sp, ror r8
     15c:	00000000 	andeq	r0, r0, r0
     160:	01ec0000 	mvneq	r0, r0
     164:	01f20000 	mvnseq	r0, r0
     168:	00010000 	andeq	r0, r1, r0
     16c:	0001f250 	andeq	pc, r1, r0, asr r2
     170:	00021800 	andeq	r1, r2, r0, lsl #16
     174:	54000100 	strpl	r0, [r0], #-256
	...
     180:	00000218 	andeq	r0, r0, r8, lsl r2
     184:	0000021a 	andeq	r0, r0, sl, lsl r2
     188:	1a5d0001 	bne	1740194 <__Stack_Size+0x173fd94>
     18c:	20000002 	andcs	r0, r0, r2
     190:	02000002 	andeq	r0, r0, #2	; 0x2
     194:	20047d00 	andcs	r7, r4, r0, lsl #26
     198:	6c000002 	stcvs	0, cr0, [r0], {2}
     19c:	02000002 	andeq	r0, r0, #2	; 0x2
     1a0:	00087d00 	andeq	r7, r8, r0, lsl #26
     1a4:	00000000 	andeq	r0, r0, r0
     1a8:	6c000000 	stcvs	0, cr0, [r0], {0}
     1ac:	6e000002 	cdpvs	0, 0, cr0, cr0, cr2, {0}
     1b0:	01000002 	tsteq	r0, r2
     1b4:	026e5d00 	rsbeq	r5, lr, #0	; 0x0
     1b8:	02740000 	rsbseq	r0, r4, #0	; 0x0
     1bc:	00020000 	andeq	r0, r2, r0
     1c0:	0274047d 	rsbseq	r0, r4, #2097152000	; 0x7d000000
     1c4:	02820000 	addeq	r0, r2, #0	; 0x0
     1c8:	00020000 	andeq	r0, r2, r0
     1cc:	0000087d 	andeq	r0, r0, sp, ror r8
     1d0:	00000000 	andeq	r0, r0, r0
     1d4:	02840000 	addeq	r0, r4, #0	; 0x0
     1d8:	02860000 	addeq	r0, r6, #0	; 0x0
     1dc:	00010000 	andeq	r0, r1, r0
     1e0:	0002865d 	andeq	r8, r2, sp, asr r6
     1e4:	00028800 	andeq	r8, r2, r0, lsl #16
     1e8:	7d000200 	sfmvc	f0, 4, [r0]
     1ec:	00028810 	andeq	r8, r2, r0, lsl r8
     1f0:	00031400 	andeq	r1, r3, r0, lsl #8
     1f4:	7d000200 	sfmvc	f0, 4, [r0]
     1f8:	00000030 	andeq	r0, r0, r0, lsr r0
     1fc:	00000000 	andeq	r0, r0, r0
     200:	00031400 	andeq	r1, r3, r0, lsl #8
     204:	00031600 	andeq	r1, r3, r0, lsl #12
     208:	5d000100 	stfpls	f0, [r0]
     20c:	00000316 	andeq	r0, r0, r6, lsl r3
     210:	00000318 	andeq	r0, r0, r8, lsl r3
     214:	107d0002 	rsbsne	r0, sp, r2
     218:	00000318 	andeq	r0, r0, r8, lsl r3
     21c:	000003a0 	andeq	r0, r0, r0, lsr #7
     220:	207d0002 	rsbscs	r0, sp, r2
	...
     22c:	00000314 	andeq	r0, r0, r4, lsl r3
     230:	0000031c 	andeq	r0, r0, ip, lsl r3
     234:	1c500001 	mrrcne	0, 0, r0, r0, cr1
     238:	a0000003 	andge	r0, r0, r3
     23c:	01000003 	tsteq	r0, r3
     240:	00005500 	andeq	r5, r0, r0, lsl #10
     244:	00000000 	andeq	r0, r0, r0
     248:	03140000 	tsteq	r4, #0	; 0x0
     24c:	03220000 	teqeq	r2, #0	; 0x0
     250:	00010000 	andeq	r0, r1, r0
     254:	00032251 	andeq	r2, r3, r1, asr r2
     258:	0003a000 	andeq	sl, r3, r0
     25c:	54000100 	strpl	r0, [r0], #-256
	...
     268:	000003a0 	andeq	r0, r0, r0, lsr #7
     26c:	000003a2 	andeq	r0, r0, r2, lsr #7
     270:	a25d0001 	subsge	r0, sp, #1	; 0x1
     274:	a6000003 	strge	r0, [r0], -r3
     278:	02000003 	andeq	r0, r0, #3	; 0x3
     27c:	a6047d00 	strge	r7, [r4], -r0, lsl #26
     280:	b0000003 	andlt	r0, r0, r3
     284:	02000003 	andeq	r0, r0, #3	; 0x3
     288:	00087d00 	andeq	r7, r8, r0, lsl #26
     28c:	00000000 	andeq	r0, r0, r0
     290:	a0000000 	andge	r0, r0, r0
     294:	a8000003 	stmdage	r0, {r0, r1}
     298:	01000003 	tsteq	r0, r3
     29c:	03a85000 	undefined instruction 0x03a85000
     2a0:	03ac0000 	undefined instruction 0x03ac0000
     2a4:	00010000 	andeq	r0, r1, r0
     2a8:	00000051 	andeq	r0, r0, r1, asr r0
     2ac:	00000000 	andeq	r0, r0, r0
     2b0:	0003b000 	andeq	fp, r3, r0
     2b4:	0003b200 	andeq	fp, r3, r0, lsl #4
     2b8:	5d000100 	stfpls	f0, [r0]
     2bc:	000003b2 	strheq	r0, [r0], -r2
     2c0:	000003b4 	strheq	r0, [r0], -r4
     2c4:	107d0002 	rsbsne	r0, sp, r2
     2c8:	000003b4 	strheq	r0, [r0], -r4
     2cc:	00000438 	andeq	r0, r0, r8, lsr r4
     2d0:	187d0002 	ldmdane	sp!, {r1}^
	...
     2dc:	00000438 	andeq	r0, r0, r8, lsr r4
     2e0:	0000043a 	andeq	r0, r0, sl, lsr r4
     2e4:	3a5d0001 	bcc	17402f0 <__Stack_Size+0x173fef0>
     2e8:	40000004 	andmi	r0, r0, r4
     2ec:	02000004 	andeq	r0, r0, #4	; 0x4
     2f0:	40107d00 	andsmi	r7, r0, r0, lsl #26
     2f4:	a2000004 	andge	r0, r0, #4	; 0x4
     2f8:	02000004 	andeq	r0, r0, #4	; 0x4
     2fc:	00187d00 	andseq	r7, r8, r0, lsl #26
     300:	00000000 	andeq	r0, r0, r0
     304:	a4000000 	strge	r0, [r0]
     308:	a6000004 	strge	r0, [r0], -r4
     30c:	01000004 	tsteq	r0, r4
     310:	04a65d00 	strteq	r5, [r6], #3328
     314:	04a80000 	strteq	r0, [r8]
     318:	00020000 	andeq	r0, r2, r0
     31c:	04a8047d 	strteq	r0, [r8], #1149
     320:	05280000 	streq	r0, [r8]!
     324:	00020000 	andeq	r0, r2, r0
     328:	0000087d 	andeq	r0, r0, sp, ror r8
     32c:	00000000 	andeq	r0, r0, r0
     330:	05280000 	streq	r0, [r8]!
     334:	052a0000 	streq	r0, [sl]!
     338:	00010000 	andeq	r0, r1, r0
     33c:	00052a5d 	andeq	r2, r5, sp, asr sl
     340:	0006d000 	andeq	sp, r6, r0
     344:	7d000200 	sfmvc	f0, 4, [r0]
     348:	00000010 	andeq	r0, r0, r0, lsl r0
     34c:	00000000 	andeq	r0, r0, r0
     350:	0006d000 	andeq	sp, r6, r0
     354:	0006d200 	andeq	sp, r6, r0, lsl #4
     358:	5d000100 	stfpls	f0, [r0]
     35c:	000006d2 	ldrdeq	r0, [r0], -r2
     360:	000006e0 	andeq	r0, r0, r0, ror #13
     364:	147d0002 	ldrbtne	r0, [sp], #-2
     368:	000006e0 	andeq	r0, r0, r0, ror #13
     36c:	00000704 	andeq	r0, r0, r4, lsl #14
     370:	187d0002 	ldmdane	sp!, {r1}^
	...
     37c:	000006d0 	ldrdeq	r0, [r0], -r0
     380:	000006de 	ldrdeq	r0, [r0], -lr
     384:	de500001 	cdple	0, 5, cr0, cr0, cr1, {0}
     388:	f0000006 	undefined instruction 0xf0000006
     38c:	01000006 	tsteq	r0, r6
     390:	00005c00 	andeq	r5, r0, r0, lsl #24
     394:	00000000 	andeq	r0, r0, r0
     398:	06d00000 	ldrbeq	r0, [r0], r0
     39c:	06e80000 	strbteq	r0, [r8], r0
     3a0:	00010000 	andeq	r0, r1, r0
     3a4:	0006e851 	andeq	lr, r6, r1, asr r8
     3a8:	00070400 	andeq	r0, r7, r0, lsl #8
     3ac:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     3b8:	000006d0 	ldrdeq	r0, [r0], -r0
     3bc:	000006f0 	strdeq	r0, [r0], -r0
     3c0:	f0520001 	undefined instruction 0xf0520001
     3c4:	04000006 	streq	r0, [r0], #-6
     3c8:	01000007 	tsteq	r0, r7
     3cc:	00005700 	andeq	r5, r0, r0, lsl #14
     3d0:	00000000 	andeq	r0, r0, r0
     3d4:	06d00000 	ldrbeq	r0, [r0], r0
     3d8:	06f00000 	ldrbteq	r0, [r0], r0
     3dc:	00010000 	andeq	r0, r1, r0
     3e0:	00000053 	andeq	r0, r0, r3, asr r0
     3e4:	00000000 	andeq	r0, r0, r0
     3e8:	00070400 	andeq	r0, r7, r0, lsl #8
     3ec:	00070600 	andeq	r0, r7, r0, lsl #12
     3f0:	5d000100 	stfpls	f0, [r0]
     3f4:	00000706 	andeq	r0, r0, r6, lsl #14
     3f8:	0000076c 	andeq	r0, r0, ip, ror #14
     3fc:	107d0002 	rsbsne	r0, sp, r2
	...
     408:	0000076c 	andeq	r0, r0, ip, ror #14
     40c:	0000076e 	andeq	r0, r0, lr, ror #14
     410:	6e5d0001 	cdpvs	0, 5, cr0, cr13, cr1, {0}
     414:	84000007 	strhi	r0, [r0], #-7
     418:	02000008 	andeq	r0, r0, #8	; 0x8
     41c:	00107d00 	andseq	r7, r0, r0, lsl #26
     420:	00000000 	andeq	r0, r0, r0
     424:	04000000 	streq	r0, [r0]
     428:	06000001 	.word	0x06000001
     42c:	01000001 	.word	0x01000001
     430:	01065d00 	.word	0x01065d00
     434:	01080000 	.word	0x01080000
     438:	00020000 	.word	0x00020000
     43c:	0108047d 	.word	0x0108047d
     440:	01100000 	.word	0x01100000
     444:	00020000 	.word	0x00020000
     448:	0000087d 	.word	0x0000087d
     44c:	00000000 	.word	0x00000000
     450:	01100000 	.word	0x01100000
     454:	01120000 	.word	0x01120000
     458:	00010000 	.word	0x00010000
     45c:	0001125d 	.word	0x0001125d
     460:	00011400 	.word	0x00011400
     464:	7d000200 	.word	0x7d000200
     468:	00011404 	.word	0x00011404
     46c:	00011c00 	.word	0x00011c00
     470:	7d000200 	.word	0x7d000200
     474:	00000008 	.word	0x00000008
     478:	00000000 	.word	0x00000000
     47c:	00011c00 	.word	0x00011c00
     480:	00011e00 	.word	0x00011e00
     484:	5d000100 	.word	0x5d000100
     488:	0000011e 	.word	0x0000011e
     48c:	00000120 	.word	0x00000120
     490:	047d0002 	.word	0x047d0002
     494:	00000120 	.word	0x00000120
     498:	00000128 	.word	0x00000128
     49c:	087d0002 	.word	0x087d0002
	...
     4a8:	00000128 	.word	0x00000128
     4ac:	0000012a 	.word	0x0000012a
     4b0:	2a5d0001 	.word	0x2a5d0001
     4b4:	2c000001 	.word	0x2c000001
     4b8:	02000001 	.word	0x02000001
     4bc:	2c047d00 	.word	0x2c047d00
     4c0:	34000001 	.word	0x34000001
     4c4:	02000001 	.word	0x02000001
     4c8:	00087d00 	.word	0x00087d00
	...
     4d4:	02000000 	.word	0x02000000
     4d8:	01000000 	.word	0x01000000
     4dc:	00025d00 	.word	0x00025d00
     4e0:	00040000 	.word	0x00040000
     4e4:	00020000 	.word	0x00020000
     4e8:	0004047d 	.word	0x0004047d
     4ec:	000c0000 	.word	0x000c0000
     4f0:	00020000 	.word	0x00020000
     4f4:	0000087d 	.word	0x0000087d
     4f8:	00000000 	.word	0x00000000
     4fc:	000c0000 	.word	0x000c0000
     500:	000e0000 	.word	0x000e0000
     504:	00010000 	.word	0x00010000
     508:	00000e5d 	.word	0x00000e5d
     50c:	00001400 	.word	0x00001400
     510:	7d000200 	.word	0x7d000200
     514:	00001404 	.word	0x00001404
     518:	00002000 	.word	0x00002000
     51c:	7d000200 	.word	0x7d000200
     520:	00000008 	.word	0x00000008
     524:	00000000 	.word	0x00000000
     528:	00000c00 	.word	0x00000c00
     52c:	00001200 	.word	0x00001200
     530:	50000100 	.word	0x50000100
     534:	00000012 	.word	0x00000012
     538:	0000001c 	.word	0x0000001c
     53c:	00530001 	.word	0x00530001
     540:	00000000 	.word	0x00000000
     544:	20000000 	.word	0x20000000
     548:	22000000 	.word	0x22000000
     54c:	01000000 	.word	0x01000000
     550:	00225d00 	.word	0x00225d00
     554:	00460000 	.word	0x00460000
     558:	00020000 	.word	0x00020000
     55c:	0000107d 	.word	0x0000107d
     560:	00000000 	.word	0x00000000
     564:	00200000 	.word	0x00200000
     568:	002a0000 	.word	0x002a0000
     56c:	00010000 	.word	0x00010000
     570:	00002a50 	.word	0x00002a50
     574:	00004600 	.word	0x00004600
     578:	56000100 	.word	0x56000100
	...
     584:	00000020 	.word	0x00000020
     588:	0000002a 	.word	0x0000002a
     58c:	2a510001 	.word	0x2a510001
     590:	46000000 	.word	0x46000000
     594:	01000000 	.word	0x01000000
     598:	00005500 	.word	0x00005500
     59c:	00000000 	.word	0x00000000
     5a0:	00480000 	.word	0x00480000
     5a4:	004a0000 	.word	0x004a0000
     5a8:	00010000 	.word	0x00010000
     5ac:	00004a5d 	.word	0x00004a5d
     5b0:	00006400 	.word	0x00006400
     5b4:	7d000200 	.word	0x7d000200
     5b8:	00000010 	.word	0x00000010
     5bc:	00000000 	.word	0x00000000
     5c0:	00004800 	.word	0x00004800
     5c4:	00005200 	.word	0x00005200
     5c8:	50000100 	.word	0x50000100
     5cc:	00000052 	.word	0x00000052
     5d0:	00000064 	.word	0x00000064
     5d4:	00560001 	.word	0x00560001
     5d8:	00000000 	.word	0x00000000
     5dc:	48000000 	.word	0x48000000
     5e0:	52000000 	.word	0x52000000
     5e4:	01000000 	.word	0x01000000
     5e8:	00525100 	.word	0x00525100
     5ec:	00640000 	.word	0x00640000
     5f0:	00010000 	.word	0x00010000
     5f4:	00000055 	.word	0x00000055
     5f8:	00000000 	.word	0x00000000
     5fc:	00006400 	.word	0x00006400
     600:	00006600 	.word	0x00006600
     604:	5d000100 	.word	0x5d000100
     608:	00000066 	.word	0x00000066
     60c:	00000068 	.word	0x00000068
     610:	047d0002 	.word	0x047d0002
     614:	00000068 	.word	0x00000068
     618:	00000070 	.word	0x00000070
     61c:	087d0002 	.word	0x087d0002
	...
     628:	00000070 	.word	0x00000070
     62c:	00000072 	.word	0x00000072
     630:	725d0001 	.word	0x725d0001
     634:	74000000 	.word	0x74000000
     638:	02000000 	.word	0x02000000
     63c:	74047d00 	.word	0x74047d00
     640:	7c000000 	.word	0x7c000000
     644:	02000000 	.word	0x02000000
     648:	00087d00 	.word	0x00087d00
     64c:	00000000 	.word	0x00000000
     650:	7c000000 	.word	0x7c000000
     654:	7e000000 	.word	0x7e000000
     658:	01000000 	.word	0x01000000
     65c:	007e5d00 	.word	0x007e5d00
     660:	00820000 	.word	0x00820000
     664:	00020000 	.word	0x00020000
     668:	0082047d 	.word	0x0082047d
     66c:	008c0000 	.word	0x008c0000
     670:	00020000 	.word	0x00020000
     674:	0000087d 	.word	0x0000087d
     678:	00000000 	.word	0x00000000
     67c:	007c0000 	.word	0x007c0000
     680:	00800000 	.word	0x00800000
     684:	00010000 	.word	0x00010000
     688:	00000050 	.word	0x00000050
     68c:	00000000 	.word	0x00000000
     690:	00007c00 	.word	0x00007c00
     694:	00008600 	.word	0x00008600
     698:	51000100 	.word	0x51000100
	...
     6a4:	0000003c 	.word	0x0000003c
     6a8:	00000048 	.word	0x00000048
     6ac:	00500001 	.word	0x00500001
     6b0:	00000000 	.word	0x00000000
     6b4:	5c000000 	.word	0x5c000000
     6b8:	62000000 	.word	0x62000000
     6bc:	01000000 	.word	0x01000000
     6c0:	00005000 	.word	0x00005000
     6c4:	00000000 	.word	0x00000000
     6c8:	00680000 	.word	0x00680000
     6cc:	006c0000 	.word	0x006c0000
     6d0:	00010000 	.word	0x00010000
     6d4:	00000050 	.word	0x00000050
     6d8:	00000000 	.word	0x00000000
     6dc:	00007000 	.word	0x00007000
     6e0:	00007200 	.word	0x00007200
     6e4:	50000100 	.word	0x50000100
	...
     6f0:	00000074 	.word	0x00000074
     6f4:	00000078 	.word	0x00000078
     6f8:	00500001 	.word	0x00500001
     6fc:	00000000 	.word	0x00000000
     700:	78000000 	.word	0x78000000
     704:	7a000000 	.word	0x7a000000
     708:	01000000 	.word	0x01000000
     70c:	00005000 	.word	0x00005000
     710:	00000000 	.word	0x00000000
     714:	007c0000 	.word	0x007c0000
     718:	007e0000 	.word	0x007e0000
     71c:	00010000 	.word	0x00010000
     720:	00007e5d 	.word	0x00007e5d
     724:	00008200 	.word	0x00008200
     728:	7d000200 	.word	0x7d000200
     72c:	0000820c 	.word	0x0000820c
     730:	0001e400 	.word	0x0001e400
     734:	7d000200 	.word	0x7d000200
     738:	00000010 	.word	0x00000010
     73c:	00000000 	.word	0x00000000
     740:	0000d000 	.word	0x0000d000
     744:	0000de00 	.word	0x0000de00
     748:	50000100 	.word	0x50000100
     74c:	000000f2 	.word	0x000000f2
     750:	0000014e 	.word	0x0000014e
     754:	86500001 	.word	0x86500001
     758:	8e000001 	.word	0x8e000001
     75c:	01000001 	.word	0x01000001
     760:	018e5100 	.word	0x018e5100
     764:	01960000 	.word	0x01960000
     768:	00010000 	.word	0x00010000
     76c:	00019650 	.word	0x00019650
     770:	0001b800 	.word	0x0001b800
     774:	51000100 	.word	0x51000100
     778:	000001c8 	.word	0x000001c8
     77c:	000001e4 	.word	0x000001e4
     780:	00500001 	.word	0x00500001
     784:	00000000 	.word	0x00000000
     788:	ec000000 	.word	0xec000000
     78c:	f2000000 	.word	0xf2000000
     790:	01000000 	.word	0x01000000
     794:	011a5100 	.word	0x011a5100
     798:	01640000 	.word	0x01640000
     79c:	00010000 	.word	0x00010000
     7a0:	00018e51 	.word	0x00018e51
     7a4:	00019600 	.word	0x00019600
     7a8:	51000100 	.word	0x51000100
     7ac:	000001c8 	.word	0x000001c8
     7b0:	000001e4 	.word	0x000001e4
     7b4:	00510001 	.word	0x00510001
     7b8:	00000000 	.word	0x00000000
     7bc:	8a000000 	.word	0x8a000000
     7c0:	8e000001 	.word	0x8e000001
     7c4:	01000001 	.word	0x01000001
     7c8:	01965200 	.word	0x01965200
     7cc:	01ae0000 	.word	0x01ae0000
     7d0:	00010000 	.word	0x00010000
     7d4:	00000052 	.word	0x00000052
     7d8:	00000000 	.word	0x00000000
     7dc:	0001e400 	.word	0x0001e400
     7e0:	0001e600 	.word	0x0001e600
     7e4:	5d000100 	.word	0x5d000100
     7e8:	000001e6 	.word	0x000001e6
     7ec:	000001ea 	.word	0x000001ea
     7f0:	0c7d0002 	.word	0x0c7d0002
     7f4:	000001ea 	.word	0x000001ea
     7f8:	000002a8 	.word	0x000002a8
     7fc:	107d0002 	.word	0x107d0002
	...
     808:	0000022e 	.word	0x0000022e
     80c:	0000025c 	.word	0x0000025c
     810:	5c510001 	.word	0x5c510001
     814:	68000002 	.word	0x68000002
     818:	01000002 	.word	0x01000002
     81c:	00005100 	.word	0x00005100
     820:	00000000 	.word	0x00000000
     824:	02300000 	.word	0x02300000
     828:	024a0000 	.word	0x024a0000
     82c:	00010000 	.word	0x00010000
     830:	00000052 	.word	0x00000052
     834:	00000000 	.word	0x00000000
     838:	0002a800 	.word	0x0002a800
     83c:	0002aa00 	.word	0x0002aa00
     840:	5d000100 	.word	0x5d000100
     844:	000002aa 	.word	0x000002aa
     848:	000002c8 	.word	0x000002c8
     84c:	087d0002 	.word	0x087d0002
	...
     858:	000002c8 	.word	0x000002c8
     85c:	000002ca 	.word	0x000002ca
     860:	ca5d0001 	.word	0xca5d0001
     864:	ce000002 	.word	0xce000002
     868:	02000002 	.word	0x02000002
     86c:	ce047d00 	.word	0xce047d00
     870:	00000002 	.word	0x00000002
     874:	02000003 	.word	0x02000003
     878:	00087d00 	.word	0x00087d00
     87c:	00000000 	.word	0x00000000
     880:	c8000000 	.word	0xc8000000
     884:	f0000002 	.word	0xf0000002
     888:	01000002 	.word	0x01000002
     88c:	02f45000 	.word	0x02f45000
     890:	03000000 	.word	0x03000000
     894:	00010000 	.word	0x00010000
     898:	00000050 	.word	0x00000050
     89c:	00000000 	.word	0x00000000
     8a0:	0002c800 	.word	0x0002c800
     8a4:	0002f000 	.word	0x0002f000
     8a8:	51000100 	.word	0x51000100
     8ac:	000002f4 	.word	0x000002f4
     8b0:	00000300 	.word	0x00000300
     8b4:	00510001 	.word	0x00510001
     8b8:	00000000 	.word	0x00000000
     8bc:	c8000000 	.word	0xc8000000
     8c0:	d4000002 	.word	0xd4000002
     8c4:	01000002 	.word	0x01000002
     8c8:	02d45200 	.word	0x02d45200
     8cc:	02f00000 	.word	0x02f00000
     8d0:	00010000 	.word	0x00010000
     8d4:	0002f45c 	.word	0x0002f45c
     8d8:	00030000 	.word	0x00030000
     8dc:	5c000100 	.word	0x5c000100
	...
     8e8:	00000300 	.word	0x00000300
     8ec:	00000302 	.word	0x00000302
     8f0:	025d0001 	.word	0x025d0001
     8f4:	06000003 	.word	0x06000003
     8f8:	02000003 	.word	0x02000003
     8fc:	06047d00 	.word	0x06047d00
     900:	3c000003 	.word	0x3c000003
     904:	02000003 	.word	0x02000003
     908:	00087d00 	.word	0x00087d00
	...
     914:	1e000003 	.word	0x1e000003
     918:	01000003 	.word	0x01000003
     91c:	032e5000 	.word	0x032e5000
     920:	033c0000 	.word	0x033c0000
     924:	00010000 	.word	0x00010000
     928:	00000050 	.word	0x00000050
     92c:	00000000 	.word	0x00000000
     930:	00030000 	.word	0x00030000
     934:	00031e00 	.word	0x00031e00
     938:	51000100 	.word	0x51000100
     93c:	0000032e 	.word	0x0000032e
     940:	0000033c 	.word	0x0000033c
     944:	00510001 	.word	0x00510001
     948:	00000000 	.word	0x00000000
     94c:	22000000 	.word	0x22000000
     950:	2e000003 	.word	0x2e000003
     954:	01000003 	.word	0x01000003
     958:	00005200 	.word	0x00005200
     95c:	00000000 	.word	0x00000000
     960:	033c0000 	.word	0x033c0000
     964:	033e0000 	.word	0x033e0000
     968:	00010000 	.word	0x00010000
     96c:	00033e5d 	.word	0x00033e5d
     970:	00034200 	.word	0x00034200
     974:	7d000200 	.word	0x7d000200
     978:	00034204 	.word	0x00034204
     97c:	00036c00 	.word	0x00036c00
     980:	7d000200 	.word	0x7d000200
     984:	00000008 	.word	0x00000008
     988:	00000000 	.word	0x00000000
     98c:	00033c00 	.word	0x00033c00
     990:	00035e00 	.word	0x00035e00
     994:	50000100 	.word	0x50000100
     998:	00000362 	.word	0x00000362
     99c:	0000036c 	.word	0x0000036c
     9a0:	00500001 	.word	0x00500001
     9a4:	00000000 	.word	0x00000000
     9a8:	3c000000 	.word	0x3c000000
     9ac:	5e000003 	.word	0x5e000003
     9b0:	01000003 	.word	0x01000003
     9b4:	03625100 	.word	0x03625100
     9b8:	036c0000 	.word	0x036c0000
     9bc:	00010000 	.word	0x00010000
     9c0:	00000051 	.word	0x00000051
     9c4:	00000000 	.word	0x00000000
     9c8:	00033c00 	.word	0x00033c00
     9cc:	00034800 	.word	0x00034800
     9d0:	52000100 	.word	0x52000100
     9d4:	00000348 	.word	0x00000348
     9d8:	0000035e 	.word	0x0000035e
     9dc:	625c0001 	.word	0x625c0001
     9e0:	6c000003 	.word	0x6c000003
     9e4:	01000003 	.word	0x01000003
     9e8:	00005c00 	.word	0x00005c00
     9ec:	00000000 	.word	0x00000000
     9f0:	036c0000 	.word	0x036c0000
     9f4:	036e0000 	.word	0x036e0000
     9f8:	00010000 	.word	0x00010000
     9fc:	00036e5d 	.word	0x00036e5d
     a00:	00037200 	.word	0x00037200
     a04:	7d000200 	.word	0x7d000200
     a08:	00037204 	.word	0x00037204
     a0c:	0003a400 	.word	0x0003a400
     a10:	7d000200 	.word	0x7d000200
     a14:	00000008 	.word	0x00000008
     a18:	00000000 	.word	0x00000000
     a1c:	00036c00 	.word	0x00036c00
     a20:	00038c00 	.word	0x00038c00
     a24:	50000100 	.word	0x50000100
     a28:	00000394 	.word	0x00000394
     a2c:	000003a4 	.word	0x000003a4
     a30:	00500001 	.word	0x00500001
     a34:	00000000 	.word	0x00000000
     a38:	6c000000 	.word	0x6c000000
     a3c:	8c000003 	.word	0x8c000003
     a40:	01000003 	.word	0x01000003
     a44:	03945100 	.word	0x03945100
     a48:	03a40000 	.word	0x03a40000
     a4c:	00010000 	.word	0x00010000
     a50:	00000051 	.word	0x00000051
     a54:	00000000 	.word	0x00000000
     a58:	0003a400 	.word	0x0003a400
     a5c:	0003a600 	.word	0x0003a600
     a60:	5d000100 	.word	0x5d000100
     a64:	000003a6 	.word	0x000003a6
     a68:	000003aa 	.word	0x000003aa
     a6c:	047d0002 	.word	0x047d0002
     a70:	000003aa 	.word	0x000003aa
     a74:	000003cc 	.word	0x000003cc
     a78:	087d0002 	.word	0x087d0002
	...
     a84:	000003a4 	.word	0x000003a4
     a88:	000003be 	.word	0x000003be
     a8c:	c2500001 	.word	0xc2500001
     a90:	cc000003 	.word	0xcc000003
     a94:	01000003 	.word	0x01000003
     a98:	00005000 	.word	0x00005000
     a9c:	00000000 	.word	0x00000000
     aa0:	03cc0000 	.word	0x03cc0000
     aa4:	03ce0000 	.word	0x03ce0000
     aa8:	00010000 	.word	0x00010000
     aac:	0003ce5d 	.word	0x0003ce5d
     ab0:	0003d000 	.word	0x0003d000
     ab4:	7d000200 	.word	0x7d000200
     ab8:	0003d004 	.word	0x0003d004
     abc:	0003d800 	.word	0x0003d800
     ac0:	7d000200 	.word	0x7d000200
     ac4:	00000008 	.word	0x00000008
     ac8:	00000000 	.word	0x00000000
     acc:	0003d800 	.word	0x0003d800
     ad0:	0003da00 	.word	0x0003da00
     ad4:	5d000100 	.word	0x5d000100
     ad8:	000003da 	.word	0x000003da
     adc:	000003e4 	.word	0x000003e4
     ae0:	047d0002 	.word	0x047d0002
     ae4:	000003e4 	.word	0x000003e4
     ae8:	0000040c 	.word	0x0000040c
     aec:	087d0002 	.word	0x087d0002
	...
     af8:	000003d8 	.word	0x000003d8
     afc:	000003ea 	.word	0x000003ea
     b00:	00500001 	.word	0x00500001
     b04:	00000000 	.word	0x00000000
     b08:	d8000000 	.word	0xd8000000
     b0c:	de000003 	.word	0xde000003
     b10:	01000003 	.word	0x01000003
     b14:	00005100 	.word	0x00005100
	...
     b20:	000e0000 	.word	0x000e0000
     b24:	00010000 	.word	0x00010000
     b28:	00000050 	.word	0x00000050
     b2c:	00000000 	.word	0x00000000
     b30:	00001800 	.word	0x00001800
     b34:	00002600 	.word	0x00002600
     b38:	50000100 	.word	0x50000100
	...
     b44:	00000030 	.word	0x00000030
     b48:	0000003e 	.word	0x0000003e
     b4c:	00500001 	.word	0x00500001
     b50:	00000000 	.word	0x00000000
     b54:	c4000000 	.word	0xc4000000
     b58:	d0000000 	.word	0xd0000000
     b5c:	01000000 	.word	0x01000000
     b60:	00d25000 	.word	0x00d25000
     b64:	00de0000 	.word	0x00de0000
     b68:	00010000 	.word	0x00010000
     b6c:	00000050 	.word	0x00000050
     b70:	00000000 	.word	0x00000000
     b74:	0000d000 	.word	0x0000d000
     b78:	0000d200 	.word	0x0000d200
     b7c:	50000100 	.word	0x50000100
     b80:	000000de 	.word	0x000000de
     b84:	000000de 	.word	0x000000de
     b88:	00500001 	.word	0x00500001
     b8c:	00000000 	.word	0x00000000
     b90:	fc000000 	.word	0xfc000000
     b94:	fe000000 	.word	0xfe000000
     b98:	01000000 	.word	0x01000000
     b9c:	01085000 	.word	0x01085000
     ba0:	010a0000 	.word	0x010a0000
     ba4:	00010000 	.word	0x00010000
     ba8:	00011650 	.word	0x00011650
     bac:	00011600 	.word	0x00011600
     bb0:	50000100 	.word	0x50000100
	...
     bbc:	0000011c 	.word	0x0000011c
     bc0:	0000011e 	.word	0x0000011e
     bc4:	1e5d0001 	.word	0x1e5d0001
     bc8:	22000001 	.word	0x22000001
     bcc:	02000001 	.word	0x02000001
     bd0:	22087d00 	.word	0x22087d00
     bd4:	b0000001 	.word	0xb0000001
     bd8:	02000001 	.word	0x02000001
     bdc:	00107d00 	.word	0x00107d00
     be0:	00000000 	.word	0x00000000
     be4:	1c000000 	.word	0x1c000000
     be8:	2c000001 	.word	0x2c000001
     bec:	01000001 	.word	0x01000001
     bf0:	012c5000 	.word	0x012c5000
     bf4:	01b00000 	.word	0x01b00000
     bf8:	00010000 	.word	0x00010000
     bfc:	00000051 	.word	0x00000051
     c00:	00000000 	.word	0x00000000
     c04:	00012e00 	.word	0x00012e00
     c08:	00013000 	.word	0x00013000
     c0c:	50000100 	.word	0x50000100
     c10:	0000013a 	.word	0x0000013a
     c14:	0000013c 	.word	0x0000013c
     c18:	48500001 	.word	0x48500001
     c1c:	a8000001 	.word	0xa8000001
     c20:	01000001 	.word	0x01000001
     c24:	00005000 	.word	0x00005000
     c28:	00000000 	.word	0x00000000
     c2c:	014a0000 	.word	0x014a0000
     c30:	014c0000 	.word	0x014c0000
     c34:	00020000 	.word	0x00020000
     c38:	014c7c91 	.word	0x014c7c91
     c3c:	01520000 	.word	0x01520000
     c40:	00020000 	.word	0x00020000
     c44:	0152047d 	.word	0x0152047d
     c48:	01580000 	.word	0x01580000
     c4c:	00020000 	.word	0x00020000
     c50:	01587c91 	.word	0x01587c91
     c54:	015e0000 	.word	0x015e0000
     c58:	00020000 	.word	0x00020000
     c5c:	015e047d 	.word	0x015e047d
     c60:	01860000 	.word	0x01860000
     c64:	00020000 	.word	0x00020000
     c68:	018e7c91 	.word	0x018e7c91
     c6c:	01b00000 	.word	0x01b00000
     c70:	00020000 	.word	0x00020000
     c74:	00007c91 	.word	0x00007c91
     c78:	00000000 	.word	0x00000000
     c7c:	01b00000 	.word	0x01b00000
     c80:	01b20000 	.word	0x01b20000
     c84:	00010000 	.word	0x00010000
     c88:	0001b25d 	.word	0x0001b25d
     c8c:	0001b800 	.word	0x0001b800
     c90:	7d000200 	.word	0x7d000200
     c94:	0001b814 	.word	0x0001b814
     c98:	00020c00 	.word	0x00020c00
     c9c:	7d000200 	.word	0x7d000200
     ca0:	00000018 	.word	0x00000018
     ca4:	00000000 	.word	0x00000000
     ca8:	0001b000 	.word	0x0001b000
     cac:	0001c400 	.word	0x0001c400
     cb0:	50000100 	.word	0x50000100
     cb4:	000001c4 	.word	0x000001c4
     cb8:	0000020c 	.word	0x0000020c
     cbc:	00550001 	.word	0x00550001
     cc0:	00000000 	.word	0x00000000
     cc4:	b0000000 	.word	0xb0000000
     cc8:	cc000001 	.word	0xcc000001
     ccc:	01000001 	.word	0x01000001
     cd0:	01cc5100 	.word	0x01cc5100
     cd4:	020c0000 	.word	0x020c0000
     cd8:	00010000 	.word	0x00010000
     cdc:	00000056 	.word	0x00000056
     ce0:	00000000 	.word	0x00000000
     ce4:	0001b000 	.word	0x0001b000
     ce8:	0001cc00 	.word	0x0001cc00
     cec:	52000100 	.word	0x52000100
     cf0:	000001cc 	.word	0x000001cc
     cf4:	0000020c 	.word	0x0000020c
     cf8:	00570001 	.word	0x00570001
     cfc:	00000000 	.word	0x00000000
     d00:	ce000000 	.word	0xce000000
     d04:	ea000001 	.word	0xea000001
     d08:	01000001 	.word	0x01000001
     d0c:	01f05000 	.word	0x01f05000
     d10:	01fc0000 	.word	0x01fc0000
     d14:	00010000 	.word	0x00010000
     d18:	00000050 	.word	0x00000050
     d1c:	00000000 	.word	0x00000000
     d20:	00020c00 	.word	0x00020c00
     d24:	00020e00 	.word	0x00020e00
     d28:	5d000100 	.word	0x5d000100
     d2c:	0000020e 	.word	0x0000020e
     d30:	00000212 	.word	0x00000212
     d34:	0c7d0002 	.word	0x0c7d0002
     d38:	00000212 	.word	0x00000212
     d3c:	000002a8 	.word	0x000002a8
     d40:	107d0002 	.word	0x107d0002
	...
     d4c:	0000020c 	.word	0x0000020c
     d50:	00000216 	.word	0x00000216
     d54:	16500001 	.word	0x16500001
     d58:	a8000002 	.word	0xa8000002
     d5c:	01000002 	.word	0x01000002
     d60:	00005500 	.word	0x00005500
     d64:	00000000 	.word	0x00000000
     d68:	021c0000 	.word	0x021c0000
     d6c:	02260000 	.word	0x02260000
     d70:	00010000 	.word	0x00010000
     d74:	00024650 	.word	0x00024650
     d78:	00027200 	.word	0x00027200
     d7c:	50000100 	.word	0x50000100
     d80:	00000278 	.word	0x00000278
     d84:	00000298 	.word	0x00000298
     d88:	00500001 	.word	0x00500001
     d8c:	00000000 	.word	0x00000000
     d90:	a8000000 	.word	0xa8000000
     d94:	aa000002 	.word	0xaa000002
     d98:	01000002 	.word	0x01000002
     d9c:	02aa5d00 	.word	0x02aa5d00
     da0:	03680000 	.word	0x03680000
     da4:	00020000 	.word	0x00020000
     da8:	0000087d 	.word	0x0000087d
     dac:	00000000 	.word	0x00000000
     db0:	02a80000 	.word	0x02a80000
     db4:	02ae0000 	.word	0x02ae0000
     db8:	00010000 	.word	0x00010000
     dbc:	0002ae50 	.word	0x0002ae50
     dc0:	00036800 	.word	0x00036800
     dc4:	54000100 	.word	0x54000100
	...
     dd0:	000002ca 	.word	0x000002ca
     dd4:	000002de 	.word	0x000002de
     dd8:	de510001 	.word	0xde510001
     ddc:	02000002 	.word	0x02000002
     de0:	01000003 	.word	0x01000003
     de4:	03025100 	.word	0x03025100
     de8:	03260000 	.word	0x03260000
     dec:	00010000 	.word	0x00010000
     df0:	00032651 	.word	0x00032651
     df4:	00034600 	.word	0x00034600
     df8:	51000100 	.word	0x51000100
     dfc:	00000346 	.word	0x00000346
     e00:	0000034c 	.word	0x0000034c
     e04:	00510001 	.word	0x00510001
     e08:	00000000 	.word	0x00000000
     e0c:	e4000000 	.word	0xe4000000
     e10:	02000002 	.word	0x02000002
     e14:	01000003 	.word	0x01000003
     e18:	03025200 	.word	0x03025200
     e1c:	03080000 	.word	0x03080000
     e20:	00010000 	.word	0x00010000
     e24:	00000052 	.word	0x00000052
     e28:	00000000 	.word	0x00000000
     e2c:	00030800 	.word	0x00030800
     e30:	00032600 	.word	0x00032600
     e34:	52000100 	.word	0x52000100
     e38:	00000326 	.word	0x00000326
     e3c:	00000328 	.word	0x00000328
     e40:	00520001 	.word	0x00520001
     e44:	00000000 	.word	0x00000000
     e48:	28000000 	.word	0x28000000
     e4c:	46000003 	.word	0x46000003
     e50:	01000003 	.word	0x01000003
     e54:	03465200 	.word	0x03465200
     e58:	03520000 	.word	0x03520000
     e5c:	00010000 	.word	0x00010000
     e60:	00000052 	.word	0x00000052
     e64:	00000000 	.word	0x00000000
     e68:	0002b400 	.word	0x0002b400
     e6c:	0002d800 	.word	0x0002d800
     e70:	50000100 	.word	0x50000100
     e74:	000002de 	.word	0x000002de
     e78:	000002fc 	.word	0x000002fc
     e7c:	02500001 	.word	0x02500001
     e80:	20000003 	.word	0x20000003
     e84:	01000003 	.word	0x01000003
     e88:	03265000 	.word	0x03265000
     e8c:	03400000 	.word	0x03400000
     e90:	00010000 	.word	0x00010000
     e94:	00034650 	.word	0x00034650
     e98:	00035800 	.word	0x00035800
     e9c:	50000100 	.word	0x50000100
	...
     ea8:	00000368 	.word	0x00000368
     eac:	0000036a 	.word	0x0000036a
     eb0:	6a5d0001 	.word	0x6a5d0001
     eb4:	ac000003 	.word	0xac000003
     eb8:	02000003 	.word	0x02000003
     ebc:	00107d00 	.word	0x00107d00
     ec0:	00000000 	.word	0x00000000
     ec4:	68000000 	.word	0x68000000
     ec8:	6e000003 	.word	0x6e000003
     ecc:	01000003 	.word	0x01000003
     ed0:	036e5000 	.word	0x036e5000
     ed4:	03ac0000 	.word	0x03ac0000
     ed8:	00010000 	.word	0x00010000
     edc:	00000056 	.word	0x00000056
     ee0:	00000000 	.word	0x00000000
     ee4:	00036800 	.word	0x00036800
     ee8:	00037400 	.word	0x00037400
     eec:	51000100 	.word	0x51000100
     ef0:	00000374 	.word	0x00000374
     ef4:	000003ac 	.word	0x000003ac
     ef8:	00550001 	.word	0x00550001
     efc:	00000000 	.word	0x00000000
     f00:	76000000 	.word	0x76000000
     f04:	7e000003 	.word	0x7e000003
     f08:	01000003 	.word	0x01000003
     f0c:	03965000 	.word	0x03965000
     f10:	03a20000 	.word	0x03a20000
     f14:	00010000 	.word	0x00010000
     f18:	00000050 	.word	0x00000050
     f1c:	00000000 	.word	0x00000000
     f20:	0003ac00 	.word	0x0003ac00
     f24:	0003ae00 	.word	0x0003ae00
     f28:	5d000100 	.word	0x5d000100
     f2c:	000003ae 	.word	0x000003ae
     f30:	000003e4 	.word	0x000003e4
     f34:	107d0002 	.word	0x107d0002
	...
     f40:	000003ac 	.word	0x000003ac
     f44:	000003b2 	.word	0x000003b2
     f48:	b2500001 	.word	0xb2500001
     f4c:	e4000003 	.word	0xe4000003
     f50:	01000003 	.word	0x01000003
     f54:	00005600 	.word	0x00005600
     f58:	00000000 	.word	0x00000000
     f5c:	03ac0000 	.word	0x03ac0000
     f60:	03b80000 	.word	0x03b80000
     f64:	00010000 	.word	0x00010000
     f68:	0003b851 	.word	0x0003b851
     f6c:	0003e400 	.word	0x0003e400
     f70:	55000100 	.word	0x55000100
	...
     f7c:	000003ba 	.word	0x000003ba
     f80:	000003c0 	.word	0x000003c0
     f84:	d0500001 	.word	0xd0500001
     f88:	dc000003 	.word	0xdc000003
     f8c:	01000003 	.word	0x01000003
     f90:	00005000 	.word	0x00005000
     f94:	00000000 	.word	0x00000000
     f98:	03e40000 	.word	0x03e40000
     f9c:	03e60000 	.word	0x03e60000
     fa0:	00010000 	.word	0x00010000
     fa4:	0003e65d 	.word	0x0003e65d
     fa8:	00042c00 	.word	0x00042c00
     fac:	7d000200 	.word	0x7d000200
     fb0:	00000010 	.word	0x00000010
     fb4:	00000000 	.word	0x00000000
     fb8:	0003e400 	.word	0x0003e400
     fbc:	0003ea00 	.word	0x0003ea00
     fc0:	50000100 	.word	0x50000100
     fc4:	000003ea 	.word	0x000003ea
     fc8:	0000042c 	.word	0x0000042c
     fcc:	00560001 	.word	0x00560001
     fd0:	00000000 	.word	0x00000000
     fd4:	e4000000 	.word	0xe4000000
     fd8:	f0000003 	.word	0xf0000003
     fdc:	01000003 	.word	0x01000003
     fe0:	03f05100 	.word	0x03f05100
     fe4:	042c0000 	.word	0x042c0000
     fe8:	00010000 	.word	0x00010000
     fec:	00000055 	.word	0x00000055
     ff0:	00000000 	.word	0x00000000
     ff4:	0003f200 	.word	0x0003f200
     ff8:	0003f800 	.word	0x0003f800
     ffc:	50000100 	.word	0x50000100
    1000:	0000040a 	.word	0x0000040a
    1004:	00000412 	.word	0x00000412
    1008:	16500001 	.word	0x16500001
    100c:	24000004 	.word	0x24000004
    1010:	01000004 	.word	0x01000004
    1014:	00005000 	.word	0x00005000
    1018:	00000000 	.word	0x00000000
    101c:	042c0000 	.word	0x042c0000
    1020:	042e0000 	.word	0x042e0000
    1024:	00010000 	.word	0x00010000
    1028:	00042e5d 	.word	0x00042e5d
    102c:	0004a400 	.word	0x0004a400
    1030:	7d000200 	.word	0x7d000200
    1034:	00000008 	.word	0x00000008
    1038:	00000000 	.word	0x00000000
    103c:	00043800 	.word	0x00043800
    1040:	00044200 	.word	0x00044200
    1044:	50000100 	.word	0x50000100
    1048:	00000462 	.word	0x00000462
    104c:	00000480 	.word	0x00000480
    1050:	86500001 	.word	0x86500001
    1054:	94000004 	.word	0x94000004
    1058:	01000004 	.word	0x01000004
    105c:	00005000 	.word	0x00005000
    1060:	00000000 	.word	0x00000000
    1064:	04a40000 	.word	0x04a40000
    1068:	04a60000 	.word	0x04a60000
    106c:	00010000 	.word	0x00010000
    1070:	0004a65d 	.word	0x0004a65d
    1074:	0004e000 	.word	0x0004e000
    1078:	7d000200 	.word	0x7d000200
    107c:	00000008 	.word	0x00000008
    1080:	00000000 	.word	0x00000000
    1084:	0004b000 	.word	0x0004b000
    1088:	0004c000 	.word	0x0004c000
    108c:	50000100 	.word	0x50000100
    1090:	000004ce 	.word	0x000004ce
    1094:	000004da 	.word	0x000004da
    1098:	00500001 	.word	0x00500001
    109c:	00000000 	.word	0x00000000
    10a0:	e0000000 	.word	0xe0000000
    10a4:	e2000004 	.word	0xe2000004
    10a8:	01000004 	.word	0x01000004
    10ac:	04e25d00 	.word	0x04e25d00
    10b0:	04e60000 	.word	0x04e60000
    10b4:	00020000 	.word	0x00020000
    10b8:	04e60c7d 	.word	0x04e60c7d
    10bc:	05280000 	.word	0x05280000
    10c0:	00020000 	.word	0x00020000
    10c4:	0000107d 	.word	0x0000107d
    10c8:	00000000 	.word	0x00000000
    10cc:	04e00000 	.word	0x04e00000
    10d0:	04ea0000 	.word	0x04ea0000
    10d4:	00010000 	.word	0x00010000
    10d8:	0004ea50 	.word	0x0004ea50
    10dc:	00052800 	.word	0x00052800
    10e0:	55000100 	.word	0x55000100
	...
    10ec:	000004f0 	.word	0x000004f0
    10f0:	000004f8 	.word	0x000004f8
    10f4:	12500001 	.word	0x12500001
    10f8:	1e000005 	.word	0x1e000005
    10fc:	01000005 	.word	0x01000005
    1100:	00005000 	.word	0x00005000
	...
    110c:	00020000 	.word	0x00020000
    1110:	00010000 	.word	0x00010000
    1114:	0000025d 	.word	0x0000025d
    1118:	00001c00 	.word	0x00001c00
    111c:	7d000200 	.word	0x7d000200
    1120:	00001c14 	.word	0x00001c14
    1124:	0000a600 	.word	0x0000a600
    1128:	7d000200 	.word	0x7d000200
    112c:	00000020 	.word	0x00000020
	...
    1138:	00002200 	.word	0x00002200
    113c:	51000100 	.word	0x51000100
    1140:	0000005c 	.word	0x0000005c
    1144:	00000064 	.word	0x00000064
    1148:	a2510001 	.word	0xa2510001
    114c:	a6000000 	.word	0xa6000000
    1150:	01000000 	.word	0x01000000
    1154:	00005100 	.word	0x00005100
    1158:	00000000 	.word	0x00000000
    115c:	00220000 	.word	0x00220000
    1160:	00340000 	.word	0x00340000
    1164:	00010000 	.word	0x00010000
    1168:	00005453 	.word	0x00005453
    116c:	00006a00 	.word	0x00006a00
    1170:	53000100 	.word	0x53000100
    1174:	0000006e 	.word	0x0000006e
    1178:	0000007a 	.word	0x0000007a
    117c:	9a530001 	.word	0x9a530001
    1180:	a6000000 	.word	0xa6000000
    1184:	01000000 	.word	0x01000000
    1188:	00005300 	.word	0x00005300
    118c:	00000000 	.word	0x00000000
    1190:	00b80000 	.word	0x00b80000
    1194:	00c20000 	.word	0x00c20000
    1198:	00010000 	.word	0x00010000
    119c:	00000050 	.word	0x00000050
    11a0:	00000000 	.word	0x00000000
    11a4:	0000c400 	.word	0x0000c400
    11a8:	0000c600 	.word	0x0000c600
    11ac:	50000100 	.word	0x50000100
	...
    11b8:	000000cc 	.word	0x000000cc
    11bc:	000000d6 	.word	0x000000d6
    11c0:	00500001 	.word	0x00500001
    11c4:	00000000 	.word	0x00000000
    11c8:	d8000000 	.word	0xd8000000
    11cc:	da000000 	.word	0xda000000
    11d0:	01000000 	.word	0x01000000
    11d4:	00005000 	.word	0x00005000
    11d8:	00000000 	.word	0x00000000
    11dc:	01080000 	.word	0x01080000
    11e0:	01180000 	.word	0x01180000
    11e4:	00010000 	.word	0x00010000
    11e8:	00000051 	.word	0x00000051
    11ec:	00000000 	.word	0x00000000
    11f0:	00011000 	.word	0x00011000
    11f4:	00011400 	.word	0x00011400
    11f8:	53000100 	.word	0x53000100
    11fc:	00000114 	.word	0x00000114
    1200:	00000118 	.word	0x00000118
    1204:	18520001 	.word	0x18520001
    1208:	1c000001 	.word	0x1c000001
    120c:	01000001 	.word	0x01000001
    1210:	011c5100 	.word	0x011c5100
    1214:	011e0000 	.word	0x011e0000
    1218:	00010000 	.word	0x00010000
    121c:	00011e53 	.word	0x00011e53
    1220:	00012800 	.word	0x00012800
    1224:	51000100 	.word	0x51000100
	...
    1230:	00000134 	.word	0x00000134
    1234:	00000136 	.word	0x00000136
    1238:	365d0001 	.word	0x365d0001
    123c:	94000001 	.word	0x94000001
    1240:	02000001 	.word	0x02000001
    1244:	000c7d00 	.word	0x000c7d00
    1248:	00000000 	.word	0x00000000
    124c:	34000000 	.word	0x34000000
    1250:	40000001 	.word	0x40000001
    1254:	01000001 	.word	0x01000001
    1258:	01405100 	.word	0x01405100
    125c:	01940000 	.word	0x01940000
    1260:	00010000 	.word	0x00010000
    1264:	00000055 	.word	0x00000055
    1268:	00000000 	.word	0x00000000
    126c:	00014a00 	.word	0x00014a00
    1270:	00015200 	.word	0x00015200
    1274:	5c000100 	.word	0x5c000100
    1278:	00000152 	.word	0x00000152
    127c:	0000015a 	.word	0x0000015a
    1280:	5a520001 	.word	0x5a520001
    1284:	78000001 	.word	0x78000001
    1288:	01000001 	.word	0x01000001
    128c:	01785c00 	.word	0x01785c00
    1290:	017c0000 	.word	0x017c0000
    1294:	00010000 	.word	0x00010000
    1298:	00017c53 	.word	0x00017c53
    129c:	00019400 	.word	0x00019400
    12a0:	52000100 	.word	0x52000100
	...
    12ac:	00000194 	.word	0x00000194
    12b0:	00000196 	.word	0x00000196
    12b4:	965d0001 	.word	0x965d0001
    12b8:	c8000001 	.word	0xc8000001
    12bc:	02000001 	.word	0x02000001
    12c0:	00087d00 	.word	0x00087d00
    12c4:	00000000 	.word	0x00000000
    12c8:	94000000 	.word	0x94000000
    12cc:	a2000001 	.word	0xa2000001
    12d0:	01000001 	.word	0x01000001
    12d4:	00005000 	.word	0x00005000
    12d8:	00000000 	.word	0x00000000
    12dc:	01940000 	.word	0x01940000
    12e0:	01a80000 	.word	0x01a80000
    12e4:	00010000 	.word	0x00010000
    12e8:	00000051 	.word	0x00000051
    12ec:	00000000 	.word	0x00000000
    12f0:	0001c800 	.word	0x0001c800
    12f4:	0001ca00 	.word	0x0001ca00
    12f8:	5d000100 	.word	0x5d000100
    12fc:	000001ca 	.word	0x000001ca
    1300:	000001d0 	.word	0x000001d0
    1304:	047d0002 	.word	0x047d0002
    1308:	000001d0 	.word	0x000001d0
    130c:	000001e0 	.word	0x000001e0
    1310:	087d0002 	.word	0x087d0002
	...
    131c:	000001e0 	.word	0x000001e0
    1320:	000001e2 	.word	0x000001e2
    1324:	e25d0001 	.word	0xe25d0001
    1328:	e6000001 	.word	0xe6000001
    132c:	02000001 	.word	0x02000001
    1330:	e6047d00 	.word	0xe6047d00
    1334:	88000001 	.word	0x88000001
    1338:	02000002 	.word	0x02000002
    133c:	00107d00 	.word	0x00107d00
    1340:	00000000 	.word	0x00000000
    1344:	e0000000 	.word	0xe0000000
    1348:	e8000001 	.word	0xe8000001
    134c:	01000001 	.word	0x01000001
    1350:	01ea5000 	.word	0x01ea5000
    1354:	02880000 	.word	0x02880000
    1358:	00020000 	.word	0x00020000
    135c:	0000047d 	.word	0x0000047d
    1360:	00000000 	.word	0x00000000
    1364:	0000      	.short	0x0000
    1366:	0064      	.short	0x0064
    1368:	00680000 	.word	0x00680000
    136c:	00010000 	.word	0x00010000
    1370:	00000050 	.word	0x00000050
    1374:	00000000 	.word	0x00000000
    1378:	00007800 	.word	0x00007800
    137c:	00007a00 	.word	0x00007a00
    1380:	5d000100 	.word	0x5d000100
    1384:	0000007a 	.word	0x0000007a
    1388:	000000f4 	.word	0x000000f4
    138c:	0c7d0002 	.word	0x0c7d0002
	...
    1398:	00000078 	.word	0x00000078
    139c:	000000a2 	.word	0x000000a2
    13a0:	d8500001 	.word	0xd8500001
    13a4:	f4000000 	.word	0xf4000000
    13a8:	01000000 	.word	0x01000000
    13ac:	00005000 	.word	0x00005000
    13b0:	00000000 	.word	0x00000000
    13b4:	00920000 	.word	0x00920000
    13b8:	00980000 	.word	0x00980000
    13bc:	00010000 	.word	0x00010000
    13c0:	00009852 	.word	0x00009852
    13c4:	0000a600 	.word	0x0000a600
    13c8:	51000100 	.word	0x51000100
    13cc:	000000a6 	.word	0x000000a6
    13d0:	000000be 	.word	0x000000be
    13d4:	00530001 	.word	0x00530001
    13d8:	00000000 	.word	0x00000000
    13dc:	bc000000 	.word	0xbc000000
    13e0:	c4000000 	.word	0xc4000000
    13e4:	01000000 	.word	0x01000000
    13e8:	00c45100 	.word	0x00c45100
    13ec:	00ce0000 	.word	0x00ce0000
    13f0:	00010000 	.word	0x00010000
    13f4:	00000053 	.word	0x00000053
    13f8:	00000000 	.word	0x00000000
    13fc:	0000ae00 	.word	0x0000ae00
    1400:	0000cc00 	.word	0x0000cc00
    1404:	52000100 	.word	0x52000100
	...
    1410:	00000118 	.word	0x00000118
    1414:	00000122 	.word	0x00000122
    1418:	00500001 	.word	0x00500001
    141c:	00000000 	.word	0x00000000
    1420:	48000000 	.word	0x48000000
    1424:	50000001 	.word	0x50000001
    1428:	01000001 	.word	0x01000001
    142c:	00005000 	.word	0x00005000
    1430:	00000000 	.word	0x00000000
    1434:	01700000 	.word	0x01700000
    1438:	017a0000 	.word	0x017a0000
    143c:	00010000 	.word	0x00010000
    1440:	00000050 	.word	0x00000050
    1444:	00000000 	.word	0x00000000
    1448:	0001a000 	.word	0x0001a000
    144c:	0001a400 	.word	0x0001a400
    1450:	51000100 	.word	0x51000100
	...
    145c:	000001f0 	.word	0x000001f0
    1460:	000001f4 	.word	0x000001f4
    1464:	00500001 	.word	0x00500001
    1468:	00000000 	.word	0x00000000
    146c:	18000000 	.word	0x18000000
    1470:	1a000002 	.word	0x1a000002
    1474:	01000002 	.word	0x01000002
    1478:	021a5d00 	.word	0x021a5d00
    147c:	02700000 	.word	0x02700000
    1480:	00020000 	.word	0x00020000
    1484:	0000087d 	.word	0x0000087d
    1488:	00000000 	.word	0x00000000
    148c:	02180000 	.word	0x02180000
    1490:	02420000 	.word	0x02420000
    1494:	00010000 	.word	0x00010000
    1498:	00000050 	.word	0x00000050
    149c:	00000000 	.word	0x00000000
    14a0:	00021800 	.word	0x00021800
    14a4:	00023000 	.word	0x00023000
    14a8:	51000100 	.word	0x51000100
	...
    14b4:	00000218 	.word	0x00000218
    14b8:	0000023a 	.word	0x0000023a
    14bc:	00520001 	.word	0x00520001
    14c0:	00000000 	.word	0x00000000
    14c4:	40000000 	.word	0x40000000
    14c8:	52000002 	.word	0x52000002
    14cc:	01000002 	.word	0x01000002
    14d0:	00005100 	.word	0x00005100
    14d4:	00000000 	.word	0x00000000
    14d8:	02280000 	.word	0x02280000
    14dc:	02300000 	.word	0x02300000
    14e0:	00010000 	.word	0x00010000
    14e4:	00023053 	.word	0x00023053
    14e8:	00023c00 	.word	0x00023c00
    14ec:	51000100 	.word	0x51000100
    14f0:	0000023c 	.word	0x0000023c
    14f4:	0000024e 	.word	0x0000024e
    14f8:	00520001 	.word	0x00520001
    14fc:	00000000 	.word	0x00000000
    1500:	70000000 	.word	0x70000000
    1504:	72000002 	.word	0x72000002
    1508:	01000002 	.word	0x01000002
    150c:	00005000 	.word	0x00005000
    1510:	00000000 	.word	0x00000000
    1514:	02720000 	.word	0x02720000
    1518:	02760000 	.word	0x02760000
    151c:	00010000 	.word	0x00010000
    1520:	00027a50 	.word	0x00027a50
    1524:	00029000 	.word	0x00029000
    1528:	53000100 	.word	0x53000100
	...
    1534:	00000290 	.word	0x00000290
    1538:	00000294 	.word	0x00000294
    153c:	00500001 	.word	0x00500001
    1540:	00000000 	.word	0x00000000
    1544:	a8000000 	.word	0xa8000000
    1548:	ac000002 	.word	0xac000002
    154c:	01000002 	.word	0x01000002
    1550:	00005000 	.word	0x00005000
    1554:	00000000 	.word	0x00000000
    1558:	02c00000 	.word	0x02c00000
    155c:	02c20000 	.word	0x02c20000
    1560:	00010000 	.word	0x00010000
    1564:	00000050 	.word	0x00000050
    1568:	00000000 	.word	0x00000000
    156c:	0002e000 	.word	0x0002e000
    1570:	0002ec00 	.word	0x0002ec00
    1574:	50000100 	.word	0x50000100
    1578:	000002ee 	.word	0x000002ee
    157c:	0000030c 	.word	0x0000030c
    1580:	1a500001 	.word	0x1a500001
    1584:	1e000003 	.word	0x1e000003
    1588:	01000003 	.word	0x01000003
    158c:	00005000 	.word	0x00005000
    1590:	00000000 	.word	0x00000000
    1594:	02ec0000 	.word	0x02ec0000
    1598:	02ee0000 	.word	0x02ee0000
    159c:	00010000 	.word	0x00010000
    15a0:	00030c50 	.word	0x00030c50
    15a4:	00031a00 	.word	0x00031a00
    15a8:	50000100 	.word	0x50000100
    15ac:	0000031e 	.word	0x0000031e
    15b0:	0000031e 	.word	0x0000031e
    15b4:	00500001 	.word	0x00500001
    15b8:	00000000 	.word	0x00000000
    15bc:	e6000000 	.word	0xe6000000
    15c0:	ea000002 	.word	0xea000002
    15c4:	01000002 	.word	0x01000002
    15c8:	02ee5300 	.word	0x02ee5300
    15cc:	02f60000 	.word	0x02f60000
    15d0:	00010000 	.word	0x00010000
    15d4:	00031a53 	.word	0x00031a53
    15d8:	00031c00 	.word	0x00031c00
    15dc:	53000100 	.word	0x53000100
	...
    15e8:	00000304 	.word	0x00000304
    15ec:	0000031a 	.word	0x0000031a
    15f0:	1e520001 	.word	0x1e520001
    15f4:	24000003 	.word	0x24000003
    15f8:	01000003 	.word	0x01000003
    15fc:	00005200 	.word	0x00005200
    1600:	00000000 	.word	0x00000000
    1604:	03240000 	.word	0x03240000
    1608:	03300000 	.word	0x03300000
    160c:	00010000 	.word	0x00010000
    1610:	00000050 	.word	0x00000050
    1614:	00000000 	.word	0x00000000
    1618:	00033000 	.word	0x00033000
    161c:	00033200 	.word	0x00033200
    1620:	50000100 	.word	0x50000100
	...
    162c:	00000338 	.word	0x00000338
    1630:	0000033a 	.word	0x0000033a
    1634:	3a5d0001 	.word	0x3a5d0001
    1638:	3c000003 	.word	0x3c000003
    163c:	02000003 	.word	0x02000003
    1640:	3c047d00 	.word	0x3c047d00
    1644:	44000003 	.word	0x44000003
    1648:	02000003 	.word	0x02000003
    164c:	00087d00 	.word	0x00087d00
    1650:	00000000 	.word	0x00000000
    1654:	44000000 	.word	0x44000000
    1658:	46000003 	.word	0x46000003
    165c:	01000003 	.word	0x01000003
    1660:	03465d00 	.word	0x03465d00
    1664:	034a0000 	.word	0x034a0000
    1668:	00020000 	.word	0x00020000
    166c:	034a047d 	.word	0x034a047d
    1670:	03520000 	.word	0x03520000
    1674:	00020000 	.word	0x00020000
    1678:	0000087d 	.word	0x0000087d
    167c:	00000000 	.word	0x00000000
    1680:	03440000 	.word	0x03440000
    1684:	03480000 	.word	0x03480000
    1688:	00010000 	.word	0x00010000
    168c:	00000050 	.word	0x00000050
    1690:	00000000 	.word	0x00000000
    1694:	00035400 	.word	0x00035400
    1698:	00035600 	.word	0x00035600
    169c:	5d000100 	.word	0x5d000100
    16a0:	00000356 	.word	0x00000356
    16a4:	00000358 	.word	0x00000358
    16a8:	047d0002 	.word	0x047d0002
    16ac:	00000358 	.word	0x00000358
    16b0:	00000360 	.word	0x00000360
    16b4:	087d0002 	.word	0x087d0002
	...
    16c0:	00000360 	.word	0x00000360
    16c4:	00000362 	.word	0x00000362
    16c8:	625d0001 	.word	0x625d0001
    16cc:	64000003 	.word	0x64000003
    16d0:	02000003 	.word	0x02000003
    16d4:	64047d00 	.word	0x64047d00
    16d8:	6c000003 	.word	0x6c000003
    16dc:	02000003 	.word	0x02000003
    16e0:	00087d00 	.word	0x00087d00
    16e4:	00000000 	.word	0x00000000
    16e8:	6c000000 	.word	0x6c000000
    16ec:	6e000003 	.word	0x6e000003
    16f0:	01000003 	.word	0x01000003
    16f4:	036e5d00 	.word	0x036e5d00
    16f8:	03700000 	.word	0x03700000
    16fc:	00020000 	.word	0x00020000
    1700:	0370047d 	.word	0x0370047d
    1704:	03780000 	.word	0x03780000
    1708:	00020000 	.word	0x00020000
    170c:	0000087d 	.word	0x0000087d
    1710:	00000000 	.word	0x00000000
    1714:	03780000 	.word	0x03780000
    1718:	037a0000 	.word	0x037a0000
    171c:	00010000 	.word	0x00010000
    1720:	00037a5d 	.word	0x00037a5d
    1724:	00037c00 	.word	0x00037c00
    1728:	7d000200 	.word	0x7d000200
    172c:	00037c04 	.word	0x00037c04
    1730:	00038400 	.word	0x00038400
    1734:	7d000200 	.word	0x7d000200
    1738:	00000008 	.word	0x00000008
    173c:	00000000 	.word	0x00000000
    1740:	00          	.byte	0x00
    1741:	18          	.byte	0x18
    1742:	0000      	.short	0x0000
    1744:	00002200 	.word	0x00002200
    1748:	50000100 	.word	0x50000100
	...
    1754:	0000001c 	.word	0x0000001c
    1758:	00000022 	.word	0x00000022
    175c:	22530001 	.word	0x22530001
    1760:	2c000000 	.word	0x2c000000
    1764:	01000000 	.word	0x01000000
    1768:	00005000 	.word	0x00005000
    176c:	00000000 	.word	0x00000000
    1770:	00380000 	.word	0x00380000
    1774:	00440000 	.word	0x00440000
    1778:	00010000 	.word	0x00010000
    177c:	00000050 	.word	0x00000050
    1780:	00000000 	.word	0x00000000
    1784:	00005c00 	.word	0x00005c00
    1788:	00006000 	.word	0x00006000
    178c:	5d000100 	.word	0x5d000100
    1790:	00000060 	.word	0x00000060
    1794:	00000064 	.word	0x00000064
    1798:	047d0002 	.word	0x047d0002
    179c:	00000064 	.word	0x00000064
    17a0:	00000090 	.word	0x00000090
    17a4:	087d0002 	.word	0x087d0002
	...
    17b0:	00000090 	.word	0x00000090
    17b4:	00000094 	.word	0x00000094
    17b8:	945d0001 	.word	0x945d0001
    17bc:	98000000 	.word	0x98000000
    17c0:	02000000 	.word	0x02000000
    17c4:	98047d00 	.word	0x98047d00
    17c8:	c8000000 	.word	0xc8000000
    17cc:	02000000 	.word	0x02000000
    17d0:	00087d00 	.word	0x00087d00
    17d4:	00000000 	.word	0x00000000
    17d8:	90000000 	.word	0x90000000
    17dc:	9e000000 	.word	0x9e000000
    17e0:	01000000 	.word	0x01000000
    17e4:	00005000 	.word	0x00005000
    17e8:	00000000 	.word	0x00000000
    17ec:	00900000 	.word	0x00900000
    17f0:	00ba0000 	.word	0x00ba0000
    17f4:	00010000 	.word	0x00010000
    17f8:	0000bc51 	.word	0x0000bc51
    17fc:	0000c000 	.word	0x0000c000
    1800:	51000100 	.word	0x51000100
	...
    180c:	00000096 	.word	0x00000096
    1810:	0000009e 	.word	0x0000009e
    1814:	9e530001 	.word	0x9e530001
    1818:	ba000000 	.word	0xba000000
    181c:	01000000 	.word	0x01000000
    1820:	00bc5000 	.word	0x00bc5000
    1824:	00c00000 	.word	0x00c00000
    1828:	00010000 	.word	0x00010000
    182c:	00000050 	.word	0x00000050
    1830:	00000000 	.word	0x00000000
    1834:	0000c800 	.word	0x0000c800
    1838:	0000ca00 	.word	0x0000ca00
    183c:	5d000100 	.word	0x5d000100
    1840:	000000ca 	.word	0x000000ca
    1844:	000000e0 	.word	0x000000e0
    1848:	087d0002 	.word	0x087d0002
	...
    1854:	00000074 	.word	0x00000074
    1858:	00000076 	.word	0x00000076
    185c:	765d0001 	.word	0x765d0001
    1860:	a4000000 	.word	0xa4000000
    1864:	02000000 	.word	0x02000000
    1868:	00087d00 	.word	0x00087d00
    186c:	00000000 	.word	0x00000000
    1870:	7c000000 	.word	0x7c000000
    1874:	82000000 	.word	0x82000000
    1878:	02000000 	.word	0x02000000
    187c:	82047d00 	.word	0x82047d00
    1880:	8a000000 	.word	0x8a000000
    1884:	01000000 	.word	0x01000000
    1888:	008a5300 	.word	0x008a5300
    188c:	00a40000 	.word	0x00a40000
    1890:	00020000 	.word	0x00020000
    1894:	0000047d 	.word	0x0000047d
    1898:	00000000 	.word	0x00000000
    189c:	00960000 	.word	0x00960000
    18a0:	00980000 	.word	0x00980000
    18a4:	00010000 	.word	0x00010000
    18a8:	00000050 	.word	0x00000050
    18ac:	00000000 	.word	0x00000000
    18b0:	0000c400 	.word	0x0000c400
    18b4:	0000ce00 	.word	0x0000ce00
    18b8:	50000100 	.word	0x50000100
	...
    18c4:	000000c8 	.word	0x000000c8
    18c8:	000000cc 	.word	0x000000cc
    18cc:	d0530001 	.word	0xd0530001
    18d0:	d8000000 	.word	0xd8000000
    18d4:	01000000 	.word	0x01000000
    18d8:	00005000 	.word	0x00005000
    18dc:	00000000 	.word	0x00000000
    18e0:	00e40000 	.word	0x00e40000
    18e4:	00ee0000 	.word	0x00ee0000
    18e8:	00010000 	.word	0x00010000
    18ec:	00000050 	.word	0x00000050
    18f0:	00000000 	.word	0x00000000
    18f4:	0000e800 	.word	0x0000e800
    18f8:	0000ee00 	.word	0x0000ee00
    18fc:	53000100 	.word	0x53000100
    1900:	000000ee 	.word	0x000000ee
    1904:	000000f8 	.word	0x000000f8
    1908:	00500001 	.word	0x00500001
    190c:	00000000 	.word	0x00000000
    1910:	08000000 	.word	0x08000000
    1914:	12000001 	.word	0x12000001
    1918:	01000001 	.word	0x01000001
    191c:	00005000 	.word	0x00005000
    1920:	00000000 	.word	0x00000000
    1924:	010c0000 	.word	0x010c0000
    1928:	01120000 	.word	0x01120000
    192c:	00010000 	.word	0x00010000
    1930:	00011253 	.word	0x00011253
    1934:	00011c00 	.word	0x00011c00
    1938:	50000100 	.word	0x50000100
	...
    1944:	0000011c 	.word	0x0000011c
    1948:	00000126 	.word	0x00000126
    194c:	00500001 	.word	0x00500001
    1950:	00000000 	.word	0x00000000
    1954:	20000000 	.word	0x20000000
    1958:	26000001 	.word	0x26000001
    195c:	01000001 	.word	0x01000001
    1960:	01265300 	.word	0x01265300
    1964:	01300000 	.word	0x01300000
    1968:	00010000 	.word	0x00010000
    196c:	00000050 	.word	0x00000050
    1970:	00000000 	.word	0x00000000
    1974:	00016c00 	.word	0x00016c00
    1978:	00017600 	.word	0x00017600
    197c:	50000100 	.word	0x50000100
	...
    1988:	00000170 	.word	0x00000170
    198c:	00000176 	.word	0x00000176
    1990:	76530001 	.word	0x76530001
    1994:	80000001 	.word	0x80000001
    1998:	01000001 	.word	0x01000001
    199c:	00005000 	.word	0x00005000
    19a0:	00000000 	.word	0x00000000
    19a4:	01ac0000 	.word	0x01ac0000
    19a8:	01b20000 	.word	0x01b20000
    19ac:	00010000 	.word	0x00010000
    19b0:	00000050 	.word	0x00000050
    19b4:	00000000 	.word	0x00000000
    19b8:	0001c800 	.word	0x0001c800
    19bc:	0001d600 	.word	0x0001d600
    19c0:	50000100 	.word	0x50000100
    19c4:	000001d6 	.word	0x000001d6
    19c8:	00000280 	.word	0x00000280
    19cc:	005c0001 	.word	0x005c0001
    19d0:	00000000 	.word	0x00000000
    19d4:	2a000000 	.word	0x2a000000
    19d8:	2c000002 	.word	0x2c000002
    19dc:	01000002 	.word	0x01000002
    19e0:	023e5300 	.word	0x023e5300
    19e4:	02400000 	.word	0x02400000
    19e8:	00010000 	.word	0x00010000
    19ec:	00025053 	.word	0x00025053
    19f0:	00025200 	.word	0x00025200
    19f4:	53000100 	.word	0x53000100
    19f8:	00000262 	.word	0x00000262
    19fc:	00000264 	.word	0x00000264
    1a00:	00530001 	.word	0x00530001
    1a04:	00000000 	.word	0x00000000
    1a08:	e4000000 	.word	0xe4000000
    1a0c:	1a000001 	.word	0x1a000001
    1a10:	01000002 	.word	0x01000002
    1a14:	021c5200 	.word	0x021c5200
    1a18:	02260000 	.word	0x02260000
    1a1c:	00010000 	.word	0x00010000
    1a20:	00000052 	.word	0x00000052
    1a24:	00000000 	.word	0x00000000
    1a28:	00033000 	.word	0x00033000
    1a2c:	00036600 	.word	0x00036600
    1a30:	50000100 	.word	0x50000100
	...
    1a3c:	00000332 	.word	0x00000332
    1a40:	0000033a 	.word	0x0000033a
    1a44:	48530001 	.word	0x48530001
    1a48:	50000003 	.word	0x50000003
    1a4c:	01000003 	.word	0x01000003
    1a50:	035e5300 	.word	0x035e5300
    1a54:	03600000 	.word	0x03600000
    1a58:	00010000 	.word	0x00010000
    1a5c:	00000053 	.word	0x00000053
    1a60:	00000000 	.word	0x00000000
    1a64:	00034600 	.word	0x00034600
    1a68:	00034800 	.word	0x00034800
    1a6c:	53000100 	.word	0x53000100
    1a70:	0000035c 	.word	0x0000035c
    1a74:	0000035e 	.word	0x0000035e
    1a78:	62530001 	.word	0x62530001
    1a7c:	74000003 	.word	0x74000003
    1a80:	01000003 	.word	0x01000003
    1a84:	00005300 	.word	0x00005300
    1a88:	00000000 	.word	0x00000000
    1a8c:	03840000 	.word	0x03840000
    1a90:	03900000 	.word	0x03900000
    1a94:	00010000 	.word	0x00010000
    1a98:	00000050 	.word	0x00000050
    1a9c:	00000000 	.word	0x00000000
    1aa0:	00007c00 	.word	0x00007c00
    1aa4:	00008400 	.word	0x00008400
    1aa8:	50000100 	.word	0x50000100
    1aac:	00000084 	.word	0x00000084
    1ab0:	000000a4 	.word	0x000000a4
    1ab4:	00520001 	.word	0x00520001
    1ab8:	00000000 	.word	0x00000000
    1abc:	90000000 	.word	0x90000000
    1ac0:	92000000 	.word	0x92000000
    1ac4:	01000000 	.word	0x01000000
    1ac8:	00965000 	.word	0x00965000
    1acc:	00980000 	.word	0x00980000
    1ad0:	00010000 	.word	0x00010000
    1ad4:	00000050 	.word	0x00000050
	...
    1ae0:	00000400 	.word	0x00000400
    1ae4:	5d000100 	.word	0x5d000100
    1ae8:	00000004 	.word	0x00000004
    1aec:	00000054 	.word	0x00000054
    1af0:	087d0002 	.word	0x087d0002
	...
    1b00:	00000002 	.word	0x00000002
    1b04:	16500001 	.word	0x16500001
    1b08:	54000000 	.word	0x54000000
    1b0c:	02000000 	.word	0x02000000
    1b10:	00047d00 	.word	0x00047d00
	...
    1b1c:	42000000 	.word	0x42000000
    1b20:	01000000 	.word	0x01000000
    1b24:	00425100 	.word	0x00425100
    1b28:	00540000 	.word	0x00540000
    1b2c:	00010000 	.word	0x00010000
    1b30:	0000005c 	.word	0x0000005c
    1b34:	00000000 	.word	0x00000000
    1b38:	00005400 	.word	0x00005400
    1b3c:	00006800 	.word	0x00006800
    1b40:	5d000100 	.word	0x5d000100
    1b44:	00000068 	.word	0x00000068
    1b48:	0000009e 	.word	0x0000009e
    1b4c:	147d0002 	.word	0x147d0002
    1b50:	0000009e 	.word	0x0000009e
    1b54:	00000104 	.word	0x00000104
    1b58:	207d0002 	.word	0x207d0002
	...
    1b64:	00000054 	.word	0x00000054
    1b68:	00000056 	.word	0x00000056
    1b6c:	a8500001 	.word	0xa8500001
    1b70:	04000000 	.word	0x04000000
    1b74:	02000001 	.word	0x02000001
    1b78:	00047d00 	.word	0x00047d00
    1b7c:	00000000 	.word	0x00000000
    1b80:	54000000 	.word	0x54000000
    1b84:	64000000 	.word	0x64000000
    1b88:	01000000 	.word	0x01000000
    1b8c:	00645100 	.word	0x00645100
    1b90:	01040000 	.word	0x01040000
    1b94:	00010000 	.word	0x00010000
    1b98:	0000005c 	.word	0x0000005c
    1b9c:	00000000 	.word	0x00000000
    1ba0:	00007200 	.word	0x00007200
    1ba4:	0000ea00 	.word	0x0000ea00
    1ba8:	56000100 	.word	0x56000100
    1bac:	000000ea 	.word	0x000000ea
    1bb0:	00000104 	.word	0x00000104
    1bb4:	00530001 	.word	0x00530001
    1bb8:	00000000 	.word	0x00000000
    1bbc:	7a000000 	.word	0x7a000000
    1bc0:	80000000 	.word	0x80000000
    1bc4:	01000000 	.word	0x01000000
    1bc8:	00805100 	.word	0x00805100
    1bcc:	00820000 	.word	0x00820000
    1bd0:	00010000 	.word	0x00010000
    1bd4:	00008253 	.word	0x00008253
    1bd8:	00008600 	.word	0x00008600
    1bdc:	51000100 	.word	0x51000100
    1be0:	00000086 	.word	0x00000086
    1be4:	000000ae 	.word	0x000000ae
    1be8:	ae540001 	.word	0xae540001
    1bec:	c2000000 	.word	0xc2000000
    1bf0:	01000000 	.word	0x01000000
    1bf4:	00c25200 	.word	0x00c25200
    1bf8:	00d20000 	.word	0x00d20000
    1bfc:	00010000 	.word	0x00010000
    1c00:	0000d253 	.word	0x0000d253
    1c04:	00010400 	.word	0x00010400
    1c08:	54000100 	.word	0x54000100
	...
    1c14:	0000006a 	.word	0x0000006a
    1c18:	000000ce 	.word	0x000000ce
    1c1c:	ce550001 	.word	0xce550001
    1c20:	e2000000 	.word	0xe2000000
    1c24:	01000000 	.word	0x01000000
    1c28:	00e25100 	.word	0x00e25100
    1c2c:	00e60000 	.word	0x00e60000
    1c30:	00010000 	.word	0x00010000
    1c34:	0000e653 	.word	0x0000e653
    1c38:	00010400 	.word	0x00010400
    1c3c:	55000100 	.word	0x55000100
	...
    1c48:	00000104 	.word	0x00000104
    1c4c:	00000108 	.word	0x00000108
    1c50:	085d0001 	.word	0x085d0001
    1c54:	48000001 	.word	0x48000001
    1c58:	02000001 	.word	0x02000001
    1c5c:	48147d00 	.word	0x48147d00
    1c60:	bc000001 	.word	0xbc000001
    1c64:	02000001 	.word	0x02000001
    1c68:	00207d00 	.word	0x00207d00
    1c6c:	00000000 	.word	0x00000000
    1c70:	04000000 	.word	0x04000000
    1c74:	06000001 	.word	0x06000001
    1c78:	01000001 	.word	0x01000001
    1c7c:	01525000 	.word	0x01525000
    1c80:	01bc0000 	.word	0x01bc0000
    1c84:	00020000 	.word	0x00020000
    1c88:	0000047d 	.word	0x0000047d
    1c8c:	00000000 	.word	0x00000000
    1c90:	01040000 	.word	0x01040000
    1c94:	01560000 	.word	0x01560000
    1c98:	00010000 	.word	0x00010000
    1c9c:	00015651 	.word	0x00015651
    1ca0:	0001bc00 	.word	0x0001bc00
    1ca4:	5c000100 	.word	0x5c000100
	...
    1cb0:	00000122 	.word	0x00000122
    1cb4:	0000019e 	.word	0x0000019e
    1cb8:	9e560001 	.word	0x9e560001
    1cbc:	a6000001 	.word	0xa6000001
    1cc0:	01000001 	.word	0x01000001
    1cc4:	01a85300 	.word	0x01a85300
    1cc8:	01bc0000 	.word	0x01bc0000
    1ccc:	00010000 	.word	0x00010000
    1cd0:	00000053 	.word	0x00000053
    1cd4:	00000000 	.word	0x00000000
    1cd8:	00011a00 	.word	0x00011a00
    1cdc:	00012a00 	.word	0x00012a00
    1ce0:	53000100 	.word	0x53000100
    1ce4:	0000012e 	.word	0x0000012e
    1ce8:	00000132 	.word	0x00000132
    1cec:	34530001 	.word	0x34530001
    1cf0:	5a000001 	.word	0x5a000001
    1cf4:	01000001 	.word	0x01000001
    1cf8:	015a5400 	.word	0x015a5400
    1cfc:	016c0000 	.word	0x016c0000
    1d00:	00010000 	.word	0x00010000
    1d04:	00017052 	.word	0x00017052
    1d08:	00017c00 	.word	0x00017c00
    1d0c:	53000100 	.word	0x53000100
    1d10:	0000017e 	.word	0x0000017e
    1d14:	000001bc 	.word	0x000001bc
    1d18:	00540001 	.word	0x00540001
    1d1c:	00000000 	.word	0x00000000
    1d20:	1c000000 	.word	0x1c000000
    1d24:	86000001 	.word	0x86000001
    1d28:	01000001 	.word	0x01000001
    1d2c:	01865500 	.word	0x01865500
    1d30:	018e0000 	.word	0x018e0000
    1d34:	00010000 	.word	0x00010000
    1d38:	00019453 	.word	0x00019453
    1d3c:	00019800 	.word	0x00019800
    1d40:	53000100 	.word	0x53000100
    1d44:	0000019a 	.word	0x0000019a
    1d48:	000001bc 	.word	0x000001bc
    1d4c:	00550001 	.word	0x00550001
    1d50:	00000000 	.word	0x00000000
    1d54:	bc000000 	.word	0xbc000000
    1d58:	c0000001 	.word	0xc0000001
    1d5c:	01000001 	.word	0x01000001
    1d60:	01c05d00 	.word	0x01c05d00
    1d64:	02000000 	.word	0x02000000
    1d68:	00020000 	.word	0x00020000
    1d6c:	0200147d 	.word	0x0200147d
    1d70:	02700000 	.word	0x02700000
    1d74:	00020000 	.word	0x00020000
    1d78:	0000207d 	.word	0x0000207d
    1d7c:	00000000 	.word	0x00000000
    1d80:	01bc0000 	.word	0x01bc0000
    1d84:	01be0000 	.word	0x01be0000
    1d88:	00010000 	.word	0x00010000
    1d8c:	00020a50 	.word	0x00020a50
    1d90:	00027000 	.word	0x00027000
    1d94:	7d000200 	.word	0x7d000200
    1d98:	00000004 	.word	0x00000004
    1d9c:	00000000 	.word	0x00000000
    1da0:	0001bc00 	.word	0x0001bc00
    1da4:	00020e00 	.word	0x00020e00
    1da8:	51000100 	.word	0x51000100
    1dac:	0000020e 	.word	0x0000020e
    1db0:	00000270 	.word	0x00000270
    1db4:	005c0001 	.word	0x005c0001
    1db8:	00000000 	.word	0x00000000
    1dbc:	da000000 	.word	0xda000000
    1dc0:	56000001 	.word	0x56000001
    1dc4:	01000002 	.word	0x01000002
    1dc8:	02565600 	.word	0x02565600
    1dcc:	02700000 	.word	0x02700000
    1dd0:	00010000 	.word	0x00010000
    1dd4:	00000053 	.word	0x00000053
    1dd8:	00000000 	.word	0x00000000
    1ddc:	0001d200 	.word	0x0001d200
    1de0:	0001e200 	.word	0x0001e200
    1de4:	53000100 	.word	0x53000100
    1de8:	000001e6 	.word	0x000001e6
    1dec:	000001ea 	.word	0x000001ea
    1df0:	ec530001 	.word	0xec530001
    1df4:	12000001 	.word	0x12000001
    1df8:	01000002 	.word	0x01000002
    1dfc:	02125400 	.word	0x02125400
    1e00:	02240000 	.word	0x02240000
    1e04:	00010000 	.word	0x00010000
    1e08:	00022852 	.word	0x00022852
    1e0c:	00023400 	.word	0x00023400
    1e10:	53000100 	.word	0x53000100
    1e14:	00000236 	.word	0x00000236
    1e18:	00000270 	.word	0x00000270
    1e1c:	00540001 	.word	0x00540001
    1e20:	00000000 	.word	0x00000000
    1e24:	d4000000 	.word	0xd4000000
    1e28:	3e000001 	.word	0x3e000001
    1e2c:	01000002 	.word	0x01000002
    1e30:	023e5500 	.word	0x023e5500
    1e34:	02460000 	.word	0x02460000
    1e38:	00010000 	.word	0x00010000
    1e3c:	00024c53 	.word	0x00024c53
    1e40:	00025000 	.word	0x00025000
    1e44:	53000100 	.word	0x53000100
    1e48:	00000252 	.word	0x00000252
    1e4c:	00000270 	.word	0x00000270
    1e50:	00550001 	.word	0x00550001
    1e54:	00000000 	.word	0x00000000
    1e58:	70000000 	.word	0x70000000
    1e5c:	74000002 	.word	0x74000002
    1e60:	01000002 	.word	0x01000002
    1e64:	02745d00 	.word	0x02745d00
    1e68:	02820000 	.word	0x02820000
    1e6c:	00020000 	.word	0x00020000
    1e70:	0282147d 	.word	0x0282147d
    1e74:	03040000 	.word	0x03040000
    1e78:	00020000 	.word	0x00020000
    1e7c:	0000287d 	.word	0x0000287d
    1e80:	00000000 	.word	0x00000000
    1e84:	02700000 	.word	0x02700000
    1e88:	02720000 	.word	0x02720000
    1e8c:	00010000 	.word	0x00010000
    1e90:	0002b450 	.word	0x0002b450
    1e94:	00030400 	.word	0x00030400
    1e98:	7d000200 	.word	0x7d000200
    1e9c:	0000000c 	.word	0x0000000c
    1ea0:	00000000 	.word	0x00000000
    1ea4:	00027000 	.word	0x00027000
    1ea8:	0002b800 	.word	0x0002b800
    1eac:	51000100 	.word	0x51000100
    1eb0:	000002b8 	.word	0x000002b8
    1eb4:	00000304 	.word	0x00000304
    1eb8:	00540001 	.word	0x00540001
    1ebc:	00000000 	.word	0x00000000
    1ec0:	94000000 	.word	0x94000000
    1ec4:	cc000002 	.word	0xcc000002
    1ec8:	01000002 	.word	0x01000002
    1ecc:	02cc5500 	.word	0x02cc5500
    1ed0:	02d40000 	.word	0x02d40000
    1ed4:	00010000 	.word	0x00010000
    1ed8:	0002d653 	.word	0x0002d653
    1edc:	0002e200 	.word	0x0002e200
    1ee0:	53000100 	.word	0x53000100
	...
    1eec:	00000286 	.word	0x00000286
    1ef0:	000002e2 	.word	0x000002e2
    1ef4:	087d0002 	.word	0x087d0002
    1ef8:	000002e2 	.word	0x000002e2
    1efc:	000002ea 	.word	0x000002ea
    1f00:	ee530001 	.word	0xee530001
    1f04:	f2000002 	.word	0xf2000002
    1f08:	01000002 	.word	0x01000002
    1f0c:	02f45300 	.word	0x02f45300
    1f10:	03040000 	.word	0x03040000
    1f14:	00010000 	.word	0x00010000
    1f18:	00000053 	.word	0x00000053
    1f1c:	00000000 	.word	0x00000000
    1f20:	00028e00 	.word	0x00028e00
    1f24:	0002bc00 	.word	0x0002bc00
    1f28:	5c000100 	.word	0x5c000100
    1f2c:	000002bc 	.word	0x000002bc
    1f30:	000002c4 	.word	0x000002c4
    1f34:	c8530001 	.word	0xc8530001
    1f38:	04000002 	.word	0x04000002
    1f3c:	01000003 	.word	0x01000003
    1f40:	00005c00 	.word	0x00005c00
    1f44:	00000000 	.word	0x00000000
    1f48:	03040000 	.word	0x03040000
    1f4c:	03080000 	.word	0x03080000
    1f50:	00010000 	.word	0x00010000
    1f54:	0003085d 	.word	0x0003085d
    1f58:	00047000 	.word	0x00047000
    1f5c:	7d000200 	.word	0x7d000200
    1f60:	0000000c 	.word	0x0000000c
    1f64:	00000000 	.word	0x00000000
    1f68:	00030400 	.word	0x00030400
    1f6c:	00030e00 	.word	0x00030e00
    1f70:	50000100 	.word	0x50000100
    1f74:	0000030e 	.word	0x0000030e
    1f78:	00000470 	.word	0x00000470
    1f7c:	00540001 	.word	0x00540001
    1f80:	00000000 	.word	0x00000000
    1f84:	04000000 	.word	0x04000000
    1f88:	0e000003 	.word	0x0e000003
    1f8c:	01000003 	.word	0x01000003
    1f90:	030e5100 	.word	0x030e5100
    1f94:	04700000 	.word	0x04700000
    1f98:	00010000 	.word	0x00010000
    1f9c:	00000055 	.word	0x00000055
    1fa0:	00000000 	.word	0x00000000
    1fa4:	00034400 	.word	0x00034400
    1fa8:	00034c00 	.word	0x00034c00
    1fac:	53000100 	.word	0x53000100
	...
    1fb8:	00000332 	.word	0x00000332
    1fbc:	0000034e 	.word	0x0000034e
    1fc0:	00520001 	.word	0x00520001
    1fc4:	00000000 	.word	0x00000000
    1fc8:	80000000 	.word	0x80000000
    1fcc:	8e000003 	.word	0x8e000003
    1fd0:	01000003 	.word	0x01000003
    1fd4:	03925300 	.word	0x03925300
    1fd8:	039a0000 	.word	0x039a0000
    1fdc:	00010000 	.word	0x00010000
    1fe0:	00039e53 	.word	0x00039e53
    1fe4:	0003a800 	.word	0x0003a800
    1fe8:	53000100 	.word	0x53000100
	...
    1ff4:	000003a2 	.word	0x000003a2
    1ff8:	000003aa 	.word	0x000003aa
    1ffc:	00520001 	.word	0x00520001
    2000:	00000000 	.word	0x00000000
    2004:	fc000000 	.word	0xfc000000
    2008:	06000003 	.word	0x06000003
    200c:	01000004 	.word	0x01000004
    2010:	00005300 	.word	0x00005300
    2014:	00000000 	.word	0x00000000
    2018:	04000000 	.word	0x04000000
    201c:	04080000 	.word	0x04080000
    2020:	00010000 	.word	0x00010000
    2024:	00000052 	.word	0x00000052
    2028:	00000000 	.word	0x00000000
    202c:	00044c00 	.word	0x00044c00
    2030:	00045600 	.word	0x00045600
    2034:	53000100 	.word	0x53000100
	...
    2040:	00000450 	.word	0x00000450
    2044:	00000458 	.word	0x00000458
    2048:	00520001 	.word	0x00520001
    204c:	00000000 	.word	0x00000000
    2050:	70000000 	.word	0x70000000
    2054:	74000004 	.word	0x74000004
    2058:	01000004 	.word	0x01000004
    205c:	04745d00 	.word	0x04745d00
    2060:	05ca0000 	.word	0x05ca0000
    2064:	00020000 	.word	0x00020000
    2068:	0000147d 	.word	0x0000147d
    206c:	00000000 	.word	0x00000000
    2070:	04700000 	.word	0x04700000
    2074:	047c0000 	.word	0x047c0000
    2078:	00010000 	.word	0x00010000
    207c:	00047c51 	.word	0x00047c51
    2080:	0005ca00 	.word	0x0005ca00
    2084:	5c000100 	.word	0x5c000100
	...
    2090:	000004ba 	.word	0x000004ba
    2094:	000004c8 	.word	0x000004c8
    2098:	00530001 	.word	0x00530001
    209c:	00000000 	.word	0x00000000
    20a0:	b4000000 	.word	0xb4000000
    20a4:	ee000004 	.word	0xee000004
    20a8:	01000004 	.word	0x01000004
    20ac:	00005200 	.word	0x00005200
    20b0:	00000000 	.word	0x00000000
    20b4:	04f20000 	.word	0x04f20000
    20b8:	05000000 	.word	0x05000000
    20bc:	00010000 	.word	0x00010000
    20c0:	00050453 	.word	0x00050453
    20c4:	00051600 	.word	0x00051600
    20c8:	53000100 	.word	0x53000100
	...
    20d4:	00000510 	.word	0x00000510
    20d8:	0000052c 	.word	0x0000052c
    20dc:	c6520001 	.word	0xc6520001
    20e0:	ca000005 	.word	0xca000005
    20e4:	01000005 	.word	0x01000005
    20e8:	00005200 	.word	0x00005200
    20ec:	00000000 	.word	0x00000000
    20f0:	05400000 	.word	0x05400000
    20f4:	054e0000 	.word	0x054e0000
    20f8:	00010000 	.word	0x00010000
    20fc:	00055253 	.word	0x00055253
    2100:	00055a00 	.word	0x00055a00
    2104:	53000100 	.word	0x53000100
    2108:	0000055e 	.word	0x0000055e
    210c:	00000568 	.word	0x00000568
    2110:	00530001 	.word	0x00530001
    2114:	00000000 	.word	0x00000000
    2118:	62000000 	.word	0x62000000
    211c:	92000005 	.word	0x92000005
    2120:	01000005 	.word	0x01000005
    2124:	00005200 	.word	0x00005200
    2128:	00000000 	.word	0x00000000
    212c:	05ae0000 	.word	0x05ae0000
    2130:	05b60000 	.word	0x05b60000
    2134:	00010000 	.word	0x00010000
    2138:	00000053 	.word	0x00000053
    213c:	00000000 	.word	0x00000000
    2140:	0006a000 	.word	0x0006a000
    2144:	0006a200 	.word	0x0006a200
    2148:	52000100 	.word	0x52000100
	...
    2154:	000006d0 	.word	0x000006d0
    2158:	000006dc 	.word	0x000006dc
    215c:	00510001 	.word	0x00510001
    2160:	00000000 	.word	0x00000000
    2164:	d6000000 	.word	0xd6000000
    2168:	dc000006 	.word	0xdc000006
    216c:	01000006 	.word	0x01000006
    2170:	06dc5300 	.word	0x06dc5300
    2174:	06ea0000 	.word	0x06ea0000
    2178:	00010000 	.word	0x00010000
    217c:	00000051 	.word	0x00000051
    2180:	00000000 	.word	0x00000000
    2184:	0006ec00 	.word	0x0006ec00
    2188:	0006ee00 	.word	0x0006ee00
    218c:	5d000100 	.word	0x5d000100
    2190:	000006ee 	.word	0x000006ee
    2194:	0000077e 	.word	0x0000077e
    2198:	087d0002 	.word	0x087d0002
	...
    21a4:	000006ec 	.word	0x000006ec
    21a8:	000006f4 	.word	0x000006f4
    21ac:	f4510001 	.word	0xf4510001
    21b0:	7e000006 	.word	0x7e000006
    21b4:	01000007 	.word	0x01000007
    21b8:	00005400 	.word	0x00005400
    21bc:	00000000 	.word	0x00000000
    21c0:	06ec0000 	.word	0x06ec0000
    21c4:	06f80000 	.word	0x06f80000
    21c8:	00010000 	.word	0x00010000
    21cc:	0006f852 	.word	0x0006f852
    21d0:	00077e00 	.word	0x00077e00
    21d4:	51000100 	.word	0x51000100
	...
    21e0:	000006ec 	.word	0x000006ec
    21e4:	000006f8 	.word	0x000006f8
    21e8:	f8530001 	.word	0xf8530001
    21ec:	7e000006 	.word	0x7e000006
    21f0:	01000007 	.word	0x01000007
    21f4:	00005c00 	.word	0x00005c00
    21f8:	00000000 	.word	0x00000000
    21fc:	070c0000 	.word	0x070c0000
    2200:	07240000 	.word	0x07240000
    2204:	00010000 	.word	0x00010000
    2208:	00072a53 	.word	0x00072a53
    220c:	00072e00 	.word	0x00072e00
    2210:	53000100 	.word	0x53000100
    2214:	0000075e 	.word	0x0000075e
    2218:	00000764 	.word	0x00000764
    221c:	00530001 	.word	0x00530001
    2220:	00000000 	.word	0x00000000
    2224:	2c000000 	.word	0x2c000000
    2228:	2e000007 	.word	0x2e000007
    222c:	01000007 	.word	0x01000007
    2230:	075e5200 	.word	0x075e5200
    2234:	077e0000 	.word	0x077e0000
    2238:	00010000 	.word	0x00010000
    223c:	00000052 	.word	0x00000052
    2240:	00000000 	.word	0x00000000
    2244:	00075c00 	.word	0x00075c00
    2248:	00076400 	.word	0x00076400
    224c:	53000100 	.word	0x53000100
	...
    2258:	00000768 	.word	0x00000768
    225c:	00000774 	.word	0x00000774
    2260:	00530001 	.word	0x00530001
    2264:	00000000 	.word	0x00000000
    2268:	80000000 	.word	0x80000000
    226c:	8c000007 	.word	0x8c000007
    2270:	01000007 	.word	0x01000007
    2274:	00005100 	.word	0x00005100
    2278:	00000000 	.word	0x00000000
    227c:	07800000 	.word	0x07800000
    2280:	078e0000 	.word	0x078e0000
    2284:	00010000 	.word	0x00010000
    2288:	00000052 	.word	0x00000052
    228c:	00000000 	.word	0x00000000
    2290:	00078000 	.word	0x00078000
    2294:	00079800 	.word	0x00079800
    2298:	53000100 	.word	0x53000100
	...
    22a4:	000007a8 	.word	0x000007a8
    22a8:	000007b4 	.word	0x000007b4
    22ac:	00510001 	.word	0x00510001
    22b0:	00000000 	.word	0x00000000
    22b4:	a8000000 	.word	0xa8000000
    22b8:	b6000007 	.word	0xb6000007
    22bc:	01000007 	.word	0x01000007
    22c0:	00005200 	.word	0x00005200
    22c4:	00000000 	.word	0x00000000
    22c8:	07a80000 	.word	0x07a80000
    22cc:	07c00000 	.word	0x07c00000
    22d0:	00010000 	.word	0x00010000
    22d4:	00000053 	.word	0x00000053
    22d8:	00000000 	.word	0x00000000
    22dc:	0007cc00 	.word	0x0007cc00
    22e0:	0007d800 	.word	0x0007d800
    22e4:	51000100 	.word	0x51000100
	...
    22f0:	000007cc 	.word	0x000007cc
    22f4:	000007da 	.word	0x000007da
    22f8:	00520001 	.word	0x00520001
    22fc:	00000000 	.word	0x00000000
    2300:	ec000000 	.word	0xec000000
    2304:	f8000007 	.word	0xf8000007
    2308:	01000007 	.word	0x01000007
    230c:	00005100 	.word	0x00005100
    2310:	00000000 	.word	0x00000000
    2314:	07f20000 	.word	0x07f20000
    2318:	07f80000 	.word	0x07f80000
    231c:	00010000 	.word	0x00010000
    2320:	0007f853 	.word	0x0007f853
    2324:	0007fc00 	.word	0x0007fc00
    2328:	51000100 	.word	0x51000100
	...
    2334:	000007fc 	.word	0x000007fc
    2338:	00000808 	.word	0x00000808
    233c:	00510001 	.word	0x00510001
    2340:	00000000 	.word	0x00000000
    2344:	02000000 	.word	0x02000000
    2348:	08000008 	.word	0x08000008
    234c:	01000008 	.word	0x01000008
    2350:	08085300 	.word	0x08085300
    2354:	080c0000 	.word	0x080c0000
    2358:	00010000 	.word	0x00010000
    235c:	00000051 	.word	0x00000051
    2360:	00000000 	.word	0x00000000
    2364:	00080c00 	.word	0x00080c00
    2368:	00081200 	.word	0x00081200
    236c:	5d000100 	.word	0x5d000100
    2370:	00000812 	.word	0x00000812
    2374:	00000852 	.word	0x00000852
    2378:	0c7d0002 	.word	0x0c7d0002
	...
    2384:	0000080c 	.word	0x0000080c
    2388:	00000844 	.word	0x00000844
    238c:	00510001 	.word	0x00510001
    2390:	00000000 	.word	0x00000000
    2394:	0c000000 	.word	0x0c000000
    2398:	34000008 	.word	0x34000008
    239c:	01000008 	.word	0x01000008
    23a0:	00005200 	.word	0x00005200
    23a4:	00000000 	.word	0x00000000
    23a8:	08280000 	.word	0x08280000
    23ac:	08440000 	.word	0x08440000
    23b0:	00010000 	.word	0x00010000
    23b4:	0008445c 	.word	0x0008445c
    23b8:	00085200 	.word	0x00085200
    23bc:	51000100 	.word	0x51000100
	...
    23c8:	00000854 	.word	0x00000854
    23cc:	00000860 	.word	0x00000860
    23d0:	00510001 	.word	0x00510001
    23d4:	00000000 	.word	0x00000000
    23d8:	5a000000 	.word	0x5a000000
    23dc:	60000008 	.word	0x60000008
    23e0:	01000008 	.word	0x01000008
    23e4:	08605300 	.word	0x08605300
    23e8:	08640000 	.word	0x08640000
    23ec:	00010000 	.word	0x00010000
    23f0:	00000051 	.word	0x00000051
    23f4:	00000000 	.word	0x00000000
    23f8:	00086a00 	.word	0x00086a00
    23fc:	00087200 	.word	0x00087200
    2400:	53000100 	.word	0x53000100
    2404:	00000874 	.word	0x00000874
    2408:	00000878 	.word	0x00000878
    240c:	00530001 	.word	0x00530001
    2410:	00000000 	.word	0x00000000
    2414:	78000000 	.word	0x78000000
    2418:	84000008 	.word	0x84000008
    241c:	01000008 	.word	0x01000008
    2420:	00005100 	.word	0x00005100
    2424:	00000000 	.word	0x00000000
    2428:	087e0000 	.word	0x087e0000
    242c:	08840000 	.word	0x08840000
    2430:	00010000 	.word	0x00010000
    2434:	00088453 	.word	0x00088453
    2438:	00088800 	.word	0x00088800
    243c:	51000100 	.word	0x51000100
	...
    2448:	0000088e 	.word	0x0000088e
    244c:	00000896 	.word	0x00000896
    2450:	98530001 	.word	0x98530001
    2454:	9c000008 	.word	0x9c000008
    2458:	01000008 	.word	0x01000008
    245c:	00005300 	.word	0x00005300
    2460:	00000000 	.word	0x00000000
    2464:	090c0000 	.word	0x090c0000
    2468:	09180000 	.word	0x09180000
    246c:	00010000 	.word	0x00010000
    2470:	00000051 	.word	0x00000051
    2474:	00000000 	.word	0x00000000
    2478:	00091200 	.word	0x00091200
    247c:	00091800 	.word	0x00091800
    2480:	53000100 	.word	0x53000100
    2484:	00000918 	.word	0x00000918
    2488:	0000091c 	.word	0x0000091c
    248c:	00510001 	.word	0x00510001
    2490:	00000000 	.word	0x00000000
    2494:	22000000 	.word	0x22000000
    2498:	2a000009 	.word	0x2a000009
    249c:	01000009 	.word	0x01000009
    24a0:	092c5300 	.word	0x092c5300
    24a4:	09300000 	.word	0x09300000
    24a8:	00010000 	.word	0x00010000
    24ac:	00000053 	.word	0x00000053
    24b0:	00000000 	.word	0x00000000
    24b4:	00093000 	.word	0x00093000
    24b8:	00093c00 	.word	0x00093c00
    24bc:	51000100 	.word	0x51000100
	...
    24c8:	00000936 	.word	0x00000936
    24cc:	0000093c 	.word	0x0000093c
    24d0:	3c530001 	.word	0x3c530001
    24d4:	40000009 	.word	0x40000009
    24d8:	01000009 	.word	0x01000009
    24dc:	00005100 	.word	0x00005100
    24e0:	00000000 	.word	0x00000000
    24e4:	09460000 	.word	0x09460000
    24e8:	094e0000 	.word	0x094e0000
    24ec:	00010000 	.word	0x00010000
    24f0:	00095053 	.word	0x00095053
    24f4:	00095400 	.word	0x00095400
    24f8:	53000100 	.word	0x53000100
	...
    2504:	00000954 	.word	0x00000954
    2508:	00000960 	.word	0x00000960
    250c:	00510001 	.word	0x00510001
    2510:	00000000 	.word	0x00000000
    2514:	5a000000 	.word	0x5a000000
    2518:	60000009 	.word	0x60000009
    251c:	01000009 	.word	0x01000009
    2520:	09605300 	.word	0x09605300
    2524:	09640000 	.word	0x09640000
    2528:	00010000 	.word	0x00010000
    252c:	00000051 	.word	0x00000051
    2530:	00000000 	.word	0x00000000
    2534:	00096a00 	.word	0x00096a00
    2538:	00097200 	.word	0x00097200
    253c:	53000100 	.word	0x53000100
    2540:	00000974 	.word	0x00000974
    2544:	00000978 	.word	0x00000978
    2548:	00530001 	.word	0x00530001
    254c:	00000000 	.word	0x00000000
    2550:	78000000 	.word	0x78000000
    2554:	84000009 	.word	0x84000009
    2558:	01000009 	.word	0x01000009
    255c:	00005100 	.word	0x00005100
    2560:	00000000 	.word	0x00000000
    2564:	097e0000 	.word	0x097e0000
    2568:	09840000 	.word	0x09840000
    256c:	00010000 	.word	0x00010000
    2570:	00098453 	.word	0x00098453
    2574:	00098800 	.word	0x00098800
    2578:	51000100 	.word	0x51000100
	...
    2584:	0000098e 	.word	0x0000098e
    2588:	00000996 	.word	0x00000996
    258c:	98530001 	.word	0x98530001
    2590:	9c000009 	.word	0x9c000009
    2594:	01000009 	.word	0x01000009
    2598:	00005300 	.word	0x00005300
    259c:	00000000 	.word	0x00000000
    25a0:	099c0000 	.word	0x099c0000
    25a4:	09a80000 	.word	0x09a80000
    25a8:	00010000 	.word	0x00010000
    25ac:	00000051 	.word	0x00000051
    25b0:	00000000 	.word	0x00000000
    25b4:	0009a200 	.word	0x0009a200
    25b8:	0009a800 	.word	0x0009a800
    25bc:	53000100 	.word	0x53000100
    25c0:	000009a8 	.word	0x000009a8
    25c4:	000009ac 	.word	0x000009ac
    25c8:	00510001 	.word	0x00510001
    25cc:	00000000 	.word	0x00000000
    25d0:	b0000000 	.word	0xb0000000
    25d4:	b6000009 	.word	0xb6000009
    25d8:	01000009 	.word	0x01000009
    25dc:	09b85300 	.word	0x09b85300
    25e0:	09bc0000 	.word	0x09bc0000
    25e4:	00010000 	.word	0x00010000
    25e8:	00000053 	.word	0x00000053
    25ec:	00000000 	.word	0x00000000
    25f0:	0009bc00 	.word	0x0009bc00
    25f4:	0009c800 	.word	0x0009c800
    25f8:	51000100 	.word	0x51000100
	...
    2604:	000009c2 	.word	0x000009c2
    2608:	000009c8 	.word	0x000009c8
    260c:	c8530001 	.word	0xc8530001
    2610:	cc000009 	.word	0xcc000009
    2614:	01000009 	.word	0x01000009
    2618:	00005100 	.word	0x00005100
    261c:	00000000 	.word	0x00000000
    2620:	09d00000 	.word	0x09d00000
    2624:	09d60000 	.word	0x09d60000
    2628:	00010000 	.word	0x00010000
    262c:	0009d853 	.word	0x0009d853
    2630:	0009dc00 	.word	0x0009dc00
    2634:	53000100 	.word	0x53000100
	...
    2640:	000009dc 	.word	0x000009dc
    2644:	000009e8 	.word	0x000009e8
    2648:	00510001 	.word	0x00510001
    264c:	00000000 	.word	0x00000000
    2650:	e2000000 	.word	0xe2000000
    2654:	e8000009 	.word	0xe8000009
    2658:	01000009 	.word	0x01000009
    265c:	09e85300 	.word	0x09e85300
    2660:	09ec0000 	.word	0x09ec0000
    2664:	00010000 	.word	0x00010000
    2668:	00000051 	.word	0x00000051
    266c:	00000000 	.word	0x00000000
    2670:	0009ec00 	.word	0x0009ec00
    2674:	0009f800 	.word	0x0009f800
    2678:	51000100 	.word	0x51000100
	...
    2684:	000009f2 	.word	0x000009f2
    2688:	000009f8 	.word	0x000009f8
    268c:	f8530001 	.word	0xf8530001
    2690:	fc000009 	.word	0xfc000009
    2694:	01000009 	.word	0x01000009
    2698:	00005100 	.word	0x00005100
    269c:	00000000 	.word	0x00000000
    26a0:	0a020000 	.word	0x0a020000
    26a4:	0a0a0000 	.word	0x0a0a0000
    26a8:	00010000 	.word	0x00010000
    26ac:	000a0c53 	.word	0x000a0c53
    26b0:	000a1000 	.word	0x000a1000
    26b4:	53000100 	.word	0x53000100
	...
    26c0:	00000a16 	.word	0x00000a16
    26c4:	00000a1e 	.word	0x00000a1e
    26c8:	20530001 	.word	0x20530001
    26cc:	2400000a 	.word	0x2400000a
    26d0:	0100000a 	.word	0x0100000a
    26d4:	00005300 	.word	0x00005300
    26d8:	00000000 	.word	0x00000000
    26dc:	0a2a0000 	.word	0x0a2a0000
    26e0:	0a320000 	.word	0x0a320000
    26e4:	00010000 	.word	0x00010000
    26e8:	000a3453 	.word	0x000a3453
    26ec:	000a3800 	.word	0x000a3800
    26f0:	53000100 	.word	0x53000100
	...
    26fc:	00000a3e 	.word	0x00000a3e
    2700:	00000a46 	.word	0x00000a46
    2704:	48530001 	.word	0x48530001
    2708:	4c00000a 	.word	0x4c00000a
    270c:	0100000a 	.word	0x0100000a
    2710:	00005300 	.word	0x00005300
    2714:	00000000 	.word	0x00000000
    2718:	0a520000 	.word	0x0a520000
    271c:	0a5a0000 	.word	0x0a5a0000
    2720:	00010000 	.word	0x00010000
    2724:	000a5c53 	.word	0x000a5c53
    2728:	000a6000 	.word	0x000a6000
    272c:	53000100 	.word	0x53000100
	...
    2738:	00000a60 	.word	0x00000a60
    273c:	00000a66 	.word	0x00000a66
    2740:	00520001 	.word	0x00520001
    2744:	00000000 	.word	0x00000000
    2748:	80000000 	.word	0x80000000
    274c:	8600000a 	.word	0x8600000a
    2750:	0100000a 	.word	0x0100000a
    2754:	00005200 	.word	0x00005200
    2758:	00000000 	.word	0x00000000
    275c:	0aa00000 	.word	0x0aa00000
    2760:	0aaa0000 	.word	0x0aaa0000
    2764:	00010000 	.word	0x00010000
    2768:	000aaa5d 	.word	0x000aaa5d
    276c:	000b0800 	.word	0x000b0800
    2770:	7d000200 	.word	0x7d000200
    2774:	00000008 	.word	0x00000008
    2778:	00000000 	.word	0x00000000
    277c:	000aa000 	.word	0x000aa000
    2780:	000aa800 	.word	0x000aa800
    2784:	50000100 	.word	0x50000100
    2788:	00000ac2 	.word	0x00000ac2
    278c:	00000b08 	.word	0x00000b08
    2790:	047d0002 	.word	0x047d0002
	...
    279c:	00000aa0 	.word	0x00000aa0
    27a0:	00000acc 	.word	0x00000acc
    27a4:	e2510001 	.word	0xe2510001
    27a8:	ee00000a 	.word	0xee00000a
    27ac:	0100000a 	.word	0x0100000a
    27b0:	00005100 	.word	0x00005100
    27b4:	00000000 	.word	0x00000000
    27b8:	0aa00000 	.word	0x0aa00000
    27bc:	0aa80000 	.word	0x0aa80000
    27c0:	00010000 	.word	0x00010000
    27c4:	000aa852 	.word	0x000aa852
    27c8:	000b0800 	.word	0x000b0800
    27cc:	5c000100 	.word	0x5c000100
	...
    27d8:	00000b5c 	.word	0x00000b5c
    27dc:	00000b6e 	.word	0x00000b6e
    27e0:	00510001 	.word	0x00510001
    27e4:	00000000 	.word	0x00000000
    27e8:	74000000 	.word	0x74000000
    27ec:	8600000b 	.word	0x8600000b
    27f0:	0100000b 	.word	0x0100000b
    27f4:	00005100 	.word	0x00005100
    27f8:	00000000 	.word	0x00000000
    27fc:	0b8c0000 	.word	0x0b8c0000
    2800:	0b9e0000 	.word	0x0b9e0000
    2804:	00010000 	.word	0x00010000
    2808:	00000051 	.word	0x00000051
    280c:	00000000 	.word	0x00000000
    2810:	000ba400 	.word	0x000ba400
    2814:	000bb600 	.word	0x000bb600
    2818:	51000100 	.word	0x51000100
	...
    2824:	00000bd8 	.word	0x00000bd8
    2828:	00000bea 	.word	0x00000bea
    282c:	00510001 	.word	0x00510001
    2830:	00000000 	.word	0x00000000
    2834:	0c000000 	.word	0x0c000000
    2838:	1e00000c 	.word	0x1e00000c
    283c:	0100000c 	.word	0x0100000c
    2840:	00005100 	.word	0x00005100
    2844:	00000000 	.word	0x00000000
    2848:	0c400000 	.word	0x0c400000
    284c:	0c4c0000 	.word	0x0c4c0000
    2850:	00010000 	.word	0x00010000
    2854:	00000051 	.word	0x00000051
    2858:	00000000 	.word	0x00000000
    285c:	000c5000 	.word	0x000c5000
    2860:	000c5200 	.word	0x000c5200
    2864:	50000100 	.word	0x50000100
	...
    2870:	00000c58 	.word	0x00000c58
    2874:	00000c5a 	.word	0x00000c5a
    2878:	00500001 	.word	0x00500001
    287c:	00000000 	.word	0x00000000
    2880:	60000000 	.word	0x60000000
    2884:	6200000c 	.word	0x6200000c
    2888:	0100000c 	.word	0x0100000c
    288c:	00005000 	.word	0x00005000
    2890:	00000000 	.word	0x00000000
    2894:	0c680000 	.word	0x0c680000
    2898:	0c6c0000 	.word	0x0c6c0000
    289c:	00010000 	.word	0x00010000
    28a0:	00000050 	.word	0x00000050
    28a4:	00000000 	.word	0x00000000
    28a8:	000c7000 	.word	0x000c7000
    28ac:	000c7200 	.word	0x000c7200
    28b0:	50000100 	.word	0x50000100
	...
    28bc:	00000c78 	.word	0x00000c78
    28c0:	00000c7a 	.word	0x00000c7a
    28c4:	00500001 	.word	0x00500001
    28c8:	00000000 	.word	0x00000000
    28cc:	80000000 	.word	0x80000000
    28d0:	8a00000c 	.word	0x8a00000c
    28d4:	0100000c 	.word	0x0100000c
    28d8:	00005000 	.word	0x00005000
    28dc:	00000000 	.word	0x00000000
    28e0:	0c8c0000 	.word	0x0c8c0000
    28e4:	0c900000 	.word	0x0c900000
    28e8:	00010000 	.word	0x00010000
    28ec:	00000051 	.word	0x00000051
    28f0:	00000000 	.word	0x00000000
    28f4:	000c9800 	.word	0x000c9800
    28f8:	000ca400 	.word	0x000ca400
    28fc:	50000100 	.word	0x50000100
	...
    2908:	00000cb0 	.word	0x00000cb0
    290c:	00000cb4 	.word	0x00000cb4
    2910:	00510001 	.word	0x00510001
    2914:	00000000 	.word	0x00000000
    2918:	bc000000 	.word	0xbc000000
    291c:	be00000c 	.word	0xbe00000c
    2920:	0100000c 	.word	0x0100000c
    2924:	0cbe5d00 	.word	0x0cbe5d00
    2928:	0cc20000 	.word	0x0cc20000
    292c:	00020000 	.word	0x00020000
    2930:	0cc2047d 	.word	0x0cc2047d
    2934:	0d880000 	.word	0x0d880000
    2938:	00020000 	.word	0x00020000
    293c:	0000107d 	.word	0x0000107d
    2940:	00000000 	.word	0x00000000
    2944:	0cbc0000 	.word	0x0cbc0000
    2948:	0cc40000 	.word	0x0cc40000
    294c:	00010000 	.word	0x00010000
    2950:	000cc650 	.word	0x000cc650
    2954:	000d8800 	.word	0x000d8800
    2958:	7d000200 	.word	0x7d000200
    295c:	00000004 	.word	0x00000004
    2960:	00000000 	.word	0x00000000
    2964:	00002000 	.word	0x00002000
    2968:	00003200 	.word	0x00003200
    296c:	51000100 	.word	0x51000100
	...
    2978:	00000074 	.word	0x00000074
    297c:	00000082 	.word	0x00000082
    2980:	825d0001 	.word	0x825d0001
    2984:	b2000000 	.word	0xb2000000
    2988:	02000000 	.word	0x02000000
    298c:	00087d00 	.word	0x00087d00
    2990:	00000000 	.word	0x00000000
    2994:	74000000 	.word	0x74000000
    2998:	8c000000 	.word	0x8c000000
    299c:	01000000 	.word	0x01000000
    29a0:	00005000 	.word	0x00005000
    29a4:	00000000 	.word	0x00000000
    29a8:	00740000 	.word	0x00740000
    29ac:	00760000 	.word	0x00760000
    29b0:	00010000 	.word	0x00010000
    29b4:	00007651 	.word	0x00007651
    29b8:	00008000 	.word	0x00008000
    29bc:	53000100 	.word	0x53000100
	...
    29c8:	00000090 	.word	0x00000090
    29cc:	00000092 	.word	0x00000092
    29d0:	9a500001 	.word	0x9a500001
    29d4:	9c000000 	.word	0x9c000000
    29d8:	01000000 	.word	0x01000000
    29dc:	009e5000 	.word	0x009e5000
    29e0:	00b20000 	.word	0x00b20000
    29e4:	00010000 	.word	0x00010000
    29e8:	00000050 	.word	0x00000050
    29ec:	00000000 	.word	0x00000000
    29f0:	0000e400 	.word	0x0000e400
    29f4:	0000f600 	.word	0x0000f600
    29f8:	51000100 	.word	0x51000100
	...
    2a04:	00000118 	.word	0x00000118
    2a08:	0000012a 	.word	0x0000012a
    2a0c:	00510001 	.word	0x00510001
    2a10:	00000000 	.word	0x00000000
    2a14:	4c000000 	.word	0x4c000000
    2a18:	4e000001 	.word	0x4e000001
    2a1c:	01000001 	.word	0x01000001
    2a20:	00005100 	.word	0x00005100
    2a24:	00000000 	.word	0x00000000
    2a28:	01540000 	.word	0x01540000
    2a2c:	01560000 	.word	0x01560000
    2a30:	00010000 	.word	0x00010000
    2a34:	00000050 	.word	0x00000050
    2a38:	00000000 	.word	0x00000000
    2a3c:	0001e400 	.word	0x0001e400
    2a40:	0001f600 	.word	0x0001f600
    2a44:	51000100 	.word	0x51000100
	...
    2a50:	00000218 	.word	0x00000218
    2a54:	00000222 	.word	0x00000222
    2a58:	00500001 	.word	0x00500001
    2a5c:	00000000 	.word	0x00000000
    2a60:	24000000 	.word	0x24000000
    2a64:	28000002 	.word	0x28000002
    2a68:	01000002 	.word	0x01000002
    2a6c:	00005100 	.word	0x00005100
    2a70:	00000000 	.word	0x00000000
    2a74:	02300000 	.word	0x02300000
    2a78:	026c0000 	.word	0x026c0000
    2a7c:	00010000 	.word	0x00010000
    2a80:	00000050 	.word	0x00000050
    2a84:	00000000 	.word	0x00000000
    2a88:	00023000 	.word	0x00023000
    2a8c:	00023200 	.word	0x00023200
    2a90:	51000100 	.word	0x51000100
    2a94:	00000232 	.word	0x00000232
    2a98:	0000023c 	.word	0x0000023c
    2a9c:	3c530001 	.word	0x3c530001
    2aa0:	7a000002 	.word	0x7a000002
    2aa4:	01000002 	.word	0x01000002
    2aa8:	00005100 	.word	0x00005100
    2aac:	00000000 	.word	0x00000000
    2ab0:	02400000 	.word	0x02400000
    2ab4:	025a0000 	.word	0x025a0000
    2ab8:	00010000 	.word	0x00010000
    2abc:	00025a52 	.word	0x00025a52
    2ac0:	00027a00 	.word	0x00027a00
    2ac4:	5c000100 	.word	0x5c000100
	...
    2ad0:	00000236 	.word	0x00000236
    2ad4:	0000025a 	.word	0x0000025a
    2ad8:	005c0001 	.word	0x005c0001
    2adc:	00000000 	.word	0x00000000
    2ae0:	7c000000 	.word	0x7c000000
    2ae4:	7e000002 	.word	0x7e000002
    2ae8:	01000002 	.word	0x01000002
    2aec:	00005100 	.word	0x00005100
    2af0:	00000000 	.word	0x00000000
    2af4:	028c0000 	.word	0x028c0000
    2af8:	02a00000 	.word	0x02a00000
    2afc:	00010000 	.word	0x00010000
    2b00:	0002a05d 	.word	0x0002a05d
    2b04:	0002cc00 	.word	0x0002cc00
    2b08:	7d000200 	.word	0x7d000200
    2b0c:	0002cc10 	.word	0x0002cc10
    2b10:	00032800 	.word	0x00032800
    2b14:	7d000200 	.word	0x7d000200
    2b18:	00000030 	.word	0x00000030
    2b1c:	00000000 	.word	0x00000000
    2b20:	00028c00 	.word	0x00028c00
    2b24:	00028e00 	.word	0x00028e00
    2b28:	50000100 	.word	0x50000100
    2b2c:	000002d4 	.word	0x000002d4
    2b30:	00000328 	.word	0x00000328
    2b34:	047d0002 	.word	0x047d0002
	...
    2b40:	0000028c 	.word	0x0000028c
    2b44:	000002a6 	.word	0x000002a6
    2b48:	a6510001 	.word	0xa6510001
    2b4c:	28000002 	.word	0x28000002
    2b50:	01000003 	.word	0x01000003
    2b54:	00005600 	.word	0x00005600
    2b58:	00000000 	.word	0x00000000
    2b5c:	02940000 	.word	0x02940000
    2b60:	029a0000 	.word	0x029a0000
    2b64:	00010000 	.word	0x00010000
    2b68:	0002aa53 	.word	0x0002aa53
    2b6c:	0002c200 	.word	0x0002c200
    2b70:	52000100 	.word	0x52000100
    2b74:	000002c6 	.word	0x000002c6
    2b78:	000002ce 	.word	0x000002ce
    2b7c:	00530001 	.word	0x00530001
    2b80:	00000000 	.word	0x00000000
    2b84:	e6000000 	.word	0xe6000000
    2b88:	ee000002 	.word	0xee000002
    2b8c:	01000002 	.word	0x01000002
    2b90:	00005300 	.word	0x00005300
    2b94:	00000000 	.word	0x00000000
    2b98:	03280000 	.word	0x03280000
    2b9c:	032a0000 	.word	0x032a0000
    2ba0:	00010000 	.word	0x00010000
    2ba4:	00032a5d 	.word	0x00032a5d
    2ba8:	00032e00 	.word	0x00032e00
    2bac:	7d000200 	.word	0x7d000200
    2bb0:	00032e04 	.word	0x00032e04
    2bb4:	0003bc00 	.word	0x0003bc00
    2bb8:	7d000200 	.word	0x7d000200
    2bbc:	00000010 	.word	0x00000010
    2bc0:	00000000 	.word	0x00000000
    2bc4:	00032800 	.word	0x00032800
    2bc8:	00033000 	.word	0x00033000
    2bcc:	50000100 	.word	0x50000100
    2bd0:	00000332 	.word	0x00000332
    2bd4:	000003bc 	.word	0x000003bc
    2bd8:	047d0002 	.word	0x047d0002
	...
    2be8:	0000000a 	.word	0x0000000a
    2bec:	0a5d0001 	.word	0x0a5d0001
    2bf0:	54000000 	.word	0x54000000
    2bf4:	02000000 	.word	0x02000000
    2bf8:	00087d00 	.word	0x00087d00
    2bfc:	00000000 	.word	0x00000000
    2c00:	26000000 	.word	0x26000000
    2c04:	38000000 	.word	0x38000000
    2c08:	01000000 	.word	0x01000000
    2c0c:	00005300 	.word	0x00005300
	...
    2c18:	00040000 	.word	0x00040000
    2c1c:	00010000 	.word	0x00010000
    2c20:	0000045d 	.word	0x0000045d
    2c24:	00001000 	.word	0x00001000
    2c28:	7d000200 	.word	0x7d000200
    2c2c:	00001004 	.word	0x00001004
    2c30:	00002800 	.word	0x00002800
    2c34:	7d000200 	.word	0x7d000200
    2c38:	00000008 	.word	0x00000008
	...
    2c44:	00000c00 	.word	0x00000c00
    2c48:	50000100 	.word	0x50000100
    2c4c:	0000000c 	.word	0x0000000c
    2c50:	0000001c 	.word	0x0000001c
    2c54:	00510001 	.word	0x00510001
	...
    2c60:	0c000000 	.word	0x0c000000
    2c64:	01000000 	.word	0x01000000
    2c68:	000c5000 	.word	0x000c5000
    2c6c:	00300000 	.word	0x00300000
    2c70:	00010000 	.word	0x00010000
    2c74:	00000054 	.word	0x00000054
	...
    2c80:	00000400 	.word	0x00000400
    2c84:	5d000100 	.word	0x5d000100
    2c88:	00000004 	.word	0x00000004
    2c8c:	00000048 	.word	0x00000048
    2c90:	107d0002 	.word	0x107d0002
	...
    2c9c:	00000048 	.word	0x00000048
    2ca0:	0000004c 	.word	0x0000004c
    2ca4:	4c5d0001 	.word	0x4c5d0001
    2ca8:	c8000000 	.word	0xc8000000
    2cac:	02000000 	.word	0x02000000
    2cb0:	00107d00 	.word	0x00107d00
	...
    2cbc:	08000000 	.word	0x08000000
    2cc0:	01000000 	.word	0x01000000
    2cc4:	00085d00 	.word	0x00085d00
    2cc8:	00d00000 	.word	0x00d00000
    2ccc:	00020000 	.word	0x00020000
    2cd0:	0000087d 	.word	0x0000087d
	...
    2cdc:	00180000 	.word	0x00180000
    2ce0:	00010000 	.word	0x00010000
    2ce4:	00001850 	.word	0x00001850
    2ce8:	00002000 	.word	0x00002000
    2cec:	54000100 	.word	0x54000100
    2cf0:	00000020 	.word	0x00000020
    2cf4:	00000038 	.word	0x00000038
    2cf8:	38500001 	.word	0x38500001
    2cfc:	d0000000 	.word	0xd0000000
    2d00:	01000000 	.word	0x01000000
    2d04:	00005400 	.word	0x00005400
	...
    2d10:	002c0000 	.word	0x002c0000
    2d14:	00010000 	.word	0x00010000
    2d18:	0000a451 	.word	0x0000a451
    2d1c:	0000b000 	.word	0x0000b000
    2d20:	51000100 	.word	0x51000100
    2d24:	000000c4 	.word	0x000000c4
    2d28:	000000d0 	.word	0x000000d0
    2d2c:	00510001 	.word	0x00510001
	...
    2d38:	38000000 	.word	0x38000000
    2d3c:	01000000 	.word	0x01000000
    2d40:	00385200 	.word	0x00385200
    2d44:	00600000 	.word	0x00600000
    2d48:	00010000 	.word	0x00010000
    2d4c:	0000605c 	.word	0x0000605c
    2d50:	00009000 	.word	0x00009000
    2d54:	52000100 	.word	0x52000100
    2d58:	000000a0 	.word	0x000000a0
    2d5c:	000000d0 	.word	0x000000d0
    2d60:	00520001 	.word	0x00520001
    2d64:	00000000 	.word	0x00000000
    2d68:	0c000000 	.word	0x0c000000
    2d6c:	30000000 	.word	0x30000000
    2d70:	01000000 	.word	0x01000000
    2d74:	00a45c00 	.word	0x00a45c00
    2d78:	00d00000 	.word	0x00d00000
    2d7c:	00010000 	.word	0x00010000
    2d80:	0000005c 	.word	0x0000005c
    2d84:	00000000 	.word	0x00000000
    2d88:	00002800 	.word	0x00002800
    2d8c:	00002c00 	.word	0x00002c00
    2d90:	53000100 	.word	0x53000100
    2d94:	0000002c 	.word	0x0000002c
    2d98:	000000b0 	.word	0x000000b0
    2d9c:	c4510001 	.word	0xc4510001
    2da0:	d0000000 	.word	0xd0000000
    2da4:	01000000 	.word	0x01000000
    2da8:	00005100 	.word	0x00005100
    2dac:	00000000 	.word	0x00000000
    2db0:	00340000 	.word	0x00340000
    2db4:	005c0000 	.word	0x005c0000
    2db8:	00010000 	.word	0x00010000
    2dbc:	00007053 	.word	0x00007053
    2dc0:	00007400 	.word	0x00007400
    2dc4:	50000100 	.word	0x50000100
    2dc8:	00000074 	.word	0x00000074
    2dcc:	00000084 	.word	0x00000084
    2dd0:	84530001 	.word	0x84530001
    2dd4:	c8000000 	.word	0xc8000000
    2dd8:	01000000 	.word	0x01000000
    2ddc:	00005000 	.word	0x00005000
	...
    2de8:	00080000 	.word	0x00080000
    2dec:	00010000 	.word	0x00010000
    2df0:	0000085d 	.word	0x0000085d
    2df4:	00009c00 	.word	0x00009c00
    2df8:	7d000200 	.word	0x7d000200
    2dfc:	00000014 	.word	0x00000014
	...
    2e08:	00002000 	.word	0x00002000
    2e0c:	50000100 	.word	0x50000100
    2e10:	00000020 	.word	0x00000020
    2e14:	0000009c 	.word	0x0000009c
    2e18:	00550001 	.word	0x00550001
	...
    2e24:	3c000000 	.word	0x3c000000
    2e28:	01000000 	.word	0x01000000
    2e2c:	003c5100 	.word	0x003c5100
    2e30:	009c0000 	.word	0x009c0000
    2e34:	00010000 	.word	0x00010000
    2e38:	00000058 	.word	0x00000058
	...
    2e44:	00003c00 	.word	0x00003c00
    2e48:	52000100 	.word	0x52000100
    2e4c:	0000003c 	.word	0x0000003c
    2e50:	0000009c 	.word	0x0000009c
    2e54:	00560001 	.word	0x00560001
	...
    2e60:	3c000000 	.word	0x3c000000
    2e64:	01000000 	.word	0x01000000
    2e68:	003c5300 	.word	0x003c5300
    2e6c:	009c0000 	.word	0x009c0000
    2e70:	00010000 	.word	0x00010000
    2e74:	00000057 	.word	0x00000057
	...
    2e80:	00000400 	.word	0x00000400
    2e84:	5d000100 	.word	0x5d000100
    2e88:	00000004 	.word	0x00000004
    2e8c:	00000010 	.word	0x00000010
    2e90:	247d0002 	.word	0x247d0002
    2e94:	00000010 	.word	0x00000010
    2e98:	0000010c 	.word	0x0000010c
    2e9c:	307d0002 	.word	0x307d0002
	...
    2eac:	00000024 	.word	0x00000024
    2eb0:	24500001 	.word	0x24500001
    2eb4:	c0000000 	.word	0xc0000000
    2eb8:	02000000 	.word	0x02000000
    2ebc:	c0047d00 	.word	0xc0047d00
    2ec0:	d4000000 	.word	0xd4000000
    2ec4:	02000000 	.word	0x02000000
    2ec8:	d4709100 	.word	0xd4709100
    2ecc:	e8000000 	.word	0xe8000000
    2ed0:	02000000 	.word	0x02000000
    2ed4:	e8047d00 	.word	0xe8047d00
    2ed8:	f4000000 	.word	0xf4000000
    2edc:	02000000 	.word	0x02000000
    2ee0:	f4709100 	.word	0xf4709100
    2ee4:	0c000000 	.word	0x0c000000
    2ee8:	02000001 	.word	0x02000001
    2eec:	00047d00 	.word	0x00047d00
	...
    2ef8:	24000000 	.word	0x24000000
    2efc:	01000000 	.word	0x01000000
    2f00:	00245100 	.word	0x00245100
    2f04:	010c0000 	.word	0x010c0000
    2f08:	00010000 	.word	0x00010000
    2f0c:	00000057 	.word	0x00000057
    2f10:	00000000 	.word	0x00000000
    2f14:	00004400 	.word	0x00004400
    2f18:	0000c000 	.word	0x0000c000
    2f1c:	5c000100 	.word	0x5c000100
    2f20:	000000d4 	.word	0x000000d4
    2f24:	000000dc 	.word	0x000000dc
    2f28:	f85c0001 	.word	0xf85c0001
    2f2c:	04000000 	.word	0x04000000
    2f30:	01000001 	.word	0x01000001
    2f34:	00005c00 	.word	0x00005c00
    2f38:	00000000 	.word	0x00000000
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003041 	andeq	r3, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	524f4305 	subpl	r4, pc, #335544320	; 0x14000000
  14:	2d584554 	cfldr64cs	mvdx4, [r8, #-336]
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	084d070a 	stmdaeq	sp, {r1, r3, r8, r9, sl}^
  20:	12020901 	andne	r0, r2, #16384	; 0x4000
  24:	15011404 	strne	r1, [r1, #-1028]
  28:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  2c:	1a011901 	bne	46438 <__Stack_Size+0x46038>
  30:	Address 0x00000030 is out of bounds.


Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	ffffffff 	undefined instruction 0xffffffff
	...
  20:	00000818 	andeq	r0, r0, r8, lsl r8
  24:	0000081e 	andeq	r0, r0, lr, lsl r8
  28:	00000820 	andeq	r0, r0, r0, lsr #16
  2c:	00000840 	andeq	r0, r0, r0, asr #16
	...
  38:	00000818 	andeq	r0, r0, r8, lsl r8
  3c:	0000081e 	andeq	r0, r0, lr, lsl r8
  40:	00000820 	andeq	r0, r0, r0, lsr #16
  44:	00000840 	andeq	r0, r0, r0, asr #16
	...
  50:	0000011e 	andeq	r0, r0, lr, lsl r1
  54:	00000120 	andeq	r0, r0, r0, lsr #2
  58:	00000126 	andeq	r0, r0, r6, lsr #2
  5c:	0000014a 	andeq	r0, r0, sl, asr #2
  60:	00000122 	andeq	r0, r0, r2, lsr #2
  64:	00000124 	andeq	r0, r0, r4, lsr #2
	...
  70:	0000011e 	andeq	r0, r0, lr, lsl r1
  74:	00000120 	andeq	r0, r0, r0, lsr #2
  78:	00000130 	andeq	r0, r0, r0, lsr r1
  7c:	0000014a 	andeq	r0, r0, sl, asr #2
  80:	00000122 	andeq	r0, r0, r2, lsr #2
  84:	00000124 	andeq	r0, r0, r4, lsr #2
	...
  90:	0000014a 	andeq	r0, r0, sl, asr #2
  94:	0000015e 	andeq	r0, r0, lr, asr r1
  98:	00000188 	andeq	r0, r0, r8, lsl #3
  9c:	0000018e 	andeq	r0, r0, lr, lsl #3
	...
  a8:	0000014a 	andeq	r0, r0, sl, asr #2
  ac:	0000015e 	andeq	r0, r0, lr, asr r1
  b0:	00000188 	andeq	r0, r0, r8, lsl #3
  b4:	0000018e 	andeq	r0, r0, lr, lsl #3
	...
  c0:	0000015e 	andeq	r0, r0, lr, asr r1
  c4:	00000182 	andeq	r0, r0, r2, lsl #3
  c8:	00000186 	andeq	r0, r0, r6, lsl #3
  cc:	00000188 	andeq	r0, r0, r8, lsl #3
	...
  d8:	0000015e 	andeq	r0, r0, lr, asr r1
  dc:	00000160 	andeq	r0, r0, r0, ror #2
  e0:	00000186 	andeq	r0, r0, r6, lsl #3
  e4:	00000188 	andeq	r0, r0, r8, lsl #3
  e8:	0000016a 	andeq	r0, r0, sl, ror #2
  ec:	00000182 	andeq	r0, r0, r2, lsl #3
	...
  f8:	00000078 	andeq	r0, r0, r8, ror r0
  fc:	0000007a 	andeq	r0, r0, sl, ror r0
 100:	0000007c 	andeq	r0, r0, ip, ror r0
 104:	0000007e 	andeq	r0, r0, lr, ror r0
	...
 110:	00000078 	andeq	r0, r0, r8, ror r0
 114:	0000007a 	andeq	r0, r0, sl, ror r0
 118:	0000007c 	andeq	r0, r0, ip, ror r0
 11c:	0000007e 	andeq	r0, r0, lr, ror r0
	...
 128:	0000030e 	andeq	r0, r0, lr, lsl #6
 12c:	00000310 	andeq	r0, r0, r0, lsl r3
 130:	00000320 	andeq	r0, r0, r0, lsr #6
 134:	0000034a 	andeq	r0, r0, sl, asr #6
 138:	00000312 	andeq	r0, r0, r2, lsl r3
 13c:	0000031a 	andeq	r0, r0, sl, lsl r3
	...
 148:	0000030e 	andeq	r0, r0, lr, lsl #6
 14c:	00000310 	andeq	r0, r0, r0, lsl r3
 150:	00000320 	andeq	r0, r0, r0, lsr #6
 154:	0000034a 	andeq	r0, r0, sl, asr #6
 158:	00000312 	andeq	r0, r0, r2, lsl r3
 15c:	0000031a 	andeq	r0, r0, sl, lsl r3
	...
 168:	0000034a 	andeq	r0, r0, sl, asr #6
 16c:	0000034c 	andeq	r0, r0, ip, asr #6
 170:	0000034e 	andeq	r0, r0, lr, asr #6
 174:	00000360 	andeq	r0, r0, r0, ror #6
	...
 180:	00000364 	andeq	r0, r0, r4, ror #6
 184:	00000366 	andeq	r0, r0, r6, ror #6
 188:	00000376 	andeq	r0, r0, r6, ror r3
 18c:	000003a6 	andeq	r0, r0, r6, lsr #7
 190:	0000036a 	andeq	r0, r0, sl, ror #6
 194:	00000372 	andeq	r0, r0, r2, ror r3
	...
 1a0:	00000364 	andeq	r0, r0, r4, ror #6
 1a4:	00000366 	andeq	r0, r0, r6, ror #6
 1a8:	00000376 	andeq	r0, r0, r6, ror r3
 1ac:	000003a6 	andeq	r0, r0, r6, lsr #7
 1b0:	0000036a 	andeq	r0, r0, sl, ror #6
 1b4:	00000372 	andeq	r0, r0, r2, ror r3
	...
 1c0:	000003a6 	andeq	r0, r0, r6, lsr #7
 1c4:	000003a8 	andeq	r0, r0, r8, lsr #7
 1c8:	000003aa 	andeq	r0, r0, sl, lsr #7
 1cc:	000003c2 	andeq	r0, r0, r2, asr #7
	...
 1d8:	00000404 	andeq	r0, r0, r4, lsl #8
 1dc:	00000406 	andeq	r0, r0, r6, lsl #8
 1e0:	00000408 	andeq	r0, r0, r8, lsl #8
 1e4:	0000041a 	andeq	r0, r0, sl, lsl r4
	...
 1f0:	00000454 	andeq	r0, r0, r4, asr r4
 1f4:	00000456 	andeq	r0, r0, r6, asr r4
 1f8:	00000458 	andeq	r0, r0, r8, asr r4
 1fc:	0000046e 	andeq	r0, r0, lr, ror #8
	...
 208:	000004c6 	andeq	r0, r0, r6, asr #9
 20c:	000004c8 	andeq	r0, r0, r8, asr #9
 210:	000004cc 	andeq	r0, r0, ip, asr #9
 214:	000004de 	ldrdeq	r0, [r0], -lr
	...
 220:	00000566 	andeq	r0, r0, r6, ror #10
 224:	00000568 	andeq	r0, r0, r8, ror #10
 228:	0000056c 	andeq	r0, r0, ip, ror #10
 22c:	00000582 	andeq	r0, r0, r2, lsl #11
	...
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000024 	andeq	r0, r0, r4, lsr #32
 240:	00000070 	andeq	r0, r0, r0, ror r0
 244:	0000010c 	andeq	r0, r0, ip, lsl #2
 248:	00000044 	andeq	r0, r0, r4, asr #32
 24c:	00000058 	andeq	r0, r0, r8, asr r0
	...
 258:	ffffffff 	undefined instruction 0xffffffff
	...
